
cpu1.elf:     file format elf32-littlenios2
cpu1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00014be0 memsz 0x00014be0 flags r-x
    LOAD off    0x00015c00 vaddr 0x08014c00 paddr 0x080166f4 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x000181e8 vaddr 0x080181e8 paddr 0x080181e8 align 2**12
         filesz 0x00000000 memsz 0x000003ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001427c  080001b8  080001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007cc  08014434  08014434  00015434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  08014c00  080166f4  00015c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000003ec  080181e8  080181e8  000181e8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000176f4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001338  00000000  00000000  00017718  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00039a41  00000000  00000000  00018a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000decd  00000000  00000000  00052491  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000100ee  00000000  00000000  0006035e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00002538  00000000  00000000  0007044c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000433f  00000000  00000000  00072984  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00019a72  00000000  00000000  00076cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00090738  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd0  00000000  00000000  00090748  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0009554f  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  00095552  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00095556  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00095557  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00095558  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0009555c  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00095560  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000a  00000000  00000000  00095564  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000a  00000000  00000000  0009556e  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000a  00000000  00000000  00095578  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  00095582  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000052  00000000  00000000  00095586  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     001cada7  00000000  00000000  000955d8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001b8 l    d  .text	00000000 .text
08014434 l    d  .rodata	00000000 .rodata
08014c00 l    d  .rwdata	00000000 .rwdata
080181e8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cpu1_bsp//obj/HAL/src/crt0.o
080001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
080022a4 l     F .text	00000008 __fp_lock
080022ac l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fscanf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
08014c00 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
0800425c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
080047c8 l     F .text	00000034 __sprint_r
08014732 l     O .rodata	00000010 blanks.3515
08014742 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 vfscanf.c
0801475a l     O .rodata	00000022 basefix.3427
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
0801487d l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
08008068 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
08014a20 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
08014b68 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
08015414 l     O .rwdata	00000014 fpi.2015
08014b84 l     O .rodata	00000028 tinytens
08015428 l     O .rwdata	00000014 fpinan.2051
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0800e600 l     F .text	00000110 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
080100b4 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08010b0c l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
08010fe8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08011104 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08011130 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
08011230 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08011324 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
08011410 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
080115ec l     F .text	00000050 alt_get_errno
0801163c l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
08011884 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0801669c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
08011af8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
08011bcc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08011d0c l     F .text	00000038 alt_dev_reg
080155e4 l     O .rwdata	00001060 jtag_uart1
08016644 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08012504 l     F .text	00000204 altera_avalon_jtag_uart_irq
08012708 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08012d44 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_hostfs.c
080166dc l     O .rwdata	00000004 hcinfo.2311
080166d0 l     O .rwdata	00000004 hcinfo.2324
080166c4 l     O .rwdata	00000004 hcinfo.2333
080166b8 l     O .rwdata	00000004 hcinfo.2346
080166ac l     O .rwdata	00000004 hcinfo.2359
080166a0 l     O .rwdata	00000004 hcinfo.2385
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
080135c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08013d4c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
080041a8 g     F .text	0000001c putchar
0800b268 g     F .text	00000074 _mprec_log10
0800b358 g     F .text	00000084 __any_on
08009e3c g     F .text	00000064 _isatty_r
08014a50 g     O .rodata	00000028 __mprec_tinytens
08011534 g     F .text	00000078 alt_main
080046a0 g     F .text	00000094 strcpy
08001eac g     F .text	00000044 __ashldi3
080041c4 g     F .text	00000084 _puts_r
08018344 g     O .bss	00000100 alt_irq
08009fb4 g     F .text	0000006c _lseek_r
08012070 g     F .text	00000058 altera_avalon_fifo_write_almostfull
080166f4 g       *ABS*	00000000 __flash_rwdata_start
080098c0 g     F .text	00000098 __sflags
080107a0 g     F .text	0000005c __eqdf2
080185d4 g       *ABS*	00000000 __alt_heap_start
08004164 g     F .text	0000003c printf
080045a4 g     F .text	0000005c __sseek
08002348 g     F .text	0000010c __sinit
0800e3dc g     F .text	0000013c __swbuf_r
08009ed8 g     F .text	0000009c _setlocale_r
080022c0 g     F .text	00000078 __sfmoreglue
0800e3c0 g     F .text	0000001c ungetc
080115cc g     F .text	00000020 __malloc_unlock
08012e40 g     F .text	0000016c alt_hostfs_open
0800be88 g     F .text	00001548 _strtod_r
0800a200 g     F .text	0000018c memmove
08011df0 g     F .text	00000098 altera_avalon_fifo_init
08002338 g     F .text	00000010 _cleanup
08012120 g     F .text	00000058 altera_avalon_fifo_write_fifo
0800a38c g     F .text	000000a8 _Balloc
08010858 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
08000000 g     F .entry	0000000c __reset
08011b48 g     F .text	00000084 times
080122b8 g     F .text	00000028 altera_avalon_fifo_read_backpressure
08000020 g       *ABS*	00000000 __flash_exceptions_start
080032a4 g     F .text	00000068 _fstat_r
080181e8 g     O .bss	00000004 errno
08007d90 g     F .text	00000024 __svfscanf
08000000 g       *ABS*	00000000 __alt_mem_sdram_controller
08010dc0 g     F .text	0000002c __make_fp
08018208 g     O .bss	00000004 alt_argv
0801e66c g       *ABS*	00000000 _gp
08011fbc g     F .text	0000005c altera_avalon_fifo_clear_event
08002db0 g     F .text	0000003c fscanf
08015464 g     O .rwdata	00000180 alt_fd_list
08013188 g     F .text	000000b8 alt_hostfs_seek
080041a0 g     F .text	00000008 _putchar_r
0801376c g     F .text	00000090 alt_find_dev
08003eb0 g     F .text	00000140 memcpy
080047c0 g     F .text	00000008 _times_r
0800ef18 g     F .text	0000028c __hexnan
080022b4 g     F .text	0000000c _cleanup_r
0800187c g     F .text	000000d4 __floatsidf
08013910 g     F .text	00000084 alt_fs_reg
08013e2c g     F .text	00000078 alt_io_redirect
08010920 g     F .text	0000005c __ltdf2
08014434 g       *ABS*	00000000 __DTOR_END__
08004248 g     F .text	00000014 puts
0800a084 g     F .text	00000040 mbrtowc
08007d44 g     F .text	0000004c _vfscanf_r
0800b1c4 g     F .text	000000a4 __ratio
08012908 g     F .text	00000218 altera_avalon_jtag_uart_read
08003704 g     F .text	00000014 malloc
08004138 g     F .text	0000002c _printf_r
08010c2c g     F .text	00000008 __udivsi3
08011280 g     F .text	000000a4 isatty
08009ea0 g     F .text	00000038 iswspace
08014aa0 g     O .rodata	000000c8 __mprec_tens
08009f74 g     F .text	0000000c __locale_charset
0800f2b4 g     F .text	00000084 __fixunsdfsi
080181f4 g     O .bss	00000004 __malloc_top_pad
0800dd7c g     F .text	00000024 strtoul
08016680 g     O .rwdata	00000004 __mb_cur_max
08009f80 g     F .text	0000000c _localeconv_r
0800dda0 g     F .text	00000394 _strtoull_r
0800a7bc g     F .text	0000003c __i2b
08009958 g     F .text	000004e4 __sfvwrite_r
08004464 g     F .text	00000064 _sbrk_r
0800039c g     F .text	00000860 read_444_format
08013018 g     F .text	000000b8 alt_hostfs_read
0800b588 g     F .text	0000006c _read_r
08015408 g     O .rwdata	0000000c __lc_ctype
08016694 g     O .rwdata	00000004 alt_max_fd
08001d64 g     F .text	00000104 __unpack_d
08001f3c g     F .text	0000013c _fclose_r
08002274 g     F .text	00000030 fflush
080181f0 g     O .bss	00000004 __malloc_max_sbrked_mem
08010408 g     F .text	00000054 __adddf3
0800af38 g     F .text	00000148 __b2d
0800f988 g     F .text	00000628 __umoddi3
08011460 g     F .text	000000d4 lseek
0801666c g     O .rwdata	00000004 _global_impure_ptr
0800b5f4 g     F .text	000005fc _realloc_r
080185d4 g       *ABS*	00000000 __bss_end
08013c5c g     F .text	000000f0 alt_iic_isr_register
08013f3c g     F .text	00000104 alt_tick
08018244 g     O .bss	00000100 __hexdig
0800f338 g     F .text	00000650 __udivdi3
08014a78 g     O .rodata	00000028 __mprec_bigtens
0800a5a0 g     F .text	00000104 __s2b
08001950 g     F .text	0000011c __floatunsidf
0800acd8 g     F .text	00000058 __mcmp
0801667c g     O .rwdata	00000004 __ctype_ptr
08002560 g     F .text	00000018 __fp_lock_all
08013c10 g     F .text	0000004c alt_ic_irq_enabled
0800031c g     F .text	00000040 FIFO_INIT
08013ea4 g     F .text	00000098 alt_alarm_stop
0800d784 g     F .text	00000024 strtol
08018210 g     O .bss	00000004 alt_irq_active
08012fac g     F .text	0000006c alt_hostfs_close
080000ec g     F .exceptions	000000cc alt_irq_handler
0801543c g     O .rwdata	00000028 alt_dev_null
08010c3c g     F .text	000000c8 __unpack_f
080135a8 g     F .text	0000001c alt_dcache_flush_all
0800a6a4 g     F .text	00000068 __hi0bits
080109d8 g     F .text	000000d4 __fixdfsi
0800d3d0 g     F .text	0000001c strtod
08012018 g     F .text	00000058 altera_avalon_fifo_write_ienable
080166f4 g       *ABS*	00000000 __ram_rwdata_end
08011f2c g     F .text	0000002c altera_avalon_fifo_read_almostempty
0801668c g     O .rwdata	00000008 alt_dev_list
08011c1c g     F .text	000000f0 write
0800b3dc g     F .text	000000bc _putc_r
08010004 g     F .text	0000005c __gtsf2
08014c00 g       *ABS*	00000000 __ram_rodata_end
08011180 g     F .text	000000b0 fstat
08002704 g     F .text	00000024 fprintf
08001e68 g     F .text	00000044 __lshrdi3
0801097c g     F .text	0000005c __ledf2
08004608 g     F .text	00000098 strcat
0800aa50 g     F .text	0000012c __pow5mult
08018200 g     O .bss	00000004 __nlocale_changed
08010c34 g     F .text	00000008 __umodsi3
080185d4 g       *ABS*	00000000 end
08010ebc g     F .text	0000012c __pack_f
08003280 g     F .text	00000024 fseek
08012444 g     F .text	000000c0 altera_avalon_jtag_uart_init
08011f58 g     F .text	0000003c altera_avalon_fifo_read_event
08014434 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
08012db8 g     F .text	00000088 alt_avalon_timer_sc_init
08001a94 g     F .text	000000ac __clzsi2
08012b20 g     F .text	00000224 altera_avalon_jtag_uart_write
08002550 g     F .text	00000004 __sfp_lock_acquire
080121e4 g     F .text	0000004c altera_avalon_fifo_read_fifo
0800a108 g     F .text	000000f8 memchr
080047fc g     F .text	00001e7c ___vfprintf_internal_r
0800bd20 g     F .text	00000058 _sprintf_r
08002ae0 g     F .text	000002d0 _free_r
08014258 g     F .text	000001a0 __call_exitprocs
08000bfc g     F .text	00000100 print_grid
080181fc g     O .bss	00000004 __mlocale_changed
08016674 g     O .rwdata	00000004 __malloc_sbrk_base
080001b8 g     F .text	0000003c _start
08018214 g     O .bss	00000004 _alt_tick_rate
0800d7a8 g     F .text	00000330 _strtoll_r
08000eec g     F .text	00000520 encode_image
0800ab7c g     F .text	0000015c __lshift
08018218 g     O .bss	00000004 _alt_nticks
080118d4 g     F .text	000000f4 read
08011d78 g     F .text	00000078 alt_sys_init
080040cc g     F .text	0000006c _open_r
08014128 g     F .text	00000130 __register_exitproc
0800a7f8 g     F .text	00000258 __multiply
08000258 g     F .text	00000064 WRITE_FIFO_SUB
080127ac g     F .text	00000068 altera_avalon_jtag_uart_close
08001a6c g     F .text	00000028 __mulsi3
08014c00 g       *ABS*	00000000 __ram_rwdata_start
08014434 g       *ABS*	00000000 __ram_rodata_start
0801821c g     O .bss	00000028 __malloc_current_mallinfo
0800ffb0 g     F .text	00000054 __eqsf2
0800b080 g     F .text	00000144 __d2b
080122e0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800dad8 g     F .text	000002a4 _strtoul_r
08013994 g     F .text	000000d4 alt_get_fd
08010dec g     F .text	000000d0 __fpcmp_parts_d
08008004 g     F .text	00000064 _close_r
080140ac g     F .text	0000007c memcmp
080123a0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
080185d4 g       *ABS*	00000000 __alt_stack_base
080123f0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0800346c g     F .text	000000b0 _fwrite_r
08007e90 g     F .text	00000174 __swsetup_r
08011e88 g     F .text	0000003c altera_avalon_fifo_read_status
080016c8 g     F .text	000001b4 __divdf3
08002454 g     F .text	000000fc __sfp
0800b2dc g     F .text	0000007c __copybits
08015000 g     O .rwdata	00000408 __malloc_av_
0800255c g     F .text	00000004 __sinit_lock_release
080104bc g     F .text	000002e4 __muldf3
080044c8 g     F .text	00000054 __sread
08002964 g     F .text	00000040 fread
0801228c g     F .text	0000002c altera_avalon_fifo_read_other_info
080137fc g     F .text	00000114 alt_find_file
08013614 g     F .text	000000a0 alt_dev_llist_insert
080115ac g     F .text	00000020 __malloc_lock
080026dc g     F .text	00000028 _fprintf_r
08011a48 g     F .text	000000b0 sbrk
0800208c g     F .text	000001e8 _fflush_r
0800e534 g     F .text	000000cc _calloc_r
080026c0 g     F .text	0000001c fopen
080181e8 g       *ABS*	00000000 __bss_start
08002dec g     F .text	00000020 _fscanf_r
08003ff0 g     F .text	000000dc memset
0800140c g     F .text	000002bc main
0801820c g     O .bss	00000004 alt_envp
080181ec g     O .bss	00000004 __malloc_max_total_mem
08012340 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08011f94 g     F .text	00000028 altera_avalon_fifo_read_level
0800e518 g     F .text	0000001c __swbuf
08010060 g     F .text	00000054 __ltsf2
08002728 g     F .text	0000023c _fread_r
08004600 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
08002078 g     F .text	00000014 fclose
0800d50c g     F .text	00000278 _strtol_r
08010aac g     F .text	00000060 __truncdfsf2
08018444 g     O .bss	00000190 _atexit0
080082a4 g     F .text	0000161c _dtoa_r
0800372c g     F .text	00000784 _malloc_r
08016698 g     O .rwdata	00000004 alt_errno
0800e134 g     F .text	000000f0 __submore
0800330c g     F .text	000000a8 _fwalk
0800a0c4 g     F .text	00000044 _mbtowc_r
0800b498 g     F .text	000000f0 putc
08010b80 g     F .text	00000050 __divsi3
080145d4 g     O .rodata	00000014 __thenan_df
080029a4 g     F .text	0000013c _malloc_trim_r
08014434 g       *ABS*	00000000 __CTOR_END__
0800bde4 g     F .text	000000a4 strcmp
08014434 g       *ABS*	00000000 __flash_rodata_start
08014434 g       *ABS*	00000000 __DTOR_LIST__
0800035c g     F .text	00000040 delay
080107fc g     F .text	0000005c __nedf2
08011d44 g     F .text	00000034 alt_irq_init
080119c8 g     F .text	00000080 alt_release_fd
0800bd78 g     F .text	0000006c sprintf
080145e8 g     O .rodata	00000100 __clz_tab
080181f8 g     O .bss	00000004 _PathLocale
0800d3ec g     F .text	00000120 strtof
08014060 g     F .text	00000014 atexit
08007e24 g     F .text	0000006c _write_r
08009f8c g     F .text	0000001c setlocale
0800bd18 g     F .text	00000008 nanf
08016670 g     O .rwdata	00000004 _impure_ptr
08018204 g     O .bss	00000004 alt_argc
0800a020 g     F .text	00000064 _mbrtowc_r
08013710 g     F .text	0000005c _do_dtors
08002e0c g     F .text	00000474 _fseek_r
080002bc g     F .text	00000060 READ_FIFO
08004278 g     F .text	000001ec __srefill_r
08000020 g       .exceptions	00000000 alt_irq_entry
0800aed8 g     F .text	00000060 __ulp
0800bbf0 g     F .text	00000038 __isinfd
08002578 g     F .text	00000018 __fp_unlock_all
08016684 g     O .rwdata	00000008 alt_fs_list
080130d0 g     F .text	000000b8 alt_hostfs_write
08000020 g       *ABS*	00000000 __ram_exceptions_start
08009fa8 g     F .text	0000000c localeconv
08012230 g     F .text	0000005c altera_avalon_fifo_write_other_info
08013a84 g     F .text	00000050 alt_ic_isr_register
0800351c g     F .text	00000040 fwrite
0800e710 g     F .text	00000090 __hexdig_init
080166f4 g       *ABS*	00000000 _edata
080185d4 g       *ABS*	00000000 _end
080001b8 g       *ABS*	00000000 __ram_exceptions_end
08007db4 g     F .text	00000070 vfscanf
08012814 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
08013b70 g     F .text	000000a0 alt_ic_irq_disable
0800451c g     F .text	00000088 __swrite
08016678 g     O .rwdata	00000004 __malloc_trim_threshold
08014040 g     F .text	00000020 altera_nios2_qsys_irq_init
08014074 g     F .text	00000038 exit
080033b4 g     F .text	000000b8 _fwalk_reent
0800ad30 g     F .text	000001a8 __mdiff
08010bd0 g     F .text	0000005c __modsi3
08011ec4 g     F .text	0000003c altera_avalon_fifo_read_ienable
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08002554 g     F .text	00000004 __sfp_lock_release
0800bc54 g     F .text	000000c4 __sccl
0801477c g     O .rodata	00000101 _ctype_
08010d04 g     F .text	000000bc __fpcmp_parts_f
08002590 g     F .text	00000130 _fopen_r
080143f8 g     F .text	0000003c _exit
0800bc28 g     F .text	0000002c __isnand
08013468 g     F .text	00000140 alt_alarm_start
0800f1a4 g     F .text	00000110 __muldi3
08011f00 g     F .text	0000002c altera_avalon_fifo_read_almostfull
0800355c g     F .text	000001a8 __smakebuf_r
08004734 g     F .text	0000008c strlen
0801172c g     F .text	00000158 open
08012178 g     F .text	0000006c altera_avalon_read_fifo
080108bc g     F .text	00000064 __gedf2
08000cfc g     F .text	000001f0 initialization
0800e7a0 g     F .text	00000778 __gethex
08001ef0 g     F .text	0000004c clock
08013a68 g     F .text	0000001c alt_icache_flush_all
080001f4 g     F .text	00000064 WRITE_FIFO
080166e8 g     O .rwdata	00000004 alt_priority_mask
08013ad4 g     F .text	0000009c alt_ic_irq_enable
08006678 g     F .text	00000024 __vfprintf_internal
0801045c g     F .text	00000060 __subdf3
0800a70c g     F .text	000000b0 __lo0bits
0800669c g     F .text	000016a8 __svfscanf_r
080120c8 g     F .text	00000058 altera_avalon_fifo_write_almostempty
080166ec g     O .rwdata	00000008 alt_alarm_list
0800e224 g     F .text	0000019c _ungetc_r
080136b4 g     F .text	0000005c _do_ctors
08011038 g     F .text	000000cc close
08011390 g     F .text	00000080 alt_load
08001b40 g     F .text	00000224 __pack_d
08003718 g     F .text	00000014 free
08002558 g     F .text	00000004 __sinit_lock_acquire
0800a45c g     F .text	00000144 __multadd
0800a434 g     F .text	00000028 _Bfree
08013240 g     F .text	00000228 alt_hostfs_fstat



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08406e14 	ori	at,at,440
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001726 	beq	r2,zero,8000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	00c200b4 	movhi	r3,2050
 8000130:	18e0d104 	addi	r3,r3,-31932
 8000134:	e0bffd17 	ldw	r2,-12(fp)
 8000138:	100490fa 	slli	r2,r2,3
 800013c:	1885883a 	add	r2,r3,r2
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	010200b4 	movhi	r4,2050
 8000148:	2120d104 	addi	r4,r4,-31932
 800014c:	e0bffd17 	ldw	r2,-12(fp)
 8000150:	100490fa 	slli	r2,r2,3
 8000154:	2085883a 	add	r2,r4,r2
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800017c:	e0bffb17 	ldw	r2,-20(fp)
 8000180:	103fe31e 	bne	r2,zero,8000110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 8000184:	00000706 	br	80001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8000188:	e0bffc17 	ldw	r2,-16(fp)
 800018c:	1085883a 	add	r2,r2,r2
 8000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000194:	e0bffd17 	ldw	r2,-12(fp)
 8000198:	10800044 	addi	r2,r2,1
 800019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a0:	003fde06 	br	800011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 80001a4:	e037883a 	mov	sp,fp
 80001a8:	dfc00117 	ldw	ra,4(sp)
 80001ac:	df000017 	ldw	fp,0(sp)
 80001b0:	dec00204 	addi	sp,sp,8
 80001b4:	f800283a 	ret

Disassembly of section .text:

080001b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001b8:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 80001bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c0:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 80001c4:	d6b99b14 	ori	gp,gp,58988
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001c8:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 80001cc:	10a07a14 	ori	r2,r2,33256

    movhi r3, %hi(__bss_end)
 80001d0:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 80001d4:	18e17514 	ori	r3,r3,34260

    beq r2, r3, 1f
 80001d8:	10c00326 	beq	r2,r3,80001e8 <_start+0x30>

0:
    stw zero, (r2)
 80001dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e4:	10fffd36 	bltu	r2,r3,80001dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001e8:	80113900 	call	8011390 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001ec:	80115340 	call	8011534 <alt_main>

080001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f0:	003fff06 	br	80001f0 <alt_after_alt_main>

080001f4 <WRITE_FIFO>:
 */

#include "FIFO.h"

void WRITE_FIFO(int *buffer, int inBase, int controllBase)
{
 80001f4:	defffb04 	addi	sp,sp,-20
 80001f8:	dfc00415 	stw	ra,16(sp)
 80001fc:	df000315 	stw	fp,12(sp)
 8000200:	df000304 	addi	fp,sp,12
 8000204:	e13ffd15 	stw	r4,-12(fp)
 8000208:	e17ffe15 	stw	r5,-8(fp)
 800020c:	e1bfff15 	stw	r6,-4(fp)

	// printf("Sending\n");
	// printf("Count - %d, ", altera_avalon_fifo_read_level(controllBase));

	// Check if FIFO is full before writing
	while (altera_avalon_fifo_read_level(controllBase) > ALMOST_FULL - 1)
 8000210:	0001883a 	nop
 8000214:	e0bfff17 	ldw	r2,-4(fp)
 8000218:	1009883a 	mov	r4,r2
 800021c:	8011f940 	call	8011f94 <altera_avalon_fifo_read_level>
 8000220:	10800208 	cmpgei	r2,r2,8
 8000224:	103ffb1e 	bne	r2,zero,8000214 <WRITE_FIFO+0x20>
	{
	}

	// Write data to FIFO
	altera_avalon_fifo_write_fifo(inBase, controllBase, *buffer);
 8000228:	e13ffe17 	ldw	r4,-8(fp)
 800022c:	e0ffff17 	ldw	r3,-4(fp)
 8000230:	e0bffd17 	ldw	r2,-12(fp)
 8000234:	10800017 	ldw	r2,0(r2)
 8000238:	180b883a 	mov	r5,r3
 800023c:	100d883a 	mov	r6,r2
 8000240:	80121200 	call	8012120 <altera_avalon_fifo_write_fifo>
}
 8000244:	e037883a 	mov	sp,fp
 8000248:	dfc00117 	ldw	ra,4(sp)
 800024c:	df000017 	ldw	fp,0(sp)
 8000250:	dec00204 	addi	sp,sp,8
 8000254:	f800283a 	ret

08000258 <WRITE_FIFO_SUB>:

void WRITE_FIFO_SUB(int *buffer, int inBase, int controllBase)
{
 8000258:	defffb04 	addi	sp,sp,-20
 800025c:	dfc00415 	stw	ra,16(sp)
 8000260:	df000315 	stw	fp,12(sp)
 8000264:	df000304 	addi	fp,sp,12
 8000268:	e13ffd15 	stw	r4,-12(fp)
 800026c:	e17ffe15 	stw	r5,-8(fp)
 8000270:	e1bfff15 	stw	r6,-4(fp)

	// printf("Sending\n");
	// printf("Count - %d, ", altera_avalon_fifo_read_level(controllBase));

	// Check if FIFO is full before writing
	while (altera_avalon_fifo_read_level(controllBase) > 63)
 8000274:	0001883a 	nop
 8000278:	e0bfff17 	ldw	r2,-4(fp)
 800027c:	1009883a 	mov	r4,r2
 8000280:	8011f940 	call	8011f94 <altera_avalon_fifo_read_level>
 8000284:	10801008 	cmpgei	r2,r2,64
 8000288:	103ffb1e 	bne	r2,zero,8000278 <WRITE_FIFO_SUB+0x20>
	{
	}

	// Write data to FIFO
	altera_avalon_fifo_write_fifo(inBase, controllBase, *buffer);
 800028c:	e13ffe17 	ldw	r4,-8(fp)
 8000290:	e0ffff17 	ldw	r3,-4(fp)
 8000294:	e0bffd17 	ldw	r2,-12(fp)
 8000298:	10800017 	ldw	r2,0(r2)
 800029c:	180b883a 	mov	r5,r3
 80002a0:	100d883a 	mov	r6,r2
 80002a4:	80121200 	call	8012120 <altera_avalon_fifo_write_fifo>
}
 80002a8:	e037883a 	mov	sp,fp
 80002ac:	dfc00117 	ldw	ra,4(sp)
 80002b0:	df000017 	ldw	fp,0(sp)
 80002b4:	dec00204 	addi	sp,sp,8
 80002b8:	f800283a 	ret

080002bc <READ_FIFO>:

void READ_FIFO(int *buffer, int outBase, int controllBase)
{
 80002bc:	defffb04 	addi	sp,sp,-20
 80002c0:	dfc00415 	stw	ra,16(sp)
 80002c4:	df000315 	stw	fp,12(sp)
 80002c8:	df000304 	addi	fp,sp,12
 80002cc:	e13ffd15 	stw	r4,-12(fp)
 80002d0:	e17ffe15 	stw	r5,-8(fp)
 80002d4:	e1bfff15 	stw	r6,-4(fp)
	// Wait if the FIFO is empty
	// while (altera_avalon_fifo_read_status(FIFO_MEM_IN_CSR_BASE, ALTERA_AVALON_FIFO_STATUS_EMPTY))
	// 	;

	while (altera_avalon_fifo_read_level(controllBase) == ALMOST_EMTY)
 80002d8:	0001883a 	nop
 80002dc:	e0bfff17 	ldw	r2,-4(fp)
 80002e0:	1009883a 	mov	r4,r2
 80002e4:	8011f940 	call	8011f94 <altera_avalon_fifo_read_level>
 80002e8:	103ffc26 	beq	r2,zero,80002dc <READ_FIFO+0x20>
	{
	}

	// Read the data
	*buffer = altera_avalon_fifo_read_fifo(outBase, controllBase);
 80002ec:	e0fffe17 	ldw	r3,-8(fp)
 80002f0:	e0bfff17 	ldw	r2,-4(fp)
 80002f4:	1809883a 	mov	r4,r3
 80002f8:	100b883a 	mov	r5,r2
 80002fc:	80121e40 	call	80121e4 <altera_avalon_fifo_read_fifo>
 8000300:	e0fffd17 	ldw	r3,-12(fp)
 8000304:	18800015 	stw	r2,0(r3)
}
 8000308:	e037883a 	mov	sp,fp
 800030c:	dfc00117 	ldw	ra,4(sp)
 8000310:	df000017 	ldw	fp,0(sp)
 8000314:	dec00204 	addi	sp,sp,8
 8000318:	f800283a 	ret

0800031c <FIFO_INIT>:

// Initialization
void FIFO_INIT(int controllBase)
{
 800031c:	defffd04 	addi	sp,sp,-12
 8000320:	dfc00215 	stw	ra,8(sp)
 8000324:	df000115 	stw	fp,4(sp)
 8000328:	df000104 	addi	fp,sp,4
 800032c:	e13fff15 	stw	r4,-4(fp)
	altera_avalon_fifo_init(controllBase,
 8000330:	e0bfff17 	ldw	r2,-4(fp)
 8000334:	1009883a 	mov	r4,r2
 8000338:	000b883a 	mov	r5,zero
 800033c:	000d883a 	mov	r6,zero
 8000340:	01c00204 	movi	r7,8
 8000344:	8011df00 	call	8011df0 <altera_avalon_fifo_init>
							0,
							ALMOST_EMTY,  // Almost empty threshold
							ALMOST_FULL); // Almost full threshold
 8000348:	e037883a 	mov	sp,fp
 800034c:	dfc00117 	ldw	ra,4(sp)
 8000350:	df000017 	ldw	fp,0(sp)
 8000354:	dec00204 	addi	sp,sp,8
 8000358:	f800283a 	ret

0800035c <delay>:

#ifndef READYUV_H
#define READYUV_H

void delay(int n)
{
 800035c:	defffd04 	addi	sp,sp,-12
 8000360:	df000215 	stw	fp,8(sp)
 8000364:	df000204 	addi	fp,sp,8
 8000368:	e13fff15 	stw	r4,-4(fp)
	int i;
	for (i = n; i > 0; i--)
 800036c:	e0bfff17 	ldw	r2,-4(fp)
 8000370:	e0bffe15 	stw	r2,-8(fp)
 8000374:	00000306 	br	8000384 <delay+0x28>
 8000378:	e0bffe17 	ldw	r2,-8(fp)
 800037c:	10bfffc4 	addi	r2,r2,-1
 8000380:	e0bffe15 	stw	r2,-8(fp)
 8000384:	e0bffe17 	ldw	r2,-8(fp)
 8000388:	00bffb16 	blt	zero,r2,8000378 <delay+0x1c>
	{
		continue;
	}
}
 800038c:	e037883a 	mov	sp,fp
 8000390:	df000017 	ldw	fp,0(sp)
 8000394:	dec00104 	addi	sp,sp,4
 8000398:	f800283a 	ret

0800039c <read_444_format>:
	UINT16 offset;

} JPEG_ENCODER_STRUCTURE;

void read_444_format(JPEG_ENCODER_STRUCTURE *jpeg_encoder_structure, UINT8 *input_ptr)
{
 800039c:	defff304 	addi	sp,sp,-52
 80003a0:	dfc00c15 	stw	ra,48(sp)
 80003a4:	df000b15 	stw	fp,44(sp)
 80003a8:	dc000a15 	stw	r16,40(sp)
 80003ac:	df000a04 	addi	fp,sp,40
 80003b0:	e13ffe15 	stw	r4,-8(fp)
 80003b4:	e17fff15 	stw	r5,-4(fp)
	INT32 i, j;

	UINT8 R, G, B;
	INT32 Y, Cb, Cr;

	UINT16 rows = jpeg_encoder_structure->rows;
 80003b8:	e0bffe17 	ldw	r2,-8(fp)
 80003bc:	1080030b 	ldhu	r2,12(r2)
 80003c0:	e0bff80d 	sth	r2,-32(fp)
	UINT16 cols = jpeg_encoder_structure->cols;
 80003c4:	e0bffe17 	ldw	r2,-8(fp)
 80003c8:	1080038b 	ldhu	r2,14(r2)
 80003cc:	e0bff88d 	sth	r2,-30(fp)
	UINT16 incr = jpeg_encoder_structure->incr;
 80003d0:	e0bffe17 	ldw	r2,-8(fp)
 80003d4:	1080050b 	ldhu	r2,20(r2)
 80003d8:	e0bff90d 	sth	r2,-28(fp)

	for (i = rows; i > 0; i--)
 80003dc:	e0bff80b 	ldhu	r2,-32(fp)
 80003e0:	e0bff615 	stw	r2,-40(fp)
 80003e4:	0000f606 	br	80007c0 <read_444_format+0x424>
	{
		// Print a new line for each row
		// printf("\nRow %d: ", rows - i + 1);
		for (j = cols; j > 0; j--)
 80003e8:	e0bff88b 	ldhu	r2,-30(fp)
 80003ec:	e0bff715 	stw	r2,-36(fp)
 80003f0:	00007506 	br	80005c8 <read_444_format+0x22c>
		{
			R = *input_ptr++;
 80003f4:	e0bfff17 	ldw	r2,-4(fp)
 80003f8:	10800003 	ldbu	r2,0(r2)
 80003fc:	e0bff985 	stb	r2,-26(fp)
 8000400:	e0bfff17 	ldw	r2,-4(fp)
 8000404:	10800044 	addi	r2,r2,1
 8000408:	e0bfff15 	stw	r2,-4(fp)
			G = *input_ptr++;
 800040c:	e0bfff17 	ldw	r2,-4(fp)
 8000410:	10800003 	ldbu	r2,0(r2)
 8000414:	e0bff9c5 	stb	r2,-25(fp)
 8000418:	e0bfff17 	ldw	r2,-4(fp)
 800041c:	10800044 	addi	r2,r2,1
 8000420:	e0bfff15 	stw	r2,-4(fp)
			B = *input_ptr++;
 8000424:	e0bfff17 	ldw	r2,-4(fp)
 8000428:	10800003 	ldbu	r2,0(r2)
 800042c:	e0bffa05 	stb	r2,-24(fp)
 8000430:	e0bfff17 	ldw	r2,-4(fp)
 8000434:	10800044 	addi	r2,r2,1
 8000438:	e0bfff15 	stw	r2,-4(fp)

			// Print the RGB values
			// printf("(%3d, %3d, %3d) ", R, G, B);

			Y = ((77 * R + 150 * G + 29 * B) >> 8);
 800043c:	e0bff983 	ldbu	r2,-26(fp)
 8000440:	1009883a 	mov	r4,r2
 8000444:	01401344 	movi	r5,77
 8000448:	8001a6c0 	call	8001a6c <__mulsi3>
 800044c:	1021883a 	mov	r16,r2
 8000450:	e0bff9c3 	ldbu	r2,-25(fp)
 8000454:	1009883a 	mov	r4,r2
 8000458:	01402584 	movi	r5,150
 800045c:	8001a6c0 	call	8001a6c <__mulsi3>
 8000460:	80a1883a 	add	r16,r16,r2
 8000464:	e0bffa03 	ldbu	r2,-24(fp)
 8000468:	1009883a 	mov	r4,r2
 800046c:	01400744 	movi	r5,29
 8000470:	8001a6c0 	call	8001a6c <__mulsi3>
 8000474:	8085883a 	add	r2,r16,r2
 8000478:	1005d23a 	srai	r2,r2,8
 800047c:	e0bffb15 	stw	r2,-20(fp)
			Cb = ((-43 * R - 85 * G + 128 * B) >> 8) + 128;
 8000480:	e0bff983 	ldbu	r2,-26(fp)
 8000484:	1009883a 	mov	r4,r2
 8000488:	017ff544 	movi	r5,-43
 800048c:	8001a6c0 	call	8001a6c <__mulsi3>
 8000490:	1021883a 	mov	r16,r2
 8000494:	e0bff9c3 	ldbu	r2,-25(fp)
 8000498:	1009883a 	mov	r4,r2
 800049c:	017feac4 	movi	r5,-85
 80004a0:	8001a6c0 	call	8001a6c <__mulsi3>
 80004a4:	8087883a 	add	r3,r16,r2
 80004a8:	e0bffa03 	ldbu	r2,-24(fp)
 80004ac:	100491fa 	slli	r2,r2,7
 80004b0:	1885883a 	add	r2,r3,r2
 80004b4:	1005d23a 	srai	r2,r2,8
 80004b8:	10802004 	addi	r2,r2,128
 80004bc:	e0bffc15 	stw	r2,-16(fp)
			Cr = ((128 * R - 107 * G - 21 * B) >> 8) + 128;
 80004c0:	e0bff983 	ldbu	r2,-26(fp)
 80004c4:	102091fa 	slli	r16,r2,7
 80004c8:	e0bff9c3 	ldbu	r2,-25(fp)
 80004cc:	1009883a 	mov	r4,r2
 80004d0:	017fe544 	movi	r5,-107
 80004d4:	8001a6c0 	call	8001a6c <__mulsi3>
 80004d8:	80a1883a 	add	r16,r16,r2
 80004dc:	e0bffa03 	ldbu	r2,-24(fp)
 80004e0:	1009883a 	mov	r4,r2
 80004e4:	017ffac4 	movi	r5,-21
 80004e8:	8001a6c0 	call	8001a6c <__mulsi3>
 80004ec:	8085883a 	add	r2,r16,r2
 80004f0:	1005d23a 	srai	r2,r2,8
 80004f4:	10802004 	addi	r2,r2,128
 80004f8:	e0bffd15 	stw	r2,-12(fp)

			if (Y < 0)
 80004fc:	e0bffb17 	ldw	r2,-20(fp)
 8000500:	1000020e 	bge	r2,zero,800050c <read_444_format+0x170>
				Y = 0;
 8000504:	e03ffb15 	stw	zero,-20(fp)
 8000508:	00000506 	br	8000520 <read_444_format+0x184>
			else if (Y > 255)
 800050c:	e0bffb17 	ldw	r2,-20(fp)
 8000510:	10804010 	cmplti	r2,r2,256
 8000514:	1000021e 	bne	r2,zero,8000520 <read_444_format+0x184>
				Y = 255;
 8000518:	00803fc4 	movi	r2,255
 800051c:	e0bffb15 	stw	r2,-20(fp)

			if (Cb < 0)
 8000520:	e0bffc17 	ldw	r2,-16(fp)
 8000524:	1000020e 	bge	r2,zero,8000530 <read_444_format+0x194>
				Cb = 0;
 8000528:	e03ffc15 	stw	zero,-16(fp)
 800052c:	00000506 	br	8000544 <read_444_format+0x1a8>
			else if (Cb > 255)
 8000530:	e0bffc17 	ldw	r2,-16(fp)
 8000534:	10804010 	cmplti	r2,r2,256
 8000538:	1000021e 	bne	r2,zero,8000544 <read_444_format+0x1a8>
				Cb = 255;
 800053c:	00803fc4 	movi	r2,255
 8000540:	e0bffc15 	stw	r2,-16(fp)

			if (Cr < 0)
 8000544:	e0bffd17 	ldw	r2,-12(fp)
 8000548:	1000020e 	bge	r2,zero,8000554 <read_444_format+0x1b8>
				Cr = 0;
 800054c:	e03ffd15 	stw	zero,-12(fp)
 8000550:	00000506 	br	8000568 <read_444_format+0x1cc>
			else if (Cr > 255)
 8000554:	e0bffd17 	ldw	r2,-12(fp)
 8000558:	10804010 	cmplti	r2,r2,256
 800055c:	1000021e 	bne	r2,zero,8000568 <read_444_format+0x1cc>
				Cr = 255;
 8000560:	00803fc4 	movi	r2,255
 8000564:	e0bffd15 	stw	r2,-12(fp)

			// printf("(%3d, %3d, %3d) ", Y, Cb, Cr);

			// Send into fifo
			WRITE_FIFO_SUB(&Y, IN_BASE_1to2A, CONTROL_BASE_1to2A);
 8000568:	e0bffb04 	addi	r2,fp,-20
 800056c:	1009883a 	mov	r4,r2
 8000570:	01440034 	movhi	r5,4096
 8000574:	29444204 	addi	r5,r5,4360
 8000578:	01840034 	movhi	r6,4096
 800057c:	31841004 	addi	r6,r6,4160
 8000580:	80002580 	call	8000258 <WRITE_FIFO_SUB>
			WRITE_FIFO_SUB(&Cb, IN_BASE_1to2B, CONTROL_BASE_1to2B);
 8000584:	e0bffc04 	addi	r2,fp,-16
 8000588:	1009883a 	mov	r4,r2
 800058c:	01440034 	movhi	r5,4096
 8000590:	29444104 	addi	r5,r5,4356
 8000594:	01840034 	movhi	r6,4096
 8000598:	31840804 	addi	r6,r6,4128
 800059c:	80002580 	call	8000258 <WRITE_FIFO_SUB>
			WRITE_FIFO_SUB(&Cr, IN_BASE_1to2C, CONTROL_BASE_1to2C);
 80005a0:	e0bffd04 	addi	r2,fp,-12
 80005a4:	1009883a 	mov	r4,r2
 80005a8:	01440034 	movhi	r5,4096
 80005ac:	29444004 	addi	r5,r5,4352
 80005b0:	01840034 	movhi	r6,4096
 80005b4:	31840004 	addi	r6,r6,4096
 80005b8:	80002580 	call	8000258 <WRITE_FIFO_SUB>

	for (i = rows; i > 0; i--)
	{
		// Print a new line for each row
		// printf("\nRow %d: ", rows - i + 1);
		for (j = cols; j > 0; j--)
 80005bc:	e0bff717 	ldw	r2,-36(fp)
 80005c0:	10bfffc4 	addi	r2,r2,-1
 80005c4:	e0bff715 	stw	r2,-36(fp)
 80005c8:	e0bff717 	ldw	r2,-36(fp)
 80005cc:	00bf8916 	blt	zero,r2,80003f4 <read_444_format+0x58>
			WRITE_FIFO_SUB(&Y, IN_BASE_1to2A, CONTROL_BASE_1to2A);
			WRITE_FIFO_SUB(&Cb, IN_BASE_1to2B, CONTROL_BASE_1to2B);
			WRITE_FIFO_SUB(&Cr, IN_BASE_1to2C, CONTROL_BASE_1to2C);
		}

		if ((j = (8 - cols)) > 0)
 80005d0:	e0bff88b 	ldhu	r2,-30(fp)
 80005d4:	00c00204 	movi	r3,8
 80005d8:	1885c83a 	sub	r2,r3,r2
 80005dc:	e0bff715 	stw	r2,-36(fp)
 80005e0:	e0bff717 	ldw	r2,-36(fp)
 80005e4:	00806f0e 	bge	zero,r2,80007a4 <read_444_format+0x408>
		{
			R = *(input_ptr - 3);
 80005e8:	e0bfff17 	ldw	r2,-4(fp)
 80005ec:	10bfff43 	ldbu	r2,-3(r2)
 80005f0:	e0bff985 	stb	r2,-26(fp)
			G = *(input_ptr - 2);
 80005f4:	e0bfff17 	ldw	r2,-4(fp)
 80005f8:	10bfff83 	ldbu	r2,-2(r2)
 80005fc:	e0bff9c5 	stb	r2,-25(fp)
			B = *(input_ptr - 1);
 8000600:	e0bfff17 	ldw	r2,-4(fp)
 8000604:	10bfffc3 	ldbu	r2,-1(r2)
 8000608:	e0bffa05 	stb	r2,-24(fp)

			// Print the RGB values
			// printf("(%3d, %3d, %3d) ", R, G, B);

			Y = ((77 * R + 150 * G + 29 * B) >> 8);
 800060c:	e0bff983 	ldbu	r2,-26(fp)
 8000610:	1009883a 	mov	r4,r2
 8000614:	01401344 	movi	r5,77
 8000618:	8001a6c0 	call	8001a6c <__mulsi3>
 800061c:	1021883a 	mov	r16,r2
 8000620:	e0bff9c3 	ldbu	r2,-25(fp)
 8000624:	1009883a 	mov	r4,r2
 8000628:	01402584 	movi	r5,150
 800062c:	8001a6c0 	call	8001a6c <__mulsi3>
 8000630:	80a1883a 	add	r16,r16,r2
 8000634:	e0bffa03 	ldbu	r2,-24(fp)
 8000638:	1009883a 	mov	r4,r2
 800063c:	01400744 	movi	r5,29
 8000640:	8001a6c0 	call	8001a6c <__mulsi3>
 8000644:	8085883a 	add	r2,r16,r2
 8000648:	1005d23a 	srai	r2,r2,8
 800064c:	e0bffb15 	stw	r2,-20(fp)
			Cb = ((-43 * R - 85 * G + 128 * B) >> 8) + 128;
 8000650:	e0bff983 	ldbu	r2,-26(fp)
 8000654:	1009883a 	mov	r4,r2
 8000658:	017ff544 	movi	r5,-43
 800065c:	8001a6c0 	call	8001a6c <__mulsi3>
 8000660:	1021883a 	mov	r16,r2
 8000664:	e0bff9c3 	ldbu	r2,-25(fp)
 8000668:	1009883a 	mov	r4,r2
 800066c:	017feac4 	movi	r5,-85
 8000670:	8001a6c0 	call	8001a6c <__mulsi3>
 8000674:	8087883a 	add	r3,r16,r2
 8000678:	e0bffa03 	ldbu	r2,-24(fp)
 800067c:	100491fa 	slli	r2,r2,7
 8000680:	1885883a 	add	r2,r3,r2
 8000684:	1005d23a 	srai	r2,r2,8
 8000688:	10802004 	addi	r2,r2,128
 800068c:	e0bffc15 	stw	r2,-16(fp)
			Cr = ((128 * R - 107 * G - 21 * B) >> 8) + 128;
 8000690:	e0bff983 	ldbu	r2,-26(fp)
 8000694:	102091fa 	slli	r16,r2,7
 8000698:	e0bff9c3 	ldbu	r2,-25(fp)
 800069c:	1009883a 	mov	r4,r2
 80006a0:	017fe544 	movi	r5,-107
 80006a4:	8001a6c0 	call	8001a6c <__mulsi3>
 80006a8:	80a1883a 	add	r16,r16,r2
 80006ac:	e0bffa03 	ldbu	r2,-24(fp)
 80006b0:	1009883a 	mov	r4,r2
 80006b4:	017ffac4 	movi	r5,-21
 80006b8:	8001a6c0 	call	8001a6c <__mulsi3>
 80006bc:	8085883a 	add	r2,r16,r2
 80006c0:	1005d23a 	srai	r2,r2,8
 80006c4:	10802004 	addi	r2,r2,128
 80006c8:	e0bffd15 	stw	r2,-12(fp)

			if (Y < 0)
 80006cc:	e0bffb17 	ldw	r2,-20(fp)
 80006d0:	1000020e 	bge	r2,zero,80006dc <read_444_format+0x340>
				Y = 0;
 80006d4:	e03ffb15 	stw	zero,-20(fp)
 80006d8:	00000506 	br	80006f0 <read_444_format+0x354>
			else if (Y > 255)
 80006dc:	e0bffb17 	ldw	r2,-20(fp)
 80006e0:	10804010 	cmplti	r2,r2,256
 80006e4:	1000021e 	bne	r2,zero,80006f0 <read_444_format+0x354>
				Y = 255;
 80006e8:	00803fc4 	movi	r2,255
 80006ec:	e0bffb15 	stw	r2,-20(fp)

			if (Cb < 0)
 80006f0:	e0bffc17 	ldw	r2,-16(fp)
 80006f4:	1000020e 	bge	r2,zero,8000700 <read_444_format+0x364>
				Cb = 0;
 80006f8:	e03ffc15 	stw	zero,-16(fp)
 80006fc:	00000506 	br	8000714 <read_444_format+0x378>
			else if (Cb > 255)
 8000700:	e0bffc17 	ldw	r2,-16(fp)
 8000704:	10804010 	cmplti	r2,r2,256
 8000708:	1000021e 	bne	r2,zero,8000714 <read_444_format+0x378>
				Cb = 255;
 800070c:	00803fc4 	movi	r2,255
 8000710:	e0bffc15 	stw	r2,-16(fp)

			if (Cr < 0)
 8000714:	e0bffd17 	ldw	r2,-12(fp)
 8000718:	1000020e 	bge	r2,zero,8000724 <read_444_format+0x388>
				Cr = 0;
 800071c:	e03ffd15 	stw	zero,-12(fp)
			else if (Cr > 255)
				Cr = 255;

			for (; j > 0; j--)
 8000720:	00001e06 	br	800079c <read_444_format+0x400>
			else if (Cb > 255)
				Cb = 255;

			if (Cr < 0)
				Cr = 0;
			else if (Cr > 255)
 8000724:	e0bffd17 	ldw	r2,-12(fp)
 8000728:	10804010 	cmplti	r2,r2,256
 800072c:	10001b1e 	bne	r2,zero,800079c <read_444_format+0x400>
				Cr = 255;
 8000730:	00803fc4 	movi	r2,255
 8000734:	e0bffd15 	stw	r2,-12(fp)

			for (; j > 0; j--)
 8000738:	00001806 	br	800079c <read_444_format+0x400>
				// Print the RGB values
				// printf("(%3d, %3d, %3d) ", R, G, B);

				// printf("(%3d, %3d, %3d) ", Y, Cb, Cr);

				WRITE_FIFO_SUB(&Y, IN_BASE_1to2A, CONTROL_BASE_1to2A);
 800073c:	e0bffb04 	addi	r2,fp,-20
 8000740:	1009883a 	mov	r4,r2
 8000744:	01440034 	movhi	r5,4096
 8000748:	29444204 	addi	r5,r5,4360
 800074c:	01840034 	movhi	r6,4096
 8000750:	31841004 	addi	r6,r6,4160
 8000754:	80002580 	call	8000258 <WRITE_FIFO_SUB>
				WRITE_FIFO_SUB(&Cb, IN_BASE_1to2B, CONTROL_BASE_1to2B);
 8000758:	e0bffc04 	addi	r2,fp,-16
 800075c:	1009883a 	mov	r4,r2
 8000760:	01440034 	movhi	r5,4096
 8000764:	29444104 	addi	r5,r5,4356
 8000768:	01840034 	movhi	r6,4096
 800076c:	31840804 	addi	r6,r6,4128
 8000770:	80002580 	call	8000258 <WRITE_FIFO_SUB>
				WRITE_FIFO_SUB(&Cr, IN_BASE_1to2C, CONTROL_BASE_1to2C);
 8000774:	e0bffd04 	addi	r2,fp,-12
 8000778:	1009883a 	mov	r4,r2
 800077c:	01440034 	movhi	r5,4096
 8000780:	29444004 	addi	r5,r5,4352
 8000784:	01840034 	movhi	r6,4096
 8000788:	31840004 	addi	r6,r6,4096
 800078c:	80002580 	call	8000258 <WRITE_FIFO_SUB>
			if (Cr < 0)
				Cr = 0;
			else if (Cr > 255)
				Cr = 255;

			for (; j > 0; j--)
 8000790:	e0bff717 	ldw	r2,-36(fp)
 8000794:	10bfffc4 	addi	r2,r2,-1
 8000798:	e0bff715 	stw	r2,-36(fp)
 800079c:	e0bff717 	ldw	r2,-36(fp)
 80007a0:	00bfe616 	blt	zero,r2,800073c <read_444_format+0x3a0>
				WRITE_FIFO_SUB(&Cb, IN_BASE_1to2B, CONTROL_BASE_1to2B);
				WRITE_FIFO_SUB(&Cr, IN_BASE_1to2C, CONTROL_BASE_1to2C);
			}
		}

		input_ptr += incr;
 80007a4:	e0bff90b 	ldhu	r2,-28(fp)
 80007a8:	e0ffff17 	ldw	r3,-4(fp)
 80007ac:	1885883a 	add	r2,r3,r2
 80007b0:	e0bfff15 	stw	r2,-4(fp)

	UINT16 rows = jpeg_encoder_structure->rows;
	UINT16 cols = jpeg_encoder_structure->cols;
	UINT16 incr = jpeg_encoder_structure->incr;

	for (i = rows; i > 0; i--)
 80007b4:	e0bff617 	ldw	r2,-40(fp)
 80007b8:	10bfffc4 	addi	r2,r2,-1
 80007bc:	e0bff615 	stw	r2,-40(fp)
 80007c0:	e0bff617 	ldw	r2,-40(fp)
 80007c4:	00bf0816 	blt	zero,r2,80003e8 <read_444_format+0x4c>
		}

		input_ptr += incr;
	}

	input_ptr -= incr;
 80007c8:	e0bff90b 	ldhu	r2,-28(fp)
 80007cc:	0085c83a 	sub	r2,zero,r2
 80007d0:	e0ffff17 	ldw	r3,-4(fp)
 80007d4:	1885883a 	add	r2,r3,r2
 80007d8:	e0bfff15 	stw	r2,-4(fp)

	for (i = 8 - rows; i > 0; i--)
 80007dc:	e0bff80b 	ldhu	r2,-32(fp)
 80007e0:	00c00204 	movi	r3,8
 80007e4:	1885c83a 	sub	r2,r3,r2
 80007e8:	e0bff615 	stw	r2,-40(fp)
 80007ec:	0000fb06 	br	8000bdc <read_444_format+0x840>
	{
		// Print a new line for each row
		// printf("\nRow %d: ", rows + (8 - rows) - i + 1);
		for (j = cols * 3; j > 0;)
 80007f0:	e0fff88b 	ldhu	r3,-30(fp)
 80007f4:	1805883a 	mov	r2,r3
 80007f8:	1085883a 	add	r2,r2,r2
 80007fc:	10c5883a 	add	r2,r2,r3
 8000800:	e0bff715 	stw	r2,-36(fp)
 8000804:	00007b06 	br	80009f4 <read_444_format+0x658>
		{
			R = *(input_ptr - (j--));
 8000808:	e0bff717 	ldw	r2,-36(fp)
 800080c:	0085c83a 	sub	r2,zero,r2
 8000810:	e0ffff17 	ldw	r3,-4(fp)
 8000814:	1885883a 	add	r2,r3,r2
 8000818:	10800003 	ldbu	r2,0(r2)
 800081c:	e0bff985 	stb	r2,-26(fp)
 8000820:	e0bff717 	ldw	r2,-36(fp)
 8000824:	10bfffc4 	addi	r2,r2,-1
 8000828:	e0bff715 	stw	r2,-36(fp)
			G = *(input_ptr - (j--));
 800082c:	e0bff717 	ldw	r2,-36(fp)
 8000830:	0085c83a 	sub	r2,zero,r2
 8000834:	e0ffff17 	ldw	r3,-4(fp)
 8000838:	1885883a 	add	r2,r3,r2
 800083c:	10800003 	ldbu	r2,0(r2)
 8000840:	e0bff9c5 	stb	r2,-25(fp)
 8000844:	e0bff717 	ldw	r2,-36(fp)
 8000848:	10bfffc4 	addi	r2,r2,-1
 800084c:	e0bff715 	stw	r2,-36(fp)
			B = *(input_ptr - (j--));
 8000850:	e0bff717 	ldw	r2,-36(fp)
 8000854:	0085c83a 	sub	r2,zero,r2
 8000858:	e0ffff17 	ldw	r3,-4(fp)
 800085c:	1885883a 	add	r2,r3,r2
 8000860:	10800003 	ldbu	r2,0(r2)
 8000864:	e0bffa05 	stb	r2,-24(fp)
 8000868:	e0bff717 	ldw	r2,-36(fp)
 800086c:	10bfffc4 	addi	r2,r2,-1
 8000870:	e0bff715 	stw	r2,-36(fp)

			// Print the RGB values
			// printf("(%3d, %3d, %3d) ", R, G, B);

			Y = ((77 * R + 150 * G + 29 * B) >> 8);
 8000874:	e0bff983 	ldbu	r2,-26(fp)
 8000878:	1009883a 	mov	r4,r2
 800087c:	01401344 	movi	r5,77
 8000880:	8001a6c0 	call	8001a6c <__mulsi3>
 8000884:	1021883a 	mov	r16,r2
 8000888:	e0bff9c3 	ldbu	r2,-25(fp)
 800088c:	1009883a 	mov	r4,r2
 8000890:	01402584 	movi	r5,150
 8000894:	8001a6c0 	call	8001a6c <__mulsi3>
 8000898:	80a1883a 	add	r16,r16,r2
 800089c:	e0bffa03 	ldbu	r2,-24(fp)
 80008a0:	1009883a 	mov	r4,r2
 80008a4:	01400744 	movi	r5,29
 80008a8:	8001a6c0 	call	8001a6c <__mulsi3>
 80008ac:	8085883a 	add	r2,r16,r2
 80008b0:	1005d23a 	srai	r2,r2,8
 80008b4:	e0bffb15 	stw	r2,-20(fp)
			Cb = ((-43 * R - 85 * G + 128 * B) >> 8) + 128;
 80008b8:	e0bff983 	ldbu	r2,-26(fp)
 80008bc:	1009883a 	mov	r4,r2
 80008c0:	017ff544 	movi	r5,-43
 80008c4:	8001a6c0 	call	8001a6c <__mulsi3>
 80008c8:	1021883a 	mov	r16,r2
 80008cc:	e0bff9c3 	ldbu	r2,-25(fp)
 80008d0:	1009883a 	mov	r4,r2
 80008d4:	017feac4 	movi	r5,-85
 80008d8:	8001a6c0 	call	8001a6c <__mulsi3>
 80008dc:	8087883a 	add	r3,r16,r2
 80008e0:	e0bffa03 	ldbu	r2,-24(fp)
 80008e4:	100491fa 	slli	r2,r2,7
 80008e8:	1885883a 	add	r2,r3,r2
 80008ec:	1005d23a 	srai	r2,r2,8
 80008f0:	10802004 	addi	r2,r2,128
 80008f4:	e0bffc15 	stw	r2,-16(fp)
			Cr = ((128 * R - 107 * G - 21 * B) >> 8) + 128;
 80008f8:	e0bff983 	ldbu	r2,-26(fp)
 80008fc:	102091fa 	slli	r16,r2,7
 8000900:	e0bff9c3 	ldbu	r2,-25(fp)
 8000904:	1009883a 	mov	r4,r2
 8000908:	017fe544 	movi	r5,-107
 800090c:	8001a6c0 	call	8001a6c <__mulsi3>
 8000910:	80a1883a 	add	r16,r16,r2
 8000914:	e0bffa03 	ldbu	r2,-24(fp)
 8000918:	1009883a 	mov	r4,r2
 800091c:	017ffac4 	movi	r5,-21
 8000920:	8001a6c0 	call	8001a6c <__mulsi3>
 8000924:	8085883a 	add	r2,r16,r2
 8000928:	1005d23a 	srai	r2,r2,8
 800092c:	10802004 	addi	r2,r2,128
 8000930:	e0bffd15 	stw	r2,-12(fp)

			if (Y < 0)
 8000934:	e0bffb17 	ldw	r2,-20(fp)
 8000938:	1000020e 	bge	r2,zero,8000944 <read_444_format+0x5a8>
				Y = 0;
 800093c:	e03ffb15 	stw	zero,-20(fp)
 8000940:	00000506 	br	8000958 <read_444_format+0x5bc>
			else if (Y > 255)
 8000944:	e0bffb17 	ldw	r2,-20(fp)
 8000948:	10804010 	cmplti	r2,r2,256
 800094c:	1000021e 	bne	r2,zero,8000958 <read_444_format+0x5bc>
				Y = 255;
 8000950:	00803fc4 	movi	r2,255
 8000954:	e0bffb15 	stw	r2,-20(fp)

			if (Cb < 0)
 8000958:	e0bffc17 	ldw	r2,-16(fp)
 800095c:	1000020e 	bge	r2,zero,8000968 <read_444_format+0x5cc>
				Cb = 0;
 8000960:	e03ffc15 	stw	zero,-16(fp)
 8000964:	00000506 	br	800097c <read_444_format+0x5e0>
			else if (Cb > 255)
 8000968:	e0bffc17 	ldw	r2,-16(fp)
 800096c:	10804010 	cmplti	r2,r2,256
 8000970:	1000021e 	bne	r2,zero,800097c <read_444_format+0x5e0>
				Cb = 255;
 8000974:	00803fc4 	movi	r2,255
 8000978:	e0bffc15 	stw	r2,-16(fp)

			if (Cr < 0)
 800097c:	e0bffd17 	ldw	r2,-12(fp)
 8000980:	1000020e 	bge	r2,zero,800098c <read_444_format+0x5f0>
				Cr = 0;
 8000984:	e03ffd15 	stw	zero,-12(fp)
 8000988:	00000506 	br	80009a0 <read_444_format+0x604>
			else if (Cr > 255)
 800098c:	e0bffd17 	ldw	r2,-12(fp)
 8000990:	10804010 	cmplti	r2,r2,256
 8000994:	1000021e 	bne	r2,zero,80009a0 <read_444_format+0x604>
				Cr = 255;
 8000998:	00803fc4 	movi	r2,255
 800099c:	e0bffd15 	stw	r2,-12(fp)

			// printf("(%3d, %3d, %3d) ", Y, Cb, Cr);

			WRITE_FIFO_SUB(&Y, IN_BASE_1to2A, CONTROL_BASE_1to2A);
 80009a0:	e0bffb04 	addi	r2,fp,-20
 80009a4:	1009883a 	mov	r4,r2
 80009a8:	01440034 	movhi	r5,4096
 80009ac:	29444204 	addi	r5,r5,4360
 80009b0:	01840034 	movhi	r6,4096
 80009b4:	31841004 	addi	r6,r6,4160
 80009b8:	80002580 	call	8000258 <WRITE_FIFO_SUB>
			WRITE_FIFO_SUB(&Cb, IN_BASE_1to2B, CONTROL_BASE_1to2B);
 80009bc:	e0bffc04 	addi	r2,fp,-16
 80009c0:	1009883a 	mov	r4,r2
 80009c4:	01440034 	movhi	r5,4096
 80009c8:	29444104 	addi	r5,r5,4356
 80009cc:	01840034 	movhi	r6,4096
 80009d0:	31840804 	addi	r6,r6,4128
 80009d4:	80002580 	call	8000258 <WRITE_FIFO_SUB>
			WRITE_FIFO_SUB(&Cr, IN_BASE_1to2C, CONTROL_BASE_1to2C);
 80009d8:	e0bffd04 	addi	r2,fp,-12
 80009dc:	1009883a 	mov	r4,r2
 80009e0:	01440034 	movhi	r5,4096
 80009e4:	29444004 	addi	r5,r5,4352
 80009e8:	01840034 	movhi	r6,4096
 80009ec:	31840004 	addi	r6,r6,4096
 80009f0:	80002580 	call	8000258 <WRITE_FIFO_SUB>

	for (i = 8 - rows; i > 0; i--)
	{
		// Print a new line for each row
		// printf("\nRow %d: ", rows + (8 - rows) - i + 1);
		for (j = cols * 3; j > 0;)
 80009f4:	e0bff717 	ldw	r2,-36(fp)
 80009f8:	00bf8316 	blt	zero,r2,8000808 <read_444_format+0x46c>
			WRITE_FIFO_SUB(&Y, IN_BASE_1to2A, CONTROL_BASE_1to2A);
			WRITE_FIFO_SUB(&Cb, IN_BASE_1to2B, CONTROL_BASE_1to2B);
			WRITE_FIFO_SUB(&Cr, IN_BASE_1to2C, CONTROL_BASE_1to2C);
		}

		if ((j = (8 - cols)) > 0)
 80009fc:	e0bff88b 	ldhu	r2,-30(fp)
 8000a00:	00c00204 	movi	r3,8
 8000a04:	1885c83a 	sub	r2,r3,r2
 8000a08:	e0bff715 	stw	r2,-36(fp)
 8000a0c:	e0bff717 	ldw	r2,-36(fp)
 8000a10:	00806f0e 	bge	zero,r2,8000bd0 <read_444_format+0x834>
		{
			R = *(input_ptr - 3);
 8000a14:	e0bfff17 	ldw	r2,-4(fp)
 8000a18:	10bfff43 	ldbu	r2,-3(r2)
 8000a1c:	e0bff985 	stb	r2,-26(fp)
			G = *(input_ptr - 2);
 8000a20:	e0bfff17 	ldw	r2,-4(fp)
 8000a24:	10bfff83 	ldbu	r2,-2(r2)
 8000a28:	e0bff9c5 	stb	r2,-25(fp)
			B = *(input_ptr - 1);
 8000a2c:	e0bfff17 	ldw	r2,-4(fp)
 8000a30:	10bfffc3 	ldbu	r2,-1(r2)
 8000a34:	e0bffa05 	stb	r2,-24(fp)

			// Print the RGB values
			// printf("(%3d, %3d, %3d) ", R, G, B);
			// printf("(%3d, %3d, %3d) ", Y, Cb, Cr);

			Y = ((77 * R + 150 * G + 29 * B) >> 8);
 8000a38:	e0bff983 	ldbu	r2,-26(fp)
 8000a3c:	1009883a 	mov	r4,r2
 8000a40:	01401344 	movi	r5,77
 8000a44:	8001a6c0 	call	8001a6c <__mulsi3>
 8000a48:	1021883a 	mov	r16,r2
 8000a4c:	e0bff9c3 	ldbu	r2,-25(fp)
 8000a50:	1009883a 	mov	r4,r2
 8000a54:	01402584 	movi	r5,150
 8000a58:	8001a6c0 	call	8001a6c <__mulsi3>
 8000a5c:	80a1883a 	add	r16,r16,r2
 8000a60:	e0bffa03 	ldbu	r2,-24(fp)
 8000a64:	1009883a 	mov	r4,r2
 8000a68:	01400744 	movi	r5,29
 8000a6c:	8001a6c0 	call	8001a6c <__mulsi3>
 8000a70:	8085883a 	add	r2,r16,r2
 8000a74:	1005d23a 	srai	r2,r2,8
 8000a78:	e0bffb15 	stw	r2,-20(fp)
			Cb = ((-43 * R - 85 * G + 128 * B) >> 8) + 128;
 8000a7c:	e0bff983 	ldbu	r2,-26(fp)
 8000a80:	1009883a 	mov	r4,r2
 8000a84:	017ff544 	movi	r5,-43
 8000a88:	8001a6c0 	call	8001a6c <__mulsi3>
 8000a8c:	1021883a 	mov	r16,r2
 8000a90:	e0bff9c3 	ldbu	r2,-25(fp)
 8000a94:	1009883a 	mov	r4,r2
 8000a98:	017feac4 	movi	r5,-85
 8000a9c:	8001a6c0 	call	8001a6c <__mulsi3>
 8000aa0:	8087883a 	add	r3,r16,r2
 8000aa4:	e0bffa03 	ldbu	r2,-24(fp)
 8000aa8:	100491fa 	slli	r2,r2,7
 8000aac:	1885883a 	add	r2,r3,r2
 8000ab0:	1005d23a 	srai	r2,r2,8
 8000ab4:	10802004 	addi	r2,r2,128
 8000ab8:	e0bffc15 	stw	r2,-16(fp)
			Cr = ((128 * R - 107 * G - 21 * B) >> 8) + 128;
 8000abc:	e0bff983 	ldbu	r2,-26(fp)
 8000ac0:	102091fa 	slli	r16,r2,7
 8000ac4:	e0bff9c3 	ldbu	r2,-25(fp)
 8000ac8:	1009883a 	mov	r4,r2
 8000acc:	017fe544 	movi	r5,-107
 8000ad0:	8001a6c0 	call	8001a6c <__mulsi3>
 8000ad4:	80a1883a 	add	r16,r16,r2
 8000ad8:	e0bffa03 	ldbu	r2,-24(fp)
 8000adc:	1009883a 	mov	r4,r2
 8000ae0:	017ffac4 	movi	r5,-21
 8000ae4:	8001a6c0 	call	8001a6c <__mulsi3>
 8000ae8:	8085883a 	add	r2,r16,r2
 8000aec:	1005d23a 	srai	r2,r2,8
 8000af0:	10802004 	addi	r2,r2,128
 8000af4:	e0bffd15 	stw	r2,-12(fp)

			if (Y < 0)
 8000af8:	e0bffb17 	ldw	r2,-20(fp)
 8000afc:	1000020e 	bge	r2,zero,8000b08 <read_444_format+0x76c>
				Y = 0;
 8000b00:	e03ffb15 	stw	zero,-20(fp)
 8000b04:	00000506 	br	8000b1c <read_444_format+0x780>
			else if (Y > 255)
 8000b08:	e0bffb17 	ldw	r2,-20(fp)
 8000b0c:	10804010 	cmplti	r2,r2,256
 8000b10:	1000021e 	bne	r2,zero,8000b1c <read_444_format+0x780>
				Y = 255;
 8000b14:	00803fc4 	movi	r2,255
 8000b18:	e0bffb15 	stw	r2,-20(fp)

			if (Cb < 0)
 8000b1c:	e0bffc17 	ldw	r2,-16(fp)
 8000b20:	1000020e 	bge	r2,zero,8000b2c <read_444_format+0x790>
				Cb = 0;
 8000b24:	e03ffc15 	stw	zero,-16(fp)
 8000b28:	00000506 	br	8000b40 <read_444_format+0x7a4>
			else if (Cb > 255)
 8000b2c:	e0bffc17 	ldw	r2,-16(fp)
 8000b30:	10804010 	cmplti	r2,r2,256
 8000b34:	1000021e 	bne	r2,zero,8000b40 <read_444_format+0x7a4>
				Cb = 255;
 8000b38:	00803fc4 	movi	r2,255
 8000b3c:	e0bffc15 	stw	r2,-16(fp)

			if (Cr < 0)
 8000b40:	e0bffd17 	ldw	r2,-12(fp)
 8000b44:	1000020e 	bge	r2,zero,8000b50 <read_444_format+0x7b4>
				Cr = 0;
 8000b48:	e03ffd15 	stw	zero,-12(fp)
			else if (Cr > 255)
				Cr = 255;

			for (; j > 0; j--)
 8000b4c:	00001e06 	br	8000bc8 <read_444_format+0x82c>
			else if (Cb > 255)
				Cb = 255;

			if (Cr < 0)
				Cr = 0;
			else if (Cr > 255)
 8000b50:	e0bffd17 	ldw	r2,-12(fp)
 8000b54:	10804010 	cmplti	r2,r2,256
 8000b58:	10001b1e 	bne	r2,zero,8000bc8 <read_444_format+0x82c>
				Cr = 255;
 8000b5c:	00803fc4 	movi	r2,255
 8000b60:	e0bffd15 	stw	r2,-12(fp)

			for (; j > 0; j--)
 8000b64:	00001806 	br	8000bc8 <read_444_format+0x82c>
			{
				// Print the RGB values
				// printf("(%3d, %3d, %3d) ", R, G, B);
				// printf("(%3d, %3d, %3d) ", Y, Cb, Cr);

				WRITE_FIFO_SUB(&Y, IN_BASE_1to2A, CONTROL_BASE_1to2A);
 8000b68:	e0bffb04 	addi	r2,fp,-20
 8000b6c:	1009883a 	mov	r4,r2
 8000b70:	01440034 	movhi	r5,4096
 8000b74:	29444204 	addi	r5,r5,4360
 8000b78:	01840034 	movhi	r6,4096
 8000b7c:	31841004 	addi	r6,r6,4160
 8000b80:	80002580 	call	8000258 <WRITE_FIFO_SUB>
				WRITE_FIFO_SUB(&Cb, IN_BASE_1to2B, CONTROL_BASE_1to2B);
 8000b84:	e0bffc04 	addi	r2,fp,-16
 8000b88:	1009883a 	mov	r4,r2
 8000b8c:	01440034 	movhi	r5,4096
 8000b90:	29444104 	addi	r5,r5,4356
 8000b94:	01840034 	movhi	r6,4096
 8000b98:	31840804 	addi	r6,r6,4128
 8000b9c:	80002580 	call	8000258 <WRITE_FIFO_SUB>
				WRITE_FIFO_SUB(&Cr, IN_BASE_1to2C, CONTROL_BASE_1to2C);
 8000ba0:	e0bffd04 	addi	r2,fp,-12
 8000ba4:	1009883a 	mov	r4,r2
 8000ba8:	01440034 	movhi	r5,4096
 8000bac:	29444004 	addi	r5,r5,4352
 8000bb0:	01840034 	movhi	r6,4096
 8000bb4:	31840004 	addi	r6,r6,4096
 8000bb8:	80002580 	call	8000258 <WRITE_FIFO_SUB>
			if (Cr < 0)
				Cr = 0;
			else if (Cr > 255)
				Cr = 255;

			for (; j > 0; j--)
 8000bbc:	e0bff717 	ldw	r2,-36(fp)
 8000bc0:	10bfffc4 	addi	r2,r2,-1
 8000bc4:	e0bff715 	stw	r2,-36(fp)
 8000bc8:	e0bff717 	ldw	r2,-36(fp)
 8000bcc:	00bfe616 	blt	zero,r2,8000b68 <read_444_format+0x7cc>
		input_ptr += incr;
	}

	input_ptr -= incr;

	for (i = 8 - rows; i > 0; i--)
 8000bd0:	e0bff617 	ldw	r2,-40(fp)
 8000bd4:	10bfffc4 	addi	r2,r2,-1
 8000bd8:	e0bff615 	stw	r2,-40(fp)
 8000bdc:	e0bff617 	ldw	r2,-40(fp)
 8000be0:	00bf0316 	blt	zero,r2,80007f0 <read_444_format+0x454>
			}
		}
	}

	// printf("\n");
}
 8000be4:	e037883a 	mov	sp,fp
 8000be8:	dfc00217 	ldw	ra,8(sp)
 8000bec:	df000117 	ldw	fp,4(sp)
 8000bf0:	dc000017 	ldw	r16,0(sp)
 8000bf4:	dec00304 	addi	sp,sp,12
 8000bf8:	f800283a 	ret

08000bfc <print_grid>:
	unsigned int biClrImportant;
} BITMAPINFOHEADER;
#pragma pack(pop)

void print_grid(UINT8 *data, UINT32 width, UINT32 height)
{
 8000bfc:	defff804 	addi	sp,sp,-32
 8000c00:	dfc00715 	stw	ra,28(sp)
 8000c04:	df000615 	stw	fp,24(sp)
 8000c08:	df000604 	addi	fp,sp,24
 8000c0c:	e13ffd15 	stw	r4,-12(fp)
 8000c10:	e17ffe15 	stw	r5,-8(fp)
 8000c14:	e1bfff15 	stw	r6,-4(fp)
	UINT32 row, col;
	for (row = 0; row < height; row++)
 8000c18:	e03ffa15 	stw	zero,-24(fp)
 8000c1c:	00002d06 	br	8000cd4 <print_grid+0xd8>
	{
		for (col = 0; col < width; col++)
 8000c20:	e03ffb15 	stw	zero,-20(fp)
 8000c24:	00002306 	br	8000cb4 <print_grid+0xb8>
		{
			UINT32 index = row * width * 3 + col * 3;
 8000c28:	e13ffa17 	ldw	r4,-24(fp)
 8000c2c:	e17ffe17 	ldw	r5,-8(fp)
 8000c30:	8001a6c0 	call	8001a6c <__mulsi3>
 8000c34:	1007883a 	mov	r3,r2
 8000c38:	e0bffb17 	ldw	r2,-20(fp)
 8000c3c:	1887883a 	add	r3,r3,r2
 8000c40:	1805883a 	mov	r2,r3
 8000c44:	1085883a 	add	r2,r2,r2
 8000c48:	10c5883a 	add	r2,r2,r3
 8000c4c:	e0bffc15 	stw	r2,-16(fp)
			printf("(%3d, %3d, %3d) ", data[index + 2], data[index + 1], data[index]);
 8000c50:	e0bffc17 	ldw	r2,-16(fp)
 8000c54:	10800084 	addi	r2,r2,2
 8000c58:	e0fffd17 	ldw	r3,-12(fp)
 8000c5c:	1885883a 	add	r2,r3,r2
 8000c60:	10800003 	ldbu	r2,0(r2)
 8000c64:	11403fcc 	andi	r5,r2,255
 8000c68:	e0bffc17 	ldw	r2,-16(fp)
 8000c6c:	10800044 	addi	r2,r2,1
 8000c70:	e0fffd17 	ldw	r3,-12(fp)
 8000c74:	1885883a 	add	r2,r3,r2
 8000c78:	10800003 	ldbu	r2,0(r2)
 8000c7c:	10c03fcc 	andi	r3,r2,255
 8000c80:	e13ffd17 	ldw	r4,-12(fp)
 8000c84:	e0bffc17 	ldw	r2,-16(fp)
 8000c88:	2085883a 	add	r2,r4,r2
 8000c8c:	10800003 	ldbu	r2,0(r2)
 8000c90:	10803fcc 	andi	r2,r2,255
 8000c94:	01020074 	movhi	r4,2049
 8000c98:	21110d04 	addi	r4,r4,17460
 8000c9c:	180d883a 	mov	r6,r3
 8000ca0:	100f883a 	mov	r7,r2
 8000ca4:	80041640 	call	8004164 <printf>
void print_grid(UINT8 *data, UINT32 width, UINT32 height)
{
	UINT32 row, col;
	for (row = 0; row < height; row++)
	{
		for (col = 0; col < width; col++)
 8000ca8:	e0bffb17 	ldw	r2,-20(fp)
 8000cac:	10800044 	addi	r2,r2,1
 8000cb0:	e0bffb15 	stw	r2,-20(fp)
 8000cb4:	e0fffb17 	ldw	r3,-20(fp)
 8000cb8:	e0bffe17 	ldw	r2,-8(fp)
 8000cbc:	18bfda36 	bltu	r3,r2,8000c28 <print_grid+0x2c>
		{
			UINT32 index = row * width * 3 + col * 3;
			printf("(%3d, %3d, %3d) ", data[index + 2], data[index + 1], data[index]);
		}
		printf("\n");
 8000cc0:	01000284 	movi	r4,10
 8000cc4:	80041a80 	call	80041a8 <putchar>
#pragma pack(pop)

void print_grid(UINT8 *data, UINT32 width, UINT32 height)
{
	UINT32 row, col;
	for (row = 0; row < height; row++)
 8000cc8:	e0bffa17 	ldw	r2,-24(fp)
 8000ccc:	10800044 	addi	r2,r2,1
 8000cd0:	e0bffa15 	stw	r2,-24(fp)
 8000cd4:	e0fffa17 	ldw	r3,-24(fp)
 8000cd8:	e0bfff17 	ldw	r2,-4(fp)
 8000cdc:	18bfd036 	bltu	r3,r2,8000c20 <print_grid+0x24>
			UINT32 index = row * width * 3 + col * 3;
			printf("(%3d, %3d, %3d) ", data[index + 2], data[index + 1], data[index]);
		}
		printf("\n");
	}
	printf("\n");
 8000ce0:	01000284 	movi	r4,10
 8000ce4:	80041a80 	call	80041a8 <putchar>
}
 8000ce8:	e037883a 	mov	sp,fp
 8000cec:	dfc00117 	ldw	ra,4(sp)
 8000cf0:	df000017 	ldw	fp,0(sp)
 8000cf4:	dec00204 	addi	sp,sp,8
 8000cf8:	f800283a 	ret

08000cfc <initialization>:

void initialization(JPEG_ENCODER_STRUCTURE *jpeg, UINT32 image_width, UINT32 image_height)
{
 8000cfc:	defff804 	addi	sp,sp,-32
 8000d00:	dfc00715 	stw	ra,28(sp)
 8000d04:	df000615 	stw	fp,24(sp)
 8000d08:	dc000515 	stw	r16,20(sp)
 8000d0c:	df000504 	addi	fp,sp,20
 8000d10:	e13ffd15 	stw	r4,-12(fp)
 8000d14:	e17ffe15 	stw	r5,-8(fp)
 8000d18:	e1bfff15 	stw	r6,-4(fp)
	UINT16 mcu_width, mcu_height, bytes_per_pixel;

	jpeg->mcu_width = mcu_width = 8;
 8000d1c:	00800204 	movi	r2,8
 8000d20:	e0bffb0d 	sth	r2,-20(fp)
 8000d24:	e0bffd17 	ldw	r2,-12(fp)
 8000d28:	e0fffb0b 	ldhu	r3,-20(fp)
 8000d2c:	10c0000d 	sth	r3,0(r2)
	jpeg->mcu_height = mcu_height = 8;
 8000d30:	00800204 	movi	r2,8
 8000d34:	e0bffb8d 	sth	r2,-18(fp)
 8000d38:	e0bffd17 	ldw	r2,-12(fp)
 8000d3c:	e0fffb8b 	ldhu	r3,-18(fp)
 8000d40:	10c0008d 	sth	r3,2(r2)

	jpeg->horizontal_mcus = (UINT16)((image_width + mcu_width - 1) >> 3);
 8000d44:	e0fffb0b 	ldhu	r3,-20(fp)
 8000d48:	e0bffe17 	ldw	r2,-8(fp)
 8000d4c:	1885883a 	add	r2,r3,r2
 8000d50:	10bfffc4 	addi	r2,r2,-1
 8000d54:	1004d0fa 	srli	r2,r2,3
 8000d58:	1007883a 	mov	r3,r2
 8000d5c:	e0bffd17 	ldw	r2,-12(fp)
 8000d60:	10c0010d 	sth	r3,4(r2)
	jpeg->vertical_mcus = (UINT16)((image_height + mcu_height - 1) >> 3);
 8000d64:	e0fffb8b 	ldhu	r3,-18(fp)
 8000d68:	e0bfff17 	ldw	r2,-4(fp)
 8000d6c:	1885883a 	add	r2,r3,r2
 8000d70:	10bfffc4 	addi	r2,r2,-1
 8000d74:	1004d0fa 	srli	r2,r2,3
 8000d78:	1007883a 	mov	r3,r2
 8000d7c:	e0bffd17 	ldw	r2,-12(fp)
 8000d80:	10c0018d 	sth	r3,6(r2)

	bytes_per_pixel = 3;
 8000d84:	008000c4 	movi	r2,3
 8000d88:	e0bffc0d 	sth	r2,-16(fp)

	jpeg->rows_in_bottom_mcus = (UINT16)(image_height - (jpeg->vertical_mcus - 1) * mcu_height);
 8000d8c:	e0bfff17 	ldw	r2,-4(fp)
 8000d90:	1021883a 	mov	r16,r2
 8000d94:	e0bffd17 	ldw	r2,-12(fp)
 8000d98:	1080018b 	ldhu	r2,6(r2)
 8000d9c:	10bfffcc 	andi	r2,r2,65535
 8000da0:	10bfffc4 	addi	r2,r2,-1
 8000da4:	1007883a 	mov	r3,r2
 8000da8:	e0bffb8b 	ldhu	r2,-18(fp)
 8000dac:	1809883a 	mov	r4,r3
 8000db0:	100b883a 	mov	r5,r2
 8000db4:	8001a6c0 	call	8001a6c <__mulsi3>
 8000db8:	8085c83a 	sub	r2,r16,r2
 8000dbc:	1007883a 	mov	r3,r2
 8000dc0:	e0bffd17 	ldw	r2,-12(fp)
 8000dc4:	10c0028d 	sth	r3,10(r2)
	jpeg->cols_in_right_mcus = (UINT16)(image_width - (jpeg->horizontal_mcus - 1) * mcu_width);
 8000dc8:	e0bffe17 	ldw	r2,-8(fp)
 8000dcc:	1021883a 	mov	r16,r2
 8000dd0:	e0bffd17 	ldw	r2,-12(fp)
 8000dd4:	1080010b 	ldhu	r2,4(r2)
 8000dd8:	10bfffcc 	andi	r2,r2,65535
 8000ddc:	10bfffc4 	addi	r2,r2,-1
 8000de0:	1007883a 	mov	r3,r2
 8000de4:	e0bffb0b 	ldhu	r2,-20(fp)
 8000de8:	1809883a 	mov	r4,r3
 8000dec:	100b883a 	mov	r5,r2
 8000df0:	8001a6c0 	call	8001a6c <__mulsi3>
 8000df4:	8085c83a 	sub	r2,r16,r2
 8000df8:	1007883a 	mov	r3,r2
 8000dfc:	e0bffd17 	ldw	r2,-12(fp)
 8000e00:	10c0020d 	sth	r3,8(r2)

	jpeg->length_minus_mcu_width = (UINT16)((image_width - mcu_width) * bytes_per_pixel);
 8000e04:	e0bffb0b 	ldhu	r2,-20(fp)
 8000e08:	e0fffe17 	ldw	r3,-8(fp)
 8000e0c:	1885c83a 	sub	r2,r3,r2
 8000e10:	1007883a 	mov	r3,r2
 8000e14:	e0bffc0b 	ldhu	r2,-16(fp)
 8000e18:	1809883a 	mov	r4,r3
 8000e1c:	100b883a 	mov	r5,r2
 8000e20:	8001a6c0 	call	8001a6c <__mulsi3>
 8000e24:	1007883a 	mov	r3,r2
 8000e28:	e0bffd17 	ldw	r2,-12(fp)
 8000e2c:	10c0040d 	sth	r3,16(r2)
	jpeg->length_minus_width = (UINT16)((image_width - jpeg->cols_in_right_mcus) * bytes_per_pixel);
 8000e30:	e0bffd17 	ldw	r2,-12(fp)
 8000e34:	1080020b 	ldhu	r2,8(r2)
 8000e38:	10bfffcc 	andi	r2,r2,65535
 8000e3c:	e0fffe17 	ldw	r3,-8(fp)
 8000e40:	1885c83a 	sub	r2,r3,r2
 8000e44:	1007883a 	mov	r3,r2
 8000e48:	e0bffc0b 	ldhu	r2,-16(fp)
 8000e4c:	1809883a 	mov	r4,r3
 8000e50:	100b883a 	mov	r5,r2
 8000e54:	8001a6c0 	call	8001a6c <__mulsi3>
 8000e58:	1007883a 	mov	r3,r2
 8000e5c:	e0bffd17 	ldw	r2,-12(fp)
 8000e60:	10c0048d 	sth	r3,18(r2)

	jpeg->mcu_width_size = (UINT16)(mcu_width * bytes_per_pixel);
 8000e64:	e0fffb0b 	ldhu	r3,-20(fp)
 8000e68:	e0bffc0b 	ldhu	r2,-16(fp)
 8000e6c:	1809883a 	mov	r4,r3
 8000e70:	100b883a 	mov	r5,r2
 8000e74:	8001a6c0 	call	8001a6c <__mulsi3>
 8000e78:	1007883a 	mov	r3,r2
 8000e7c:	e0bffd17 	ldw	r2,-12(fp)
 8000e80:	10c0058d 	sth	r3,22(r2)

	jpeg->offset = (UINT16)((image_width * (mcu_height - 1) - (mcu_width - jpeg->cols_in_right_mcus)) * bytes_per_pixel);
 8000e84:	e0bffb8b 	ldhu	r2,-18(fp)
 8000e88:	10bfffc4 	addi	r2,r2,-1
 8000e8c:	1009883a 	mov	r4,r2
 8000e90:	e17ffe17 	ldw	r5,-8(fp)
 8000e94:	8001a6c0 	call	8001a6c <__mulsi3>
 8000e98:	1007883a 	mov	r3,r2
 8000e9c:	e0bffd17 	ldw	r2,-12(fp)
 8000ea0:	1080020b 	ldhu	r2,8(r2)
 8000ea4:	113fffcc 	andi	r4,r2,65535
 8000ea8:	e0bffb0b 	ldhu	r2,-20(fp)
 8000eac:	2085c83a 	sub	r2,r4,r2
 8000eb0:	1885883a 	add	r2,r3,r2
 8000eb4:	1007883a 	mov	r3,r2
 8000eb8:	e0bffc0b 	ldhu	r2,-16(fp)
 8000ebc:	1809883a 	mov	r4,r3
 8000ec0:	100b883a 	mov	r5,r2
 8000ec4:	8001a6c0 	call	8001a6c <__mulsi3>
 8000ec8:	1007883a 	mov	r3,r2
 8000ecc:	e0bffd17 	ldw	r2,-12(fp)
 8000ed0:	10c0060d 	sth	r3,24(r2)
}
 8000ed4:	e037883a 	mov	sp,fp
 8000ed8:	dfc00217 	ldw	ra,8(sp)
 8000edc:	df000117 	ldw	fp,4(sp)
 8000ee0:	dc000017 	ldw	r16,0(sp)
 8000ee4:	dec00304 	addi	sp,sp,12
 8000ee8:	f800283a 	ret

08000eec <encode_image>:

UINT8 encode_image(char *input_file_name, UINT32 quality_factor, UINT32 image_width, UINT32 image_height, UINT32 img_count)
{
 8000eec:	deffcd04 	addi	sp,sp,-204
 8000ef0:	dfc03215 	stw	ra,200(sp)
 8000ef4:	df003115 	stw	fp,196(sp)
 8000ef8:	df003104 	addi	fp,sp,196
 8000efc:	e13ffc15 	stw	r4,-16(fp)
 8000f00:	e17ffd15 	stw	r5,-12(fp)
 8000f04:	e1bffe15 	stw	r6,-8(fp)
 8000f08:	e1ffff15 	stw	r7,-4(fp)
	UINT16 i, j;
	int temp;
	clock_t start_time, end_time, block_start_time, block_end_time;

	JPEG_ENCODER_STRUCTURE JpegStruct;
	JPEG_ENCODER_STRUCTURE *jpeg_encoder_structure = &JpegStruct;
 8000f0c:	e0bfdb04 	addi	r2,fp,-148
 8000f10:	e0bfd115 	stw	r2,-188(fp)
	BITMAPFILEHEADER fileHeader;
	BITMAPINFOHEADER infoHeader;

	FILE *fpt, *log_file;

	char path[50] = "/mnt/host/files/";
 8000f14:	009d1bb4 	movhi	r2,29806
 8000f18:	109b4bc4 	addi	r2,r2,27951
 8000f1c:	e0bfef15 	stw	r2,-68(fp)
 8000f20:	009cdbf4 	movhi	r2,29551
 8000f24:	109a0bc4 	addi	r2,r2,26671
 8000f28:	e0bff015 	stw	r2,-64(fp)
 8000f2c:	009a59b4 	movhi	r2,26982
 8000f30:	108bdd04 	addi	r2,r2,12148
 8000f34:	e0bff115 	stw	r2,-60(fp)
 8000f38:	008bdcf4 	movhi	r2,12147
 8000f3c:	10995b04 	addi	r2,r2,25964
 8000f40:	e0bff215 	stw	r2,-56(fp)
 8000f44:	e03ff315 	stw	zero,-52(fp)
 8000f48:	e03ff415 	stw	zero,-48(fp)
 8000f4c:	e03ff515 	stw	zero,-44(fp)
 8000f50:	e03ff615 	stw	zero,-40(fp)
 8000f54:	e03ff715 	stw	zero,-36(fp)
 8000f58:	e03ff815 	stw	zero,-32(fp)
 8000f5c:	e03ff915 	stw	zero,-28(fp)
 8000f60:	e03ffa15 	stw	zero,-24(fp)
 8000f64:	e03ffb0d 	sth	zero,-20(fp)
	strcat(path, input_file_name);
 8000f68:	e0bfef04 	addi	r2,fp,-68
 8000f6c:	1009883a 	mov	r4,r2
 8000f70:	e17ffc17 	ldw	r5,-16(fp)
 8000f74:	80046080 	call	8004608 <strcat>

	fpt = fopen(path, "rb");
 8000f78:	e0bfef04 	addi	r2,fp,-68
 8000f7c:	1009883a 	mov	r4,r2
 8000f80:	01420074 	movhi	r5,2049
 8000f84:	29511204 	addi	r5,r5,17480
 8000f88:	80026c00 	call	80026c0 <fopen>
 8000f8c:	e0bfd215 	stw	r2,-184(fp)
	if (fpt == NULL)
 8000f90:	e0bfd217 	ldw	r2,-184(fp)
 8000f94:	10000c1e 	bne	r2,zero,8000fc8 <encode_image+0xdc>
	{
		fprintf(stderr, "Error opening input file: %s\n", path);
 8000f98:	00820074 	movhi	r2,2049
 8000f9c:	10999c04 	addi	r2,r2,26224
 8000fa0:	10800017 	ldw	r2,0(r2)
 8000fa4:	10c00317 	ldw	r3,12(r2)
 8000fa8:	e0bfef04 	addi	r2,fp,-68
 8000fac:	1809883a 	mov	r4,r3
 8000fb0:	01420074 	movhi	r5,2049
 8000fb4:	29511304 	addi	r5,r5,17484
 8000fb8:	100d883a 	mov	r6,r2
 8000fbc:	80027040 	call	8002704 <fprintf>
		return 1;
 8000fc0:	00800044 	movi	r2,1
 8000fc4:	00010c06 	br	80013f8 <encode_image+0x50c>
	// image_width = infoHeader.biWidth;
	// image_height = abs(infoHeader.biHeight);
	// int row_padded = (image_width * 3 + 3) & (~3);

	// Calculate the size of the image data
	long imageDataSize = image_width * image_height * 3;
 8000fc8:	e0fffe17 	ldw	r3,-8(fp)
 8000fcc:	e0bfff17 	ldw	r2,-4(fp)
 8000fd0:	1809883a 	mov	r4,r3
 8000fd4:	100b883a 	mov	r5,r2
 8000fd8:	8001a6c0 	call	8001a6c <__mulsi3>
 8000fdc:	1007883a 	mov	r3,r2
 8000fe0:	1805883a 	mov	r2,r3
 8000fe4:	1085883a 	add	r2,r2,r2
 8000fe8:	10c5883a 	add	r2,r2,r3
 8000fec:	e0bfd315 	stw	r2,-180(fp)

	// Allocate memory for the image data
	UINT8 *data = (UINT8 *)malloc((imageDataSize + 10) * sizeof(UINT8));
 8000ff0:	e0bfd317 	ldw	r2,-180(fp)
 8000ff4:	10800284 	addi	r2,r2,10
 8000ff8:	1009883a 	mov	r4,r2
 8000ffc:	80037040 	call	8003704 <malloc>
 8001000:	e0bfd015 	stw	r2,-192(fp)
	if (!data)
 8001004:	e0bfd017 	ldw	r2,-192(fp)
 8001008:	10000e1e 	bne	r2,zero,8001044 <encode_image+0x158>
	{
		fprintf(stderr, "Memory allocation failed\n");
 800100c:	00820074 	movhi	r2,2049
 8001010:	10999c04 	addi	r2,r2,26224
 8001014:	10800017 	ldw	r2,0(r2)
 8001018:	10800317 	ldw	r2,12(r2)
 800101c:	01020074 	movhi	r4,2049
 8001020:	21111b04 	addi	r4,r4,17516
 8001024:	01400044 	movi	r5,1
 8001028:	01800644 	movi	r6,25
 800102c:	100f883a 	mov	r7,r2
 8001030:	800351c0 	call	800351c <fwrite>
		fclose(fpt);
 8001034:	e13fd217 	ldw	r4,-184(fp)
 8001038:	80020780 	call	8002078 <fclose>
		return 1;
 800103c:	00800044 	movi	r2,1
 8001040:	0000ed06 	br	80013f8 <encode_image+0x50c>
	}

	// Read the image data from the file from the beginning
	// fseek(fpt, fileHeader.bfOffBits, SEEK_SET);
	fread(data, 1, imageDataSize, fpt);
 8001044:	e0bfd317 	ldw	r2,-180(fp)
 8001048:	e13fd017 	ldw	r4,-192(fp)
 800104c:	01400044 	movi	r5,1
 8001050:	100d883a 	mov	r6,r2
 8001054:	e1ffd217 	ldw	r7,-184(fp)
 8001058:	80029640 	call	8002964 <fread>

	/* Initialization of JPEG control structure */
	initialization(jpeg_encoder_structure, image_width, image_height);
 800105c:	e0fffe17 	ldw	r3,-8(fp)
 8001060:	e0bfff17 	ldw	r2,-4(fp)
 8001064:	e13fd117 	ldw	r4,-188(fp)
 8001068:	180b883a 	mov	r5,r3
 800106c:	100d883a 	mov	r6,r2
 8001070:	8000cfc0 	call	8000cfc <initialization>

	// send data to stage 4
	temp = (jpeg_encoder_structure->vertical_mcus) * (jpeg_encoder_structure->horizontal_mcus);
 8001074:	e0bfd117 	ldw	r2,-188(fp)
 8001078:	1080018b 	ldhu	r2,6(r2)
 800107c:	10ffffcc 	andi	r3,r2,65535
 8001080:	e0bfd117 	ldw	r2,-188(fp)
 8001084:	1080010b 	ldhu	r2,4(r2)
 8001088:	10bfffcc 	andi	r2,r2,65535
 800108c:	1809883a 	mov	r4,r3
 8001090:	100b883a 	mov	r5,r2
 8001094:	8001a6c0 	call	8001a6c <__mulsi3>
 8001098:	e0bfda15 	stw	r2,-152(fp)
	WRITE_FIFO(&temp, IN_BASE_1to4, CONTROL_BASE_1to4);
 800109c:	e0bfda04 	addi	r2,fp,-152
 80010a0:	1009883a 	mov	r4,r2
 80010a4:	01440034 	movhi	r5,4096
 80010a8:	29444504 	addi	r5,r5,4372
 80010ac:	01840034 	movhi	r6,4096
 80010b0:	31842804 	addi	r6,r6,4256
 80010b4:	80001f40 	call	80001f4 <WRITE_FIFO>
	WRITE_FIFO(&quality_factor, IN_BASE_1to4, CONTROL_BASE_1to4);
 80010b8:	e0bffd04 	addi	r2,fp,-12
 80010bc:	1009883a 	mov	r4,r2
 80010c0:	01440034 	movhi	r5,4096
 80010c4:	29444504 	addi	r5,r5,4372
 80010c8:	01840034 	movhi	r6,4096
 80010cc:	31842804 	addi	r6,r6,4256
 80010d0:	80001f40 	call	80001f4 <WRITE_FIFO>

	/* Writing Marker Data */
	WRITE_FIFO(&image_width, IN_BASE_1to5, CONTROL_BASE_1to5);
 80010d4:	e0bffe04 	addi	r2,fp,-8
 80010d8:	1009883a 	mov	r4,r2
 80010dc:	01440034 	movhi	r5,4096
 80010e0:	29444404 	addi	r5,r5,4368
 80010e4:	01840034 	movhi	r6,4096
 80010e8:	31842004 	addi	r6,r6,4224
 80010ec:	80001f40 	call	80001f4 <WRITE_FIFO>
	WRITE_FIFO(&image_height, IN_BASE_1to5, CONTROL_BASE_1to5);
 80010f0:	e0bfff04 	addi	r2,fp,-4
 80010f4:	1009883a 	mov	r4,r2
 80010f8:	01440034 	movhi	r5,4096
 80010fc:	29444404 	addi	r5,r5,4368
 8001100:	01840034 	movhi	r6,4096
 8001104:	31842004 	addi	r6,r6,4224
 8001108:	80001f40 	call	80001f4 <WRITE_FIFO>
	WRITE_FIFO(&temp, IN_BASE_1to5, CONTROL_BASE_1to5);
 800110c:	e0bfda04 	addi	r2,fp,-152
 8001110:	1009883a 	mov	r4,r2
 8001114:	01440034 	movhi	r5,4096
 8001118:	29444404 	addi	r5,r5,4368
 800111c:	01840034 	movhi	r6,4096
 8001120:	31842004 	addi	r6,r6,4224
 8001124:	80001f40 	call	80001f4 <WRITE_FIFO>

	printf("Image Width: %d\n", *(&image_width));
 8001128:	e0bffe17 	ldw	r2,-8(fp)
 800112c:	01020074 	movhi	r4,2049
 8001130:	21112204 	addi	r4,r4,17544
 8001134:	100b883a 	mov	r5,r2
 8001138:	80041640 	call	8004164 <printf>
	printf("Image Height: %d\n", *(&image_height));
 800113c:	e0bfff17 	ldw	r2,-4(fp)
 8001140:	01020074 	movhi	r4,2049
 8001144:	21112704 	addi	r4,r4,17564
 8001148:	100b883a 	mov	r5,r2
 800114c:	80041640 	call	8004164 <printf>

	WRITE_FIFO_SUB(&temp, IN_BASE_1to2A, CONTROL_BASE_1to2A);
 8001150:	e0bfda04 	addi	r2,fp,-152
 8001154:	1009883a 	mov	r4,r2
 8001158:	01440034 	movhi	r5,4096
 800115c:	29444204 	addi	r5,r5,4360
 8001160:	01840034 	movhi	r6,4096
 8001164:	31841004 	addi	r6,r6,4160
 8001168:	80002580 	call	8000258 <WRITE_FIFO_SUB>
	WRITE_FIFO_SUB(&temp, IN_BASE_1to2B, CONTROL_BASE_1to2B);
 800116c:	e0bfda04 	addi	r2,fp,-152
 8001170:	1009883a 	mov	r4,r2
 8001174:	01440034 	movhi	r5,4096
 8001178:	29444104 	addi	r5,r5,4356
 800117c:	01840034 	movhi	r6,4096
 8001180:	31840804 	addi	r6,r6,4128
 8001184:	80002580 	call	8000258 <WRITE_FIFO_SUB>
	WRITE_FIFO_SUB(&temp, IN_BASE_1to2C, CONTROL_BASE_1to2C);
 8001188:	e0bfda04 	addi	r2,fp,-152
 800118c:	1009883a 	mov	r4,r2
 8001190:	01440034 	movhi	r5,4096
 8001194:	29444004 	addi	r5,r5,4352
 8001198:	01840034 	movhi	r6,4096
 800119c:	31840004 	addi	r6,r6,4096
 80011a0:	80002580 	call	8000258 <WRITE_FIFO_SUB>

	// print grid
	// print_grid(data, image_width, image_height);

	start_time = clock();
 80011a4:	8001ef00 	call	8001ef0 <clock>
 80011a8:	e0bfd415 	stw	r2,-176(fp)

	for (i = 1; i <= jpeg_encoder_structure->vertical_mcus; i++)
 80011ac:	00800044 	movi	r2,1
 80011b0:	e0bfcf0d 	sth	r2,-196(fp)
 80011b4:	00004606 	br	80012d0 <encode_image+0x3e4>
	{
		printf("Block Number - %d\n", i);
 80011b8:	e0bfcf0b 	ldhu	r2,-196(fp)
 80011bc:	01020074 	movhi	r4,2049
 80011c0:	21112c04 	addi	r4,r4,17584
 80011c4:	100b883a 	mov	r5,r2
 80011c8:	80041640 	call	8004164 <printf>

		if (i < jpeg_encoder_structure->vertical_mcus)
 80011cc:	e0bfd117 	ldw	r2,-188(fp)
 80011d0:	1080018b 	ldhu	r2,6(r2)
 80011d4:	10bfffcc 	andi	r2,r2,65535
 80011d8:	e0ffcf0b 	ldhu	r3,-196(fp)
 80011dc:	1880052e 	bgeu	r3,r2,80011f4 <encode_image+0x308>
			jpeg_encoder_structure->rows = jpeg_encoder_structure->mcu_height;
 80011e0:	e0bfd117 	ldw	r2,-188(fp)
 80011e4:	10c0008b 	ldhu	r3,2(r2)
 80011e8:	e0bfd117 	ldw	r2,-188(fp)
 80011ec:	10c0030d 	sth	r3,12(r2)
 80011f0:	00000406 	br	8001204 <encode_image+0x318>
		else
			jpeg_encoder_structure->rows = jpeg_encoder_structure->rows_in_bottom_mcus;
 80011f4:	e0bfd117 	ldw	r2,-188(fp)
 80011f8:	10c0028b 	ldhu	r3,10(r2)
 80011fc:	e0bfd117 	ldw	r2,-188(fp)
 8001200:	10c0030d 	sth	r3,12(r2)

		for (j = 1; j <= jpeg_encoder_structure->horizontal_mcus; j++)
 8001204:	00800044 	movi	r2,1
 8001208:	e0bfcf8d 	sth	r2,-194(fp)
 800120c:	00002206 	br	8001298 <encode_image+0x3ac>
		{
			if (j < jpeg_encoder_structure->horizontal_mcus)
 8001210:	e0bfd117 	ldw	r2,-188(fp)
 8001214:	1080010b 	ldhu	r2,4(r2)
 8001218:	10bfffcc 	andi	r2,r2,65535
 800121c:	e0ffcf8b 	ldhu	r3,-194(fp)
 8001220:	1880092e 	bgeu	r3,r2,8001248 <encode_image+0x35c>
			{
				jpeg_encoder_structure->cols = jpeg_encoder_structure->mcu_width;
 8001224:	e0bfd117 	ldw	r2,-188(fp)
 8001228:	10c0000b 	ldhu	r3,0(r2)
 800122c:	e0bfd117 	ldw	r2,-188(fp)
 8001230:	10c0038d 	sth	r3,14(r2)
				jpeg_encoder_structure->incr = jpeg_encoder_structure->length_minus_mcu_width;
 8001234:	e0bfd117 	ldw	r2,-188(fp)
 8001238:	10c0040b 	ldhu	r3,16(r2)
 800123c:	e0bfd117 	ldw	r2,-188(fp)
 8001240:	10c0050d 	sth	r3,20(r2)
 8001244:	00000806 	br	8001268 <encode_image+0x37c>
			}
			else
			{
				jpeg_encoder_structure->cols = jpeg_encoder_structure->cols_in_right_mcus;
 8001248:	e0bfd117 	ldw	r2,-188(fp)
 800124c:	10c0020b 	ldhu	r3,8(r2)
 8001250:	e0bfd117 	ldw	r2,-188(fp)
 8001254:	10c0038d 	sth	r3,14(r2)
				jpeg_encoder_structure->incr = jpeg_encoder_structure->length_minus_width;
 8001258:	e0bfd117 	ldw	r2,-188(fp)
 800125c:	10c0048b 	ldhu	r3,18(r2)
 8001260:	e0bfd117 	ldw	r2,-188(fp)
 8001264:	10c0050d 	sth	r3,20(r2)
			}

			// block_start_time = clock();
			read_444_format(jpeg_encoder_structure, data);
 8001268:	e13fd117 	ldw	r4,-188(fp)
 800126c:	e17fd017 	ldw	r5,-192(fp)
 8001270:	800039c0 	call	800039c <read_444_format>
			// block_end_time = clock();

			// double block_elapsed_time = (double)(block_end_time - block_start_time) / CLOCKS_PER_SEC;
			// fprintf(log_file, "Block (%d, %d) processing time: %f seconds\n", i, j, block_elapsed_time);

			data += jpeg_encoder_structure->mcu_width_size;
 8001274:	e0bfd117 	ldw	r2,-188(fp)
 8001278:	1080058b 	ldhu	r2,22(r2)
 800127c:	10bfffcc 	andi	r2,r2,65535
 8001280:	e0ffd017 	ldw	r3,-192(fp)
 8001284:	1885883a 	add	r2,r3,r2
 8001288:	e0bfd015 	stw	r2,-192(fp)
		if (i < jpeg_encoder_structure->vertical_mcus)
			jpeg_encoder_structure->rows = jpeg_encoder_structure->mcu_height;
		else
			jpeg_encoder_structure->rows = jpeg_encoder_structure->rows_in_bottom_mcus;

		for (j = 1; j <= jpeg_encoder_structure->horizontal_mcus; j++)
 800128c:	e0bfcf8b 	ldhu	r2,-194(fp)
 8001290:	10800044 	addi	r2,r2,1
 8001294:	e0bfcf8d 	sth	r2,-194(fp)
 8001298:	e0bfd117 	ldw	r2,-188(fp)
 800129c:	1080010b 	ldhu	r2,4(r2)
 80012a0:	10ffffcc 	andi	r3,r2,65535
 80012a4:	e0bfcf8b 	ldhu	r2,-194(fp)
 80012a8:	18bfd92e 	bgeu	r3,r2,8001210 <encode_image+0x324>

			data += jpeg_encoder_structure->mcu_width_size;
			// break;
		}

		data += jpeg_encoder_structure->offset;
 80012ac:	e0bfd117 	ldw	r2,-188(fp)
 80012b0:	1080060b 	ldhu	r2,24(r2)
 80012b4:	10bfffcc 	andi	r2,r2,65535
 80012b8:	e0ffd017 	ldw	r3,-192(fp)
 80012bc:	1885883a 	add	r2,r3,r2
 80012c0:	e0bfd015 	stw	r2,-192(fp)
	// print grid
	// print_grid(data, image_width, image_height);

	start_time = clock();

	for (i = 1; i <= jpeg_encoder_structure->vertical_mcus; i++)
 80012c4:	e0bfcf0b 	ldhu	r2,-196(fp)
 80012c8:	10800044 	addi	r2,r2,1
 80012cc:	e0bfcf0d 	sth	r2,-196(fp)
 80012d0:	e0bfd117 	ldw	r2,-188(fp)
 80012d4:	1080018b 	ldhu	r2,6(r2)
 80012d8:	10ffffcc 	andi	r3,r2,65535
 80012dc:	e0bfcf0b 	ldhu	r2,-196(fp)
 80012e0:	18bfb52e 	bgeu	r3,r2,80011b8 <encode_image+0x2cc>
		}

		data += jpeg_encoder_structure->offset;
	}

	end_time = clock();
 80012e4:	8001ef00 	call	8001ef0 <clock>
 80012e8:	e0bfd515 	stw	r2,-172(fp)

	WRITE_FIFO_SUB(0, IN_BASE_1to2A, CONTROL_BASE_1to2A);
 80012ec:	0009883a 	mov	r4,zero
 80012f0:	01440034 	movhi	r5,4096
 80012f4:	29444204 	addi	r5,r5,4360
 80012f8:	01840034 	movhi	r6,4096
 80012fc:	31841004 	addi	r6,r6,4160
 8001300:	80002580 	call	8000258 <WRITE_FIFO_SUB>
	WRITE_FIFO_SUB(0, IN_BASE_1to2B, CONTROL_BASE_1to2B);
 8001304:	0009883a 	mov	r4,zero
 8001308:	01440034 	movhi	r5,4096
 800130c:	29444104 	addi	r5,r5,4356
 8001310:	01840034 	movhi	r6,4096
 8001314:	31840804 	addi	r6,r6,4128
 8001318:	80002580 	call	8000258 <WRITE_FIFO_SUB>
	WRITE_FIFO_SUB(0, IN_BASE_1to2C, CONTROL_BASE_1to2C);
 800131c:	0009883a 	mov	r4,zero
 8001320:	01440034 	movhi	r5,4096
 8001324:	29444004 	addi	r5,r5,4352
 8001328:	01840034 	movhi	r6,4096
 800132c:	31840004 	addi	r6,r6,4096
 8001330:	80002580 	call	8000258 <WRITE_FIFO_SUB>

	double elapsed_time = (double)(end_time - start_time) / CLOCKS_PER_SEC;
 8001334:	e0ffd517 	ldw	r3,-172(fp)
 8001338:	e0bfd417 	ldw	r2,-176(fp)
 800133c:	1885c83a 	sub	r2,r3,r2
 8001340:	1009883a 	mov	r4,r2
 8001344:	80019500 	call	8001950 <__floatunsidf>
 8001348:	100b883a 	mov	r5,r2
 800134c:	180d883a 	mov	r6,r3
 8001350:	2809883a 	mov	r4,r5
 8001354:	300b883a 	mov	r5,r6
 8001358:	000d883a 	mov	r6,zero
 800135c:	01d023f4 	movhi	r7,16527
 8001360:	39d00004 	addi	r7,r7,16384
 8001364:	80016c80 	call	80016c8 <__divdf3>
 8001368:	1009883a 	mov	r4,r2
 800136c:	180b883a 	mov	r5,r3
 8001370:	e13fd615 	stw	r4,-168(fp)
 8001374:	e17fd715 	stw	r5,-164(fp)

	// Calculate the time taken for encoding in seconds

	// Calculate throughput in bytes per second
	double throughput = (double)imageDataSize / elapsed_time;
 8001378:	e13fd317 	ldw	r4,-180(fp)
 800137c:	800187c0 	call	800187c <__floatsidf>
 8001380:	100b883a 	mov	r5,r2
 8001384:	180d883a 	mov	r6,r3
 8001388:	2809883a 	mov	r4,r5
 800138c:	300b883a 	mov	r5,r6
 8001390:	e1bfd617 	ldw	r6,-168(fp)
 8001394:	e1ffd717 	ldw	r7,-164(fp)
 8001398:	80016c80 	call	80016c8 <__divdf3>
 800139c:	1009883a 	mov	r4,r2
 80013a0:	180b883a 	mov	r5,r3
 80013a4:	e13fd815 	stw	r4,-160(fp)
 80013a8:	e17fd915 	stw	r5,-156(fp)

	// Print the throughput
	// print the size
	printf("Image Size: %ld bytes\n", imageDataSize);
 80013ac:	01020074 	movhi	r4,2049
 80013b0:	21113104 	addi	r4,r4,17604
 80013b4:	e17fd317 	ldw	r5,-180(fp)
 80013b8:	80041640 	call	8004164 <printf>
	printf("Time taken for encoding: %f seconds\n", elapsed_time);
 80013bc:	01020074 	movhi	r4,2049
 80013c0:	21113704 	addi	r4,r4,17628
 80013c4:	e17fd617 	ldw	r5,-168(fp)
 80013c8:	e1bfd717 	ldw	r6,-164(fp)
 80013cc:	80041640 	call	8004164 <printf>
	printf("Throughput: %.2f bytes per second\n", throughput);
 80013d0:	01020074 	movhi	r4,2049
 80013d4:	21114104 	addi	r4,r4,17668
 80013d8:	e17fd817 	ldw	r5,-160(fp)
 80013dc:	e1bfd917 	ldw	r6,-156(fp)
 80013e0:	80041640 	call	8004164 <printf>

	free(data);
 80013e4:	e13fd017 	ldw	r4,-192(fp)
 80013e8:	80037180 	call	8003718 <free>
	fclose(fpt);
 80013ec:	e13fd217 	ldw	r4,-184(fp)
 80013f0:	80020780 	call	8002078 <fclose>
	// fclose(log_file);

	return 0;
 80013f4:	0005883a 	mov	r2,zero
}
 80013f8:	e037883a 	mov	sp,fp
 80013fc:	dfc00117 	ldw	ra,4(sp)
 8001400:	df000017 	ldw	fp,0(sp)
 8001404:	dec00204 	addi	sp,sp,8
 8001408:	f800283a 	ret

0800140c <main>:
#include "datatype.h"
#include "encoder.h"
#include "FIFO.h"

int main(int argc, char *argv[])
{
 800140c:	deffce04 	addi	sp,sp,-200
 8001410:	dfc03115 	stw	ra,196(sp)
 8001414:	df003015 	stw	fp,192(sp)
 8001418:	df003004 	addi	fp,sp,192
 800141c:	e13ffe15 	stw	r4,-8(fp)
 8001420:	e17fff15 	stw	r5,-4(fp)

	INT8 input_file_name[150];
	FILE *fp;
	UINT32 quality_factor, image_width, image_height;

	delay(100000);
 8001424:	010000b4 	movhi	r4,2
 8001428:	2121a804 	addi	r4,r4,-31072
 800142c:	800035c0 	call	800035c <delay>
	FIFO_INIT(CONTROL_BASE_1to2A);
 8001430:	01040034 	movhi	r4,4096
 8001434:	21041004 	addi	r4,r4,4160
 8001438:	800031c0 	call	800031c <FIFO_INIT>
	delay(100000);
 800143c:	010000b4 	movhi	r4,2
 8001440:	2121a804 	addi	r4,r4,-31072
 8001444:	800035c0 	call	800035c <delay>
	FIFO_INIT(CONTROL_BASE_1to2B);
 8001448:	01040034 	movhi	r4,4096
 800144c:	21040804 	addi	r4,r4,4128
 8001450:	800031c0 	call	800031c <FIFO_INIT>
	delay(100000);
 8001454:	010000b4 	movhi	r4,2
 8001458:	2121a804 	addi	r4,r4,-31072
 800145c:	800035c0 	call	800035c <delay>
	FIFO_INIT(CONTROL_BASE_1to2C);
 8001460:	01040034 	movhi	r4,4096
 8001464:	21040004 	addi	r4,r4,4096
 8001468:	800031c0 	call	800031c <FIFO_INIT>
	delay(100000);
 800146c:	010000b4 	movhi	r4,2
 8001470:	2121a804 	addi	r4,r4,-31072
 8001474:	800035c0 	call	800035c <delay>
	FIFO_INIT(CONTROL_BASE_1to4);
 8001478:	01040034 	movhi	r4,4096
 800147c:	21042804 	addi	r4,r4,4256
 8001480:	800031c0 	call	800031c <FIFO_INIT>
	delay(100000);
 8001484:	010000b4 	movhi	r4,2
 8001488:	2121a804 	addi	r4,r4,-31072
 800148c:	800035c0 	call	800035c <delay>
	FIFO_INIT(CONTROL_BASE_1to5);
 8001490:	01040034 	movhi	r4,4096
 8001494:	21042004 	addi	r4,r4,4224
 8001498:	800031c0 	call	800031c <FIFO_INIT>
	delay(100000);
 800149c:	010000b4 	movhi	r4,2
 80014a0:	2121a804 	addi	r4,r4,-31072
 80014a4:	800035c0 	call	800035c <delay>
	FIFO_INIT(CONTROL_BASE_1to6);
 80014a8:	01040034 	movhi	r4,4096
 80014ac:	21041804 	addi	r4,r4,4192
 80014b0:	800031c0 	call	800031c <FIFO_INIT>
	delay(100000);
 80014b4:	010000b4 	movhi	r4,2
 80014b8:	2121a804 	addi	r4,r4,-31072
 80014bc:	800035c0 	call	800035c <delay>

	printf("Starting CPU1\n");
 80014c0:	01020074 	movhi	r4,2049
 80014c4:	21114a04 	addi	r4,r4,17704
 80014c8:	80042480 	call	8004248 <puts>

	fp = fopen("/mnt/host/files/param.txt", "r");
 80014cc:	01020074 	movhi	r4,2049
 80014d0:	21114e04 	addi	r4,r4,17720
 80014d4:	01420074 	movhi	r5,2049
 80014d8:	29515504 	addi	r5,r5,17748
 80014dc:	80026c00 	call	80026c0 <fopen>
 80014e0:	e0bfd315 	stw	r2,-180(fp)

	if (fp == NULL)
 80014e4:	e0bfd317 	ldw	r2,-180(fp)
 80014e8:	10000c1e 	bne	r2,zero,800151c <main+0x110>
	{
		fprintf(stderr, "Error opening parameter file\n");
 80014ec:	00820074 	movhi	r2,2049
 80014f0:	10999c04 	addi	r2,r2,26224
 80014f4:	10800017 	ldw	r2,0(r2)
 80014f8:	10800317 	ldw	r2,12(r2)
 80014fc:	01020074 	movhi	r4,2049
 8001500:	21115604 	addi	r4,r4,17752
 8001504:	01400044 	movi	r5,1
 8001508:	01800744 	movi	r6,29
 800150c:	100f883a 	mov	r7,r2
 8001510:	800351c0 	call	800351c <fwrite>
		return 1;
 8001514:	00800044 	movi	r2,1
 8001518:	00006606 	br	80016b4 <main+0x2a8>
	}

	int img_count = 0;
 800151c:	e03fd115 	stw	zero,-188(fp)

	while (fscanf(fp, "%s", input_file_name) != EOF)
 8001520:	00005606 	br	800167c <main+0x270>
	{

		printf("\nReading from file: %s\n", input_file_name);
 8001524:	e0bfd404 	addi	r2,fp,-176
 8001528:	01020074 	movhi	r4,2049
 800152c:	21115e04 	addi	r4,r4,17784
 8001530:	100b883a 	mov	r5,r2
 8001534:	80041640 	call	8004164 <printf>

		fscanf(fp, "%d", &quality_factor);
 8001538:	e0bffa04 	addi	r2,fp,-24
 800153c:	e13fd317 	ldw	r4,-180(fp)
 8001540:	01420074 	movhi	r5,2049
 8001544:	29516404 	addi	r5,r5,17808
 8001548:	100d883a 	mov	r6,r2
 800154c:	8002db00 	call	8002db0 <fscanf>
		fscanf(fp, "%d", &image_width);
 8001550:	e0bffb04 	addi	r2,fp,-20
 8001554:	e13fd317 	ldw	r4,-180(fp)
 8001558:	01420074 	movhi	r5,2049
 800155c:	29516404 	addi	r5,r5,17808
 8001560:	100d883a 	mov	r6,r2
 8001564:	8002db00 	call	8002db0 <fscanf>
		fscanf(fp, "%d", &image_height);
 8001568:	e0bffc04 	addi	r2,fp,-16
 800156c:	e13fd317 	ldw	r4,-180(fp)
 8001570:	01420074 	movhi	r5,2049
 8001574:	29516404 	addi	r5,r5,17808
 8001578:	100d883a 	mov	r6,r2
 800157c:	8002db00 	call	8002db0 <fscanf>

		printf("Quality Factor: %d\n", quality_factor);
 8001580:	e0bffa17 	ldw	r2,-24(fp)
 8001584:	01020074 	movhi	r4,2049
 8001588:	21116504 	addi	r4,r4,17812
 800158c:	100b883a 	mov	r5,r2
 8001590:	80041640 	call	8004164 <printf>
		printf("Image Width: %d\n", image_width);
 8001594:	e0bffb17 	ldw	r2,-20(fp)
 8001598:	01020074 	movhi	r4,2049
 800159c:	21112204 	addi	r4,r4,17544
 80015a0:	100b883a 	mov	r5,r2
 80015a4:	80041640 	call	8004164 <printf>
		printf("Image Height: %d\n", image_height);
 80015a8:	e0bffc17 	ldw	r2,-16(fp)
 80015ac:	01020074 	movhi	r4,2049
 80015b0:	21112704 	addi	r4,r4,17564
 80015b4:	100b883a 	mov	r5,r2
 80015b8:	80041640 	call	8004164 <printf>

		// send the name to cpu6
		INT8 out;
		INT8 *filename = input_file_name;
 80015bc:	e0bfd404 	addi	r2,fp,-176
 80015c0:	e0bfd215 	stw	r2,-184(fp)
		while (*filename != '\0')
 80015c4:	00000d06 	br	80015fc <main+0x1f0>
		{
			out = *filename;
 80015c8:	e0bfd217 	ldw	r2,-184(fp)
 80015cc:	10800003 	ldbu	r2,0(r2)
 80015d0:	e0bffd05 	stb	r2,-12(fp)
			WRITE_FIFO(&out, IN_BASE_1to6, CONTROL_BASE_1to6);
 80015d4:	e0bffd04 	addi	r2,fp,-12
 80015d8:	1009883a 	mov	r4,r2
 80015dc:	01440034 	movhi	r5,4096
 80015e0:	29444304 	addi	r5,r5,4364
 80015e4:	01840034 	movhi	r6,4096
 80015e8:	31841804 	addi	r6,r6,4192
 80015ec:	80001f40 	call	80001f4 <WRITE_FIFO>
			filename++;
 80015f0:	e0bfd217 	ldw	r2,-184(fp)
 80015f4:	10800044 	addi	r2,r2,1
 80015f8:	e0bfd215 	stw	r2,-184(fp)
		printf("Image Height: %d\n", image_height);

		// send the name to cpu6
		INT8 out;
		INT8 *filename = input_file_name;
		while (*filename != '\0')
 80015fc:	e0bfd217 	ldw	r2,-184(fp)
 8001600:	10800003 	ldbu	r2,0(r2)
 8001604:	10803fcc 	andi	r2,r2,255
 8001608:	1080201c 	xori	r2,r2,128
 800160c:	10bfe004 	addi	r2,r2,-128
 8001610:	103fed1e 	bne	r2,zero,80015c8 <main+0x1bc>
		{
			out = *filename;
			WRITE_FIFO(&out, IN_BASE_1to6, CONTROL_BASE_1to6);
			filename++;
		}
		out = '\0';
 8001614:	e03ffd05 	stb	zero,-12(fp)
		WRITE_FIFO(&out, IN_BASE_1to6, CONTROL_BASE_1to6);
 8001618:	e0bffd04 	addi	r2,fp,-12
 800161c:	1009883a 	mov	r4,r2
 8001620:	01440034 	movhi	r5,4096
 8001624:	29444304 	addi	r5,r5,4364
 8001628:	01840034 	movhi	r6,4096
 800162c:	31841804 	addi	r6,r6,4192
 8001630:	80001f40 	call	80001f4 <WRITE_FIFO>

		printf("Name Send\n");
 8001634:	01020074 	movhi	r4,2049
 8001638:	21116a04 	addi	r4,r4,17832
 800163c:	80042480 	call	8004248 <puts>

		encode_image(input_file_name, quality_factor, image_width, image_height, img_count);
 8001640:	e17ffa17 	ldw	r5,-24(fp)
 8001644:	e0fffb17 	ldw	r3,-20(fp)
 8001648:	e0bffc17 	ldw	r2,-16(fp)
 800164c:	e1bfd117 	ldw	r6,-188(fp)
 8001650:	e13fd404 	addi	r4,fp,-176
 8001654:	d9800015 	stw	r6,0(sp)
 8001658:	180d883a 	mov	r6,r3
 800165c:	100f883a 	mov	r7,r2
 8001660:	8000eec0 	call	8000eec <encode_image>

		printf("End of the Image!\n");
 8001664:	01020074 	movhi	r4,2049
 8001668:	21116d04 	addi	r4,r4,17844
 800166c:	80042480 	call	8004248 <puts>

		img_count++;
 8001670:	e0bfd117 	ldw	r2,-188(fp)
 8001674:	10800044 	addi	r2,r2,1
 8001678:	e0bfd115 	stw	r2,-188(fp)
		return 1;
	}

	int img_count = 0;

	while (fscanf(fp, "%s", input_file_name) != EOF)
 800167c:	e0bfd404 	addi	r2,fp,-176
 8001680:	e13fd317 	ldw	r4,-180(fp)
 8001684:	01420074 	movhi	r5,2049
 8001688:	29517204 	addi	r5,r5,17864
 800168c:	100d883a 	mov	r6,r2
 8001690:	8002db00 	call	8002db0 <fscanf>
 8001694:	10bfffd8 	cmpnei	r2,r2,-1
 8001698:	103fa21e 	bne	r2,zero,8001524 <main+0x118>
		printf("End of the Image!\n");

		img_count++;
	}

	fclose(fp);
 800169c:	e13fd317 	ldw	r4,-180(fp)
 80016a0:	80020780 	call	8002078 <fclose>

	printf("\nDone!\n");
 80016a4:	01020074 	movhi	r4,2049
 80016a8:	21117304 	addi	r4,r4,17868
 80016ac:	80042480 	call	8004248 <puts>

	return 0;
 80016b0:	0005883a 	mov	r2,zero
}
 80016b4:	e037883a 	mov	sp,fp
 80016b8:	dfc00117 	ldw	ra,4(sp)
 80016bc:	df000017 	ldw	fp,0(sp)
 80016c0:	dec00204 	addi	sp,sp,8
 80016c4:	f800283a 	ret

080016c8 <__divdf3>:
 80016c8:	defff104 	addi	sp,sp,-60
 80016cc:	d9000c15 	stw	r4,48(sp)
 80016d0:	d9400d15 	stw	r5,52(sp)
 80016d4:	d9000c04 	addi	r4,sp,48
 80016d8:	d9400504 	addi	r5,sp,20
 80016dc:	dfc00e15 	stw	ra,56(sp)
 80016e0:	d9800a15 	stw	r6,40(sp)
 80016e4:	d9c00b15 	stw	r7,44(sp)
 80016e8:	8001d640 	call	8001d64 <__unpack_d>
 80016ec:	d9000a04 	addi	r4,sp,40
 80016f0:	d80b883a 	mov	r5,sp
 80016f4:	8001d640 	call	8001d64 <__unpack_d>
 80016f8:	d8c00517 	ldw	r3,20(sp)
 80016fc:	00800044 	movi	r2,1
 8001700:	10c00536 	bltu	r2,r3,8001718 <__divdf3+0x50>
 8001704:	d9000504 	addi	r4,sp,20
 8001708:	8001b400 	call	8001b40 <__pack_d>
 800170c:	dfc00e17 	ldw	ra,56(sp)
 8001710:	dec00f04 	addi	sp,sp,60
 8001714:	f800283a 	ret
 8001718:	d9000017 	ldw	r4,0(sp)
 800171c:	11000536 	bltu	r2,r4,8001734 <__divdf3+0x6c>
 8001720:	d809883a 	mov	r4,sp
 8001724:	8001b400 	call	8001b40 <__pack_d>
 8001728:	dfc00e17 	ldw	ra,56(sp)
 800172c:	dec00f04 	addi	sp,sp,60
 8001730:	f800283a 	ret
 8001734:	d9800617 	ldw	r6,24(sp)
 8001738:	d9400117 	ldw	r5,4(sp)
 800173c:	00800104 	movi	r2,4
 8001740:	314af03a 	xor	r5,r6,r5
 8001744:	d9400615 	stw	r5,24(sp)
 8001748:	18800226 	beq	r3,r2,8001754 <__divdf3+0x8c>
 800174c:	01400084 	movi	r5,2
 8001750:	1940041e 	bne	r3,r5,8001764 <__divdf3+0x9c>
 8001754:	193feb1e 	bne	r3,r4,8001704 <__divdf3+0x3c>
 8001758:	01020074 	movhi	r4,2049
 800175c:	21117504 	addi	r4,r4,17876
 8001760:	003fe906 	br	8001708 <__divdf3+0x40>
 8001764:	20803326 	beq	r4,r2,8001834 <__divdf3+0x16c>
 8001768:	21403726 	beq	r4,r5,8001848 <__divdf3+0x180>
 800176c:	d8800217 	ldw	r2,8(sp)
 8001770:	d9000717 	ldw	r4,28(sp)
 8001774:	d8c00917 	ldw	r3,36(sp)
 8001778:	da000417 	ldw	r8,16(sp)
 800177c:	2089c83a 	sub	r4,r4,r2
 8001780:	d9000715 	stw	r4,28(sp)
 8001784:	d8800817 	ldw	r2,32(sp)
 8001788:	dbc00317 	ldw	r15,12(sp)
 800178c:	1a000236 	bltu	r3,r8,8001798 <__divdf3+0xd0>
 8001790:	40c0081e 	bne	r8,r3,80017b4 <__divdf3+0xec>
 8001794:	13c0072e 	bgeu	r2,r15,80017b4 <__divdf3+0xec>
 8001798:	108b883a 	add	r5,r2,r2
 800179c:	288d803a 	cmpltu	r6,r5,r2
 80017a0:	18c7883a 	add	r3,r3,r3
 80017a4:	213fffc4 	addi	r4,r4,-1
 80017a8:	2805883a 	mov	r2,r5
 80017ac:	30c7883a 	add	r3,r6,r3
 80017b0:	d9000715 	stw	r4,28(sp)
 80017b4:	01400f44 	movi	r5,61
 80017b8:	000f883a 	mov	r7,zero
 80017bc:	01040034 	movhi	r4,4096
 80017c0:	0019883a 	mov	r12,zero
 80017c4:	001b883a 	mov	r13,zero
 80017c8:	201697fa 	slli	r11,r4,31
 80017cc:	3814d07a 	srli	r10,r7,1
 80017d0:	297fffc4 	addi	r5,r5,-1
 80017d4:	1a000936 	bltu	r3,r8,80017fc <__divdf3+0x134>
 80017d8:	13cdc83a 	sub	r6,r2,r15
 80017dc:	1193803a 	cmpltu	r9,r2,r6
 80017e0:	1a1dc83a 	sub	r14,r3,r8
 80017e4:	40c0011e 	bne	r8,r3,80017ec <__divdf3+0x124>
 80017e8:	13c00436 	bltu	r2,r15,80017fc <__divdf3+0x134>
 80017ec:	3005883a 	mov	r2,r6
 80017f0:	7247c83a 	sub	r3,r14,r9
 80017f4:	61d8b03a 	or	r12,r12,r7
 80017f8:	691ab03a 	or	r13,r13,r4
 80017fc:	108d883a 	add	r6,r2,r2
 8001800:	3093803a 	cmpltu	r9,r6,r2
 8001804:	18c7883a 	add	r3,r3,r3
 8001808:	5a8eb03a 	or	r7,r11,r10
 800180c:	2008d07a 	srli	r4,r4,1
 8001810:	3005883a 	mov	r2,r6
 8001814:	48c7883a 	add	r3,r9,r3
 8001818:	283feb1e 	bne	r5,zero,80017c8 <__divdf3+0x100>
 800181c:	61003fcc 	andi	r4,r12,255
 8001820:	01402004 	movi	r5,128
 8001824:	21400b26 	beq	r4,r5,8001854 <__divdf3+0x18c>
 8001828:	db000815 	stw	r12,32(sp)
 800182c:	db400915 	stw	r13,36(sp)
 8001830:	003fb406 	br	8001704 <__divdf3+0x3c>
 8001834:	d8000815 	stw	zero,32(sp)
 8001838:	d8000915 	stw	zero,36(sp)
 800183c:	d8000715 	stw	zero,28(sp)
 8001840:	d9000504 	addi	r4,sp,20
 8001844:	003fb006 	br	8001708 <__divdf3+0x40>
 8001848:	d8800515 	stw	r2,20(sp)
 800184c:	d9000504 	addi	r4,sp,20
 8001850:	003fad06 	br	8001708 <__divdf3+0x40>
 8001854:	6140400c 	andi	r5,r12,256
 8001858:	283ff31e 	bne	r5,zero,8001828 <__divdf3+0x160>
 800185c:	30c4b03a 	or	r2,r6,r3
 8001860:	103ff126 	beq	r2,zero,8001828 <__divdf3+0x160>
 8001864:	6109883a 	add	r4,r12,r4
 8001868:	2305803a 	cmpltu	r2,r4,r12
 800186c:	033fc004 	movi	r12,-256
 8001870:	2318703a 	and	r12,r4,r12
 8001874:	135b883a 	add	r13,r2,r13
 8001878:	003feb06 	br	8001828 <__divdf3+0x160>

0800187c <__floatsidf>:
 800187c:	2004d7fa 	srli	r2,r4,31
 8001880:	defff904 	addi	sp,sp,-28
 8001884:	00c000c4 	movi	r3,3
 8001888:	dfc00615 	stw	ra,24(sp)
 800188c:	dc000515 	stw	r16,20(sp)
 8001890:	d8c00015 	stw	r3,0(sp)
 8001894:	d8800115 	stw	r2,4(sp)
 8001898:	2000081e 	bne	r4,zero,80018bc <__floatsidf+0x40>
 800189c:	00800084 	movi	r2,2
 80018a0:	d8800015 	stw	r2,0(sp)
 80018a4:	d809883a 	mov	r4,sp
 80018a8:	8001b400 	call	8001b40 <__pack_d>
 80018ac:	dfc00617 	ldw	ra,24(sp)
 80018b0:	dc000517 	ldw	r16,20(sp)
 80018b4:	dec00704 	addi	sp,sp,28
 80018b8:	f800283a 	ret
 80018bc:	00c00f04 	movi	r3,60
 80018c0:	d8c00215 	stw	r3,8(sp)
 80018c4:	10000f1e 	bne	r2,zero,8001904 <__floatsidf+0x88>
 80018c8:	2021883a 	mov	r16,r4
 80018cc:	8009883a 	mov	r4,r16
 80018d0:	8001a940 	call	8001a94 <__clzsi2>
 80018d4:	11000744 	addi	r4,r2,29
 80018d8:	0100110e 	bge	zero,r4,8001920 <__floatsidf+0xa4>
 80018dc:	10ffff44 	addi	r3,r2,-3
 80018e0:	18001216 	blt	r3,zero,800192c <__floatsidf+0xb0>
 80018e4:	80c6983a 	sll	r3,r16,r3
 80018e8:	0009883a 	mov	r4,zero
 80018ec:	014007c4 	movi	r5,31
 80018f0:	2885c83a 	sub	r2,r5,r2
 80018f4:	d9000315 	stw	r4,12(sp)
 80018f8:	d8c00415 	stw	r3,16(sp)
 80018fc:	d8800215 	stw	r2,8(sp)
 8001900:	003fe806 	br	80018a4 <__floatsidf+0x28>
 8001904:	00a00034 	movhi	r2,32768
 8001908:	20800e26 	beq	r4,r2,8001944 <__floatsidf+0xc8>
 800190c:	0121c83a 	sub	r16,zero,r4
 8001910:	8009883a 	mov	r4,r16
 8001914:	8001a940 	call	8001a94 <__clzsi2>
 8001918:	11000744 	addi	r4,r2,29
 800191c:	013fef16 	blt	zero,r4,80018dc <__floatsidf+0x60>
 8001920:	dc000315 	stw	r16,12(sp)
 8001924:	d8000415 	stw	zero,16(sp)
 8001928:	003fde06 	br	80018a4 <__floatsidf+0x28>
 800192c:	800ad07a 	srli	r5,r16,1
 8001930:	00c007c4 	movi	r3,31
 8001934:	1907c83a 	sub	r3,r3,r4
 8001938:	28c6d83a 	srl	r3,r5,r3
 800193c:	8108983a 	sll	r4,r16,r4
 8001940:	003fea06 	br	80018ec <__floatsidf+0x70>
 8001944:	0005883a 	mov	r2,zero
 8001948:	00f07834 	movhi	r3,49632
 800194c:	003fd706 	br	80018ac <__floatsidf+0x30>

08001950 <__floatunsidf>:
 8001950:	defff904 	addi	sp,sp,-28
 8001954:	dc000515 	stw	r16,20(sp)
 8001958:	dfc00615 	stw	ra,24(sp)
 800195c:	d8000115 	stw	zero,4(sp)
 8001960:	2021883a 	mov	r16,r4
 8001964:	20001726 	beq	r4,zero,80019c4 <__floatunsidf+0x74>
 8001968:	008000c4 	movi	r2,3
 800196c:	d8800015 	stw	r2,0(sp)
 8001970:	00800f04 	movi	r2,60
 8001974:	d8800215 	stw	r2,8(sp)
 8001978:	8001a940 	call	8001a94 <__clzsi2>
 800197c:	10c00744 	addi	r3,r2,29
 8001980:	18001816 	blt	r3,zero,80019e4 <__floatunsidf+0x94>
 8001984:	18002d26 	beq	r3,zero,8001a3c <__floatunsidf+0xec>
 8001988:	113fff44 	addi	r4,r2,-3
 800198c:	20002e16 	blt	r4,zero,8001a48 <__floatunsidf+0xf8>
 8001990:	8108983a 	sll	r4,r16,r4
 8001994:	0021883a 	mov	r16,zero
 8001998:	014007c4 	movi	r5,31
 800199c:	2885c83a 	sub	r2,r5,r2
 80019a0:	dc000315 	stw	r16,12(sp)
 80019a4:	d9000415 	stw	r4,16(sp)
 80019a8:	d8800215 	stw	r2,8(sp)
 80019ac:	d809883a 	mov	r4,sp
 80019b0:	8001b400 	call	8001b40 <__pack_d>
 80019b4:	dfc00617 	ldw	ra,24(sp)
 80019b8:	dc000517 	ldw	r16,20(sp)
 80019bc:	dec00704 	addi	sp,sp,28
 80019c0:	f800283a 	ret
 80019c4:	00800084 	movi	r2,2
 80019c8:	d809883a 	mov	r4,sp
 80019cc:	d8800015 	stw	r2,0(sp)
 80019d0:	8001b400 	call	8001b40 <__pack_d>
 80019d4:	dfc00617 	ldw	ra,24(sp)
 80019d8:	dc000517 	ldw	r16,20(sp)
 80019dc:	dec00704 	addi	sp,sp,28
 80019e0:	f800283a 	ret
 80019e4:	00c7c83a 	sub	r3,zero,r3
 80019e8:	193ff804 	addi	r4,r3,-32
 80019ec:	20001c16 	blt	r4,zero,8001a60 <__floatunsidf+0x110>
 80019f0:	000b883a 	mov	r5,zero
 80019f4:	2009d7fa 	srai	r4,r4,31
 80019f8:	80c6d83a 	srl	r3,r16,r3
 80019fc:	297fffc4 	addi	r5,r5,-1
 8001a00:	2c20703a 	and	r16,r5,r16
 8001a04:	8020c03a 	cmpne	r16,r16,zero
 8001a08:	1906703a 	and	r3,r3,r4
 8001a0c:	010007c4 	movi	r4,31
 8001a10:	80c6b03a 	or	r3,r16,r3
 8001a14:	2085c83a 	sub	r2,r4,r2
 8001a18:	d809883a 	mov	r4,sp
 8001a1c:	d8c00315 	stw	r3,12(sp)
 8001a20:	d8000415 	stw	zero,16(sp)
 8001a24:	d8800215 	stw	r2,8(sp)
 8001a28:	8001b400 	call	8001b40 <__pack_d>
 8001a2c:	dfc00617 	ldw	ra,24(sp)
 8001a30:	dc000517 	ldw	r16,20(sp)
 8001a34:	dec00704 	addi	sp,sp,28
 8001a38:	f800283a 	ret
 8001a3c:	dc000315 	stw	r16,12(sp)
 8001a40:	d8000415 	stw	zero,16(sp)
 8001a44:	003fd906 	br	80019ac <__floatunsidf+0x5c>
 8001a48:	800ad07a 	srli	r5,r16,1
 8001a4c:	010007c4 	movi	r4,31
 8001a50:	20c9c83a 	sub	r4,r4,r3
 8001a54:	2908d83a 	srl	r4,r5,r4
 8001a58:	80e0983a 	sll	r16,r16,r3
 8001a5c:	003fce06 	br	8001998 <__floatunsidf+0x48>
 8001a60:	01400044 	movi	r5,1
 8001a64:	28ca983a 	sll	r5,r5,r3
 8001a68:	003fe206 	br	80019f4 <__floatunsidf+0xa4>

08001a6c <__mulsi3>:
 8001a6c:	0005883a 	mov	r2,zero
 8001a70:	20000726 	beq	r4,zero,8001a90 <__mulsi3+0x24>
 8001a74:	20c0004c 	andi	r3,r4,1
 8001a78:	2008d07a 	srli	r4,r4,1
 8001a7c:	18000126 	beq	r3,zero,8001a84 <__mulsi3+0x18>
 8001a80:	1145883a 	add	r2,r2,r5
 8001a84:	294b883a 	add	r5,r5,r5
 8001a88:	203ffa1e 	bne	r4,zero,8001a74 <__mulsi3+0x8>
 8001a8c:	f800283a 	ret
 8001a90:	f800283a 	ret

08001a94 <__clzsi2>:
 8001a94:	00bfffd4 	movui	r2,65535
 8001a98:	11000b36 	bltu	r2,r4,8001ac8 <__clzsi2+0x34>
 8001a9c:	00803fc4 	movi	r2,255
 8001aa0:	11001e2e 	bgeu	r2,r4,8001b1c <__clzsi2+0x88>
 8001aa4:	00c00204 	movi	r3,8
 8001aa8:	20c8d83a 	srl	r4,r4,r3
 8001aac:	00c20074 	movhi	r3,2049
 8001ab0:	18d17a04 	addi	r3,r3,17896
 8001ab4:	00800604 	movi	r2,24
 8001ab8:	1909883a 	add	r4,r3,r4
 8001abc:	20c00003 	ldbu	r3,0(r4)
 8001ac0:	10c5c83a 	sub	r2,r2,r3
 8001ac4:	f800283a 	ret
 8001ac8:	00804034 	movhi	r2,256
 8001acc:	10bfffc4 	addi	r2,r2,-1
 8001ad0:	11000936 	bltu	r2,r4,8001af8 <__clzsi2+0x64>
 8001ad4:	00800404 	movi	r2,16
 8001ad8:	1007883a 	mov	r3,r2
 8001adc:	20c8d83a 	srl	r4,r4,r3
 8001ae0:	00c20074 	movhi	r3,2049
 8001ae4:	18d17a04 	addi	r3,r3,17896
 8001ae8:	1909883a 	add	r4,r3,r4
 8001aec:	20c00003 	ldbu	r3,0(r4)
 8001af0:	10c5c83a 	sub	r2,r2,r3
 8001af4:	f800283a 	ret
 8001af8:	00c00604 	movi	r3,24
 8001afc:	20c8d83a 	srl	r4,r4,r3
 8001b00:	00c20074 	movhi	r3,2049
 8001b04:	18d17a04 	addi	r3,r3,17896
 8001b08:	00800204 	movi	r2,8
 8001b0c:	1909883a 	add	r4,r3,r4
 8001b10:	20c00003 	ldbu	r3,0(r4)
 8001b14:	10c5c83a 	sub	r2,r2,r3
 8001b18:	f800283a 	ret
 8001b1c:	0007883a 	mov	r3,zero
 8001b20:	20c8d83a 	srl	r4,r4,r3
 8001b24:	00c20074 	movhi	r3,2049
 8001b28:	18d17a04 	addi	r3,r3,17896
 8001b2c:	00800804 	movi	r2,32
 8001b30:	1909883a 	add	r4,r3,r4
 8001b34:	20c00003 	ldbu	r3,0(r4)
 8001b38:	10c5c83a 	sub	r2,r2,r3
 8001b3c:	f800283a 	ret

08001b40 <__pack_d>:
 8001b40:	20800017 	ldw	r2,0(r4)
 8001b44:	defff804 	addi	sp,sp,-32
 8001b48:	dcc00315 	stw	r19,12(sp)
 8001b4c:	dc800215 	stw	r18,8(sp)
 8001b50:	dfc00715 	stw	ra,28(sp)
 8001b54:	dd800615 	stw	r22,24(sp)
 8001b58:	dd400515 	stw	r21,20(sp)
 8001b5c:	dd000415 	stw	r20,16(sp)
 8001b60:	dc400115 	stw	r17,4(sp)
 8001b64:	dc000015 	stw	r16,0(sp)
 8001b68:	04800044 	movi	r18,1
 8001b6c:	24400317 	ldw	r17,12(r4)
 8001b70:	24000417 	ldw	r16,16(r4)
 8001b74:	24c00117 	ldw	r19,4(r4)
 8001b78:	9080422e 	bgeu	r18,r2,8001c84 <__pack_d+0x144>
 8001b7c:	00c00104 	movi	r3,4
 8001b80:	10c03c26 	beq	r2,r3,8001c74 <__pack_d+0x134>
 8001b84:	00c00084 	movi	r3,2
 8001b88:	10c01926 	beq	r2,r3,8001bf0 <__pack_d+0xb0>
 8001b8c:	8c04b03a 	or	r2,r17,r16
 8001b90:	10001726 	beq	r2,zero,8001bf0 <__pack_d+0xb0>
 8001b94:	21000217 	ldw	r4,8(r4)
 8001b98:	00bf0084 	movi	r2,-1022
 8001b9c:	20804016 	blt	r4,r2,8001ca0 <__pack_d+0x160>
 8001ba0:	0080ffc4 	movi	r2,1023
 8001ba4:	11003316 	blt	r2,r4,8001c74 <__pack_d+0x134>
 8001ba8:	88803fcc 	andi	r2,r17,255
 8001bac:	00c02004 	movi	r3,128
 8001bb0:	10c02926 	beq	r2,r3,8001c58 <__pack_d+0x118>
 8001bb4:	88801fc4 	addi	r2,r17,127
 8001bb8:	1463803a 	cmpltu	r17,r2,r17
 8001bbc:	8c21883a 	add	r16,r17,r16
 8001bc0:	1023883a 	mov	r17,r2
 8001bc4:	00880034 	movhi	r2,8192
 8001bc8:	10bfffc4 	addi	r2,r2,-1
 8001bcc:	14001c36 	bltu	r2,r16,8001c40 <__pack_d+0x100>
 8001bd0:	2100ffc4 	addi	r4,r4,1023
 8001bd4:	8006963a 	slli	r3,r16,24
 8001bd8:	8804d23a 	srli	r2,r17,8
 8001bdc:	8020913a 	slli	r16,r16,4
 8001be0:	2101ffcc 	andi	r4,r4,2047
 8001be4:	1884b03a 	or	r2,r3,r2
 8001be8:	8020d33a 	srli	r16,r16,12
 8001bec:	00000306 	br	8001bfc <__pack_d+0xbc>
 8001bf0:	0009883a 	mov	r4,zero
 8001bf4:	0005883a 	mov	r2,zero
 8001bf8:	0021883a 	mov	r16,zero
 8001bfc:	2008953a 	slli	r4,r4,20
 8001c00:	982697fa 	slli	r19,r19,31
 8001c04:	00c00434 	movhi	r3,16
 8001c08:	18ffffc4 	addi	r3,r3,-1
 8001c0c:	80e0703a 	and	r16,r16,r3
 8001c10:	8106b03a 	or	r3,r16,r4
 8001c14:	1cc6b03a 	or	r3,r3,r19
 8001c18:	dfc00717 	ldw	ra,28(sp)
 8001c1c:	dd800617 	ldw	r22,24(sp)
 8001c20:	dd400517 	ldw	r21,20(sp)
 8001c24:	dd000417 	ldw	r20,16(sp)
 8001c28:	dcc00317 	ldw	r19,12(sp)
 8001c2c:	dc800217 	ldw	r18,8(sp)
 8001c30:	dc400117 	ldw	r17,4(sp)
 8001c34:	dc000017 	ldw	r16,0(sp)
 8001c38:	dec00804 	addi	sp,sp,32
 8001c3c:	f800283a 	ret
 8001c40:	800697fa 	slli	r3,r16,31
 8001c44:	8804d07a 	srli	r2,r17,1
 8001c48:	21010004 	addi	r4,r4,1024
 8001c4c:	8020d07a 	srli	r16,r16,1
 8001c50:	18a2b03a 	or	r17,r3,r2
 8001c54:	003fdf06 	br	8001bd4 <__pack_d+0x94>
 8001c58:	88c0400c 	andi	r3,r17,256
 8001c5c:	183fd926 	beq	r3,zero,8001bc4 <__pack_d+0x84>
 8001c60:	8885883a 	add	r2,r17,r2
 8001c64:	1463803a 	cmpltu	r17,r2,r17
 8001c68:	8c21883a 	add	r16,r17,r16
 8001c6c:	1023883a 	mov	r17,r2
 8001c70:	003fd406 	br	8001bc4 <__pack_d+0x84>
 8001c74:	0101ffc4 	movi	r4,2047
 8001c78:	0005883a 	mov	r2,zero
 8001c7c:	0021883a 	mov	r16,zero
 8001c80:	003fde06 	br	8001bfc <__pack_d+0xbc>
 8001c84:	84000234 	orhi	r16,r16,8
 8001c88:	00c00434 	movhi	r3,16
 8001c8c:	18ffffc4 	addi	r3,r3,-1
 8001c90:	8805883a 	mov	r2,r17
 8001c94:	80e0703a 	and	r16,r16,r3
 8001c98:	0101ffc4 	movi	r4,2047
 8001c9c:	003fd706 	br	8001bfc <__pack_d+0xbc>
 8001ca0:	1129c83a 	sub	r20,r2,r4
 8001ca4:	00800e04 	movi	r2,56
 8001ca8:	15002716 	blt	r2,r20,8001d48 <__pack_d+0x208>
 8001cac:	800b883a 	mov	r5,r16
 8001cb0:	a00d883a 	mov	r6,r20
 8001cb4:	8809883a 	mov	r4,r17
 8001cb8:	8001e680 	call	8001e68 <__lshrdi3>
 8001cbc:	9009883a 	mov	r4,r18
 8001cc0:	000b883a 	mov	r5,zero
 8001cc4:	a00d883a 	mov	r6,r20
 8001cc8:	102d883a 	mov	r22,r2
 8001ccc:	182b883a 	mov	r21,r3
 8001cd0:	8001eac0 	call	8001eac <__ashldi3>
 8001cd4:	1009003a 	cmpeq	r4,r2,zero
 8001cd8:	1907c83a 	sub	r3,r3,r4
 8001cdc:	10bfffc4 	addi	r2,r2,-1
 8001ce0:	1c20703a 	and	r16,r3,r16
 8001ce4:	1444703a 	and	r2,r2,r17
 8001ce8:	1404b03a 	or	r2,r2,r16
 8001cec:	1004c03a 	cmpne	r2,r2,zero
 8001cf0:	1584b03a 	or	r2,r2,r22
 8001cf4:	11003fcc 	andi	r4,r2,255
 8001cf8:	01402004 	movi	r5,128
 8001cfc:	a807883a 	mov	r3,r21
 8001d00:	2140131e 	bne	r4,r5,8001d50 <__pack_d+0x210>
 8001d04:	1140400c 	andi	r5,r2,256
 8001d08:	28000426 	beq	r5,zero,8001d1c <__pack_d+0x1dc>
 8001d0c:	1109883a 	add	r4,r2,r4
 8001d10:	2085803a 	cmpltu	r2,r4,r2
 8001d14:	1547883a 	add	r3,r2,r21
 8001d18:	2005883a 	mov	r2,r4
 8001d1c:	1808963a 	slli	r4,r3,24
 8001d20:	1004d23a 	srli	r2,r2,8
 8001d24:	1820913a 	slli	r16,r3,4
 8001d28:	01440034 	movhi	r5,4096
 8001d2c:	297fffc4 	addi	r5,r5,-1
 8001d30:	2084b03a 	or	r2,r4,r2
 8001d34:	8020d33a 	srli	r16,r16,12
 8001d38:	01000044 	movi	r4,1
 8001d3c:	28ffaf36 	bltu	r5,r3,8001bfc <__pack_d+0xbc>
 8001d40:	0009883a 	mov	r4,zero
 8001d44:	003fad06 	br	8001bfc <__pack_d+0xbc>
 8001d48:	0005883a 	mov	r2,zero
 8001d4c:	0007883a 	mov	r3,zero
 8001d50:	11001fc4 	addi	r4,r2,127
 8001d54:	2085803a 	cmpltu	r2,r4,r2
 8001d58:	10c7883a 	add	r3,r2,r3
 8001d5c:	2005883a 	mov	r2,r4
 8001d60:	003fee06 	br	8001d1c <__pack_d+0x1dc>

08001d64 <__unpack_d>:
 8001d64:	21800117 	ldw	r6,4(r4)
 8001d68:	20c00017 	ldw	r3,0(r4)
 8001d6c:	3004d7fa 	srli	r2,r6,31
 8001d70:	3008d53a 	srli	r4,r6,20
 8001d74:	28800115 	stw	r2,4(r5)
 8001d78:	2101ffcc 	andi	r4,r4,2047
 8001d7c:	00800434 	movhi	r2,16
 8001d80:	10bfffc4 	addi	r2,r2,-1
 8001d84:	3084703a 	and	r2,r6,r2
 8001d88:	20001a1e 	bne	r4,zero,8001df4 <__unpack_d+0x90>
 8001d8c:	1888b03a 	or	r4,r3,r2
 8001d90:	20002626 	beq	r4,zero,8001e2c <__unpack_d+0xc8>
 8001d94:	1808d63a 	srli	r4,r3,24
 8001d98:	1004923a 	slli	r2,r2,8
 8001d9c:	01bf0084 	movi	r6,-1022
 8001da0:	29800215 	stw	r6,8(r5)
 8001da4:	2084b03a 	or	r2,r4,r2
 8001da8:	010000c4 	movi	r4,3
 8001dac:	29000015 	stw	r4,0(r5)
 8001db0:	02040034 	movhi	r8,4096
 8001db4:	423fffc4 	addi	r8,r8,-1
 8001db8:	1806923a 	slli	r3,r3,8
 8001dbc:	40801836 	bltu	r8,r2,8001e20 <__unpack_d+0xbc>
 8001dc0:	013f0044 	movi	r4,-1023
 8001dc4:	18cd883a 	add	r6,r3,r3
 8001dc8:	30c7803a 	cmpltu	r3,r6,r3
 8001dcc:	1085883a 	add	r2,r2,r2
 8001dd0:	1885883a 	add	r2,r3,r2
 8001dd4:	200f883a 	mov	r7,r4
 8001dd8:	3007883a 	mov	r3,r6
 8001ddc:	213fffc4 	addi	r4,r4,-1
 8001de0:	40bff82e 	bgeu	r8,r2,8001dc4 <__unpack_d+0x60>
 8001de4:	29c00215 	stw	r7,8(r5)
 8001de8:	28c00315 	stw	r3,12(r5)
 8001dec:	28800415 	stw	r2,16(r5)
 8001df0:	f800283a 	ret
 8001df4:	01c1ffc4 	movi	r7,2047
 8001df8:	21c00f26 	beq	r4,r7,8001e38 <__unpack_d+0xd4>
 8001dfc:	180cd63a 	srli	r6,r3,24
 8001e00:	1004923a 	slli	r2,r2,8
 8001e04:	213f0044 	addi	r4,r4,-1023
 8001e08:	1806923a 	slli	r3,r3,8
 8001e0c:	3084b03a 	or	r2,r6,r2
 8001e10:	29000215 	stw	r4,8(r5)
 8001e14:	010000c4 	movi	r4,3
 8001e18:	10840034 	orhi	r2,r2,4096
 8001e1c:	29000015 	stw	r4,0(r5)
 8001e20:	28c00315 	stw	r3,12(r5)
 8001e24:	28800415 	stw	r2,16(r5)
 8001e28:	f800283a 	ret
 8001e2c:	00800084 	movi	r2,2
 8001e30:	28800015 	stw	r2,0(r5)
 8001e34:	f800283a 	ret
 8001e38:	1888b03a 	or	r4,r3,r2
 8001e3c:	20000526 	beq	r4,zero,8001e54 <__unpack_d+0xf0>
 8001e40:	3180022c 	andhi	r6,r6,8
 8001e44:	30000626 	beq	r6,zero,8001e60 <__unpack_d+0xfc>
 8001e48:	01000044 	movi	r4,1
 8001e4c:	29000015 	stw	r4,0(r5)
 8001e50:	003ff306 	br	8001e20 <__unpack_d+0xbc>
 8001e54:	00800104 	movi	r2,4
 8001e58:	28800015 	stw	r2,0(r5)
 8001e5c:	f800283a 	ret
 8001e60:	28000015 	stw	zero,0(r5)
 8001e64:	003fee06 	br	8001e20 <__unpack_d+0xbc>

08001e68 <__lshrdi3>:
 8001e68:	2005883a 	mov	r2,r4
 8001e6c:	2807883a 	mov	r3,r5
 8001e70:	30000826 	beq	r6,zero,8001e94 <__lshrdi3+0x2c>
 8001e74:	01000804 	movi	r4,32
 8001e78:	2189c83a 	sub	r4,r4,r6
 8001e7c:	0100060e 	bge	zero,r4,8001e98 <__lshrdi3+0x30>
 8001e80:	1184d83a 	srl	r2,r2,r6
 8001e84:	2908983a 	sll	r4,r5,r4
 8001e88:	298cd83a 	srl	r6,r5,r6
 8001e8c:	2084b03a 	or	r2,r4,r2
 8001e90:	3007883a 	mov	r3,r6
 8001e94:	f800283a 	ret
 8001e98:	0105c83a 	sub	r2,zero,r4
 8001e9c:	000d883a 	mov	r6,zero
 8001ea0:	2884d83a 	srl	r2,r5,r2
 8001ea4:	3007883a 	mov	r3,r6
 8001ea8:	003ffa06 	br	8001e94 <__lshrdi3+0x2c>

08001eac <__ashldi3>:
 8001eac:	2005883a 	mov	r2,r4
 8001eb0:	2807883a 	mov	r3,r5
 8001eb4:	30000826 	beq	r6,zero,8001ed8 <__ashldi3+0x2c>
 8001eb8:	01000804 	movi	r4,32
 8001ebc:	2189c83a 	sub	r4,r4,r6
 8001ec0:	0100060e 	bge	zero,r4,8001edc <__ashldi3+0x30>
 8001ec4:	1108d83a 	srl	r4,r2,r4
 8001ec8:	2986983a 	sll	r3,r5,r6
 8001ecc:	118c983a 	sll	r6,r2,r6
 8001ed0:	20c6b03a 	or	r3,r4,r3
 8001ed4:	3005883a 	mov	r2,r6
 8001ed8:	f800283a 	ret
 8001edc:	0107c83a 	sub	r3,zero,r4
 8001ee0:	000d883a 	mov	r6,zero
 8001ee4:	10c6983a 	sll	r3,r2,r3
 8001ee8:	3005883a 	mov	r2,r6
 8001eec:	003ffa06 	br	8001ed8 <__ashldi3+0x2c>

08001ef0 <clock>:
 8001ef0:	00820074 	movhi	r2,2049
 8001ef4:	10999c04 	addi	r2,r2,26224
 8001ef8:	11000017 	ldw	r4,0(r2)
 8001efc:	defffb04 	addi	sp,sp,-20
 8001f00:	d80b883a 	mov	r5,sp
 8001f04:	dfc00415 	stw	ra,16(sp)
 8001f08:	80047c00 	call	80047c0 <_times_r>
 8001f0c:	00ffffc4 	movi	r3,-1
 8001f10:	10c00726 	beq	r2,r3,8001f30 <clock+0x40>
 8001f14:	d8c00117 	ldw	r3,4(sp)
 8001f18:	d8800017 	ldw	r2,0(sp)
 8001f1c:	1885883a 	add	r2,r3,r2
 8001f20:	d8c00217 	ldw	r3,8(sp)
 8001f24:	10c5883a 	add	r2,r2,r3
 8001f28:	d8c00317 	ldw	r3,12(sp)
 8001f2c:	10c5883a 	add	r2,r2,r3
 8001f30:	dfc00417 	ldw	ra,16(sp)
 8001f34:	dec00504 	addi	sp,sp,20
 8001f38:	f800283a 	ret

08001f3c <_fclose_r>:
 8001f3c:	defffc04 	addi	sp,sp,-16
 8001f40:	dc400115 	stw	r17,4(sp)
 8001f44:	dc000015 	stw	r16,0(sp)
 8001f48:	dfc00315 	stw	ra,12(sp)
 8001f4c:	dc800215 	stw	r18,8(sp)
 8001f50:	2821883a 	mov	r16,r5
 8001f54:	2023883a 	mov	r17,r4
 8001f58:	28003426 	beq	r5,zero,800202c <_fclose_r+0xf0>
 8001f5c:	80025500 	call	8002550 <__sfp_lock_acquire>
 8001f60:	88000226 	beq	r17,zero,8001f6c <_fclose_r+0x30>
 8001f64:	88800e17 	ldw	r2,56(r17)
 8001f68:	10003826 	beq	r2,zero,800204c <_fclose_r+0x110>
 8001f6c:	8080030f 	ldh	r2,12(r16)
 8001f70:	10002526 	beq	r2,zero,8002008 <_fclose_r+0xcc>
 8001f74:	8809883a 	mov	r4,r17
 8001f78:	800b883a 	mov	r5,r16
 8001f7c:	800208c0 	call	800208c <_fflush_r>
 8001f80:	1025883a 	mov	r18,r2
 8001f84:	80800b17 	ldw	r2,44(r16)
 8001f88:	10000426 	beq	r2,zero,8001f9c <_fclose_r+0x60>
 8001f8c:	81400717 	ldw	r5,28(r16)
 8001f90:	8809883a 	mov	r4,r17
 8001f94:	103ee83a 	callr	r2
 8001f98:	10003516 	blt	r2,zero,8002070 <_fclose_r+0x134>
 8001f9c:	8080030b 	ldhu	r2,12(r16)
 8001fa0:	1080200c 	andi	r2,r2,128
 8001fa4:	10bfffcc 	andi	r2,r2,65535
 8001fa8:	10a0001c 	xori	r2,r2,32768
 8001fac:	10a00004 	addi	r2,r2,-32768
 8001fb0:	10002b1e 	bne	r2,zero,8002060 <_fclose_r+0x124>
 8001fb4:	81400c17 	ldw	r5,48(r16)
 8001fb8:	28000526 	beq	r5,zero,8001fd0 <_fclose_r+0x94>
 8001fbc:	80801004 	addi	r2,r16,64
 8001fc0:	28800226 	beq	r5,r2,8001fcc <_fclose_r+0x90>
 8001fc4:	8809883a 	mov	r4,r17
 8001fc8:	8002ae00 	call	8002ae0 <_free_r>
 8001fcc:	80000c15 	stw	zero,48(r16)
 8001fd0:	81401117 	ldw	r5,68(r16)
 8001fd4:	28000326 	beq	r5,zero,8001fe4 <_fclose_r+0xa8>
 8001fd8:	8809883a 	mov	r4,r17
 8001fdc:	8002ae00 	call	8002ae0 <_free_r>
 8001fe0:	80001115 	stw	zero,68(r16)
 8001fe4:	8000030d 	sth	zero,12(r16)
 8001fe8:	80025540 	call	8002554 <__sfp_lock_release>
 8001fec:	9005883a 	mov	r2,r18
 8001ff0:	dfc00317 	ldw	ra,12(sp)
 8001ff4:	dc800217 	ldw	r18,8(sp)
 8001ff8:	dc400117 	ldw	r17,4(sp)
 8001ffc:	dc000017 	ldw	r16,0(sp)
 8002000:	dec00404 	addi	sp,sp,16
 8002004:	f800283a 	ret
 8002008:	80025540 	call	8002554 <__sfp_lock_release>
 800200c:	0025883a 	mov	r18,zero
 8002010:	9005883a 	mov	r2,r18
 8002014:	dfc00317 	ldw	ra,12(sp)
 8002018:	dc800217 	ldw	r18,8(sp)
 800201c:	dc400117 	ldw	r17,4(sp)
 8002020:	dc000017 	ldw	r16,0(sp)
 8002024:	dec00404 	addi	sp,sp,16
 8002028:	f800283a 	ret
 800202c:	0025883a 	mov	r18,zero
 8002030:	9005883a 	mov	r2,r18
 8002034:	dfc00317 	ldw	ra,12(sp)
 8002038:	dc800217 	ldw	r18,8(sp)
 800203c:	dc400117 	ldw	r17,4(sp)
 8002040:	dc000017 	ldw	r16,0(sp)
 8002044:	dec00404 	addi	sp,sp,16
 8002048:	f800283a 	ret
 800204c:	8809883a 	mov	r4,r17
 8002050:	80023480 	call	8002348 <__sinit>
 8002054:	8080030f 	ldh	r2,12(r16)
 8002058:	103fc61e 	bne	r2,zero,8001f74 <_fclose_r+0x38>
 800205c:	003fea06 	br	8002008 <_fclose_r+0xcc>
 8002060:	81400417 	ldw	r5,16(r16)
 8002064:	8809883a 	mov	r4,r17
 8002068:	8002ae00 	call	8002ae0 <_free_r>
 800206c:	003fd106 	br	8001fb4 <_fclose_r+0x78>
 8002070:	04bfffc4 	movi	r18,-1
 8002074:	003fc906 	br	8001f9c <_fclose_r+0x60>

08002078 <fclose>:
 8002078:	00820074 	movhi	r2,2049
 800207c:	10999c04 	addi	r2,r2,26224
 8002080:	200b883a 	mov	r5,r4
 8002084:	11000017 	ldw	r4,0(r2)
 8002088:	8001f3c1 	jmpi	8001f3c <_fclose_r>

0800208c <_fflush_r>:
 800208c:	defffb04 	addi	sp,sp,-20
 8002090:	dcc00315 	stw	r19,12(sp)
 8002094:	dc400115 	stw	r17,4(sp)
 8002098:	dfc00415 	stw	ra,16(sp)
 800209c:	dc800215 	stw	r18,8(sp)
 80020a0:	dc000015 	stw	r16,0(sp)
 80020a4:	2027883a 	mov	r19,r4
 80020a8:	2823883a 	mov	r17,r5
 80020ac:	20000226 	beq	r4,zero,80020b8 <_fflush_r+0x2c>
 80020b0:	20800e17 	ldw	r2,56(r4)
 80020b4:	10005726 	beq	r2,zero,8002214 <_fflush_r+0x188>
 80020b8:	8880030b 	ldhu	r2,12(r17)
 80020bc:	10c0020c 	andi	r3,r2,8
 80020c0:	18ffffcc 	andi	r3,r3,65535
 80020c4:	18e0001c 	xori	r3,r3,32768
 80020c8:	18e00004 	addi	r3,r3,-32768
 80020cc:	1800311e 	bne	r3,zero,8002194 <_fflush_r+0x108>
 80020d0:	89000117 	ldw	r4,4(r17)
 80020d4:	10c20014 	ori	r3,r2,2048
 80020d8:	88c0030d 	sth	r3,12(r17)
 80020dc:	180b883a 	mov	r5,r3
 80020e0:	0100520e 	bge	zero,r4,800222c <_fflush_r+0x1a0>
 80020e4:	88c00a17 	ldw	r3,40(r17)
 80020e8:	18002226 	beq	r3,zero,8002174 <_fflush_r+0xe8>
 80020ec:	1084000c 	andi	r2,r2,4096
 80020f0:	10bfffcc 	andi	r2,r2,65535
 80020f4:	10a0001c 	xori	r2,r2,32768
 80020f8:	10a00004 	addi	r2,r2,-32768
 80020fc:	10004e26 	beq	r2,zero,8002238 <_fflush_r+0x1ac>
 8002100:	8c001417 	ldw	r16,80(r17)
 8002104:	2940010c 	andi	r5,r5,4
 8002108:	297fffcc 	andi	r5,r5,65535
 800210c:	2960001c 	xori	r5,r5,32768
 8002110:	29600004 	addi	r5,r5,-32768
 8002114:	28000626 	beq	r5,zero,8002130 <_fflush_r+0xa4>
 8002118:	89000117 	ldw	r4,4(r17)
 800211c:	88800c17 	ldw	r2,48(r17)
 8002120:	8121c83a 	sub	r16,r16,r4
 8002124:	10000226 	beq	r2,zero,8002130 <_fflush_r+0xa4>
 8002128:	88800f17 	ldw	r2,60(r17)
 800212c:	80a1c83a 	sub	r16,r16,r2
 8002130:	89400717 	ldw	r5,28(r17)
 8002134:	9809883a 	mov	r4,r19
 8002138:	800d883a 	mov	r6,r16
 800213c:	000f883a 	mov	r7,zero
 8002140:	183ee83a 	callr	r3
 8002144:	8080281e 	bne	r16,r2,80021e8 <_fflush_r+0x15c>
 8002148:	8880030b 	ldhu	r2,12(r17)
 800214c:	88c00417 	ldw	r3,16(r17)
 8002150:	88000115 	stw	zero,4(r17)
 8002154:	113dffcc 	andi	r4,r2,63487
 8002158:	1084000c 	andi	r2,r2,4096
 800215c:	10bfffcc 	andi	r2,r2,65535
 8002160:	10a0001c 	xori	r2,r2,32768
 8002164:	8900030d 	sth	r4,12(r17)
 8002168:	88c00015 	stw	r3,0(r17)
 800216c:	10a00004 	addi	r2,r2,-32768
 8002170:	10002c1e 	bne	r2,zero,8002224 <_fflush_r+0x198>
 8002174:	0005883a 	mov	r2,zero
 8002178:	dfc00417 	ldw	ra,16(sp)
 800217c:	dcc00317 	ldw	r19,12(sp)
 8002180:	dc800217 	ldw	r18,8(sp)
 8002184:	dc400117 	ldw	r17,4(sp)
 8002188:	dc000017 	ldw	r16,0(sp)
 800218c:	dec00504 	addi	sp,sp,20
 8002190:	f800283a 	ret
 8002194:	8c800417 	ldw	r18,16(r17)
 8002198:	903ff626 	beq	r18,zero,8002174 <_fflush_r+0xe8>
 800219c:	8c000017 	ldw	r16,0(r17)
 80021a0:	108000cc 	andi	r2,r2,3
 80021a4:	8c800015 	stw	r18,0(r17)
 80021a8:	84a1c83a 	sub	r16,r16,r18
 80021ac:	10001b1e 	bne	r2,zero,800221c <_fflush_r+0x190>
 80021b0:	88800517 	ldw	r2,20(r17)
 80021b4:	88800215 	stw	r2,8(r17)
 80021b8:	04000316 	blt	zero,r16,80021c8 <_fflush_r+0x13c>
 80021bc:	003fed06 	br	8002174 <_fflush_r+0xe8>
 80021c0:	90a5883a 	add	r18,r18,r2
 80021c4:	043feb0e 	bge	zero,r16,8002174 <_fflush_r+0xe8>
 80021c8:	88800917 	ldw	r2,36(r17)
 80021cc:	89400717 	ldw	r5,28(r17)
 80021d0:	800f883a 	mov	r7,r16
 80021d4:	900d883a 	mov	r6,r18
 80021d8:	9809883a 	mov	r4,r19
 80021dc:	103ee83a 	callr	r2
 80021e0:	80a1c83a 	sub	r16,r16,r2
 80021e4:	00bff616 	blt	zero,r2,80021c0 <_fflush_r+0x134>
 80021e8:	88c0030b 	ldhu	r3,12(r17)
 80021ec:	00bfffc4 	movi	r2,-1
 80021f0:	18c01014 	ori	r3,r3,64
 80021f4:	88c0030d 	sth	r3,12(r17)
 80021f8:	dfc00417 	ldw	ra,16(sp)
 80021fc:	dcc00317 	ldw	r19,12(sp)
 8002200:	dc800217 	ldw	r18,8(sp)
 8002204:	dc400117 	ldw	r17,4(sp)
 8002208:	dc000017 	ldw	r16,0(sp)
 800220c:	dec00504 	addi	sp,sp,20
 8002210:	f800283a 	ret
 8002214:	80023480 	call	8002348 <__sinit>
 8002218:	003fa706 	br	80020b8 <_fflush_r+0x2c>
 800221c:	0005883a 	mov	r2,zero
 8002220:	003fe406 	br	80021b4 <_fflush_r+0x128>
 8002224:	8c001415 	stw	r16,80(r17)
 8002228:	003fd206 	br	8002174 <_fflush_r+0xe8>
 800222c:	88c00f17 	ldw	r3,60(r17)
 8002230:	00ffac16 	blt	zero,r3,80020e4 <_fflush_r+0x58>
 8002234:	003fcf06 	br	8002174 <_fflush_r+0xe8>
 8002238:	89400717 	ldw	r5,28(r17)
 800223c:	9809883a 	mov	r4,r19
 8002240:	000d883a 	mov	r6,zero
 8002244:	01c00044 	movi	r7,1
 8002248:	183ee83a 	callr	r3
 800224c:	1021883a 	mov	r16,r2
 8002250:	00bfffc4 	movi	r2,-1
 8002254:	80800326 	beq	r16,r2,8002264 <_fflush_r+0x1d8>
 8002258:	8940030b 	ldhu	r5,12(r17)
 800225c:	88c00a17 	ldw	r3,40(r17)
 8002260:	003fa806 	br	8002104 <_fflush_r+0x78>
 8002264:	98c00017 	ldw	r3,0(r19)
 8002268:	00800744 	movi	r2,29
 800226c:	18bfde1e 	bne	r3,r2,80021e8 <_fflush_r+0x15c>
 8002270:	003fc006 	br	8002174 <_fflush_r+0xe8>

08002274 <fflush>:
 8002274:	200b883a 	mov	r5,r4
 8002278:	20000426 	beq	r4,zero,800228c <fflush+0x18>
 800227c:	00820074 	movhi	r2,2049
 8002280:	10999c04 	addi	r2,r2,26224
 8002284:	11000017 	ldw	r4,0(r2)
 8002288:	800208c1 	jmpi	800208c <_fflush_r>
 800228c:	00820074 	movhi	r2,2049
 8002290:	10999b04 	addi	r2,r2,26220
 8002294:	11000017 	ldw	r4,0(r2)
 8002298:	01420034 	movhi	r5,2048
 800229c:	29482304 	addi	r5,r5,8332
 80022a0:	80033b41 	jmpi	80033b4 <_fwalk_reent>

080022a4 <__fp_lock>:
 80022a4:	0005883a 	mov	r2,zero
 80022a8:	f800283a 	ret

080022ac <__fp_unlock>:
 80022ac:	0005883a 	mov	r2,zero
 80022b0:	f800283a 	ret

080022b4 <_cleanup_r>:
 80022b4:	01420034 	movhi	r5,2048
 80022b8:	29481e04 	addi	r5,r5,8312
 80022bc:	800330c1 	jmpi	800330c <_fwalk>

080022c0 <__sfmoreglue>:
 80022c0:	defffc04 	addi	sp,sp,-16
 80022c4:	dc800215 	stw	r18,8(sp)
 80022c8:	2825883a 	mov	r18,r5
 80022cc:	dc000015 	stw	r16,0(sp)
 80022d0:	01401704 	movi	r5,92
 80022d4:	2021883a 	mov	r16,r4
 80022d8:	9009883a 	mov	r4,r18
 80022dc:	dfc00315 	stw	ra,12(sp)
 80022e0:	dc400115 	stw	r17,4(sp)
 80022e4:	8001a6c0 	call	8001a6c <__mulsi3>
 80022e8:	8009883a 	mov	r4,r16
 80022ec:	11400304 	addi	r5,r2,12
 80022f0:	1023883a 	mov	r17,r2
 80022f4:	800372c0 	call	800372c <_malloc_r>
 80022f8:	1021883a 	mov	r16,r2
 80022fc:	10000726 	beq	r2,zero,800231c <__sfmoreglue+0x5c>
 8002300:	11000304 	addi	r4,r2,12
 8002304:	10000015 	stw	zero,0(r2)
 8002308:	14800115 	stw	r18,4(r2)
 800230c:	11000215 	stw	r4,8(r2)
 8002310:	000b883a 	mov	r5,zero
 8002314:	880d883a 	mov	r6,r17
 8002318:	8003ff00 	call	8003ff0 <memset>
 800231c:	8005883a 	mov	r2,r16
 8002320:	dfc00317 	ldw	ra,12(sp)
 8002324:	dc800217 	ldw	r18,8(sp)
 8002328:	dc400117 	ldw	r17,4(sp)
 800232c:	dc000017 	ldw	r16,0(sp)
 8002330:	dec00404 	addi	sp,sp,16
 8002334:	f800283a 	ret

08002338 <_cleanup>:
 8002338:	00820074 	movhi	r2,2049
 800233c:	10999b04 	addi	r2,r2,26220
 8002340:	11000017 	ldw	r4,0(r2)
 8002344:	80022b41 	jmpi	80022b4 <_cleanup_r>

08002348 <__sinit>:
 8002348:	20800e17 	ldw	r2,56(r4)
 800234c:	1000401e 	bne	r2,zero,8002450 <__sinit+0x108>
 8002350:	21400117 	ldw	r5,4(r4)
 8002354:	01820034 	movhi	r6,2048
 8002358:	3188ad04 	addi	r6,r6,8884
 800235c:	20c00217 	ldw	r3,8(r4)
 8002360:	21800f15 	stw	r6,60(r4)
 8002364:	2080bb04 	addi	r2,r4,748
 8002368:	02400044 	movi	r9,1
 800236c:	018000c4 	movi	r6,3
 8002370:	2180b915 	stw	r6,740(r4)
 8002374:	2080ba15 	stw	r2,744(r4)
 8002378:	22400e15 	stw	r9,56(r4)
 800237c:	20800317 	ldw	r2,12(r4)
 8002380:	2000b815 	stw	zero,736(r4)
 8002384:	02020034 	movhi	r8,2048
 8002388:	42113204 	addi	r8,r8,17608
 800238c:	01c20034 	movhi	r7,2048
 8002390:	39d14704 	addi	r7,r7,17692
 8002394:	01820034 	movhi	r6,2048
 8002398:	31916904 	addi	r6,r6,17828
 800239c:	01020034 	movhi	r4,2048
 80023a0:	21118004 	addi	r4,r4,17920
 80023a4:	02800104 	movi	r10,4
 80023a8:	28000015 	stw	zero,0(r5)
 80023ac:	28000115 	stw	zero,4(r5)
 80023b0:	28000215 	stw	zero,8(r5)
 80023b4:	2a80030d 	sth	r10,12(r5)
 80023b8:	2800038d 	sth	zero,14(r5)
 80023bc:	28000415 	stw	zero,16(r5)
 80023c0:	28000515 	stw	zero,20(r5)
 80023c4:	28000615 	stw	zero,24(r5)
 80023c8:	29400715 	stw	r5,28(r5)
 80023cc:	2a000815 	stw	r8,32(r5)
 80023d0:	29c00915 	stw	r7,36(r5)
 80023d4:	29800a15 	stw	r6,40(r5)
 80023d8:	29000b15 	stw	r4,44(r5)
 80023dc:	01400284 	movi	r5,10
 80023e0:	18000015 	stw	zero,0(r3)
 80023e4:	18000115 	stw	zero,4(r3)
 80023e8:	18000215 	stw	zero,8(r3)
 80023ec:	1940030d 	sth	r5,12(r3)
 80023f0:	1a40038d 	sth	r9,14(r3)
 80023f4:	18000415 	stw	zero,16(r3)
 80023f8:	18000515 	stw	zero,20(r3)
 80023fc:	18000615 	stw	zero,24(r3)
 8002400:	18c00715 	stw	r3,28(r3)
 8002404:	1a000815 	stw	r8,32(r3)
 8002408:	19c00915 	stw	r7,36(r3)
 800240c:	19800a15 	stw	r6,40(r3)
 8002410:	19000b15 	stw	r4,44(r3)
 8002414:	00c00484 	movi	r3,18
 8002418:	10c0030d 	sth	r3,12(r2)
 800241c:	00c00084 	movi	r3,2
 8002420:	10000015 	stw	zero,0(r2)
 8002424:	10000115 	stw	zero,4(r2)
 8002428:	10000215 	stw	zero,8(r2)
 800242c:	10c0038d 	sth	r3,14(r2)
 8002430:	10000415 	stw	zero,16(r2)
 8002434:	10000515 	stw	zero,20(r2)
 8002438:	10000615 	stw	zero,24(r2)
 800243c:	10800715 	stw	r2,28(r2)
 8002440:	12000815 	stw	r8,32(r2)
 8002444:	11c00915 	stw	r7,36(r2)
 8002448:	11800a15 	stw	r6,40(r2)
 800244c:	11000b15 	stw	r4,44(r2)
 8002450:	f800283a 	ret

08002454 <__sfp>:
 8002454:	defffc04 	addi	sp,sp,-16
 8002458:	00820074 	movhi	r2,2049
 800245c:	10999b04 	addi	r2,r2,26220
 8002460:	dc400115 	stw	r17,4(sp)
 8002464:	14400017 	ldw	r17,0(r2)
 8002468:	dc800215 	stw	r18,8(sp)
 800246c:	dfc00315 	stw	ra,12(sp)
 8002470:	88800e17 	ldw	r2,56(r17)
 8002474:	dc000015 	stw	r16,0(sp)
 8002478:	2025883a 	mov	r18,r4
 800247c:	10002826 	beq	r2,zero,8002520 <__sfp+0xcc>
 8002480:	8c40b804 	addi	r17,r17,736
 8002484:	043fffc4 	movi	r16,-1
 8002488:	89400117 	ldw	r5,4(r17)
 800248c:	88800217 	ldw	r2,8(r17)
 8002490:	297fffc4 	addi	r5,r5,-1
 8002494:	28000a16 	blt	r5,zero,80024c0 <__sfp+0x6c>
 8002498:	10c0030f 	ldh	r3,12(r2)
 800249c:	18000c26 	beq	r3,zero,80024d0 <__sfp+0x7c>
 80024a0:	10c01a04 	addi	r3,r2,104
 80024a4:	00000206 	br	80024b0 <__sfp+0x5c>
 80024a8:	19bfe90f 	ldh	r6,-92(r3)
 80024ac:	30000826 	beq	r6,zero,80024d0 <__sfp+0x7c>
 80024b0:	297fffc4 	addi	r5,r5,-1
 80024b4:	18bffd04 	addi	r2,r3,-12
 80024b8:	18c01704 	addi	r3,r3,92
 80024bc:	2c3ffa1e 	bne	r5,r16,80024a8 <__sfp+0x54>
 80024c0:	88800017 	ldw	r2,0(r17)
 80024c4:	10001926 	beq	r2,zero,800252c <__sfp+0xd8>
 80024c8:	1023883a 	mov	r17,r2
 80024cc:	003fee06 	br	8002488 <__sfp+0x34>
 80024d0:	00ffffc4 	movi	r3,-1
 80024d4:	10c0038d 	sth	r3,14(r2)
 80024d8:	00c00044 	movi	r3,1
 80024dc:	10c0030d 	sth	r3,12(r2)
 80024e0:	10000015 	stw	zero,0(r2)
 80024e4:	10000215 	stw	zero,8(r2)
 80024e8:	10000115 	stw	zero,4(r2)
 80024ec:	10000415 	stw	zero,16(r2)
 80024f0:	10000515 	stw	zero,20(r2)
 80024f4:	10000615 	stw	zero,24(r2)
 80024f8:	10000c15 	stw	zero,48(r2)
 80024fc:	10000d15 	stw	zero,52(r2)
 8002500:	10001115 	stw	zero,68(r2)
 8002504:	10001215 	stw	zero,72(r2)
 8002508:	dfc00317 	ldw	ra,12(sp)
 800250c:	dc800217 	ldw	r18,8(sp)
 8002510:	dc400117 	ldw	r17,4(sp)
 8002514:	dc000017 	ldw	r16,0(sp)
 8002518:	dec00404 	addi	sp,sp,16
 800251c:	f800283a 	ret
 8002520:	8809883a 	mov	r4,r17
 8002524:	80023480 	call	8002348 <__sinit>
 8002528:	003fd506 	br	8002480 <__sfp+0x2c>
 800252c:	9009883a 	mov	r4,r18
 8002530:	01400104 	movi	r5,4
 8002534:	80022c00 	call	80022c0 <__sfmoreglue>
 8002538:	88800015 	stw	r2,0(r17)
 800253c:	103fe21e 	bne	r2,zero,80024c8 <__sfp+0x74>
 8002540:	00800304 	movi	r2,12
 8002544:	90800015 	stw	r2,0(r18)
 8002548:	0005883a 	mov	r2,zero
 800254c:	003fee06 	br	8002508 <__sfp+0xb4>

08002550 <__sfp_lock_acquire>:
 8002550:	f800283a 	ret

08002554 <__sfp_lock_release>:
 8002554:	f800283a 	ret

08002558 <__sinit_lock_acquire>:
 8002558:	f800283a 	ret

0800255c <__sinit_lock_release>:
 800255c:	f800283a 	ret

08002560 <__fp_lock_all>:
 8002560:	00820074 	movhi	r2,2049
 8002564:	10999c04 	addi	r2,r2,26224
 8002568:	11000017 	ldw	r4,0(r2)
 800256c:	01420034 	movhi	r5,2048
 8002570:	2948a904 	addi	r5,r5,8868
 8002574:	800330c1 	jmpi	800330c <_fwalk>

08002578 <__fp_unlock_all>:
 8002578:	00820074 	movhi	r2,2049
 800257c:	10999c04 	addi	r2,r2,26224
 8002580:	11000017 	ldw	r4,0(r2)
 8002584:	01420034 	movhi	r5,2048
 8002588:	2948ab04 	addi	r5,r5,8876
 800258c:	800330c1 	jmpi	800330c <_fwalk>

08002590 <_fopen_r>:
 8002590:	defffa04 	addi	sp,sp,-24
 8002594:	dcc00415 	stw	r19,16(sp)
 8002598:	2827883a 	mov	r19,r5
 800259c:	300b883a 	mov	r5,r6
 80025a0:	d80d883a 	mov	r6,sp
 80025a4:	dc800315 	stw	r18,12(sp)
 80025a8:	dc400215 	stw	r17,8(sp)
 80025ac:	dfc00515 	stw	ra,20(sp)
 80025b0:	dc000115 	stw	r16,4(sp)
 80025b4:	2025883a 	mov	r18,r4
 80025b8:	80098c00 	call	80098c0 <__sflags>
 80025bc:	1023883a 	mov	r17,r2
 80025c0:	10002926 	beq	r2,zero,8002668 <_fopen_r+0xd8>
 80025c4:	9009883a 	mov	r4,r18
 80025c8:	80024540 	call	8002454 <__sfp>
 80025cc:	1021883a 	mov	r16,r2
 80025d0:	10002526 	beq	r2,zero,8002668 <_fopen_r+0xd8>
 80025d4:	d9800017 	ldw	r6,0(sp)
 80025d8:	9009883a 	mov	r4,r18
 80025dc:	980b883a 	mov	r5,r19
 80025e0:	01c06d84 	movi	r7,438
 80025e4:	80040cc0 	call	80040cc <_open_r>
 80025e8:	10001c16 	blt	r2,zero,800265c <_fopen_r+0xcc>
 80025ec:	8080038d 	sth	r2,14(r16)
 80025f0:	00820034 	movhi	r2,2048
 80025f4:	10913204 	addi	r2,r2,17608
 80025f8:	80800815 	stw	r2,32(r16)
 80025fc:	00820034 	movhi	r2,2048
 8002600:	10914704 	addi	r2,r2,17692
 8002604:	80800915 	stw	r2,36(r16)
 8002608:	00820034 	movhi	r2,2048
 800260c:	10916904 	addi	r2,r2,17828
 8002610:	88c0400c 	andi	r3,r17,256
 8002614:	80800a15 	stw	r2,40(r16)
 8002618:	00820034 	movhi	r2,2048
 800261c:	10918004 	addi	r2,r2,17920
 8002620:	80800b15 	stw	r2,44(r16)
 8002624:	18bfffcc 	andi	r2,r3,65535
 8002628:	10a0001c 	xori	r2,r2,32768
 800262c:	8440030d 	sth	r17,12(r16)
 8002630:	84000715 	stw	r16,28(r16)
 8002634:	10a00004 	addi	r2,r2,-32768
 8002638:	1000141e 	bne	r2,zero,800268c <_fopen_r+0xfc>
 800263c:	8005883a 	mov	r2,r16
 8002640:	dfc00517 	ldw	ra,20(sp)
 8002644:	dcc00417 	ldw	r19,16(sp)
 8002648:	dc800317 	ldw	r18,12(sp)
 800264c:	dc400217 	ldw	r17,8(sp)
 8002650:	dc000117 	ldw	r16,4(sp)
 8002654:	dec00604 	addi	sp,sp,24
 8002658:	f800283a 	ret
 800265c:	80025500 	call	8002550 <__sfp_lock_acquire>
 8002660:	8000030d 	sth	zero,12(r16)
 8002664:	80025540 	call	8002554 <__sfp_lock_release>
 8002668:	0021883a 	mov	r16,zero
 800266c:	8005883a 	mov	r2,r16
 8002670:	dfc00517 	ldw	ra,20(sp)
 8002674:	dcc00417 	ldw	r19,16(sp)
 8002678:	dc800317 	ldw	r18,12(sp)
 800267c:	dc400217 	ldw	r17,8(sp)
 8002680:	dc000117 	ldw	r16,4(sp)
 8002684:	dec00604 	addi	sp,sp,24
 8002688:	f800283a 	ret
 800268c:	9009883a 	mov	r4,r18
 8002690:	800b883a 	mov	r5,r16
 8002694:	000d883a 	mov	r6,zero
 8002698:	01c00084 	movi	r7,2
 800269c:	8002e0c0 	call	8002e0c <_fseek_r>
 80026a0:	8005883a 	mov	r2,r16
 80026a4:	dfc00517 	ldw	ra,20(sp)
 80026a8:	dcc00417 	ldw	r19,16(sp)
 80026ac:	dc800317 	ldw	r18,12(sp)
 80026b0:	dc400217 	ldw	r17,8(sp)
 80026b4:	dc000117 	ldw	r16,4(sp)
 80026b8:	dec00604 	addi	sp,sp,24
 80026bc:	f800283a 	ret

080026c0 <fopen>:
 80026c0:	00c20074 	movhi	r3,2049
 80026c4:	18d99c04 	addi	r3,r3,26224
 80026c8:	2005883a 	mov	r2,r4
 80026cc:	19000017 	ldw	r4,0(r3)
 80026d0:	280d883a 	mov	r6,r5
 80026d4:	100b883a 	mov	r5,r2
 80026d8:	80025901 	jmpi	8002590 <_fopen_r>

080026dc <_fprintf_r>:
 80026dc:	defffe04 	addi	sp,sp,-8
 80026e0:	2809883a 	mov	r4,r5
 80026e4:	dfc00015 	stw	ra,0(sp)
 80026e8:	d9c00115 	stw	r7,4(sp)
 80026ec:	300b883a 	mov	r5,r6
 80026f0:	d9800104 	addi	r6,sp,4
 80026f4:	80066780 	call	8006678 <__vfprintf_internal>
 80026f8:	dfc00017 	ldw	ra,0(sp)
 80026fc:	dec00204 	addi	sp,sp,8
 8002700:	f800283a 	ret

08002704 <fprintf>:
 8002704:	defffd04 	addi	sp,sp,-12
 8002708:	dfc00015 	stw	ra,0(sp)
 800270c:	d9800115 	stw	r6,4(sp)
 8002710:	d9c00215 	stw	r7,8(sp)
 8002714:	d9800104 	addi	r6,sp,4
 8002718:	80066780 	call	8006678 <__vfprintf_internal>
 800271c:	dfc00017 	ldw	ra,0(sp)
 8002720:	dec00304 	addi	sp,sp,12
 8002724:	f800283a 	ret

08002728 <_fread_r>:
 8002728:	defff504 	addi	sp,sp,-44
 800272c:	dd000515 	stw	r20,20(sp)
 8002730:	dcc00415 	stw	r19,16(sp)
 8002734:	2029883a 	mov	r20,r4
 8002738:	2827883a 	mov	r19,r5
 800273c:	3809883a 	mov	r4,r7
 8002740:	300b883a 	mov	r5,r6
 8002744:	ddc00815 	stw	r23,32(sp)
 8002748:	dd800715 	stw	r22,28(sp)
 800274c:	dd400615 	stw	r21,24(sp)
 8002750:	dc000115 	stw	r16,4(sp)
 8002754:	dfc00a15 	stw	ra,40(sp)
 8002758:	df000915 	stw	fp,36(sp)
 800275c:	dc800315 	stw	r18,12(sp)
 8002760:	dc400215 	stw	r17,8(sp)
 8002764:	302f883a 	mov	r23,r6
 8002768:	382b883a 	mov	r21,r7
 800276c:	8001a6c0 	call	8001a6c <__mulsi3>
 8002770:	102d883a 	mov	r22,r2
 8002774:	dc000b17 	ldw	r16,44(sp)
 8002778:	10002e26 	beq	r2,zero,8002834 <_fread_r+0x10c>
 800277c:	a0000226 	beq	r20,zero,8002788 <_fread_r+0x60>
 8002780:	a0800e17 	ldw	r2,56(r20)
 8002784:	10006726 	beq	r2,zero,8002924 <_fread_r+0x1fc>
 8002788:	84400117 	ldw	r17,4(r16)
 800278c:	88002b16 	blt	r17,zero,800283c <_fread_r+0x114>
 8002790:	8080030b 	ldhu	r2,12(r16)
 8002794:	8807883a 	mov	r3,r17
 8002798:	1080008c 	andi	r2,r2,2
 800279c:	10bfffcc 	andi	r2,r2,65535
 80027a0:	10a0001c 	xori	r2,r2,32768
 80027a4:	10a00004 	addi	r2,r2,-32768
 80027a8:	10002d1e 	bne	r2,zero,8002860 <_fread_r+0x138>
 80027ac:	b025883a 	mov	r18,r22
 80027b0:	00000106 	br	80027b8 <_fread_r+0x90>
 80027b4:	84400117 	ldw	r17,4(r16)
 80027b8:	9809883a 	mov	r4,r19
 80027bc:	880d883a 	mov	r6,r17
 80027c0:	81400017 	ldw	r5,0(r16)
 80027c4:	8c805c2e 	bgeu	r17,r18,8002938 <_fread_r+0x210>
 80027c8:	8003eb00 	call	8003eb0 <memcpy>
 80027cc:	80800017 	ldw	r2,0(r16)
 80027d0:	9c67883a 	add	r19,r19,r17
 80027d4:	9465c83a 	sub	r18,r18,r17
 80027d8:	1463883a 	add	r17,r2,r17
 80027dc:	a009883a 	mov	r4,r20
 80027e0:	800b883a 	mov	r5,r16
 80027e4:	84400015 	stw	r17,0(r16)
 80027e8:	80042780 	call	8004278 <__srefill_r>
 80027ec:	103ff126 	beq	r2,zero,80027b4 <_fread_r+0x8c>
 80027f0:	b489c83a 	sub	r4,r22,r18
 80027f4:	b80b883a 	mov	r5,r23
 80027f8:	8010c2c0 	call	8010c2c <__udivsi3>
 80027fc:	102b883a 	mov	r21,r2
 8002800:	a805883a 	mov	r2,r21
 8002804:	dfc00a17 	ldw	ra,40(sp)
 8002808:	df000917 	ldw	fp,36(sp)
 800280c:	ddc00817 	ldw	r23,32(sp)
 8002810:	dd800717 	ldw	r22,28(sp)
 8002814:	dd400617 	ldw	r21,24(sp)
 8002818:	dd000517 	ldw	r20,20(sp)
 800281c:	dcc00417 	ldw	r19,16(sp)
 8002820:	dc800317 	ldw	r18,12(sp)
 8002824:	dc400217 	ldw	r17,8(sp)
 8002828:	dc000117 	ldw	r16,4(sp)
 800282c:	dec00b04 	addi	sp,sp,44
 8002830:	f800283a 	ret
 8002834:	002b883a 	mov	r21,zero
 8002838:	003ff106 	br	8002800 <_fread_r+0xd8>
 800283c:	8080030b 	ldhu	r2,12(r16)
 8002840:	80000115 	stw	zero,4(r16)
 8002844:	0007883a 	mov	r3,zero
 8002848:	1080008c 	andi	r2,r2,2
 800284c:	10bfffcc 	andi	r2,r2,65535
 8002850:	10a0001c 	xori	r2,r2,32768
 8002854:	10a00004 	addi	r2,r2,-32768
 8002858:	0023883a 	mov	r17,zero
 800285c:	103fd326 	beq	r2,zero,80027ac <_fread_r+0x84>
 8002860:	1823883a 	mov	r17,r3
 8002864:	b0c0012e 	bgeu	r22,r3,800286c <_fread_r+0x144>
 8002868:	b023883a 	mov	r17,r22
 800286c:	81400017 	ldw	r5,0(r16)
 8002870:	9809883a 	mov	r4,r19
 8002874:	880d883a 	mov	r6,r17
 8002878:	8003eb00 	call	8003eb0 <memcpy>
 800287c:	80800117 	ldw	r2,4(r16)
 8002880:	84800017 	ldw	r18,0(r16)
 8002884:	81400c17 	ldw	r5,48(r16)
 8002888:	1445c83a 	sub	r2,r2,r17
 800288c:	9465883a 	add	r18,r18,r17
 8002890:	84800015 	stw	r18,0(r16)
 8002894:	80800115 	stw	r2,4(r16)
 8002898:	9c67883a 	add	r19,r19,r17
 800289c:	b463c83a 	sub	r17,r22,r17
 80028a0:	28002e26 	beq	r5,zero,800295c <_fread_r+0x234>
 80028a4:	883fd626 	beq	r17,zero,8002800 <_fread_r+0xd8>
 80028a8:	80801004 	addi	r2,r16,64
 80028ac:	28800326 	beq	r5,r2,80028bc <_fread_r+0x194>
 80028b0:	a009883a 	mov	r4,r20
 80028b4:	8002ae00 	call	8002ae0 <_free_r>
 80028b8:	84800017 	ldw	r18,0(r16)
 80028bc:	80000c15 	stw	zero,48(r16)
 80028c0:	80c00517 	ldw	r3,20(r16)
 80028c4:	87000417 	ldw	fp,16(r16)
 80028c8:	d8c00015 	stw	r3,0(sp)
 80028cc:	00000106 	br	80028d4 <_fread_r+0x1ac>
 80028d0:	883fcb26 	beq	r17,zero,8002800 <_fread_r+0xd8>
 80028d4:	84c00415 	stw	r19,16(r16)
 80028d8:	84400515 	stw	r17,20(r16)
 80028dc:	84c00015 	stw	r19,0(r16)
 80028e0:	a009883a 	mov	r4,r20
 80028e4:	800b883a 	mov	r5,r16
 80028e8:	80042780 	call	8004278 <__srefill_r>
 80028ec:	d8c00017 	ldw	r3,0(sp)
 80028f0:	81000117 	ldw	r4,4(r16)
 80028f4:	87000415 	stw	fp,16(r16)
 80028f8:	80c00515 	stw	r3,20(r16)
 80028fc:	84800015 	stw	r18,0(r16)
 8002900:	80000115 	stw	zero,4(r16)
 8002904:	8923c83a 	sub	r17,r17,r4
 8002908:	9927883a 	add	r19,r19,r4
 800290c:	103ff026 	beq	r2,zero,80028d0 <_fread_r+0x1a8>
 8002910:	b449c83a 	sub	r4,r22,r17
 8002914:	b80b883a 	mov	r5,r23
 8002918:	8010c2c0 	call	8010c2c <__udivsi3>
 800291c:	102b883a 	mov	r21,r2
 8002920:	003fb706 	br	8002800 <_fread_r+0xd8>
 8002924:	a009883a 	mov	r4,r20
 8002928:	80023480 	call	8002348 <__sinit>
 800292c:	84400117 	ldw	r17,4(r16)
 8002930:	883f970e 	bge	r17,zero,8002790 <_fread_r+0x68>
 8002934:	003fc106 	br	800283c <_fread_r+0x114>
 8002938:	900d883a 	mov	r6,r18
 800293c:	8003eb00 	call	8003eb0 <memcpy>
 8002940:	80800117 	ldw	r2,4(r16)
 8002944:	80c00017 	ldw	r3,0(r16)
 8002948:	1485c83a 	sub	r2,r2,r18
 800294c:	1ca5883a 	add	r18,r3,r18
 8002950:	80800115 	stw	r2,4(r16)
 8002954:	84800015 	stw	r18,0(r16)
 8002958:	003fa906 	br	8002800 <_fread_r+0xd8>
 800295c:	883fd81e 	bne	r17,zero,80028c0 <_fread_r+0x198>
 8002960:	003fa706 	br	8002800 <_fread_r+0xd8>

08002964 <fread>:
 8002964:	00820074 	movhi	r2,2049
 8002968:	10999c04 	addi	r2,r2,26224
 800296c:	2011883a 	mov	r8,r4
 8002970:	11000017 	ldw	r4,0(r2)
 8002974:	defffe04 	addi	sp,sp,-8
 8002978:	2807883a 	mov	r3,r5
 800297c:	3005883a 	mov	r2,r6
 8002980:	d9c00015 	stw	r7,0(sp)
 8002984:	400b883a 	mov	r5,r8
 8002988:	180d883a 	mov	r6,r3
 800298c:	100f883a 	mov	r7,r2
 8002990:	dfc00115 	stw	ra,4(sp)
 8002994:	80027280 	call	8002728 <_fread_r>
 8002998:	dfc00117 	ldw	ra,4(sp)
 800299c:	dec00204 	addi	sp,sp,8
 80029a0:	f800283a 	ret

080029a4 <_malloc_trim_r>:
 80029a4:	defffb04 	addi	sp,sp,-20
 80029a8:	dcc00315 	stw	r19,12(sp)
 80029ac:	dc800215 	stw	r18,8(sp)
 80029b0:	dc400115 	stw	r17,4(sp)
 80029b4:	dc000015 	stw	r16,0(sp)
 80029b8:	2827883a 	mov	r19,r5
 80029bc:	dfc00415 	stw	ra,16(sp)
 80029c0:	04420074 	movhi	r17,2049
 80029c4:	8c540004 	addi	r17,r17,20480
 80029c8:	2021883a 	mov	r16,r4
 80029cc:	80115ac0 	call	80115ac <__malloc_lock>
 80029d0:	88800217 	ldw	r2,8(r17)
 80029d4:	14800117 	ldw	r18,4(r2)
 80029d8:	00bfff04 	movi	r2,-4
 80029dc:	90a4703a 	and	r18,r18,r2
 80029e0:	9083fbc4 	addi	r2,r18,4079
 80029e4:	14e7c83a 	sub	r19,r2,r19
 80029e8:	9826d33a 	srli	r19,r19,12
 80029ec:	0083ffc4 	movi	r2,4095
 80029f0:	9cffffc4 	addi	r19,r19,-1
 80029f4:	9826933a 	slli	r19,r19,12
 80029f8:	14c0060e 	bge	r2,r19,8002a14 <_malloc_trim_r+0x70>
 80029fc:	8009883a 	mov	r4,r16
 8002a00:	000b883a 	mov	r5,zero
 8002a04:	80044640 	call	8004464 <_sbrk_r>
 8002a08:	88c00217 	ldw	r3,8(r17)
 8002a0c:	1c87883a 	add	r3,r3,r18
 8002a10:	10c00a26 	beq	r2,r3,8002a3c <_malloc_trim_r+0x98>
 8002a14:	8009883a 	mov	r4,r16
 8002a18:	80115cc0 	call	80115cc <__malloc_unlock>
 8002a1c:	0005883a 	mov	r2,zero
 8002a20:	dfc00417 	ldw	ra,16(sp)
 8002a24:	dcc00317 	ldw	r19,12(sp)
 8002a28:	dc800217 	ldw	r18,8(sp)
 8002a2c:	dc400117 	ldw	r17,4(sp)
 8002a30:	dc000017 	ldw	r16,0(sp)
 8002a34:	dec00504 	addi	sp,sp,20
 8002a38:	f800283a 	ret
 8002a3c:	8009883a 	mov	r4,r16
 8002a40:	04cbc83a 	sub	r5,zero,r19
 8002a44:	80044640 	call	8004464 <_sbrk_r>
 8002a48:	00ffffc4 	movi	r3,-1
 8002a4c:	10c01326 	beq	r2,r3,8002a9c <_malloc_trim_r+0xf8>
 8002a50:	008200b4 	movhi	r2,2050
 8002a54:	10a08704 	addi	r2,r2,-32228
 8002a58:	11000017 	ldw	r4,0(r2)
 8002a5c:	88c00217 	ldw	r3,8(r17)
 8002a60:	94e5c83a 	sub	r18,r18,r19
 8002a64:	94800054 	ori	r18,r18,1
 8002a68:	24e7c83a 	sub	r19,r4,r19
 8002a6c:	1c800115 	stw	r18,4(r3)
 8002a70:	8009883a 	mov	r4,r16
 8002a74:	14c00015 	stw	r19,0(r2)
 8002a78:	80115cc0 	call	80115cc <__malloc_unlock>
 8002a7c:	00800044 	movi	r2,1
 8002a80:	dfc00417 	ldw	ra,16(sp)
 8002a84:	dcc00317 	ldw	r19,12(sp)
 8002a88:	dc800217 	ldw	r18,8(sp)
 8002a8c:	dc400117 	ldw	r17,4(sp)
 8002a90:	dc000017 	ldw	r16,0(sp)
 8002a94:	dec00504 	addi	sp,sp,20
 8002a98:	f800283a 	ret
 8002a9c:	8009883a 	mov	r4,r16
 8002aa0:	000b883a 	mov	r5,zero
 8002aa4:	80044640 	call	8004464 <_sbrk_r>
 8002aa8:	88c00217 	ldw	r3,8(r17)
 8002aac:	014003c4 	movi	r5,15
 8002ab0:	10c9c83a 	sub	r4,r2,r3
 8002ab4:	293fd70e 	bge	r5,r4,8002a14 <_malloc_trim_r+0x70>
 8002ab8:	01420074 	movhi	r5,2049
 8002abc:	29599d04 	addi	r5,r5,26228
 8002ac0:	29400017 	ldw	r5,0(r5)
 8002ac4:	21000054 	ori	r4,r4,1
 8002ac8:	19000115 	stw	r4,4(r3)
 8002acc:	1145c83a 	sub	r2,r2,r5
 8002ad0:	014200b4 	movhi	r5,2050
 8002ad4:	29608704 	addi	r5,r5,-32228
 8002ad8:	28800015 	stw	r2,0(r5)
 8002adc:	003fcd06 	br	8002a14 <_malloc_trim_r+0x70>

08002ae0 <_free_r>:
 8002ae0:	defffd04 	addi	sp,sp,-12
 8002ae4:	dc400115 	stw	r17,4(sp)
 8002ae8:	dc000015 	stw	r16,0(sp)
 8002aec:	dfc00215 	stw	ra,8(sp)
 8002af0:	2821883a 	mov	r16,r5
 8002af4:	2023883a 	mov	r17,r4
 8002af8:	28004b26 	beq	r5,zero,8002c28 <_free_r+0x148>
 8002afc:	80115ac0 	call	80115ac <__malloc_lock>
 8002b00:	823fff17 	ldw	r8,-4(r16)
 8002b04:	00bfff84 	movi	r2,-2
 8002b08:	81bffe04 	addi	r6,r16,-8
 8002b0c:	4084703a 	and	r2,r8,r2
 8002b10:	3087883a 	add	r3,r6,r2
 8002b14:	01420074 	movhi	r5,2049
 8002b18:	29540004 	addi	r5,r5,20480
 8002b1c:	1a400117 	ldw	r9,4(r3)
 8002b20:	29000217 	ldw	r4,8(r5)
 8002b24:	01ffff04 	movi	r7,-4
 8002b28:	49ce703a 	and	r7,r9,r7
 8002b2c:	20c06526 	beq	r4,r3,8002cc4 <_free_r+0x1e4>
 8002b30:	19c00115 	stw	r7,4(r3)
 8002b34:	4200004c 	andi	r8,r8,1
 8002b38:	40003026 	beq	r8,zero,8002bfc <_free_r+0x11c>
 8002b3c:	0009883a 	mov	r4,zero
 8002b40:	19d1883a 	add	r8,r3,r7
 8002b44:	42000117 	ldw	r8,4(r8)
 8002b48:	4200004c 	andi	r8,r8,1
 8002b4c:	4000061e 	bne	r8,zero,8002b68 <_free_r+0x88>
 8002b50:	11c5883a 	add	r2,r2,r7
 8002b54:	19c00217 	ldw	r7,8(r3)
 8002b58:	20004e26 	beq	r4,zero,8002c94 <_free_r+0x1b4>
 8002b5c:	18c00317 	ldw	r3,12(r3)
 8002b60:	38c00315 	stw	r3,12(r7)
 8002b64:	19c00215 	stw	r7,8(r3)
 8002b68:	11c00054 	ori	r7,r2,1
 8002b6c:	3087883a 	add	r3,r6,r2
 8002b70:	31c00115 	stw	r7,4(r6)
 8002b74:	18800015 	stw	r2,0(r3)
 8002b78:	20001a1e 	bne	r4,zero,8002be4 <_free_r+0x104>
 8002b7c:	00c07fc4 	movi	r3,511
 8002b80:	18802e2e 	bgeu	r3,r2,8002c3c <_free_r+0x15c>
 8002b84:	1006d27a 	srli	r3,r2,9
 8002b88:	01000104 	movi	r4,4
 8002b8c:	20c06636 	bltu	r4,r3,8002d28 <_free_r+0x248>
 8002b90:	1008d1ba 	srli	r4,r2,6
 8002b94:	21000e04 	addi	r4,r4,56
 8002b98:	210f883a 	add	r7,r4,r4
 8002b9c:	39cf883a 	add	r7,r7,r7
 8002ba0:	39cf883a 	add	r7,r7,r7
 8002ba4:	29cf883a 	add	r7,r5,r7
 8002ba8:	38c00217 	ldw	r3,8(r7)
 8002bac:	01420074 	movhi	r5,2049
 8002bb0:	29540004 	addi	r5,r5,20480
 8002bb4:	19c06126 	beq	r3,r7,8002d3c <_free_r+0x25c>
 8002bb8:	013fff04 	movi	r4,-4
 8002bbc:	19400117 	ldw	r5,4(r3)
 8002bc0:	290a703a 	and	r5,r5,r4
 8002bc4:	1140022e 	bgeu	r2,r5,8002bd0 <_free_r+0xf0>
 8002bc8:	18c00217 	ldw	r3,8(r3)
 8002bcc:	38fffb1e 	bne	r7,r3,8002bbc <_free_r+0xdc>
 8002bd0:	18800317 	ldw	r2,12(r3)
 8002bd4:	30800315 	stw	r2,12(r6)
 8002bd8:	30c00215 	stw	r3,8(r6)
 8002bdc:	11800215 	stw	r6,8(r2)
 8002be0:	19800315 	stw	r6,12(r3)
 8002be4:	8809883a 	mov	r4,r17
 8002be8:	dfc00217 	ldw	ra,8(sp)
 8002bec:	dc400117 	ldw	r17,4(sp)
 8002bf0:	dc000017 	ldw	r16,0(sp)
 8002bf4:	dec00304 	addi	sp,sp,12
 8002bf8:	80115cc1 	jmpi	80115cc <__malloc_unlock>
 8002bfc:	813ffe17 	ldw	r4,-8(r16)
 8002c00:	2a400204 	addi	r9,r5,8
 8002c04:	310dc83a 	sub	r6,r6,r4
 8002c08:	32000217 	ldw	r8,8(r6)
 8002c0c:	1105883a 	add	r2,r2,r4
 8002c10:	42404326 	beq	r8,r9,8002d20 <_free_r+0x240>
 8002c14:	32400317 	ldw	r9,12(r6)
 8002c18:	0009883a 	mov	r4,zero
 8002c1c:	42400315 	stw	r9,12(r8)
 8002c20:	4a000215 	stw	r8,8(r9)
 8002c24:	003fc606 	br	8002b40 <_free_r+0x60>
 8002c28:	dfc00217 	ldw	ra,8(sp)
 8002c2c:	dc400117 	ldw	r17,4(sp)
 8002c30:	dc000017 	ldw	r16,0(sp)
 8002c34:	dec00304 	addi	sp,sp,12
 8002c38:	f800283a 	ret
 8002c3c:	1004d0fa 	srli	r2,r2,3
 8002c40:	02000044 	movi	r8,1
 8002c44:	29c00117 	ldw	r7,4(r5)
 8002c48:	1087883a 	add	r3,r2,r2
 8002c4c:	18c7883a 	add	r3,r3,r3
 8002c50:	1005d0ba 	srai	r2,r2,2
 8002c54:	18c7883a 	add	r3,r3,r3
 8002c58:	28c7883a 	add	r3,r5,r3
 8002c5c:	19000217 	ldw	r4,8(r3)
 8002c60:	4084983a 	sll	r2,r8,r2
 8002c64:	30c00315 	stw	r3,12(r6)
 8002c68:	31000215 	stw	r4,8(r6)
 8002c6c:	11c4b03a 	or	r2,r2,r7
 8002c70:	21800315 	stw	r6,12(r4)
 8002c74:	8809883a 	mov	r4,r17
 8002c78:	28800115 	stw	r2,4(r5)
 8002c7c:	19800215 	stw	r6,8(r3)
 8002c80:	dfc00217 	ldw	ra,8(sp)
 8002c84:	dc400117 	ldw	r17,4(sp)
 8002c88:	dc000017 	ldw	r16,0(sp)
 8002c8c:	dec00304 	addi	sp,sp,12
 8002c90:	80115cc1 	jmpi	80115cc <__malloc_unlock>
 8002c94:	02020074 	movhi	r8,2049
 8002c98:	42140204 	addi	r8,r8,20488
 8002c9c:	3a3faf1e 	bne	r7,r8,8002b5c <_free_r+0x7c>
 8002ca0:	29800515 	stw	r6,20(r5)
 8002ca4:	29800415 	stw	r6,16(r5)
 8002ca8:	11000054 	ori	r4,r2,1
 8002cac:	3087883a 	add	r3,r6,r2
 8002cb0:	31c00315 	stw	r7,12(r6)
 8002cb4:	31c00215 	stw	r7,8(r6)
 8002cb8:	31000115 	stw	r4,4(r6)
 8002cbc:	18800015 	stw	r2,0(r3)
 8002cc0:	003fc806 	br	8002be4 <_free_r+0x104>
 8002cc4:	4200004c 	andi	r8,r8,1
 8002cc8:	3885883a 	add	r2,r7,r2
 8002ccc:	4000071e 	bne	r8,zero,8002cec <_free_r+0x20c>
 8002cd0:	81fffe17 	ldw	r7,-8(r16)
 8002cd4:	31cdc83a 	sub	r6,r6,r7
 8002cd8:	30c00317 	ldw	r3,12(r6)
 8002cdc:	31000217 	ldw	r4,8(r6)
 8002ce0:	11c5883a 	add	r2,r2,r7
 8002ce4:	20c00315 	stw	r3,12(r4)
 8002ce8:	19000215 	stw	r4,8(r3)
 8002cec:	00c20074 	movhi	r3,2049
 8002cf0:	18d99e04 	addi	r3,r3,26232
 8002cf4:	18c00017 	ldw	r3,0(r3)
 8002cf8:	11000054 	ori	r4,r2,1
 8002cfc:	31000115 	stw	r4,4(r6)
 8002d00:	29800215 	stw	r6,8(r5)
 8002d04:	10ffb736 	bltu	r2,r3,8002be4 <_free_r+0x104>
 8002d08:	008200b4 	movhi	r2,2050
 8002d0c:	10a07d04 	addi	r2,r2,-32268
 8002d10:	11400017 	ldw	r5,0(r2)
 8002d14:	8809883a 	mov	r4,r17
 8002d18:	80029a40 	call	80029a4 <_malloc_trim_r>
 8002d1c:	003fb106 	br	8002be4 <_free_r+0x104>
 8002d20:	01000044 	movi	r4,1
 8002d24:	003f8606 	br	8002b40 <_free_r+0x60>
 8002d28:	01000504 	movi	r4,20
 8002d2c:	20c00b36 	bltu	r4,r3,8002d5c <_free_r+0x27c>
 8002d30:	190016c4 	addi	r4,r3,91
 8002d34:	210f883a 	add	r7,r4,r4
 8002d38:	003f9806 	br	8002b9c <_free_r+0xbc>
 8002d3c:	2009d0ba 	srai	r4,r4,2
 8002d40:	00800044 	movi	r2,1
 8002d44:	29c00117 	ldw	r7,4(r5)
 8002d48:	1108983a 	sll	r4,r2,r4
 8002d4c:	1805883a 	mov	r2,r3
 8002d50:	21c8b03a 	or	r4,r4,r7
 8002d54:	29000115 	stw	r4,4(r5)
 8002d58:	003f9e06 	br	8002bd4 <_free_r+0xf4>
 8002d5c:	01001504 	movi	r4,84
 8002d60:	20c00436 	bltu	r4,r3,8002d74 <_free_r+0x294>
 8002d64:	1008d33a 	srli	r4,r2,12
 8002d68:	21001b84 	addi	r4,r4,110
 8002d6c:	210f883a 	add	r7,r4,r4
 8002d70:	003f8a06 	br	8002b9c <_free_r+0xbc>
 8002d74:	01005504 	movi	r4,340
 8002d78:	20c00436 	bltu	r4,r3,8002d8c <_free_r+0x2ac>
 8002d7c:	1008d3fa 	srli	r4,r2,15
 8002d80:	21001dc4 	addi	r4,r4,119
 8002d84:	210f883a 	add	r7,r4,r4
 8002d88:	003f8406 	br	8002b9c <_free_r+0xbc>
 8002d8c:	01015504 	movi	r4,1364
 8002d90:	20c00436 	bltu	r4,r3,8002da4 <_free_r+0x2c4>
 8002d94:	1008d4ba 	srli	r4,r2,18
 8002d98:	21001f04 	addi	r4,r4,124
 8002d9c:	210f883a 	add	r7,r4,r4
 8002da0:	003f7e06 	br	8002b9c <_free_r+0xbc>
 8002da4:	01c03f04 	movi	r7,252
 8002da8:	01001f84 	movi	r4,126
 8002dac:	003f7b06 	br	8002b9c <_free_r+0xbc>

08002db0 <fscanf>:
 8002db0:	defffd04 	addi	sp,sp,-12
 8002db4:	2005883a 	mov	r2,r4
 8002db8:	dfc00015 	stw	ra,0(sp)
 8002dbc:	d9800115 	stw	r6,4(sp)
 8002dc0:	d9c00215 	stw	r7,8(sp)
 8002dc4:	00c20074 	movhi	r3,2049
 8002dc8:	18d99c04 	addi	r3,r3,26224
 8002dcc:	19000017 	ldw	r4,0(r3)
 8002dd0:	280d883a 	mov	r6,r5
 8002dd4:	d9c00104 	addi	r7,sp,4
 8002dd8:	100b883a 	mov	r5,r2
 8002ddc:	800669c0 	call	800669c <__svfscanf_r>
 8002de0:	dfc00017 	ldw	ra,0(sp)
 8002de4:	dec00304 	addi	sp,sp,12
 8002de8:	f800283a 	ret

08002dec <_fscanf_r>:
 8002dec:	defffe04 	addi	sp,sp,-8
 8002df0:	dfc00015 	stw	ra,0(sp)
 8002df4:	d9c00115 	stw	r7,4(sp)
 8002df8:	d9c00104 	addi	r7,sp,4
 8002dfc:	800669c0 	call	800669c <__svfscanf_r>
 8002e00:	dfc00017 	ldw	ra,0(sp)
 8002e04:	dec00204 	addi	sp,sp,8
 8002e08:	f800283a 	ret

08002e0c <_fseek_r>:
 8002e0c:	deffe804 	addi	sp,sp,-96
 8002e10:	dd001315 	stw	r20,76(sp)
 8002e14:	dc801115 	stw	r18,68(sp)
 8002e18:	dc401015 	stw	r17,64(sp)
 8002e1c:	dc000f15 	stw	r16,60(sp)
 8002e20:	dfc01715 	stw	ra,92(sp)
 8002e24:	ddc01615 	stw	r23,88(sp)
 8002e28:	dd801515 	stw	r22,84(sp)
 8002e2c:	dd401415 	stw	r21,80(sp)
 8002e30:	dcc01215 	stw	r19,72(sp)
 8002e34:	2023883a 	mov	r17,r4
 8002e38:	2821883a 	mov	r16,r5
 8002e3c:	3029883a 	mov	r20,r6
 8002e40:	3825883a 	mov	r18,r7
 8002e44:	20000226 	beq	r4,zero,8002e50 <_fseek_r+0x44>
 8002e48:	20800e17 	ldw	r2,56(r4)
 8002e4c:	10006226 	beq	r2,zero,8002fd8 <_fseek_r+0x1cc>
 8002e50:	80c0030b 	ldhu	r3,12(r16)
 8002e54:	00804204 	movi	r2,264
 8002e58:	18c0420c 	andi	r3,r3,264
 8002e5c:	18806326 	beq	r3,r2,8002fec <_fseek_r+0x1e0>
 8002e60:	84c00a17 	ldw	r19,40(r16)
 8002e64:	98010226 	beq	r19,zero,8003270 <_fseek_r+0x464>
 8002e68:	00800044 	movi	r2,1
 8002e6c:	90803d26 	beq	r18,r2,8002f64 <_fseek_r+0x158>
 8002e70:	00800084 	movi	r2,2
 8002e74:	90800126 	beq	r18,r2,8002e7c <_fseek_r+0x70>
 8002e78:	90002c1e 	bne	r18,zero,8002f2c <_fseek_r+0x120>
 8002e7c:	80800417 	ldw	r2,16(r16)
 8002e80:	002d883a 	mov	r22,zero
 8002e84:	002b883a 	mov	r21,zero
 8002e88:	1000e526 	beq	r2,zero,8003220 <_fseek_r+0x414>
 8002e8c:	80c0030b 	ldhu	r3,12(r16)
 8002e90:	1882068c 	andi	r2,r3,2074
 8002e94:	1809883a 	mov	r4,r3
 8002e98:	10000a1e 	bne	r2,zero,8002ec4 <_fseek_r+0xb8>
 8002e9c:	1881000c 	andi	r2,r3,1024
 8002ea0:	10bfffcc 	andi	r2,r2,65535
 8002ea4:	10a0001c 	xori	r2,r2,32768
 8002ea8:	10a00004 	addi	r2,r2,-32768
 8002eac:	1000631e 	bne	r2,zero,800303c <_fseek_r+0x230>
 8002eb0:	00820034 	movhi	r2,2048
 8002eb4:	10916904 	addi	r2,r2,17828
 8002eb8:	98805026 	beq	r19,r2,8002ffc <_fseek_r+0x1f0>
 8002ebc:	18c20014 	ori	r3,r3,2048
 8002ec0:	80c0030d 	sth	r3,12(r16)
 8002ec4:	8809883a 	mov	r4,r17
 8002ec8:	800b883a 	mov	r5,r16
 8002ecc:	800208c0 	call	800208c <_fflush_r>
 8002ed0:	1000181e 	bne	r2,zero,8002f34 <_fseek_r+0x128>
 8002ed4:	81400717 	ldw	r5,28(r16)
 8002ed8:	8809883a 	mov	r4,r17
 8002edc:	a00d883a 	mov	r6,r20
 8002ee0:	900f883a 	mov	r7,r18
 8002ee4:	983ee83a 	callr	r19
 8002ee8:	00ffffc4 	movi	r3,-1
 8002eec:	10c01126 	beq	r2,r3,8002f34 <_fseek_r+0x128>
 8002ef0:	81400c17 	ldw	r5,48(r16)
 8002ef4:	28000526 	beq	r5,zero,8002f0c <_fseek_r+0x100>
 8002ef8:	80801004 	addi	r2,r16,64
 8002efc:	28800226 	beq	r5,r2,8002f08 <_fseek_r+0xfc>
 8002f00:	8809883a 	mov	r4,r17
 8002f04:	8002ae00 	call	8002ae0 <_free_r>
 8002f08:	80000c15 	stw	zero,48(r16)
 8002f0c:	8080030b 	ldhu	r2,12(r16)
 8002f10:	80c00417 	ldw	r3,16(r16)
 8002f14:	80000115 	stw	zero,4(r16)
 8002f18:	10bdf7cc 	andi	r2,r2,63455
 8002f1c:	8080030d 	sth	r2,12(r16)
 8002f20:	80c00015 	stw	r3,0(r16)
 8002f24:	0005883a 	mov	r2,zero
 8002f28:	00000306 	br	8002f38 <_fseek_r+0x12c>
 8002f2c:	00800584 	movi	r2,22
 8002f30:	88800015 	stw	r2,0(r17)
 8002f34:	00bfffc4 	movi	r2,-1
 8002f38:	dfc01717 	ldw	ra,92(sp)
 8002f3c:	ddc01617 	ldw	r23,88(sp)
 8002f40:	dd801517 	ldw	r22,84(sp)
 8002f44:	dd401417 	ldw	r21,80(sp)
 8002f48:	dd001317 	ldw	r20,76(sp)
 8002f4c:	dcc01217 	ldw	r19,72(sp)
 8002f50:	dc801117 	ldw	r18,68(sp)
 8002f54:	dc401017 	ldw	r17,64(sp)
 8002f58:	dc000f17 	ldw	r16,60(sp)
 8002f5c:	dec01804 	addi	sp,sp,96
 8002f60:	f800283a 	ret
 8002f64:	8809883a 	mov	r4,r17
 8002f68:	800b883a 	mov	r5,r16
 8002f6c:	800208c0 	call	800208c <_fflush_r>
 8002f70:	8080030b 	ldhu	r2,12(r16)
 8002f74:	10c4000c 	andi	r3,r2,4096
 8002f78:	18ffffcc 	andi	r3,r3,65535
 8002f7c:	18e0001c 	xori	r3,r3,32768
 8002f80:	18e00004 	addi	r3,r3,-32768
 8002f84:	18007d26 	beq	r3,zero,800317c <_fseek_r+0x370>
 8002f88:	85401417 	ldw	r21,80(r16)
 8002f8c:	10c0010c 	andi	r3,r2,4
 8002f90:	18ffffcc 	andi	r3,r3,65535
 8002f94:	18e0001c 	xori	r3,r3,32768
 8002f98:	18e00004 	addi	r3,r3,-32768
 8002f9c:	18005f1e 	bne	r3,zero,800311c <_fseek_r+0x310>
 8002fa0:	1080020c 	andi	r2,r2,8
 8002fa4:	10bfffcc 	andi	r2,r2,65535
 8002fa8:	10a0001c 	xori	r2,r2,32768
 8002fac:	10a00004 	addi	r2,r2,-32768
 8002fb0:	10007026 	beq	r2,zero,8003174 <_fseek_r+0x368>
 8002fb4:	80c00017 	ldw	r3,0(r16)
 8002fb8:	80800417 	ldw	r2,16(r16)
 8002fbc:	18000226 	beq	r3,zero,8002fc8 <_fseek_r+0x1bc>
 8002fc0:	1887c83a 	sub	r3,r3,r2
 8002fc4:	a8eb883a 	add	r21,r21,r3
 8002fc8:	a569883a 	add	r20,r20,r21
 8002fcc:	05800044 	movi	r22,1
 8002fd0:	0025883a 	mov	r18,zero
 8002fd4:	003fac06 	br	8002e88 <_fseek_r+0x7c>
 8002fd8:	80023480 	call	8002348 <__sinit>
 8002fdc:	80c0030b 	ldhu	r3,12(r16)
 8002fe0:	00804204 	movi	r2,264
 8002fe4:	18c0420c 	andi	r3,r3,264
 8002fe8:	18bf9d1e 	bne	r3,r2,8002e60 <_fseek_r+0x54>
 8002fec:	8809883a 	mov	r4,r17
 8002ff0:	800b883a 	mov	r5,r16
 8002ff4:	800208c0 	call	800208c <_fflush_r>
 8002ff8:	003f9906 	br	8002e60 <_fseek_r+0x54>
 8002ffc:	8140038f 	ldh	r5,14(r16)
 8003000:	283fae16 	blt	r5,zero,8002ebc <_fseek_r+0xb0>
 8003004:	8809883a 	mov	r4,r17
 8003008:	d80d883a 	mov	r6,sp
 800300c:	80032a40 	call	80032a4 <_fstat_r>
 8003010:	1000741e 	bne	r2,zero,80031e4 <_fseek_r+0x3d8>
 8003014:	d8c00117 	ldw	r3,4(sp)
 8003018:	00a00014 	movui	r2,32768
 800301c:	18fc000c 	andi	r3,r3,61440
 8003020:	1880701e 	bne	r3,r2,80031e4 <_fseek_r+0x3d8>
 8003024:	8100030b 	ldhu	r4,12(r16)
 8003028:	00810004 	movi	r2,1024
 800302c:	80801315 	stw	r2,76(r16)
 8003030:	2084b03a 	or	r2,r4,r2
 8003034:	1009883a 	mov	r4,r2
 8003038:	8080030d 	sth	r2,12(r16)
 800303c:	90003f1e 	bne	r18,zero,800313c <_fseek_r+0x330>
 8003040:	a02f883a 	mov	r23,r20
 8003044:	b000461e 	bne	r22,zero,8003160 <_fseek_r+0x354>
 8003048:	2084000c 	andi	r2,r4,4096
 800304c:	10bfffcc 	andi	r2,r2,65535
 8003050:	10a0001c 	xori	r2,r2,32768
 8003054:	10a00004 	addi	r2,r2,-32768
 8003058:	10007526 	beq	r2,zero,8003230 <_fseek_r+0x424>
 800305c:	80801417 	ldw	r2,80(r16)
 8003060:	80c00117 	ldw	r3,4(r16)
 8003064:	81400c17 	ldw	r5,48(r16)
 8003068:	10ebc83a 	sub	r21,r2,r3
 800306c:	28007926 	beq	r5,zero,8003254 <_fseek_r+0x448>
 8003070:	81c00f17 	ldw	r7,60(r16)
 8003074:	a9ebc83a 	sub	r21,r21,r7
 8003078:	80800e17 	ldw	r2,56(r16)
 800307c:	81800417 	ldw	r6,16(r16)
 8003080:	a8eb883a 	add	r21,r21,r3
 8003084:	1185c83a 	sub	r2,r2,r6
 8003088:	a8abc83a 	sub	r21,r21,r2
 800308c:	3885883a 	add	r2,r7,r2
 8003090:	2208000c 	andi	r8,r4,8192
 8003094:	423fffcc 	andi	r8,r8,65535
 8003098:	4220001c 	xori	r8,r8,32768
 800309c:	42200004 	addi	r8,r8,-32768
 80030a0:	4000031e 	bne	r8,zero,80030b0 <_fseek_r+0x2a4>
 80030a4:	bd400216 	blt	r23,r21,80030b0 <_fseek_r+0x2a4>
 80030a8:	a887883a 	add	r3,r21,r2
 80030ac:	b8c03d36 	bltu	r23,r3,80031a4 <_fseek_r+0x398>
 80030b0:	85401317 	ldw	r21,76(r16)
 80030b4:	81400717 	ldw	r5,28(r16)
 80030b8:	8809883a 	mov	r4,r17
 80030bc:	056bc83a 	sub	r21,zero,r21
 80030c0:	bd6a703a 	and	r21,r23,r21
 80030c4:	a80d883a 	mov	r6,r21
 80030c8:	000f883a 	mov	r7,zero
 80030cc:	983ee83a 	callr	r19
 80030d0:	00ffffc4 	movi	r3,-1
 80030d4:	10ff7b26 	beq	r2,r3,8002ec4 <_fseek_r+0xb8>
 80030d8:	80800417 	ldw	r2,16(r16)
 80030dc:	81400c17 	ldw	r5,48(r16)
 80030e0:	80000115 	stw	zero,4(r16)
 80030e4:	80800015 	stw	r2,0(r16)
 80030e8:	28000526 	beq	r5,zero,8003100 <_fseek_r+0x2f4>
 80030ec:	80801004 	addi	r2,r16,64
 80030f0:	28800226 	beq	r5,r2,80030fc <_fseek_r+0x2f0>
 80030f4:	8809883a 	mov	r4,r17
 80030f8:	8002ae00 	call	8002ae0 <_free_r>
 80030fc:	80000c15 	stw	zero,48(r16)
 8003100:	8080030b 	ldhu	r2,12(r16)
 8003104:	bd6fc83a 	sub	r23,r23,r21
 8003108:	10bff7cc 	andi	r2,r2,65503
 800310c:	8080030d 	sth	r2,12(r16)
 8003110:	b800361e 	bne	r23,zero,80031ec <_fseek_r+0x3e0>
 8003114:	0005883a 	mov	r2,zero
 8003118:	003f8706 	br	8002f38 <_fseek_r+0x12c>
 800311c:	80c00117 	ldw	r3,4(r16)
 8003120:	80800c17 	ldw	r2,48(r16)
 8003124:	a8ebc83a 	sub	r21,r21,r3
 8003128:	10001226 	beq	r2,zero,8003174 <_fseek_r+0x368>
 800312c:	80c00f17 	ldw	r3,60(r16)
 8003130:	80800417 	ldw	r2,16(r16)
 8003134:	a8ebc83a 	sub	r21,r21,r3
 8003138:	003fa306 	br	8002fc8 <_fseek_r+0x1bc>
 800313c:	8140038f 	ldh	r5,14(r16)
 8003140:	8809883a 	mov	r4,r17
 8003144:	d80d883a 	mov	r6,sp
 8003148:	80032a40 	call	80032a4 <_fstat_r>
 800314c:	103f5d1e 	bne	r2,zero,8002ec4 <_fseek_r+0xb8>
 8003150:	ddc00417 	ldw	r23,16(sp)
 8003154:	8100030b 	ldhu	r4,12(r16)
 8003158:	a5ef883a 	add	r23,r20,r23
 800315c:	b03fba26 	beq	r22,zero,8003048 <_fseek_r+0x23c>
 8003160:	81400c17 	ldw	r5,48(r16)
 8003164:	80c00117 	ldw	r3,4(r16)
 8003168:	28003a26 	beq	r5,zero,8003254 <_fseek_r+0x448>
 800316c:	81c00f17 	ldw	r7,60(r16)
 8003170:	003fc106 	br	8003078 <_fseek_r+0x26c>
 8003174:	80800417 	ldw	r2,16(r16)
 8003178:	003f9306 	br	8002fc8 <_fseek_r+0x1bc>
 800317c:	81400717 	ldw	r5,28(r16)
 8003180:	8809883a 	mov	r4,r17
 8003184:	000d883a 	mov	r6,zero
 8003188:	900f883a 	mov	r7,r18
 800318c:	983ee83a 	callr	r19
 8003190:	102b883a 	mov	r21,r2
 8003194:	00bfffc4 	movi	r2,-1
 8003198:	a8bf6626 	beq	r21,r2,8002f34 <_fseek_r+0x128>
 800319c:	8080030b 	ldhu	r2,12(r16)
 80031a0:	003f7a06 	br	8002f8c <_fseek_r+0x180>
 80031a4:	bd6bc83a 	sub	r21,r23,r21
 80031a8:	354d883a 	add	r6,r6,r21
 80031ac:	1545c83a 	sub	r2,r2,r21
 80031b0:	81800015 	stw	r6,0(r16)
 80031b4:	80800115 	stw	r2,4(r16)
 80031b8:	28000626 	beq	r5,zero,80031d4 <_fseek_r+0x3c8>
 80031bc:	80801004 	addi	r2,r16,64
 80031c0:	28800326 	beq	r5,r2,80031d0 <_fseek_r+0x3c4>
 80031c4:	8809883a 	mov	r4,r17
 80031c8:	8002ae00 	call	8002ae0 <_free_r>
 80031cc:	8100030b 	ldhu	r4,12(r16)
 80031d0:	80000c15 	stw	zero,48(r16)
 80031d4:	213ff7cc 	andi	r4,r4,65503
 80031d8:	8100030d 	sth	r4,12(r16)
 80031dc:	0005883a 	mov	r2,zero
 80031e0:	003f5506 	br	8002f38 <_fseek_r+0x12c>
 80031e4:	80c0030b 	ldhu	r3,12(r16)
 80031e8:	003f3406 	br	8002ebc <_fseek_r+0xb0>
 80031ec:	8809883a 	mov	r4,r17
 80031f0:	800b883a 	mov	r5,r16
 80031f4:	80042780 	call	8004278 <__srefill_r>
 80031f8:	103f321e 	bne	r2,zero,8002ec4 <_fseek_r+0xb8>
 80031fc:	80800117 	ldw	r2,4(r16)
 8003200:	15ff3036 	bltu	r2,r23,8002ec4 <_fseek_r+0xb8>
 8003204:	80c00017 	ldw	r3,0(r16)
 8003208:	15c5c83a 	sub	r2,r2,r23
 800320c:	80800115 	stw	r2,4(r16)
 8003210:	1def883a 	add	r23,r3,r23
 8003214:	85c00015 	stw	r23,0(r16)
 8003218:	0005883a 	mov	r2,zero
 800321c:	003f4606 	br	8002f38 <_fseek_r+0x12c>
 8003220:	8809883a 	mov	r4,r17
 8003224:	800b883a 	mov	r5,r16
 8003228:	800355c0 	call	800355c <__smakebuf_r>
 800322c:	003f1706 	br	8002e8c <_fseek_r+0x80>
 8003230:	81400717 	ldw	r5,28(r16)
 8003234:	8809883a 	mov	r4,r17
 8003238:	000d883a 	mov	r6,zero
 800323c:	01c00044 	movi	r7,1
 8003240:	983ee83a 	callr	r19
 8003244:	00ffffc4 	movi	r3,-1
 8003248:	10ff1e26 	beq	r2,r3,8002ec4 <_fseek_r+0xb8>
 800324c:	8100030b 	ldhu	r4,12(r16)
 8003250:	003f8306 	br	8003060 <_fseek_r+0x254>
 8003254:	80800017 	ldw	r2,0(r16)
 8003258:	81800417 	ldw	r6,16(r16)
 800325c:	000b883a 	mov	r5,zero
 8003260:	1185c83a 	sub	r2,r2,r6
 8003264:	a8abc83a 	sub	r21,r21,r2
 8003268:	1885883a 	add	r2,r3,r2
 800326c:	003f8806 	br	8003090 <_fseek_r+0x284>
 8003270:	00800744 	movi	r2,29
 8003274:	88800015 	stw	r2,0(r17)
 8003278:	00bfffc4 	movi	r2,-1
 800327c:	003f2e06 	br	8002f38 <_fseek_r+0x12c>

08003280 <fseek>:
 8003280:	00820074 	movhi	r2,2049
 8003284:	10999c04 	addi	r2,r2,26224
 8003288:	2007883a 	mov	r3,r4
 800328c:	11000017 	ldw	r4,0(r2)
 8003290:	2805883a 	mov	r2,r5
 8003294:	300f883a 	mov	r7,r6
 8003298:	180b883a 	mov	r5,r3
 800329c:	100d883a 	mov	r6,r2
 80032a0:	8002e0c1 	jmpi	8002e0c <_fseek_r>

080032a4 <_fstat_r>:
 80032a4:	defffd04 	addi	sp,sp,-12
 80032a8:	dc400115 	stw	r17,4(sp)
 80032ac:	dc000015 	stw	r16,0(sp)
 80032b0:	2023883a 	mov	r17,r4
 80032b4:	040200b4 	movhi	r16,2050
 80032b8:	84207a04 	addi	r16,r16,-32280
 80032bc:	2809883a 	mov	r4,r5
 80032c0:	300b883a 	mov	r5,r6
 80032c4:	dfc00215 	stw	ra,8(sp)
 80032c8:	80000015 	stw	zero,0(r16)
 80032cc:	80111800 	call	8011180 <fstat>
 80032d0:	00ffffc4 	movi	r3,-1
 80032d4:	10c00526 	beq	r2,r3,80032ec <_fstat_r+0x48>
 80032d8:	dfc00217 	ldw	ra,8(sp)
 80032dc:	dc400117 	ldw	r17,4(sp)
 80032e0:	dc000017 	ldw	r16,0(sp)
 80032e4:	dec00304 	addi	sp,sp,12
 80032e8:	f800283a 	ret
 80032ec:	80c00017 	ldw	r3,0(r16)
 80032f0:	183ff926 	beq	r3,zero,80032d8 <_fstat_r+0x34>
 80032f4:	88c00015 	stw	r3,0(r17)
 80032f8:	dfc00217 	ldw	ra,8(sp)
 80032fc:	dc400117 	ldw	r17,4(sp)
 8003300:	dc000017 	ldw	r16,0(sp)
 8003304:	dec00304 	addi	sp,sp,12
 8003308:	f800283a 	ret

0800330c <_fwalk>:
 800330c:	defff904 	addi	sp,sp,-28
 8003310:	dcc00315 	stw	r19,12(sp)
 8003314:	24c0b804 	addi	r19,r4,736
 8003318:	dd400515 	stw	r21,20(sp)
 800331c:	dd000415 	stw	r20,16(sp)
 8003320:	dfc00615 	stw	ra,24(sp)
 8003324:	dc800215 	stw	r18,8(sp)
 8003328:	dc400115 	stw	r17,4(sp)
 800332c:	dc000015 	stw	r16,0(sp)
 8003330:	282b883a 	mov	r21,r5
 8003334:	0029883a 	mov	r20,zero
 8003338:	80025500 	call	8002550 <__sfp_lock_acquire>
 800333c:	98001226 	beq	r19,zero,8003388 <_fwalk+0x7c>
 8003340:	04bfffc4 	movi	r18,-1
 8003344:	9c400117 	ldw	r17,4(r19)
 8003348:	9c000217 	ldw	r16,8(r19)
 800334c:	8c7fffc4 	addi	r17,r17,-1
 8003350:	88000b16 	blt	r17,zero,8003380 <_fwalk+0x74>
 8003354:	84000304 	addi	r16,r16,12
 8003358:	80c0000f 	ldh	r3,0(r16)
 800335c:	8c7fffc4 	addi	r17,r17,-1
 8003360:	813ffd04 	addi	r4,r16,-12
 8003364:	18000426 	beq	r3,zero,8003378 <_fwalk+0x6c>
 8003368:	80c0008f 	ldh	r3,2(r16)
 800336c:	1c800226 	beq	r3,r18,8003378 <_fwalk+0x6c>
 8003370:	a83ee83a 	callr	r21
 8003374:	a0a8b03a 	or	r20,r20,r2
 8003378:	84001704 	addi	r16,r16,92
 800337c:	8cbff61e 	bne	r17,r18,8003358 <_fwalk+0x4c>
 8003380:	9cc00017 	ldw	r19,0(r19)
 8003384:	983fef1e 	bne	r19,zero,8003344 <_fwalk+0x38>
 8003388:	80025540 	call	8002554 <__sfp_lock_release>
 800338c:	a005883a 	mov	r2,r20
 8003390:	dfc00617 	ldw	ra,24(sp)
 8003394:	dd400517 	ldw	r21,20(sp)
 8003398:	dd000417 	ldw	r20,16(sp)
 800339c:	dcc00317 	ldw	r19,12(sp)
 80033a0:	dc800217 	ldw	r18,8(sp)
 80033a4:	dc400117 	ldw	r17,4(sp)
 80033a8:	dc000017 	ldw	r16,0(sp)
 80033ac:	dec00704 	addi	sp,sp,28
 80033b0:	f800283a 	ret

080033b4 <_fwalk_reent>:
 80033b4:	defff804 	addi	sp,sp,-32
 80033b8:	dcc00315 	stw	r19,12(sp)
 80033bc:	24c0b804 	addi	r19,r4,736
 80033c0:	dd800615 	stw	r22,24(sp)
 80033c4:	dd400515 	stw	r21,20(sp)
 80033c8:	dd000415 	stw	r20,16(sp)
 80033cc:	dfc00715 	stw	ra,28(sp)
 80033d0:	dc800215 	stw	r18,8(sp)
 80033d4:	dc400115 	stw	r17,4(sp)
 80033d8:	dc000015 	stw	r16,0(sp)
 80033dc:	2029883a 	mov	r20,r4
 80033e0:	282b883a 	mov	r21,r5
 80033e4:	002d883a 	mov	r22,zero
 80033e8:	80025500 	call	8002550 <__sfp_lock_acquire>
 80033ec:	98001326 	beq	r19,zero,800343c <_fwalk_reent+0x88>
 80033f0:	04bfffc4 	movi	r18,-1
 80033f4:	9c400117 	ldw	r17,4(r19)
 80033f8:	9c000217 	ldw	r16,8(r19)
 80033fc:	8c7fffc4 	addi	r17,r17,-1
 8003400:	88000c16 	blt	r17,zero,8003434 <_fwalk_reent+0x80>
 8003404:	84000304 	addi	r16,r16,12
 8003408:	80c0000f 	ldh	r3,0(r16)
 800340c:	8c7fffc4 	addi	r17,r17,-1
 8003410:	817ffd04 	addi	r5,r16,-12
 8003414:	18000526 	beq	r3,zero,800342c <_fwalk_reent+0x78>
 8003418:	80c0008f 	ldh	r3,2(r16)
 800341c:	a009883a 	mov	r4,r20
 8003420:	1c800226 	beq	r3,r18,800342c <_fwalk_reent+0x78>
 8003424:	a83ee83a 	callr	r21
 8003428:	b0acb03a 	or	r22,r22,r2
 800342c:	84001704 	addi	r16,r16,92
 8003430:	8cbff51e 	bne	r17,r18,8003408 <_fwalk_reent+0x54>
 8003434:	9cc00017 	ldw	r19,0(r19)
 8003438:	983fee1e 	bne	r19,zero,80033f4 <_fwalk_reent+0x40>
 800343c:	80025540 	call	8002554 <__sfp_lock_release>
 8003440:	b005883a 	mov	r2,r22
 8003444:	dfc00717 	ldw	ra,28(sp)
 8003448:	dd800617 	ldw	r22,24(sp)
 800344c:	dd400517 	ldw	r21,20(sp)
 8003450:	dd000417 	ldw	r20,16(sp)
 8003454:	dcc00317 	ldw	r19,12(sp)
 8003458:	dc800217 	ldw	r18,8(sp)
 800345c:	dc400117 	ldw	r17,4(sp)
 8003460:	dc000017 	ldw	r16,0(sp)
 8003464:	dec00804 	addi	sp,sp,32
 8003468:	f800283a 	ret

0800346c <_fwrite_r>:
 800346c:	defff604 	addi	sp,sp,-40
 8003470:	dc000515 	stw	r16,20(sp)
 8003474:	d9400315 	stw	r5,12(sp)
 8003478:	2021883a 	mov	r16,r4
 800347c:	300b883a 	mov	r5,r6
 8003480:	3809883a 	mov	r4,r7
 8003484:	dcc00815 	stw	r19,32(sp)
 8003488:	dc800715 	stw	r18,28(sp)
 800348c:	dc400615 	stw	r17,24(sp)
 8003490:	dfc00915 	stw	ra,36(sp)
 8003494:	3027883a 	mov	r19,r6
 8003498:	3823883a 	mov	r17,r7
 800349c:	8001a6c0 	call	8001a6c <__mulsi3>
 80034a0:	1025883a 	mov	r18,r2
 80034a4:	d8800415 	stw	r2,16(sp)
 80034a8:	d8800215 	stw	r2,8(sp)
 80034ac:	d8800304 	addi	r2,sp,12
 80034b0:	d8800015 	stw	r2,0(sp)
 80034b4:	00800044 	movi	r2,1
 80034b8:	d8800115 	stw	r2,4(sp)
 80034bc:	80000226 	beq	r16,zero,80034c8 <_fwrite_r+0x5c>
 80034c0:	80800e17 	ldw	r2,56(r16)
 80034c4:	10001226 	beq	r2,zero,8003510 <_fwrite_r+0xa4>
 80034c8:	d9400a17 	ldw	r5,40(sp)
 80034cc:	8009883a 	mov	r4,r16
 80034d0:	d80d883a 	mov	r6,sp
 80034d4:	80099580 	call	8009958 <__sfvwrite_r>
 80034d8:	10000526 	beq	r2,zero,80034f0 <_fwrite_r+0x84>
 80034dc:	d9000217 	ldw	r4,8(sp)
 80034e0:	980b883a 	mov	r5,r19
 80034e4:	9109c83a 	sub	r4,r18,r4
 80034e8:	8010c2c0 	call	8010c2c <__udivsi3>
 80034ec:	1023883a 	mov	r17,r2
 80034f0:	8805883a 	mov	r2,r17
 80034f4:	dfc00917 	ldw	ra,36(sp)
 80034f8:	dcc00817 	ldw	r19,32(sp)
 80034fc:	dc800717 	ldw	r18,28(sp)
 8003500:	dc400617 	ldw	r17,24(sp)
 8003504:	dc000517 	ldw	r16,20(sp)
 8003508:	dec00a04 	addi	sp,sp,40
 800350c:	f800283a 	ret
 8003510:	8009883a 	mov	r4,r16
 8003514:	80023480 	call	8002348 <__sinit>
 8003518:	003feb06 	br	80034c8 <_fwrite_r+0x5c>

0800351c <fwrite>:
 800351c:	00820074 	movhi	r2,2049
 8003520:	10999c04 	addi	r2,r2,26224
 8003524:	2011883a 	mov	r8,r4
 8003528:	11000017 	ldw	r4,0(r2)
 800352c:	defffe04 	addi	sp,sp,-8
 8003530:	2807883a 	mov	r3,r5
 8003534:	3005883a 	mov	r2,r6
 8003538:	d9c00015 	stw	r7,0(sp)
 800353c:	400b883a 	mov	r5,r8
 8003540:	180d883a 	mov	r6,r3
 8003544:	100f883a 	mov	r7,r2
 8003548:	dfc00115 	stw	ra,4(sp)
 800354c:	800346c0 	call	800346c <_fwrite_r>
 8003550:	dfc00117 	ldw	ra,4(sp)
 8003554:	dec00204 	addi	sp,sp,8
 8003558:	f800283a 	ret

0800355c <__smakebuf_r>:
 800355c:	2880030b 	ldhu	r2,12(r5)
 8003560:	deffed04 	addi	sp,sp,-76
 8003564:	dc401015 	stw	r17,64(sp)
 8003568:	10c0008c 	andi	r3,r2,2
 800356c:	18ffffcc 	andi	r3,r3,65535
 8003570:	18e0001c 	xori	r3,r3,32768
 8003574:	dc000f15 	stw	r16,60(sp)
 8003578:	dfc01215 	stw	ra,72(sp)
 800357c:	dc801115 	stw	r18,68(sp)
 8003580:	18e00004 	addi	r3,r3,-32768
 8003584:	2821883a 	mov	r16,r5
 8003588:	2023883a 	mov	r17,r4
 800358c:	1800381e 	bne	r3,zero,8003670 <__smakebuf_r+0x114>
 8003590:	2940038f 	ldh	r5,14(r5)
 8003594:	28002d16 	blt	r5,zero,800364c <__smakebuf_r+0xf0>
 8003598:	d80d883a 	mov	r6,sp
 800359c:	80032a40 	call	80032a4 <_fstat_r>
 80035a0:	10002916 	blt	r2,zero,8003648 <__smakebuf_r+0xec>
 80035a4:	d8800117 	ldw	r2,4(sp)
 80035a8:	00e00014 	movui	r3,32768
 80035ac:	10bc000c 	andi	r2,r2,61440
 80035b0:	10c03c26 	beq	r2,r3,80036a4 <__smakebuf_r+0x148>
 80035b4:	80c0030b 	ldhu	r3,12(r16)
 80035b8:	18c20014 	ori	r3,r3,2048
 80035bc:	80c0030d 	sth	r3,12(r16)
 80035c0:	00c80004 	movi	r3,8192
 80035c4:	10c00c1e 	bne	r2,r3,80035f8 <__smakebuf_r+0x9c>
 80035c8:	8140038f 	ldh	r5,14(r16)
 80035cc:	8809883a 	mov	r4,r17
 80035d0:	8009e3c0 	call	8009e3c <_isatty_r>
 80035d4:	10000826 	beq	r2,zero,80035f8 <__smakebuf_r+0x9c>
 80035d8:	80c0030b 	ldhu	r3,12(r16)
 80035dc:	808010c4 	addi	r2,r16,67
 80035e0:	80800015 	stw	r2,0(r16)
 80035e4:	18c00054 	ori	r3,r3,1
 80035e8:	80800415 	stw	r2,16(r16)
 80035ec:	00800044 	movi	r2,1
 80035f0:	80c0030d 	sth	r3,12(r16)
 80035f4:	80800515 	stw	r2,20(r16)
 80035f8:	04810004 	movi	r18,1024
 80035fc:	8809883a 	mov	r4,r17
 8003600:	900b883a 	mov	r5,r18
 8003604:	800372c0 	call	800372c <_malloc_r>
 8003608:	10003026 	beq	r2,zero,80036cc <__smakebuf_r+0x170>
 800360c:	80c0030b 	ldhu	r3,12(r16)
 8003610:	01020034 	movhi	r4,2048
 8003614:	2108ad04 	addi	r4,r4,8884
 8003618:	89000f15 	stw	r4,60(r17)
 800361c:	18c02014 	ori	r3,r3,128
 8003620:	80c0030d 	sth	r3,12(r16)
 8003624:	80800015 	stw	r2,0(r16)
 8003628:	80800415 	stw	r2,16(r16)
 800362c:	84800515 	stw	r18,20(r16)
 8003630:	dfc01217 	ldw	ra,72(sp)
 8003634:	dc801117 	ldw	r18,68(sp)
 8003638:	dc401017 	ldw	r17,64(sp)
 800363c:	dc000f17 	ldw	r16,60(sp)
 8003640:	dec01304 	addi	sp,sp,76
 8003644:	f800283a 	ret
 8003648:	8080030b 	ldhu	r2,12(r16)
 800364c:	10c0200c 	andi	r3,r2,128
 8003650:	18ffffcc 	andi	r3,r3,65535
 8003654:	18e0001c 	xori	r3,r3,32768
 8003658:	18e00004 	addi	r3,r3,-32768
 800365c:	18000f1e 	bne	r3,zero,800369c <__smakebuf_r+0x140>
 8003660:	04810004 	movi	r18,1024
 8003664:	10820014 	ori	r2,r2,2048
 8003668:	8080030d 	sth	r2,12(r16)
 800366c:	003fe306 	br	80035fc <__smakebuf_r+0xa0>
 8003670:	288010c4 	addi	r2,r5,67
 8003674:	28800015 	stw	r2,0(r5)
 8003678:	28800415 	stw	r2,16(r5)
 800367c:	00800044 	movi	r2,1
 8003680:	28800515 	stw	r2,20(r5)
 8003684:	dfc01217 	ldw	ra,72(sp)
 8003688:	dc801117 	ldw	r18,68(sp)
 800368c:	dc401017 	ldw	r17,64(sp)
 8003690:	dc000f17 	ldw	r16,60(sp)
 8003694:	dec01304 	addi	sp,sp,76
 8003698:	f800283a 	ret
 800369c:	04801004 	movi	r18,64
 80036a0:	003ff006 	br	8003664 <__smakebuf_r+0x108>
 80036a4:	81000a17 	ldw	r4,40(r16)
 80036a8:	00c20034 	movhi	r3,2048
 80036ac:	18d16904 	addi	r3,r3,17828
 80036b0:	20ffc01e 	bne	r4,r3,80035b4 <__smakebuf_r+0x58>
 80036b4:	8080030b 	ldhu	r2,12(r16)
 80036b8:	00c10004 	movi	r3,1024
 80036bc:	80c01315 	stw	r3,76(r16)
 80036c0:	10c4b03a 	or	r2,r2,r3
 80036c4:	8080030d 	sth	r2,12(r16)
 80036c8:	003fcb06 	br	80035f8 <__smakebuf_r+0x9c>
 80036cc:	8080030b 	ldhu	r2,12(r16)
 80036d0:	10c0800c 	andi	r3,r2,512
 80036d4:	18ffffcc 	andi	r3,r3,65535
 80036d8:	18e0001c 	xori	r3,r3,32768
 80036dc:	18e00004 	addi	r3,r3,-32768
 80036e0:	183fd31e 	bne	r3,zero,8003630 <__smakebuf_r+0xd4>
 80036e4:	10800094 	ori	r2,r2,2
 80036e8:	80c010c4 	addi	r3,r16,67
 80036ec:	8080030d 	sth	r2,12(r16)
 80036f0:	00800044 	movi	r2,1
 80036f4:	80c00015 	stw	r3,0(r16)
 80036f8:	80c00415 	stw	r3,16(r16)
 80036fc:	80800515 	stw	r2,20(r16)
 8003700:	003fcb06 	br	8003630 <__smakebuf_r+0xd4>

08003704 <malloc>:
 8003704:	00820074 	movhi	r2,2049
 8003708:	10999c04 	addi	r2,r2,26224
 800370c:	200b883a 	mov	r5,r4
 8003710:	11000017 	ldw	r4,0(r2)
 8003714:	800372c1 	jmpi	800372c <_malloc_r>

08003718 <free>:
 8003718:	00820074 	movhi	r2,2049
 800371c:	10999c04 	addi	r2,r2,26224
 8003720:	200b883a 	mov	r5,r4
 8003724:	11000017 	ldw	r4,0(r2)
 8003728:	8002ae01 	jmpi	8002ae0 <_free_r>

0800372c <_malloc_r>:
 800372c:	defff604 	addi	sp,sp,-40
 8003730:	dc800215 	stw	r18,8(sp)
 8003734:	dfc00915 	stw	ra,36(sp)
 8003738:	df000815 	stw	fp,32(sp)
 800373c:	ddc00715 	stw	r23,28(sp)
 8003740:	dd800615 	stw	r22,24(sp)
 8003744:	dd400515 	stw	r21,20(sp)
 8003748:	dd000415 	stw	r20,16(sp)
 800374c:	dcc00315 	stw	r19,12(sp)
 8003750:	dc400115 	stw	r17,4(sp)
 8003754:	dc000015 	stw	r16,0(sp)
 8003758:	288002c4 	addi	r2,r5,11
 800375c:	00c00584 	movi	r3,22
 8003760:	2025883a 	mov	r18,r4
 8003764:	18802b2e 	bgeu	r3,r2,8003814 <_malloc_r+0xe8>
 8003768:	047ffe04 	movi	r17,-8
 800376c:	1462703a 	and	r17,r2,r17
 8003770:	88002a16 	blt	r17,zero,800381c <_malloc_r+0xf0>
 8003774:	89402936 	bltu	r17,r5,800381c <_malloc_r+0xf0>
 8003778:	9009883a 	mov	r4,r18
 800377c:	80115ac0 	call	80115ac <__malloc_lock>
 8003780:	00807dc4 	movi	r2,503
 8003784:	14402936 	bltu	r2,r17,800382c <_malloc_r+0x100>
 8003788:	8808d0fa 	srli	r4,r17,3
 800378c:	04c20074 	movhi	r19,2049
 8003790:	9cd40004 	addi	r19,r19,20480
 8003794:	2105883a 	add	r2,r4,r4
 8003798:	1085883a 	add	r2,r2,r2
 800379c:	1085883a 	add	r2,r2,r2
 80037a0:	9885883a 	add	r2,r19,r2
 80037a4:	14000317 	ldw	r16,12(r2)
 80037a8:	80815526 	beq	r16,r2,8003d00 <_malloc_r+0x5d4>
 80037ac:	81000117 	ldw	r4,4(r16)
 80037b0:	00bfff04 	movi	r2,-4
 80037b4:	80c00317 	ldw	r3,12(r16)
 80037b8:	2084703a 	and	r2,r4,r2
 80037bc:	8085883a 	add	r2,r16,r2
 80037c0:	11800117 	ldw	r6,4(r2)
 80037c4:	81400217 	ldw	r5,8(r16)
 80037c8:	9009883a 	mov	r4,r18
 80037cc:	31800054 	ori	r6,r6,1
 80037d0:	11800115 	stw	r6,4(r2)
 80037d4:	28c00315 	stw	r3,12(r5)
 80037d8:	19400215 	stw	r5,8(r3)
 80037dc:	80115cc0 	call	80115cc <__malloc_unlock>
 80037e0:	80800204 	addi	r2,r16,8
 80037e4:	dfc00917 	ldw	ra,36(sp)
 80037e8:	df000817 	ldw	fp,32(sp)
 80037ec:	ddc00717 	ldw	r23,28(sp)
 80037f0:	dd800617 	ldw	r22,24(sp)
 80037f4:	dd400517 	ldw	r21,20(sp)
 80037f8:	dd000417 	ldw	r20,16(sp)
 80037fc:	dcc00317 	ldw	r19,12(sp)
 8003800:	dc800217 	ldw	r18,8(sp)
 8003804:	dc400117 	ldw	r17,4(sp)
 8003808:	dc000017 	ldw	r16,0(sp)
 800380c:	dec00a04 	addi	sp,sp,40
 8003810:	f800283a 	ret
 8003814:	04400404 	movi	r17,16
 8003818:	897fd72e 	bgeu	r17,r5,8003778 <_malloc_r+0x4c>
 800381c:	00800304 	movi	r2,12
 8003820:	90800015 	stw	r2,0(r18)
 8003824:	0005883a 	mov	r2,zero
 8003828:	003fee06 	br	80037e4 <_malloc_r+0xb8>
 800382c:	8808d27a 	srli	r4,r17,9
 8003830:	20007126 	beq	r4,zero,80039f8 <_malloc_r+0x2cc>
 8003834:	00800104 	movi	r2,4
 8003838:	1100eb36 	bltu	r2,r4,8003be8 <_malloc_r+0x4bc>
 800383c:	8808d1ba 	srli	r4,r17,6
 8003840:	21000e04 	addi	r4,r4,56
 8003844:	210b883a 	add	r5,r4,r4
 8003848:	294b883a 	add	r5,r5,r5
 800384c:	294b883a 	add	r5,r5,r5
 8003850:	04c20074 	movhi	r19,2049
 8003854:	9cd40004 	addi	r19,r19,20480
 8003858:	994b883a 	add	r5,r19,r5
 800385c:	2c000317 	ldw	r16,12(r5)
 8003860:	2c000e26 	beq	r5,r16,800389c <_malloc_r+0x170>
 8003864:	80c00117 	ldw	r3,4(r16)
 8003868:	01ffff04 	movi	r7,-4
 800386c:	018003c4 	movi	r6,15
 8003870:	19c6703a 	and	r3,r3,r7
 8003874:	1c45c83a 	sub	r2,r3,r17
 8003878:	30800716 	blt	r6,r2,8003898 <_malloc_r+0x16c>
 800387c:	1000610e 	bge	r2,zero,8003a04 <_malloc_r+0x2d8>
 8003880:	84000317 	ldw	r16,12(r16)
 8003884:	2c000526 	beq	r5,r16,800389c <_malloc_r+0x170>
 8003888:	80c00117 	ldw	r3,4(r16)
 800388c:	19c6703a 	and	r3,r3,r7
 8003890:	1c45c83a 	sub	r2,r3,r17
 8003894:	30bff90e 	bge	r6,r2,800387c <_malloc_r+0x150>
 8003898:	213fffc4 	addi	r4,r4,-1
 800389c:	21000044 	addi	r4,r4,1
 80038a0:	9c000417 	ldw	r16,16(r19)
 80038a4:	00c20074 	movhi	r3,2049
 80038a8:	18d40004 	addi	r3,r3,20480
 80038ac:	1a400204 	addi	r9,r3,8
 80038b0:	8240ff26 	beq	r16,r9,8003cb0 <_malloc_r+0x584>
 80038b4:	81400117 	ldw	r5,4(r16)
 80038b8:	00bfff04 	movi	r2,-4
 80038bc:	018003c4 	movi	r6,15
 80038c0:	2884703a 	and	r2,r5,r2
 80038c4:	144bc83a 	sub	r5,r2,r17
 80038c8:	3140ea16 	blt	r6,r5,8003c74 <_malloc_r+0x548>
 80038cc:	1a400515 	stw	r9,20(r3)
 80038d0:	1a400415 	stw	r9,16(r3)
 80038d4:	2800570e 	bge	r5,zero,8003a34 <_malloc_r+0x308>
 80038d8:	01407fc4 	movi	r5,511
 80038dc:	2880ca36 	bltu	r5,r2,8003c08 <_malloc_r+0x4dc>
 80038e0:	1004d0fa 	srli	r2,r2,3
 80038e4:	02000044 	movi	r8,1
 80038e8:	19c00117 	ldw	r7,4(r3)
 80038ec:	108b883a 	add	r5,r2,r2
 80038f0:	294b883a 	add	r5,r5,r5
 80038f4:	1005d0ba 	srai	r2,r2,2
 80038f8:	294b883a 	add	r5,r5,r5
 80038fc:	28cb883a 	add	r5,r5,r3
 8003900:	29800217 	ldw	r6,8(r5)
 8003904:	4084983a 	sll	r2,r8,r2
 8003908:	81400315 	stw	r5,12(r16)
 800390c:	81800215 	stw	r6,8(r16)
 8003910:	11c4b03a 	or	r2,r2,r7
 8003914:	18800115 	stw	r2,4(r3)
 8003918:	2c000215 	stw	r16,8(r5)
 800391c:	34000315 	stw	r16,12(r6)
 8003920:	200bd0ba 	srai	r5,r4,2
 8003924:	00c00044 	movi	r3,1
 8003928:	194a983a 	sll	r5,r3,r5
 800392c:	11404936 	bltu	r2,r5,8003a54 <_malloc_r+0x328>
 8003930:	1146703a 	and	r3,r2,r5
 8003934:	18000a1e 	bne	r3,zero,8003960 <_malloc_r+0x234>
 8003938:	00ffff04 	movi	r3,-4
 800393c:	294b883a 	add	r5,r5,r5
 8003940:	20c8703a 	and	r4,r4,r3
 8003944:	1146703a 	and	r3,r2,r5
 8003948:	21000104 	addi	r4,r4,4
 800394c:	1800041e 	bne	r3,zero,8003960 <_malloc_r+0x234>
 8003950:	294b883a 	add	r5,r5,r5
 8003954:	1146703a 	and	r3,r2,r5
 8003958:	21000104 	addi	r4,r4,4
 800395c:	183ffc26 	beq	r3,zero,8003950 <_malloc_r+0x224>
 8003960:	023fff04 	movi	r8,-4
 8003964:	01c003c4 	movi	r7,15
 8003968:	2105883a 	add	r2,r4,r4
 800396c:	1085883a 	add	r2,r2,r2
 8003970:	1085883a 	add	r2,r2,r2
 8003974:	9899883a 	add	r12,r19,r2
 8003978:	62800304 	addi	r10,r12,12
 800397c:	2017883a 	mov	r11,r4
 8003980:	54000017 	ldw	r16,0(r10)
 8003984:	51bffd04 	addi	r6,r10,-12
 8003988:	8180041e 	bne	r16,r6,800399c <_malloc_r+0x270>
 800398c:	0000ca06 	br	8003cb8 <_malloc_r+0x58c>
 8003990:	10001c0e 	bge	r2,zero,8003a04 <_malloc_r+0x2d8>
 8003994:	84000317 	ldw	r16,12(r16)
 8003998:	8180c726 	beq	r16,r6,8003cb8 <_malloc_r+0x58c>
 800399c:	80c00117 	ldw	r3,4(r16)
 80039a0:	1a06703a 	and	r3,r3,r8
 80039a4:	1c45c83a 	sub	r2,r3,r17
 80039a8:	38bff90e 	bge	r7,r2,8003990 <_malloc_r+0x264>
 80039ac:	81000317 	ldw	r4,12(r16)
 80039b0:	81400217 	ldw	r5,8(r16)
 80039b4:	8447883a 	add	r3,r16,r17
 80039b8:	8c400054 	ori	r17,r17,1
 80039bc:	29000315 	stw	r4,12(r5)
 80039c0:	21400215 	stw	r5,8(r4)
 80039c4:	84400115 	stw	r17,4(r16)
 80039c8:	1889883a 	add	r4,r3,r2
 80039cc:	11400054 	ori	r5,r2,1
 80039d0:	98c00515 	stw	r3,20(r19)
 80039d4:	98c00415 	stw	r3,16(r19)
 80039d8:	20800015 	stw	r2,0(r4)
 80039dc:	1a400315 	stw	r9,12(r3)
 80039e0:	1a400215 	stw	r9,8(r3)
 80039e4:	19400115 	stw	r5,4(r3)
 80039e8:	9009883a 	mov	r4,r18
 80039ec:	80115cc0 	call	80115cc <__malloc_unlock>
 80039f0:	80800204 	addi	r2,r16,8
 80039f4:	003f7b06 	br	80037e4 <_malloc_r+0xb8>
 80039f8:	8808d0fa 	srli	r4,r17,3
 80039fc:	210b883a 	add	r5,r4,r4
 8003a00:	003f9106 	br	8003848 <_malloc_r+0x11c>
 8003a04:	80c7883a 	add	r3,r16,r3
 8003a08:	19400117 	ldw	r5,4(r3)
 8003a0c:	80800317 	ldw	r2,12(r16)
 8003a10:	81000217 	ldw	r4,8(r16)
 8003a14:	29400054 	ori	r5,r5,1
 8003a18:	19400115 	stw	r5,4(r3)
 8003a1c:	20800315 	stw	r2,12(r4)
 8003a20:	11000215 	stw	r4,8(r2)
 8003a24:	9009883a 	mov	r4,r18
 8003a28:	80115cc0 	call	80115cc <__malloc_unlock>
 8003a2c:	80800204 	addi	r2,r16,8
 8003a30:	003f6c06 	br	80037e4 <_malloc_r+0xb8>
 8003a34:	8085883a 	add	r2,r16,r2
 8003a38:	10c00117 	ldw	r3,4(r2)
 8003a3c:	9009883a 	mov	r4,r18
 8003a40:	18c00054 	ori	r3,r3,1
 8003a44:	10c00115 	stw	r3,4(r2)
 8003a48:	80115cc0 	call	80115cc <__malloc_unlock>
 8003a4c:	80800204 	addi	r2,r16,8
 8003a50:	003f6406 	br	80037e4 <_malloc_r+0xb8>
 8003a54:	9c000217 	ldw	r16,8(r19)
 8003a58:	00bfff04 	movi	r2,-4
 8003a5c:	85400117 	ldw	r21,4(r16)
 8003a60:	a8aa703a 	and	r21,r21,r2
 8003a64:	ac400336 	bltu	r21,r17,8003a74 <_malloc_r+0x348>
 8003a68:	ac45c83a 	sub	r2,r21,r17
 8003a6c:	00c003c4 	movi	r3,15
 8003a70:	18805316 	blt	r3,r2,8003bc0 <_malloc_r+0x494>
 8003a74:	d5e6e217 	ldw	r23,-25720(gp)
 8003a78:	d0e00217 	ldw	r3,-32760(gp)
 8003a7c:	00bfffc4 	movi	r2,-1
 8003a80:	8579883a 	add	fp,r16,r21
 8003a84:	8def883a 	add	r23,r17,r23
 8003a88:	1880d226 	beq	r3,r2,8003dd4 <_malloc_r+0x6a8>
 8003a8c:	bdc403c4 	addi	r23,r23,4111
 8003a90:	00bc0004 	movi	r2,-4096
 8003a94:	b8ae703a 	and	r23,r23,r2
 8003a98:	9009883a 	mov	r4,r18
 8003a9c:	b80b883a 	mov	r5,r23
 8003aa0:	80044640 	call	8004464 <_sbrk_r>
 8003aa4:	1029883a 	mov	r20,r2
 8003aa8:	00bfffc4 	movi	r2,-1
 8003aac:	a080d126 	beq	r20,r2,8003df4 <_malloc_r+0x6c8>
 8003ab0:	a7009f36 	bltu	r20,fp,8003d30 <_malloc_r+0x604>
 8003ab4:	058200b4 	movhi	r22,2050
 8003ab8:	b5a08704 	addi	r22,r22,-32228
 8003abc:	b0800017 	ldw	r2,0(r22)
 8003ac0:	b885883a 	add	r2,r23,r2
 8003ac4:	b0800015 	stw	r2,0(r22)
 8003ac8:	e500cf26 	beq	fp,r20,8003e08 <_malloc_r+0x6dc>
 8003acc:	d1200217 	ldw	r4,-32760(gp)
 8003ad0:	00ffffc4 	movi	r3,-1
 8003ad4:	20c0e026 	beq	r4,r3,8003e58 <_malloc_r+0x72c>
 8003ad8:	a739c83a 	sub	fp,r20,fp
 8003adc:	1705883a 	add	r2,r2,fp
 8003ae0:	b0800015 	stw	r2,0(r22)
 8003ae4:	a08001cc 	andi	r2,r20,7
 8003ae8:	1000a526 	beq	r2,zero,8003d80 <_malloc_r+0x654>
 8003aec:	a0a9c83a 	sub	r20,r20,r2
 8003af0:	00c40204 	movi	r3,4104
 8003af4:	a5000204 	addi	r20,r20,8
 8003af8:	1885c83a 	sub	r2,r3,r2
 8003afc:	a5c7883a 	add	r3,r20,r23
 8003b00:	18c3ffcc 	andi	r3,r3,4095
 8003b04:	10efc83a 	sub	r23,r2,r3
 8003b08:	9009883a 	mov	r4,r18
 8003b0c:	b80b883a 	mov	r5,r23
 8003b10:	80044640 	call	8004464 <_sbrk_r>
 8003b14:	00ffffc4 	movi	r3,-1
 8003b18:	10c0cc26 	beq	r2,r3,8003e4c <_malloc_r+0x720>
 8003b1c:	1505c83a 	sub	r2,r2,r20
 8003b20:	b887883a 	add	r3,r23,r2
 8003b24:	18c00054 	ori	r3,r3,1
 8003b28:	b0800017 	ldw	r2,0(r22)
 8003b2c:	9d000215 	stw	r20,8(r19)
 8003b30:	a0c00115 	stw	r3,4(r20)
 8003b34:	b885883a 	add	r2,r23,r2
 8003b38:	b0800015 	stw	r2,0(r22)
 8003b3c:	84c00e26 	beq	r16,r19,8003b78 <_malloc_r+0x44c>
 8003b40:	00c003c4 	movi	r3,15
 8003b44:	1d40902e 	bgeu	r3,r21,8003d88 <_malloc_r+0x65c>
 8003b48:	ad7ffd04 	addi	r21,r21,-12
 8003b4c:	013ffe04 	movi	r4,-8
 8003b50:	a908703a 	and	r4,r21,r4
 8003b54:	810b883a 	add	r5,r16,r4
 8003b58:	01800144 	movi	r6,5
 8003b5c:	29800115 	stw	r6,4(r5)
 8003b60:	29800215 	stw	r6,8(r5)
 8003b64:	81400117 	ldw	r5,4(r16)
 8003b68:	2940004c 	andi	r5,r5,1
 8003b6c:	214ab03a 	or	r5,r4,r5
 8003b70:	81400115 	stw	r5,4(r16)
 8003b74:	1900ae36 	bltu	r3,r4,8003e30 <_malloc_r+0x704>
 8003b78:	d0e6e117 	ldw	r3,-25724(gp)
 8003b7c:	1880012e 	bgeu	r3,r2,8003b84 <_malloc_r+0x458>
 8003b80:	d0a6e115 	stw	r2,-25724(gp)
 8003b84:	d0e6e017 	ldw	r3,-25728(gp)
 8003b88:	9c000217 	ldw	r16,8(r19)
 8003b8c:	1880012e 	bgeu	r3,r2,8003b94 <_malloc_r+0x468>
 8003b90:	d0a6e015 	stw	r2,-25728(gp)
 8003b94:	80c00117 	ldw	r3,4(r16)
 8003b98:	00bfff04 	movi	r2,-4
 8003b9c:	1886703a 	and	r3,r3,r2
 8003ba0:	1c45c83a 	sub	r2,r3,r17
 8003ba4:	1c400236 	bltu	r3,r17,8003bb0 <_malloc_r+0x484>
 8003ba8:	00c003c4 	movi	r3,15
 8003bac:	18800416 	blt	r3,r2,8003bc0 <_malloc_r+0x494>
 8003bb0:	9009883a 	mov	r4,r18
 8003bb4:	80115cc0 	call	80115cc <__malloc_unlock>
 8003bb8:	0005883a 	mov	r2,zero
 8003bbc:	003f0906 	br	80037e4 <_malloc_r+0xb8>
 8003bc0:	88c00054 	ori	r3,r17,1
 8003bc4:	10800054 	ori	r2,r2,1
 8003bc8:	80c00115 	stw	r3,4(r16)
 8003bcc:	8463883a 	add	r17,r16,r17
 8003bd0:	88800115 	stw	r2,4(r17)
 8003bd4:	9009883a 	mov	r4,r18
 8003bd8:	9c400215 	stw	r17,8(r19)
 8003bdc:	80115cc0 	call	80115cc <__malloc_unlock>
 8003be0:	80800204 	addi	r2,r16,8
 8003be4:	003eff06 	br	80037e4 <_malloc_r+0xb8>
 8003be8:	00800504 	movi	r2,20
 8003bec:	1100492e 	bgeu	r2,r4,8003d14 <_malloc_r+0x5e8>
 8003bf0:	00801504 	movi	r2,84
 8003bf4:	11005c36 	bltu	r2,r4,8003d68 <_malloc_r+0x63c>
 8003bf8:	8808d33a 	srli	r4,r17,12
 8003bfc:	21001b84 	addi	r4,r4,110
 8003c00:	210b883a 	add	r5,r4,r4
 8003c04:	003f1006 	br	8003848 <_malloc_r+0x11c>
 8003c08:	1006d27a 	srli	r3,r2,9
 8003c0c:	01400104 	movi	r5,4
 8003c10:	28c0432e 	bgeu	r5,r3,8003d20 <_malloc_r+0x5f4>
 8003c14:	01400504 	movi	r5,20
 8003c18:	28c07036 	bltu	r5,r3,8003ddc <_malloc_r+0x6b0>
 8003c1c:	194016c4 	addi	r5,r3,91
 8003c20:	294d883a 	add	r6,r5,r5
 8003c24:	318d883a 	add	r6,r6,r6
 8003c28:	318d883a 	add	r6,r6,r6
 8003c2c:	998d883a 	add	r6,r19,r6
 8003c30:	30c00217 	ldw	r3,8(r6)
 8003c34:	01c20074 	movhi	r7,2049
 8003c38:	39d40004 	addi	r7,r7,20480
 8003c3c:	19805726 	beq	r3,r6,8003d9c <_malloc_r+0x670>
 8003c40:	01ffff04 	movi	r7,-4
 8003c44:	19400117 	ldw	r5,4(r3)
 8003c48:	29ca703a 	and	r5,r5,r7
 8003c4c:	1140022e 	bgeu	r2,r5,8003c58 <_malloc_r+0x52c>
 8003c50:	18c00217 	ldw	r3,8(r3)
 8003c54:	30fffb1e 	bne	r6,r3,8003c44 <_malloc_r+0x518>
 8003c58:	19400317 	ldw	r5,12(r3)
 8003c5c:	98800117 	ldw	r2,4(r19)
 8003c60:	81400315 	stw	r5,12(r16)
 8003c64:	80c00215 	stw	r3,8(r16)
 8003c68:	2c000215 	stw	r16,8(r5)
 8003c6c:	1c000315 	stw	r16,12(r3)
 8003c70:	003f2b06 	br	8003920 <_malloc_r+0x1f4>
 8003c74:	8445883a 	add	r2,r16,r17
 8003c78:	8c400054 	ori	r17,r17,1
 8003c7c:	18800515 	stw	r2,20(r3)
 8003c80:	18800415 	stw	r2,16(r3)
 8003c84:	29000054 	ori	r4,r5,1
 8003c88:	1147883a 	add	r3,r2,r5
 8003c8c:	84400115 	stw	r17,4(r16)
 8003c90:	11000115 	stw	r4,4(r2)
 8003c94:	12400315 	stw	r9,12(r2)
 8003c98:	12400215 	stw	r9,8(r2)
 8003c9c:	19400015 	stw	r5,0(r3)
 8003ca0:	9009883a 	mov	r4,r18
 8003ca4:	80115cc0 	call	80115cc <__malloc_unlock>
 8003ca8:	80800204 	addi	r2,r16,8
 8003cac:	003ecd06 	br	80037e4 <_malloc_r+0xb8>
 8003cb0:	18800117 	ldw	r2,4(r3)
 8003cb4:	003f1a06 	br	8003920 <_malloc_r+0x1f4>
 8003cb8:	5ac00044 	addi	r11,r11,1
 8003cbc:	588000cc 	andi	r2,r11,3
 8003cc0:	52800204 	addi	r10,r10,8
 8003cc4:	103f2e1e 	bne	r2,zero,8003980 <_malloc_r+0x254>
 8003cc8:	20c000cc 	andi	r3,r4,3
 8003ccc:	60bffe04 	addi	r2,r12,-8
 8003cd0:	18006f26 	beq	r3,zero,8003e90 <_malloc_r+0x764>
 8003cd4:	63000017 	ldw	r12,0(r12)
 8003cd8:	213fffc4 	addi	r4,r4,-1
 8003cdc:	60bffa26 	beq	r12,r2,8003cc8 <_malloc_r+0x59c>
 8003ce0:	98800117 	ldw	r2,4(r19)
 8003ce4:	294b883a 	add	r5,r5,r5
 8003ce8:	117f5a36 	bltu	r2,r5,8003a54 <_malloc_r+0x328>
 8003cec:	283f5926 	beq	r5,zero,8003a54 <_malloc_r+0x328>
 8003cf0:	1146703a 	and	r3,r2,r5
 8003cf4:	18001626 	beq	r3,zero,8003d50 <_malloc_r+0x624>
 8003cf8:	5809883a 	mov	r4,r11
 8003cfc:	003f1a06 	br	8003968 <_malloc_r+0x23c>
 8003d00:	80800204 	addi	r2,r16,8
 8003d04:	84000517 	ldw	r16,20(r16)
 8003d08:	143ea81e 	bne	r2,r16,80037ac <_malloc_r+0x80>
 8003d0c:	21000084 	addi	r4,r4,2
 8003d10:	003ee306 	br	80038a0 <_malloc_r+0x174>
 8003d14:	210016c4 	addi	r4,r4,91
 8003d18:	210b883a 	add	r5,r4,r4
 8003d1c:	003eca06 	br	8003848 <_malloc_r+0x11c>
 8003d20:	100ad1ba 	srli	r5,r2,6
 8003d24:	29400e04 	addi	r5,r5,56
 8003d28:	294d883a 	add	r6,r5,r5
 8003d2c:	003fbd06 	br	8003c24 <_malloc_r+0x4f8>
 8003d30:	84ff6026 	beq	r16,r19,8003ab4 <_malloc_r+0x388>
 8003d34:	00820074 	movhi	r2,2049
 8003d38:	10940004 	addi	r2,r2,20480
 8003d3c:	14000217 	ldw	r16,8(r2)
 8003d40:	00bfff04 	movi	r2,-4
 8003d44:	80c00117 	ldw	r3,4(r16)
 8003d48:	1886703a 	and	r3,r3,r2
 8003d4c:	003f9406 	br	8003ba0 <_malloc_r+0x474>
 8003d50:	294b883a 	add	r5,r5,r5
 8003d54:	1146703a 	and	r3,r2,r5
 8003d58:	5ac00104 	addi	r11,r11,4
 8003d5c:	183ffc26 	beq	r3,zero,8003d50 <_malloc_r+0x624>
 8003d60:	5809883a 	mov	r4,r11
 8003d64:	003f0006 	br	8003968 <_malloc_r+0x23c>
 8003d68:	00805504 	movi	r2,340
 8003d6c:	11001336 	bltu	r2,r4,8003dbc <_malloc_r+0x690>
 8003d70:	8808d3fa 	srli	r4,r17,15
 8003d74:	21001dc4 	addi	r4,r4,119
 8003d78:	210b883a 	add	r5,r4,r4
 8003d7c:	003eb206 	br	8003848 <_malloc_r+0x11c>
 8003d80:	00840004 	movi	r2,4096
 8003d84:	003f5d06 	br	8003afc <_malloc_r+0x3d0>
 8003d88:	00800044 	movi	r2,1
 8003d8c:	a0800115 	stw	r2,4(r20)
 8003d90:	a021883a 	mov	r16,r20
 8003d94:	0007883a 	mov	r3,zero
 8003d98:	003f8106 	br	8003ba0 <_malloc_r+0x474>
 8003d9c:	280bd0ba 	srai	r5,r5,2
 8003da0:	01800044 	movi	r6,1
 8003da4:	38800117 	ldw	r2,4(r7)
 8003da8:	314c983a 	sll	r6,r6,r5
 8003dac:	180b883a 	mov	r5,r3
 8003db0:	3084b03a 	or	r2,r6,r2
 8003db4:	38800115 	stw	r2,4(r7)
 8003db8:	003fa906 	br	8003c60 <_malloc_r+0x534>
 8003dbc:	00815504 	movi	r2,1364
 8003dc0:	11001836 	bltu	r2,r4,8003e24 <_malloc_r+0x6f8>
 8003dc4:	8808d4ba 	srli	r4,r17,18
 8003dc8:	21001f04 	addi	r4,r4,124
 8003dcc:	210b883a 	add	r5,r4,r4
 8003dd0:	003e9d06 	br	8003848 <_malloc_r+0x11c>
 8003dd4:	bdc00404 	addi	r23,r23,16
 8003dd8:	003f2f06 	br	8003a98 <_malloc_r+0x36c>
 8003ddc:	01401504 	movi	r5,84
 8003de0:	28c01f36 	bltu	r5,r3,8003e60 <_malloc_r+0x734>
 8003de4:	100ad33a 	srli	r5,r2,12
 8003de8:	29401b84 	addi	r5,r5,110
 8003dec:	294d883a 	add	r6,r5,r5
 8003df0:	003f8c06 	br	8003c24 <_malloc_r+0x4f8>
 8003df4:	9c000217 	ldw	r16,8(r19)
 8003df8:	00bfff04 	movi	r2,-4
 8003dfc:	80c00117 	ldw	r3,4(r16)
 8003e00:	1886703a 	and	r3,r3,r2
 8003e04:	003f6606 	br	8003ba0 <_malloc_r+0x474>
 8003e08:	e0c3ffcc 	andi	r3,fp,4095
 8003e0c:	183f2f1e 	bne	r3,zero,8003acc <_malloc_r+0x3a0>
 8003e10:	98c00217 	ldw	r3,8(r19)
 8003e14:	bd49883a 	add	r4,r23,r21
 8003e18:	21000054 	ori	r4,r4,1
 8003e1c:	19000115 	stw	r4,4(r3)
 8003e20:	003f5506 	br	8003b78 <_malloc_r+0x44c>
 8003e24:	01403f04 	movi	r5,252
 8003e28:	01001f84 	movi	r4,126
 8003e2c:	003e8606 	br	8003848 <_malloc_r+0x11c>
 8003e30:	9009883a 	mov	r4,r18
 8003e34:	81400204 	addi	r5,r16,8
 8003e38:	8002ae00 	call	8002ae0 <_free_r>
 8003e3c:	008200b4 	movhi	r2,2050
 8003e40:	10a08704 	addi	r2,r2,-32228
 8003e44:	10800017 	ldw	r2,0(r2)
 8003e48:	003f4b06 	br	8003b78 <_malloc_r+0x44c>
 8003e4c:	00c00044 	movi	r3,1
 8003e50:	002f883a 	mov	r23,zero
 8003e54:	003f3406 	br	8003b28 <_malloc_r+0x3fc>
 8003e58:	d5200215 	stw	r20,-32760(gp)
 8003e5c:	003f2106 	br	8003ae4 <_malloc_r+0x3b8>
 8003e60:	01405504 	movi	r5,340
 8003e64:	28c00436 	bltu	r5,r3,8003e78 <_malloc_r+0x74c>
 8003e68:	100ad3fa 	srli	r5,r2,15
 8003e6c:	29401dc4 	addi	r5,r5,119
 8003e70:	294d883a 	add	r6,r5,r5
 8003e74:	003f6b06 	br	8003c24 <_malloc_r+0x4f8>
 8003e78:	01415504 	movi	r5,1364
 8003e7c:	28c00936 	bltu	r5,r3,8003ea4 <_malloc_r+0x778>
 8003e80:	100ad4ba 	srli	r5,r2,18
 8003e84:	29401f04 	addi	r5,r5,124
 8003e88:	294d883a 	add	r6,r5,r5
 8003e8c:	003f6506 	br	8003c24 <_malloc_r+0x4f8>
 8003e90:	98800117 	ldw	r2,4(r19)
 8003e94:	0146303a 	nor	r3,zero,r5
 8003e98:	1884703a 	and	r2,r3,r2
 8003e9c:	98800115 	stw	r2,4(r19)
 8003ea0:	003f9006 	br	8003ce4 <_malloc_r+0x5b8>
 8003ea4:	01803f04 	movi	r6,252
 8003ea8:	01401f84 	movi	r5,126
 8003eac:	003f5d06 	br	8003c24 <_malloc_r+0x4f8>

08003eb0 <memcpy>:
 8003eb0:	defffb04 	addi	sp,sp,-20
 8003eb4:	dc000015 	stw	r16,0(sp)
 8003eb8:	dfc00415 	stw	ra,16(sp)
 8003ebc:	dcc00315 	stw	r19,12(sp)
 8003ec0:	dc800215 	stw	r18,8(sp)
 8003ec4:	dc400115 	stw	r17,4(sp)
 8003ec8:	00c003c4 	movi	r3,15
 8003ecc:	2021883a 	mov	r16,r4
 8003ed0:	3005883a 	mov	r2,r6
 8003ed4:	1980032e 	bgeu	r3,r6,8003ee4 <memcpy+0x34>
 8003ed8:	2906b03a 	or	r3,r5,r4
 8003edc:	18c000cc 	andi	r3,r3,3
 8003ee0:	18001026 	beq	r3,zero,8003f24 <memcpy+0x74>
 8003ee4:	8007883a 	mov	r3,r16
 8003ee8:	288f883a 	add	r7,r5,r2
 8003eec:	10000526 	beq	r2,zero,8003f04 <memcpy+0x54>
 8003ef0:	29800003 	ldbu	r6,0(r5)
 8003ef4:	18c00044 	addi	r3,r3,1
 8003ef8:	29400044 	addi	r5,r5,1
 8003efc:	19bfffc5 	stb	r6,-1(r3)
 8003f00:	29fffb1e 	bne	r5,r7,8003ef0 <memcpy+0x40>
 8003f04:	8005883a 	mov	r2,r16
 8003f08:	dfc00417 	ldw	ra,16(sp)
 8003f0c:	dcc00317 	ldw	r19,12(sp)
 8003f10:	dc800217 	ldw	r18,8(sp)
 8003f14:	dc400117 	ldw	r17,4(sp)
 8003f18:	dc000017 	ldw	r16,0(sp)
 8003f1c:	dec00504 	addi	sp,sp,20
 8003f20:	f800283a 	ret
 8003f24:	32bffc04 	addi	r10,r6,-16
 8003f28:	5014d13a 	srli	r10,r10,4
 8003f2c:	20800404 	addi	r2,r4,16
 8003f30:	2007883a 	mov	r3,r4
 8003f34:	5008913a 	slli	r4,r10,4
 8003f38:	280f883a 	mov	r7,r5
 8003f3c:	1105883a 	add	r2,r2,r4
 8003f40:	3a000017 	ldw	r8,0(r7)
 8003f44:	18c00404 	addi	r3,r3,16
 8003f48:	39c00404 	addi	r7,r7,16
 8003f4c:	1a3ffc15 	stw	r8,-16(r3)
 8003f50:	3a3ffd17 	ldw	r8,-12(r7)
 8003f54:	1a3ffd15 	stw	r8,-12(r3)
 8003f58:	3a3ffe17 	ldw	r8,-8(r7)
 8003f5c:	1a3ffe15 	stw	r8,-8(r3)
 8003f60:	3a3fff17 	ldw	r8,-4(r7)
 8003f64:	1a3fff15 	stw	r8,-4(r3)
 8003f68:	18bff51e 	bne	r3,r2,8003f40 <memcpy+0x90>
 8003f6c:	52800044 	addi	r10,r10,1
 8003f70:	5014913a 	slli	r10,r10,4
 8003f74:	308003cc 	andi	r2,r6,15
 8003f78:	010000c4 	movi	r4,3
 8003f7c:	8287883a 	add	r3,r16,r10
 8003f80:	2a95883a 	add	r10,r5,r10
 8003f84:	2080182e 	bgeu	r4,r2,8003fe8 <memcpy+0x138>
 8003f88:	147fff04 	addi	r17,r2,-4
 8003f8c:	8808d0ba 	srli	r4,r17,2
 8003f90:	1a400104 	addi	r9,r3,4
 8003f94:	180d883a 	mov	r6,r3
 8003f98:	2105883a 	add	r2,r4,r4
 8003f9c:	1085883a 	add	r2,r2,r2
 8003fa0:	4893883a 	add	r9,r9,r2
 8003fa4:	500f883a 	mov	r7,r10
 8003fa8:	3a000017 	ldw	r8,0(r7)
 8003fac:	31800104 	addi	r6,r6,4
 8003fb0:	39c00104 	addi	r7,r7,4
 8003fb4:	323fff15 	stw	r8,-4(r6)
 8003fb8:	327ffb1e 	bne	r6,r9,8003fa8 <memcpy+0xf8>
 8003fbc:	20800044 	addi	r2,r4,1
 8003fc0:	1085883a 	add	r2,r2,r2
 8003fc4:	1085883a 	add	r2,r2,r2
 8003fc8:	017fff04 	movi	r5,-4
 8003fcc:	18a5883a 	add	r18,r3,r2
 8003fd0:	50a7883a 	add	r19,r10,r2
 8003fd4:	8001a6c0 	call	8001a6c <__mulsi3>
 8003fd8:	1445883a 	add	r2,r2,r17
 8003fdc:	980b883a 	mov	r5,r19
 8003fe0:	9007883a 	mov	r3,r18
 8003fe4:	003fc006 	br	8003ee8 <memcpy+0x38>
 8003fe8:	500b883a 	mov	r5,r10
 8003fec:	003fbe06 	br	8003ee8 <memcpy+0x38>

08003ff0 <memset>:
 8003ff0:	00c000c4 	movi	r3,3
 8003ff4:	2005883a 	mov	r2,r4
 8003ff8:	29403fcc 	andi	r5,r5,255
 8003ffc:	19802d2e 	bgeu	r3,r6,80040b4 <memset+0xc4>
 8004000:	20c6703a 	and	r3,r4,r3
 8004004:	18002e1e 	bne	r3,zero,80040c0 <memset+0xd0>
 8004008:	2806923a 	slli	r3,r5,8
 800400c:	010003c4 	movi	r4,15
 8004010:	3011883a 	mov	r8,r6
 8004014:	1946b03a 	or	r3,r3,r5
 8004018:	180e943a 	slli	r7,r3,16
 800401c:	38ceb03a 	or	r7,r7,r3
 8004020:	1007883a 	mov	r3,r2
 8004024:	21800f2e 	bgeu	r4,r6,8004064 <memset+0x74>
 8004028:	19c00015 	stw	r7,0(r3)
 800402c:	19c00115 	stw	r7,4(r3)
 8004030:	19c00215 	stw	r7,8(r3)
 8004034:	19c00315 	stw	r7,12(r3)
 8004038:	423ffc04 	addi	r8,r8,-16
 800403c:	18c00404 	addi	r3,r3,16
 8004040:	223ff936 	bltu	r4,r8,8004028 <memset+0x38>
 8004044:	30fffc04 	addi	r3,r6,-16
 8004048:	1806d13a 	srli	r3,r3,4
 800404c:	318003cc 	andi	r6,r6,15
 8004050:	010000c4 	movi	r4,3
 8004054:	18c00044 	addi	r3,r3,1
 8004058:	1806913a 	slli	r3,r3,4
 800405c:	10c7883a 	add	r3,r2,r3
 8004060:	21800e2e 	bgeu	r4,r6,800409c <memset+0xac>
 8004064:	1813883a 	mov	r9,r3
 8004068:	3011883a 	mov	r8,r6
 800406c:	010000c4 	movi	r4,3
 8004070:	49c00015 	stw	r7,0(r9)
 8004074:	423fff04 	addi	r8,r8,-4
 8004078:	4a400104 	addi	r9,r9,4
 800407c:	223ffc36 	bltu	r4,r8,8004070 <memset+0x80>
 8004080:	313fff04 	addi	r4,r6,-4
 8004084:	2008d0ba 	srli	r4,r4,2
 8004088:	318000cc 	andi	r6,r6,3
 800408c:	21000044 	addi	r4,r4,1
 8004090:	2109883a 	add	r4,r4,r4
 8004094:	2109883a 	add	r4,r4,r4
 8004098:	1907883a 	add	r3,r3,r4
 800409c:	30000a26 	beq	r6,zero,80040c8 <memset+0xd8>
 80040a0:	198d883a 	add	r6,r3,r6
 80040a4:	19400005 	stb	r5,0(r3)
 80040a8:	18c00044 	addi	r3,r3,1
 80040ac:	19bffd1e 	bne	r3,r6,80040a4 <memset+0xb4>
 80040b0:	f800283a 	ret
 80040b4:	2007883a 	mov	r3,r4
 80040b8:	303ff91e 	bne	r6,zero,80040a0 <memset+0xb0>
 80040bc:	00000206 	br	80040c8 <memset+0xd8>
 80040c0:	2007883a 	mov	r3,r4
 80040c4:	003ff606 	br	80040a0 <memset+0xb0>
 80040c8:	f800283a 	ret

080040cc <_open_r>:
 80040cc:	defffd04 	addi	sp,sp,-12
 80040d0:	dc400115 	stw	r17,4(sp)
 80040d4:	dc000015 	stw	r16,0(sp)
 80040d8:	2023883a 	mov	r17,r4
 80040dc:	040200b4 	movhi	r16,2050
 80040e0:	84207a04 	addi	r16,r16,-32280
 80040e4:	2809883a 	mov	r4,r5
 80040e8:	300b883a 	mov	r5,r6
 80040ec:	380d883a 	mov	r6,r7
 80040f0:	dfc00215 	stw	ra,8(sp)
 80040f4:	80000015 	stw	zero,0(r16)
 80040f8:	801172c0 	call	801172c <open>
 80040fc:	00ffffc4 	movi	r3,-1
 8004100:	10c00526 	beq	r2,r3,8004118 <_open_r+0x4c>
 8004104:	dfc00217 	ldw	ra,8(sp)
 8004108:	dc400117 	ldw	r17,4(sp)
 800410c:	dc000017 	ldw	r16,0(sp)
 8004110:	dec00304 	addi	sp,sp,12
 8004114:	f800283a 	ret
 8004118:	80c00017 	ldw	r3,0(r16)
 800411c:	183ff926 	beq	r3,zero,8004104 <_open_r+0x38>
 8004120:	88c00015 	stw	r3,0(r17)
 8004124:	dfc00217 	ldw	ra,8(sp)
 8004128:	dc400117 	ldw	r17,4(sp)
 800412c:	dc000017 	ldw	r16,0(sp)
 8004130:	dec00304 	addi	sp,sp,12
 8004134:	f800283a 	ret

08004138 <_printf_r>:
 8004138:	defffd04 	addi	sp,sp,-12
 800413c:	dfc00015 	stw	ra,0(sp)
 8004140:	d9800115 	stw	r6,4(sp)
 8004144:	d9c00215 	stw	r7,8(sp)
 8004148:	280d883a 	mov	r6,r5
 800414c:	21400217 	ldw	r5,8(r4)
 8004150:	d9c00104 	addi	r7,sp,4
 8004154:	80047fc0 	call	80047fc <___vfprintf_internal_r>
 8004158:	dfc00017 	ldw	ra,0(sp)
 800415c:	dec00304 	addi	sp,sp,12
 8004160:	f800283a 	ret

08004164 <printf>:
 8004164:	defffc04 	addi	sp,sp,-16
 8004168:	dfc00015 	stw	ra,0(sp)
 800416c:	d9400115 	stw	r5,4(sp)
 8004170:	d9800215 	stw	r6,8(sp)
 8004174:	d9c00315 	stw	r7,12(sp)
 8004178:	00820074 	movhi	r2,2049
 800417c:	10999c04 	addi	r2,r2,26224
 8004180:	10800017 	ldw	r2,0(r2)
 8004184:	200b883a 	mov	r5,r4
 8004188:	d9800104 	addi	r6,sp,4
 800418c:	11000217 	ldw	r4,8(r2)
 8004190:	80066780 	call	8006678 <__vfprintf_internal>
 8004194:	dfc00017 	ldw	ra,0(sp)
 8004198:	dec00404 	addi	sp,sp,16
 800419c:	f800283a 	ret

080041a0 <_putchar_r>:
 80041a0:	21800217 	ldw	r6,8(r4)
 80041a4:	800b3dc1 	jmpi	800b3dc <_putc_r>

080041a8 <putchar>:
 80041a8:	00820074 	movhi	r2,2049
 80041ac:	10999c04 	addi	r2,r2,26224
 80041b0:	10800017 	ldw	r2,0(r2)
 80041b4:	200b883a 	mov	r5,r4
 80041b8:	11800217 	ldw	r6,8(r2)
 80041bc:	1009883a 	mov	r4,r2
 80041c0:	800b3dc1 	jmpi	800b3dc <_putc_r>

080041c4 <_puts_r>:
 80041c4:	defff604 	addi	sp,sp,-40
 80041c8:	dc400815 	stw	r17,32(sp)
 80041cc:	2023883a 	mov	r17,r4
 80041d0:	2809883a 	mov	r4,r5
 80041d4:	dc000715 	stw	r16,28(sp)
 80041d8:	dfc00915 	stw	ra,36(sp)
 80041dc:	2821883a 	mov	r16,r5
 80041e0:	80047340 	call	8004734 <strlen>
 80041e4:	10c00044 	addi	r3,r2,1
 80041e8:	d8800115 	stw	r2,4(sp)
 80041ec:	89400217 	ldw	r5,8(r17)
 80041f0:	00820074 	movhi	r2,2049
 80041f4:	1091bb04 	addi	r2,r2,18156
 80041f8:	d8800215 	stw	r2,8(sp)
 80041fc:	00800044 	movi	r2,1
 8004200:	d8800315 	stw	r2,12(sp)
 8004204:	8809883a 	mov	r4,r17
 8004208:	00800084 	movi	r2,2
 800420c:	d9800404 	addi	r6,sp,16
 8004210:	dc000015 	stw	r16,0(sp)
 8004214:	d8c00615 	stw	r3,24(sp)
 8004218:	dec00415 	stw	sp,16(sp)
 800421c:	d8800515 	stw	r2,20(sp)
 8004220:	80099580 	call	8009958 <__sfvwrite_r>
 8004224:	1000061e 	bne	r2,zero,8004240 <_puts_r+0x7c>
 8004228:	00800284 	movi	r2,10
 800422c:	dfc00917 	ldw	ra,36(sp)
 8004230:	dc400817 	ldw	r17,32(sp)
 8004234:	dc000717 	ldw	r16,28(sp)
 8004238:	dec00a04 	addi	sp,sp,40
 800423c:	f800283a 	ret
 8004240:	00bfffc4 	movi	r2,-1
 8004244:	003ff906 	br	800422c <_puts_r+0x68>

08004248 <puts>:
 8004248:	00820074 	movhi	r2,2049
 800424c:	10999c04 	addi	r2,r2,26224
 8004250:	200b883a 	mov	r5,r4
 8004254:	11000017 	ldw	r4,0(r2)
 8004258:	80041c41 	jmpi	80041c4 <_puts_r>

0800425c <lflush>:
 800425c:	20c0030b 	ldhu	r3,12(r4)
 8004260:	00800244 	movi	r2,9
 8004264:	18c0024c 	andi	r3,r3,9
 8004268:	18800226 	beq	r3,r2,8004274 <lflush+0x18>
 800426c:	0005883a 	mov	r2,zero
 8004270:	f800283a 	ret
 8004274:	80022741 	jmpi	8002274 <fflush>

08004278 <__srefill_r>:
 8004278:	defffd04 	addi	sp,sp,-12
 800427c:	dc400115 	stw	r17,4(sp)
 8004280:	dc000015 	stw	r16,0(sp)
 8004284:	dfc00215 	stw	ra,8(sp)
 8004288:	2023883a 	mov	r17,r4
 800428c:	2821883a 	mov	r16,r5
 8004290:	20000226 	beq	r4,zero,800429c <__srefill_r+0x24>
 8004294:	20800e17 	ldw	r2,56(r4)
 8004298:	10004426 	beq	r2,zero,80043ac <__srefill_r+0x134>
 800429c:	8080030b 	ldhu	r2,12(r16)
 80042a0:	80000115 	stw	zero,4(r16)
 80042a4:	10c0080c 	andi	r3,r2,32
 80042a8:	18ffffcc 	andi	r3,r3,65535
 80042ac:	18e0001c 	xori	r3,r3,32768
 80042b0:	18e00004 	addi	r3,r3,-32768
 80042b4:	1800371e 	bne	r3,zero,8004394 <__srefill_r+0x11c>
 80042b8:	10c0010c 	andi	r3,r2,4
 80042bc:	18ffffcc 	andi	r3,r3,65535
 80042c0:	18e0001c 	xori	r3,r3,32768
 80042c4:	18e00004 	addi	r3,r3,-32768
 80042c8:	18002226 	beq	r3,zero,8004354 <__srefill_r+0xdc>
 80042cc:	81400c17 	ldw	r5,48(r16)
 80042d0:	28000826 	beq	r5,zero,80042f4 <__srefill_r+0x7c>
 80042d4:	80801004 	addi	r2,r16,64
 80042d8:	28800226 	beq	r5,r2,80042e4 <__srefill_r+0x6c>
 80042dc:	8809883a 	mov	r4,r17
 80042e0:	8002ae00 	call	8002ae0 <_free_r>
 80042e4:	80800f17 	ldw	r2,60(r16)
 80042e8:	80000c15 	stw	zero,48(r16)
 80042ec:	80800115 	stw	r2,4(r16)
 80042f0:	1000401e 	bne	r2,zero,80043f4 <__srefill_r+0x17c>
 80042f4:	80800417 	ldw	r2,16(r16)
 80042f8:	10005026 	beq	r2,zero,800443c <__srefill_r+0x1c4>
 80042fc:	8080030b 	ldhu	r2,12(r16)
 8004300:	108000cc 	andi	r2,r2,3
 8004304:	10002b1e 	bne	r2,zero,80043b4 <__srefill_r+0x13c>
 8004308:	81800417 	ldw	r6,16(r16)
 800430c:	80800817 	ldw	r2,32(r16)
 8004310:	81400717 	ldw	r5,28(r16)
 8004314:	81c00517 	ldw	r7,20(r16)
 8004318:	8809883a 	mov	r4,r17
 800431c:	81800015 	stw	r6,0(r16)
 8004320:	103ee83a 	callr	r2
 8004324:	8100030b 	ldhu	r4,12(r16)
 8004328:	00f7ffc4 	movi	r3,-8193
 800432c:	80800115 	stw	r2,4(r16)
 8004330:	20c6703a 	and	r3,r4,r3
 8004334:	80c0030d 	sth	r3,12(r16)
 8004338:	0080130e 	bge	zero,r2,8004388 <__srefill_r+0x110>
 800433c:	0005883a 	mov	r2,zero
 8004340:	dfc00217 	ldw	ra,8(sp)
 8004344:	dc400117 	ldw	r17,4(sp)
 8004348:	dc000017 	ldw	r16,0(sp)
 800434c:	dec00304 	addi	sp,sp,12
 8004350:	f800283a 	ret
 8004354:	10c0040c 	andi	r3,r2,16
 8004358:	18ffffcc 	andi	r3,r3,65535
 800435c:	18e0001c 	xori	r3,r3,32768
 8004360:	18e00004 	addi	r3,r3,-32768
 8004364:	18003926 	beq	r3,zero,800444c <__srefill_r+0x1d4>
 8004368:	10c0020c 	andi	r3,r2,8
 800436c:	18ffffcc 	andi	r3,r3,65535
 8004370:	18e0001c 	xori	r3,r3,32768
 8004374:	18e00004 	addi	r3,r3,-32768
 8004378:	1800261e 	bne	r3,zero,8004414 <__srefill_r+0x19c>
 800437c:	10800114 	ori	r2,r2,4
 8004380:	8080030d 	sth	r2,12(r16)
 8004384:	003fdb06 	br	80042f4 <__srefill_r+0x7c>
 8004388:	1000111e 	bne	r2,zero,80043d0 <__srefill_r+0x158>
 800438c:	18c00814 	ori	r3,r3,32
 8004390:	80c0030d 	sth	r3,12(r16)
 8004394:	00bfffc4 	movi	r2,-1
 8004398:	dfc00217 	ldw	ra,8(sp)
 800439c:	dc400117 	ldw	r17,4(sp)
 80043a0:	dc000017 	ldw	r16,0(sp)
 80043a4:	dec00304 	addi	sp,sp,12
 80043a8:	f800283a 	ret
 80043ac:	80023480 	call	8002348 <__sinit>
 80043b0:	003fba06 	br	800429c <__srefill_r+0x24>
 80043b4:	00820074 	movhi	r2,2049
 80043b8:	10999b04 	addi	r2,r2,26220
 80043bc:	11000017 	ldw	r4,0(r2)
 80043c0:	01420034 	movhi	r5,2048
 80043c4:	29509704 	addi	r5,r5,16988
 80043c8:	800330c0 	call	800330c <_fwalk>
 80043cc:	003fce06 	br	8004308 <__srefill_r+0x90>
 80043d0:	18c01014 	ori	r3,r3,64
 80043d4:	00bfffc4 	movi	r2,-1
 80043d8:	80000115 	stw	zero,4(r16)
 80043dc:	80c0030d 	sth	r3,12(r16)
 80043e0:	dfc00217 	ldw	ra,8(sp)
 80043e4:	dc400117 	ldw	r17,4(sp)
 80043e8:	dc000017 	ldw	r16,0(sp)
 80043ec:	dec00304 	addi	sp,sp,12
 80043f0:	f800283a 	ret
 80043f4:	80c00e17 	ldw	r3,56(r16)
 80043f8:	0005883a 	mov	r2,zero
 80043fc:	80c00015 	stw	r3,0(r16)
 8004400:	dfc00217 	ldw	ra,8(sp)
 8004404:	dc400117 	ldw	r17,4(sp)
 8004408:	dc000017 	ldw	r16,0(sp)
 800440c:	dec00304 	addi	sp,sp,12
 8004410:	f800283a 	ret
 8004414:	8809883a 	mov	r4,r17
 8004418:	800b883a 	mov	r5,r16
 800441c:	800208c0 	call	800208c <_fflush_r>
 8004420:	103fdc1e 	bne	r2,zero,8004394 <__srefill_r+0x11c>
 8004424:	8080030b 	ldhu	r2,12(r16)
 8004428:	00fffdc4 	movi	r3,-9
 800442c:	80000215 	stw	zero,8(r16)
 8004430:	1884703a 	and	r2,r3,r2
 8004434:	80000615 	stw	zero,24(r16)
 8004438:	003fd006 	br	800437c <__srefill_r+0x104>
 800443c:	8809883a 	mov	r4,r17
 8004440:	800b883a 	mov	r5,r16
 8004444:	800355c0 	call	800355c <__smakebuf_r>
 8004448:	003fac06 	br	80042fc <__srefill_r+0x84>
 800444c:	00c00244 	movi	r3,9
 8004450:	10801014 	ori	r2,r2,64
 8004454:	88c00015 	stw	r3,0(r17)
 8004458:	8080030d 	sth	r2,12(r16)
 800445c:	00bfffc4 	movi	r2,-1
 8004460:	003fb706 	br	8004340 <__srefill_r+0xc8>

08004464 <_sbrk_r>:
 8004464:	defffd04 	addi	sp,sp,-12
 8004468:	dc400115 	stw	r17,4(sp)
 800446c:	dc000015 	stw	r16,0(sp)
 8004470:	2023883a 	mov	r17,r4
 8004474:	040200b4 	movhi	r16,2050
 8004478:	84207a04 	addi	r16,r16,-32280
 800447c:	2809883a 	mov	r4,r5
 8004480:	dfc00215 	stw	ra,8(sp)
 8004484:	80000015 	stw	zero,0(r16)
 8004488:	8011a480 	call	8011a48 <sbrk>
 800448c:	00ffffc4 	movi	r3,-1
 8004490:	10c00526 	beq	r2,r3,80044a8 <_sbrk_r+0x44>
 8004494:	dfc00217 	ldw	ra,8(sp)
 8004498:	dc400117 	ldw	r17,4(sp)
 800449c:	dc000017 	ldw	r16,0(sp)
 80044a0:	dec00304 	addi	sp,sp,12
 80044a4:	f800283a 	ret
 80044a8:	80c00017 	ldw	r3,0(r16)
 80044ac:	183ff926 	beq	r3,zero,8004494 <_sbrk_r+0x30>
 80044b0:	88c00015 	stw	r3,0(r17)
 80044b4:	dfc00217 	ldw	ra,8(sp)
 80044b8:	dc400117 	ldw	r17,4(sp)
 80044bc:	dc000017 	ldw	r16,0(sp)
 80044c0:	dec00304 	addi	sp,sp,12
 80044c4:	f800283a 	ret

080044c8 <__sread>:
 80044c8:	defffe04 	addi	sp,sp,-8
 80044cc:	dc000015 	stw	r16,0(sp)
 80044d0:	2821883a 	mov	r16,r5
 80044d4:	2940038f 	ldh	r5,14(r5)
 80044d8:	dfc00115 	stw	ra,4(sp)
 80044dc:	800b5880 	call	800b588 <_read_r>
 80044e0:	10000716 	blt	r2,zero,8004500 <__sread+0x38>
 80044e4:	80c01417 	ldw	r3,80(r16)
 80044e8:	1887883a 	add	r3,r3,r2
 80044ec:	80c01415 	stw	r3,80(r16)
 80044f0:	dfc00117 	ldw	ra,4(sp)
 80044f4:	dc000017 	ldw	r16,0(sp)
 80044f8:	dec00204 	addi	sp,sp,8
 80044fc:	f800283a 	ret
 8004500:	80c0030b 	ldhu	r3,12(r16)
 8004504:	18fbffcc 	andi	r3,r3,61439
 8004508:	80c0030d 	sth	r3,12(r16)
 800450c:	dfc00117 	ldw	ra,4(sp)
 8004510:	dc000017 	ldw	r16,0(sp)
 8004514:	dec00204 	addi	sp,sp,8
 8004518:	f800283a 	ret

0800451c <__swrite>:
 800451c:	2880030b 	ldhu	r2,12(r5)
 8004520:	defffb04 	addi	sp,sp,-20
 8004524:	dcc00315 	stw	r19,12(sp)
 8004528:	10c0400c 	andi	r3,r2,256
 800452c:	18ffffcc 	andi	r3,r3,65535
 8004530:	18e0001c 	xori	r3,r3,32768
 8004534:	dc800215 	stw	r18,8(sp)
 8004538:	dc400115 	stw	r17,4(sp)
 800453c:	dc000015 	stw	r16,0(sp)
 8004540:	dfc00415 	stw	ra,16(sp)
 8004544:	18e00004 	addi	r3,r3,-32768
 8004548:	2821883a 	mov	r16,r5
 800454c:	2027883a 	mov	r19,r4
 8004550:	3025883a 	mov	r18,r6
 8004554:	3823883a 	mov	r17,r7
 8004558:	18000526 	beq	r3,zero,8004570 <__swrite+0x54>
 800455c:	2940038f 	ldh	r5,14(r5)
 8004560:	000d883a 	mov	r6,zero
 8004564:	01c00084 	movi	r7,2
 8004568:	8009fb40 	call	8009fb4 <_lseek_r>
 800456c:	8080030b 	ldhu	r2,12(r16)
 8004570:	8140038f 	ldh	r5,14(r16)
 8004574:	10bbffcc 	andi	r2,r2,61439
 8004578:	9809883a 	mov	r4,r19
 800457c:	900d883a 	mov	r6,r18
 8004580:	880f883a 	mov	r7,r17
 8004584:	8080030d 	sth	r2,12(r16)
 8004588:	dfc00417 	ldw	ra,16(sp)
 800458c:	dcc00317 	ldw	r19,12(sp)
 8004590:	dc800217 	ldw	r18,8(sp)
 8004594:	dc400117 	ldw	r17,4(sp)
 8004598:	dc000017 	ldw	r16,0(sp)
 800459c:	dec00504 	addi	sp,sp,20
 80045a0:	8007e241 	jmpi	8007e24 <_write_r>

080045a4 <__sseek>:
 80045a4:	defffe04 	addi	sp,sp,-8
 80045a8:	dc000015 	stw	r16,0(sp)
 80045ac:	2821883a 	mov	r16,r5
 80045b0:	2940038f 	ldh	r5,14(r5)
 80045b4:	dfc00115 	stw	ra,4(sp)
 80045b8:	8009fb40 	call	8009fb4 <_lseek_r>
 80045bc:	00ffffc4 	movi	r3,-1
 80045c0:	10c00826 	beq	r2,r3,80045e4 <__sseek+0x40>
 80045c4:	80c0030b 	ldhu	r3,12(r16)
 80045c8:	80801415 	stw	r2,80(r16)
 80045cc:	18c40014 	ori	r3,r3,4096
 80045d0:	80c0030d 	sth	r3,12(r16)
 80045d4:	dfc00117 	ldw	ra,4(sp)
 80045d8:	dc000017 	ldw	r16,0(sp)
 80045dc:	dec00204 	addi	sp,sp,8
 80045e0:	f800283a 	ret
 80045e4:	80c0030b 	ldhu	r3,12(r16)
 80045e8:	18fbffcc 	andi	r3,r3,61439
 80045ec:	80c0030d 	sth	r3,12(r16)
 80045f0:	dfc00117 	ldw	ra,4(sp)
 80045f4:	dc000017 	ldw	r16,0(sp)
 80045f8:	dec00204 	addi	sp,sp,8
 80045fc:	f800283a 	ret

08004600 <__sclose>:
 8004600:	2940038f 	ldh	r5,14(r5)
 8004604:	80080041 	jmpi	8008004 <_close_r>

08004608 <strcat>:
 8004608:	defffe04 	addi	sp,sp,-8
 800460c:	dc000015 	stw	r16,0(sp)
 8004610:	dfc00115 	stw	ra,4(sp)
 8004614:	208000cc 	andi	r2,r4,3
 8004618:	2021883a 	mov	r16,r4
 800461c:	1000141e 	bne	r2,zero,8004670 <strcat+0x68>
 8004620:	20800017 	ldw	r2,0(r4)
 8004624:	027fbff4 	movhi	r9,65279
 8004628:	4a7fbfc4 	addi	r9,r9,-257
 800462c:	02202074 	movhi	r8,32897
 8004630:	42202004 	addi	r8,r8,-32640
 8004634:	1247883a 	add	r3,r2,r9
 8004638:	0084303a 	nor	r2,zero,r2
 800463c:	1884703a 	and	r2,r3,r2
 8004640:	1204703a 	and	r2,r2,r8
 8004644:	2007883a 	mov	r3,r4
 8004648:	1000091e 	bne	r2,zero,8004670 <strcat+0x68>
 800464c:	18c00104 	addi	r3,r3,4
 8004650:	19800017 	ldw	r6,0(r3)
 8004654:	324f883a 	add	r7,r6,r9
 8004658:	018c303a 	nor	r6,zero,r6
 800465c:	398c703a 	and	r6,r7,r6
 8004660:	320c703a 	and	r6,r6,r8
 8004664:	303ff926 	beq	r6,zero,800464c <strcat+0x44>
 8004668:	1809883a 	mov	r4,r3
 800466c:	00000106 	br	8004674 <strcat+0x6c>
 8004670:	8009883a 	mov	r4,r16
 8004674:	20800007 	ldb	r2,0(r4)
 8004678:	10000326 	beq	r2,zero,8004688 <strcat+0x80>
 800467c:	21000044 	addi	r4,r4,1
 8004680:	20c00007 	ldb	r3,0(r4)
 8004684:	183ffd1e 	bne	r3,zero,800467c <strcat+0x74>
 8004688:	80046a00 	call	80046a0 <strcpy>
 800468c:	8005883a 	mov	r2,r16
 8004690:	dfc00117 	ldw	ra,4(sp)
 8004694:	dc000017 	ldw	r16,0(sp)
 8004698:	dec00204 	addi	sp,sp,8
 800469c:	f800283a 	ret

080046a0 <strcpy>:
 80046a0:	2906b03a 	or	r3,r5,r4
 80046a4:	18c000cc 	andi	r3,r3,3
 80046a8:	2005883a 	mov	r2,r4
 80046ac:	18001a1e 	bne	r3,zero,8004718 <strcpy+0x78>
 80046b0:	29800017 	ldw	r6,0(r5)
 80046b4:	02bfbff4 	movhi	r10,65279
 80046b8:	52bfbfc4 	addi	r10,r10,-257
 80046bc:	02602074 	movhi	r9,32897
 80046c0:	4a602004 	addi	r9,r9,-32640
 80046c4:	0188303a 	nor	r4,zero,r6
 80046c8:	3287883a 	add	r3,r6,r10
 80046cc:	20c6703a 	and	r3,r4,r3
 80046d0:	1a46703a 	and	r3,r3,r9
 80046d4:	1800101e 	bne	r3,zero,8004718 <strcpy+0x78>
 80046d8:	1007883a 	mov	r3,r2
 80046dc:	19800015 	stw	r6,0(r3)
 80046e0:	29400104 	addi	r5,r5,4
 80046e4:	29800017 	ldw	r6,0(r5)
 80046e8:	18c00104 	addi	r3,r3,4
 80046ec:	0190303a 	nor	r8,zero,r6
 80046f0:	328f883a 	add	r7,r6,r10
 80046f4:	41ce703a 	and	r7,r8,r7
 80046f8:	3a4e703a 	and	r7,r7,r9
 80046fc:	383ff726 	beq	r7,zero,80046dc <strcpy+0x3c>
 8004700:	29800007 	ldb	r6,0(r5)
 8004704:	18c00044 	addi	r3,r3,1
 8004708:	29400044 	addi	r5,r5,1
 800470c:	19bfffc5 	stb	r6,-1(r3)
 8004710:	3000021e 	bne	r6,zero,800471c <strcpy+0x7c>
 8004714:	f800283a 	ret
 8004718:	1007883a 	mov	r3,r2
 800471c:	29800007 	ldb	r6,0(r5)
 8004720:	18c00044 	addi	r3,r3,1
 8004724:	29400044 	addi	r5,r5,1
 8004728:	19bfffc5 	stb	r6,-1(r3)
 800472c:	303ffb1e 	bne	r6,zero,800471c <strcpy+0x7c>
 8004730:	f800283a 	ret

08004734 <strlen>:
 8004734:	208000cc 	andi	r2,r4,3
 8004738:	10001f1e 	bne	r2,zero,80047b8 <strlen+0x84>
 800473c:	20800017 	ldw	r2,0(r4)
 8004740:	01ffbff4 	movhi	r7,65279
 8004744:	39ffbfc4 	addi	r7,r7,-257
 8004748:	01a02074 	movhi	r6,32897
 800474c:	31a02004 	addi	r6,r6,-32640
 8004750:	11c7883a 	add	r3,r2,r7
 8004754:	0084303a 	nor	r2,zero,r2
 8004758:	1886703a 	and	r3,r3,r2
 800475c:	1986703a 	and	r3,r3,r6
 8004760:	2005883a 	mov	r2,r4
 8004764:	1800101e 	bne	r3,zero,80047a8 <strlen+0x74>
 8004768:	10800104 	addi	r2,r2,4
 800476c:	10c00017 	ldw	r3,0(r2)
 8004770:	19cb883a 	add	r5,r3,r7
 8004774:	00c6303a 	nor	r3,zero,r3
 8004778:	28c6703a 	and	r3,r5,r3
 800477c:	1986703a 	and	r3,r3,r6
 8004780:	1800091e 	bne	r3,zero,80047a8 <strlen+0x74>
 8004784:	10800104 	addi	r2,r2,4
 8004788:	10c00017 	ldw	r3,0(r2)
 800478c:	19cb883a 	add	r5,r3,r7
 8004790:	00c6303a 	nor	r3,zero,r3
 8004794:	28c6703a 	and	r3,r5,r3
 8004798:	1986703a 	and	r3,r3,r6
 800479c:	183ff226 	beq	r3,zero,8004768 <strlen+0x34>
 80047a0:	00000106 	br	80047a8 <strlen+0x74>
 80047a4:	10800044 	addi	r2,r2,1
 80047a8:	10c00007 	ldb	r3,0(r2)
 80047ac:	183ffd1e 	bne	r3,zero,80047a4 <strlen+0x70>
 80047b0:	1105c83a 	sub	r2,r2,r4
 80047b4:	f800283a 	ret
 80047b8:	2005883a 	mov	r2,r4
 80047bc:	003ffa06 	br	80047a8 <strlen+0x74>

080047c0 <_times_r>:
 80047c0:	2809883a 	mov	r4,r5
 80047c4:	8011b481 	jmpi	8011b48 <times>

080047c8 <__sprint_r>:
 80047c8:	30800217 	ldw	r2,8(r6)
 80047cc:	defffe04 	addi	sp,sp,-8
 80047d0:	dc000015 	stw	r16,0(sp)
 80047d4:	dfc00115 	stw	ra,4(sp)
 80047d8:	3021883a 	mov	r16,r6
 80047dc:	10000226 	beq	r2,zero,80047e8 <__sprint_r+0x20>
 80047e0:	80099580 	call	8009958 <__sfvwrite_r>
 80047e4:	80000215 	stw	zero,8(r16)
 80047e8:	80000115 	stw	zero,4(r16)
 80047ec:	dfc00117 	ldw	ra,4(sp)
 80047f0:	dc000017 	ldw	r16,0(sp)
 80047f4:	dec00204 	addi	sp,sp,8
 80047f8:	f800283a 	ret

080047fc <___vfprintf_internal_r>:
 80047fc:	defeb904 	addi	sp,sp,-1308
 8004800:	dc013d15 	stw	r16,1268(sp)
 8004804:	d9013015 	stw	r4,1216(sp)
 8004808:	dfc14615 	stw	ra,1304(sp)
 800480c:	df014515 	stw	fp,1300(sp)
 8004810:	ddc14415 	stw	r23,1296(sp)
 8004814:	dd814315 	stw	r22,1292(sp)
 8004818:	dd414215 	stw	r21,1288(sp)
 800481c:	dd014115 	stw	r20,1284(sp)
 8004820:	dcc14015 	stw	r19,1280(sp)
 8004824:	dc813f15 	stw	r18,1276(sp)
 8004828:	dc413e15 	stw	r17,1272(sp)
 800482c:	d9412915 	stw	r5,1188(sp)
 8004830:	3021883a 	mov	r16,r6
 8004834:	d9c12d15 	stw	r7,1204(sp)
 8004838:	8009f800 	call	8009f80 <_localeconv_r>
 800483c:	10800017 	ldw	r2,0(r2)
 8004840:	d9013017 	ldw	r4,1216(sp)
 8004844:	d8013315 	stw	zero,1228(sp)
 8004848:	d8813715 	stw	r2,1244(sp)
 800484c:	d8013415 	stw	zero,1232(sp)
 8004850:	20000226 	beq	r4,zero,800485c <___vfprintf_internal_r+0x60>
 8004854:	20800e17 	ldw	r2,56(r4)
 8004858:	10014b26 	beq	r2,zero,8004d88 <___vfprintf_internal_r+0x58c>
 800485c:	d8c12917 	ldw	r3,1188(sp)
 8004860:	1880030b 	ldhu	r2,12(r3)
 8004864:	10c0020c 	andi	r3,r2,8
 8004868:	18ffffcc 	andi	r3,r3,65535
 800486c:	18e0001c 	xori	r3,r3,32768
 8004870:	18e00004 	addi	r3,r3,-32768
 8004874:	1800ed26 	beq	r3,zero,8004c2c <___vfprintf_internal_r+0x430>
 8004878:	d9012917 	ldw	r4,1188(sp)
 800487c:	20c00417 	ldw	r3,16(r4)
 8004880:	1800ea26 	beq	r3,zero,8004c2c <___vfprintf_internal_r+0x430>
 8004884:	1100068c 	andi	r4,r2,26
 8004888:	00c00284 	movi	r3,10
 800488c:	20c0f026 	beq	r4,r3,8004c50 <___vfprintf_internal_r+0x454>
 8004890:	d9010dc4 	addi	r4,sp,1079
 8004894:	d8810e04 	addi	r2,sp,1080
 8004898:	dc413017 	ldw	r17,1216(sp)
 800489c:	d8c00404 	addi	r3,sp,16
 80048a0:	d9012615 	stw	r4,1176(sp)
 80048a4:	1109c83a 	sub	r4,r2,r4
 80048a8:	d8812715 	stw	r2,1180(sp)
 80048ac:	d8c11b15 	stw	r3,1132(sp)
 80048b0:	d8011d15 	stw	zero,1140(sp)
 80048b4:	d8011c15 	stw	zero,1136(sp)
 80048b8:	802b883a 	mov	r21,r16
 80048bc:	d8013215 	stw	zero,1224(sp)
 80048c0:	d8013615 	stw	zero,1240(sp)
 80048c4:	d8013515 	stw	zero,1236(sp)
 80048c8:	d8012c15 	stw	zero,1200(sp)
 80048cc:	1813883a 	mov	r9,r3
 80048d0:	d9013915 	stw	r4,1252(sp)
 80048d4:	a8800007 	ldb	r2,0(r21)
 80048d8:	1002f326 	beq	r2,zero,80054a8 <___vfprintf_internal_r+0xcac>
 80048dc:	00c00944 	movi	r3,37
 80048e0:	a825883a 	mov	r18,r21
 80048e4:	10c0021e 	bne	r2,r3,80048f0 <___vfprintf_internal_r+0xf4>
 80048e8:	00001406 	br	800493c <___vfprintf_internal_r+0x140>
 80048ec:	10c00326 	beq	r2,r3,80048fc <___vfprintf_internal_r+0x100>
 80048f0:	94800044 	addi	r18,r18,1
 80048f4:	90800007 	ldb	r2,0(r18)
 80048f8:	103ffc1e 	bne	r2,zero,80048ec <___vfprintf_internal_r+0xf0>
 80048fc:	9561c83a 	sub	r16,r18,r21
 8004900:	80000e26 	beq	r16,zero,800493c <___vfprintf_internal_r+0x140>
 8004904:	da011d17 	ldw	r8,1140(sp)
 8004908:	d8c11c17 	ldw	r3,1136(sp)
 800490c:	4d400015 	stw	r21,0(r9)
 8004910:	4c000115 	stw	r16,4(r9)
 8004914:	4411883a 	add	r8,r8,r16
 8004918:	18c00044 	addi	r3,r3,1
 800491c:	da011d15 	stw	r8,1140(sp)
 8004920:	d8c11c15 	stw	r3,1136(sp)
 8004924:	008001c4 	movi	r2,7
 8004928:	10c11016 	blt	r2,r3,8004d6c <___vfprintf_internal_r+0x570>
 800492c:	4a400204 	addi	r9,r9,8
 8004930:	d8812c17 	ldw	r2,1200(sp)
 8004934:	1405883a 	add	r2,r2,r16
 8004938:	d8812c15 	stw	r2,1200(sp)
 800493c:	90800007 	ldb	r2,0(r18)
 8004940:	1000ee26 	beq	r2,zero,8004cfc <___vfprintf_internal_r+0x500>
 8004944:	95400044 	addi	r21,r18,1
 8004948:	94800047 	ldb	r18,1(r18)
 800494c:	073fffc4 	movi	fp,-1
 8004950:	e007883a 	mov	r3,fp
 8004954:	d8012585 	stb	zero,1174(sp)
 8004958:	d8012e15 	stw	zero,1208(sp)
 800495c:	0021883a 	mov	r16,zero
 8004960:	05001604 	movi	r20,88
 8004964:	04c00244 	movi	r19,9
 8004968:	4839883a 	mov	fp,r9
 800496c:	ad400044 	addi	r21,r21,1
 8004970:	90bff804 	addi	r2,r18,-32
 8004974:	a080462e 	bgeu	r20,r2,8004a90 <___vfprintf_internal_r+0x294>
 8004978:	e013883a 	mov	r9,fp
 800497c:	9000df26 	beq	r18,zero,8004cfc <___vfprintf_internal_r+0x500>
 8004980:	00c00044 	movi	r3,1
 8004984:	d8c12815 	stw	r3,1184(sp)
 8004988:	dc810405 	stb	r18,1040(sp)
 800498c:	d8012585 	stb	zero,1174(sp)
 8004990:	d8c12b15 	stw	r3,1196(sp)
 8004994:	dcc10404 	addi	r19,sp,1040
 8004998:	d8013115 	stw	zero,1220(sp)
 800499c:	80c0008c 	andi	r3,r16,2
 80049a0:	d8c12a15 	stw	r3,1192(sp)
 80049a4:	18000326 	beq	r3,zero,80049b4 <___vfprintf_internal_r+0x1b8>
 80049a8:	d8c12817 	ldw	r3,1184(sp)
 80049ac:	18c00084 	addi	r3,r3,2
 80049b0:	d8c12815 	stw	r3,1184(sp)
 80049b4:	80c0210c 	andi	r3,r16,132
 80049b8:	d8c12f15 	stw	r3,1212(sp)
 80049bc:	1802251e 	bne	r3,zero,8005254 <___vfprintf_internal_r+0xa58>
 80049c0:	d9012e17 	ldw	r4,1208(sp)
 80049c4:	d8c12817 	ldw	r3,1184(sp)
 80049c8:	20edc83a 	sub	r22,r4,r3
 80049cc:	0582210e 	bge	zero,r22,8005254 <___vfprintf_internal_r+0xa58>
 80049d0:	02800404 	movi	r10,16
 80049d4:	da011d17 	ldw	r8,1140(sp)
 80049d8:	d8c11c17 	ldw	r3,1136(sp)
 80049dc:	05c20074 	movhi	r23,2049
 80049e0:	bdd1cc84 	addi	r23,r23,18226
 80049e4:	5580200e 	bge	r10,r22,8004a68 <___vfprintf_internal_r+0x26c>
 80049e8:	dc813815 	stw	r18,1248(sp)
 80049ec:	5039883a 	mov	fp,r10
 80049f0:	b825883a 	mov	r18,r23
 80049f4:	050001c4 	movi	r20,7
 80049f8:	b02f883a 	mov	r23,r22
 80049fc:	802d883a 	mov	r22,r16
 8004a00:	dc012917 	ldw	r16,1188(sp)
 8004a04:	00000306 	br	8004a14 <___vfprintf_internal_r+0x218>
 8004a08:	bdfffc04 	addi	r23,r23,-16
 8004a0c:	4a400204 	addi	r9,r9,8
 8004a10:	e5c0110e 	bge	fp,r23,8004a58 <___vfprintf_internal_r+0x25c>
 8004a14:	4c800015 	stw	r18,0(r9)
 8004a18:	4f000115 	stw	fp,4(r9)
 8004a1c:	42000404 	addi	r8,r8,16
 8004a20:	18c00044 	addi	r3,r3,1
 8004a24:	da011d15 	stw	r8,1140(sp)
 8004a28:	d8c11c15 	stw	r3,1136(sp)
 8004a2c:	a0fff60e 	bge	r20,r3,8004a08 <___vfprintf_internal_r+0x20c>
 8004a30:	8809883a 	mov	r4,r17
 8004a34:	800b883a 	mov	r5,r16
 8004a38:	d9811b04 	addi	r6,sp,1132
 8004a3c:	80047c80 	call	80047c8 <__sprint_r>
 8004a40:	1000b41e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 8004a44:	bdfffc04 	addi	r23,r23,-16
 8004a48:	da011d17 	ldw	r8,1140(sp)
 8004a4c:	d8c11c17 	ldw	r3,1136(sp)
 8004a50:	da400404 	addi	r9,sp,16
 8004a54:	e5ffef16 	blt	fp,r23,8004a14 <___vfprintf_internal_r+0x218>
 8004a58:	b021883a 	mov	r16,r22
 8004a5c:	b82d883a 	mov	r22,r23
 8004a60:	902f883a 	mov	r23,r18
 8004a64:	dc813817 	ldw	r18,1248(sp)
 8004a68:	4dc00015 	stw	r23,0(r9)
 8004a6c:	4d800115 	stw	r22,4(r9)
 8004a70:	4591883a 	add	r8,r8,r22
 8004a74:	18c00044 	addi	r3,r3,1
 8004a78:	da011d15 	stw	r8,1140(sp)
 8004a7c:	d8c11c15 	stw	r3,1136(sp)
 8004a80:	008001c4 	movi	r2,7
 8004a84:	10c3fe16 	blt	r2,r3,8005a80 <___vfprintf_internal_r+0x1284>
 8004a88:	4a400204 	addi	r9,r9,8
 8004a8c:	0001f306 	br	800525c <___vfprintf_internal_r+0xa60>
 8004a90:	1085883a 	add	r2,r2,r2
 8004a94:	1085883a 	add	r2,r2,r2
 8004a98:	01020034 	movhi	r4,2048
 8004a9c:	2112ab04 	addi	r4,r4,19116
 8004aa0:	1105883a 	add	r2,r2,r4
 8004aa4:	10800017 	ldw	r2,0(r2)
 8004aa8:	1000683a 	jmp	r2
 8004aac:	08005188 	cmpgei	zero,at,326
 8004ab0:	08004978 	rdprs	zero,at,293
 8004ab4:	08004978 	rdprs	zero,at,293
 8004ab8:	080051a0 	cmpeqi	zero,at,326
 8004abc:	08004978 	rdprs	zero,at,293
 8004ac0:	08004978 	rdprs	zero,at,293
 8004ac4:	08004978 	rdprs	zero,at,293
 8004ac8:	08004978 	rdprs	zero,at,293
 8004acc:	08004978 	rdprs	zero,at,293
 8004ad0:	08004978 	rdprs	zero,at,293
 8004ad4:	08005058 	cmpnei	zero,at,321
 8004ad8:	080051ec 	andhi	zero,at,327
 8004adc:	08004978 	rdprs	zero,at,293
 8004ae0:	08004c20 	cmpeqi	zero,at,304
 8004ae4:	08004fc0 	call	8004fc <__reset-0x77ffb04>
 8004ae8:	08004978 	rdprs	zero,at,293
 8004aec:	080051ac 	andhi	zero,at,326
 8004af0:	080051b8 	rdprs	zero,at,326
 8004af4:	080051b8 	rdprs	zero,at,326
 8004af8:	080051b8 	rdprs	zero,at,326
 8004afc:	080051b8 	rdprs	zero,at,326
 8004b00:	080051b8 	rdprs	zero,at,326
 8004b04:	080051b8 	rdprs	zero,at,326
 8004b08:	080051b8 	rdprs	zero,at,326
 8004b0c:	080051b8 	rdprs	zero,at,326
 8004b10:	080051b8 	rdprs	zero,at,326
 8004b14:	08004978 	rdprs	zero,at,293
 8004b18:	08004978 	rdprs	zero,at,293
 8004b1c:	08004978 	rdprs	zero,at,293
 8004b20:	08004978 	rdprs	zero,at,293
 8004b24:	08004978 	rdprs	zero,at,293
 8004b28:	08004978 	rdprs	zero,at,293
 8004b2c:	08004978 	rdprs	zero,at,293
 8004b30:	08004978 	rdprs	zero,at,293
 8004b34:	08004978 	rdprs	zero,at,293
 8004b38:	08004978 	rdprs	zero,at,293
 8004b3c:	08004d90 	cmplti	zero,at,310
 8004b40:	08004e50 	cmplti	zero,at,313
 8004b44:	08004978 	rdprs	zero,at,293
 8004b48:	08004e50 	cmplti	zero,at,313
 8004b4c:	08004978 	rdprs	zero,at,293
 8004b50:	08004978 	rdprs	zero,at,293
 8004b54:	08004978 	rdprs	zero,at,293
 8004b58:	08004978 	rdprs	zero,at,293
 8004b5c:	08004ee4 	muli	zero,at,315
 8004b60:	08004978 	rdprs	zero,at,293
 8004b64:	08004978 	rdprs	zero,at,293
 8004b68:	08004ef0 	cmpltui	zero,at,315
 8004b6c:	08004978 	rdprs	zero,at,293
 8004b70:	08004978 	rdprs	zero,at,293
 8004b74:	08004978 	rdprs	zero,at,293
 8004b78:	08004978 	rdprs	zero,at,293
 8004b7c:	08004978 	rdprs	zero,at,293
 8004b80:	08004f28 	cmpgeui	zero,at,316
 8004b84:	08004978 	rdprs	zero,at,293
 8004b88:	08004978 	rdprs	zero,at,293
 8004b8c:	08004f64 	muli	zero,at,317
 8004b90:	08004978 	rdprs	zero,at,293
 8004b94:	08004978 	rdprs	zero,at,293
 8004b98:	08004978 	rdprs	zero,at,293
 8004b9c:	08004978 	rdprs	zero,at,293
 8004ba0:	08004978 	rdprs	zero,at,293
 8004ba4:	08004978 	rdprs	zero,at,293
 8004ba8:	08004978 	rdprs	zero,at,293
 8004bac:	08004978 	rdprs	zero,at,293
 8004bb0:	08004978 	rdprs	zero,at,293
 8004bb4:	08004978 	rdprs	zero,at,293
 8004bb8:	080051fc 	xorhi	zero,at,327
 8004bbc:	08005230 	cmpltui	zero,at,328
 8004bc0:	08004e50 	cmplti	zero,at,313
 8004bc4:	08004e50 	cmplti	zero,at,313
 8004bc8:	08004e50 	cmplti	zero,at,313
 8004bcc:	0800517c 	xorhi	zero,at,325
 8004bd0:	08005230 	cmpltui	zero,at,328
 8004bd4:	08004978 	rdprs	zero,at,293
 8004bd8:	08004978 	rdprs	zero,at,293
 8004bdc:	08005008 	cmpgei	zero,at,320
 8004be0:	08004978 	rdprs	zero,at,293
 8004be4:	08005020 	cmpeqi	zero,at,320
 8004be8:	0800523c 	xorhi	zero,at,328
 8004bec:	08005080 	call	800508 <__reset-0x77ffaf8>
 8004bf0:	080050d0 	cmplti	zero,at,323
 8004bf4:	08004978 	rdprs	zero,at,293
 8004bf8:	080050dc 	xori	zero,at,323
 8004bfc:	08004978 	rdprs	zero,at,293
 8004c00:	08005248 	cmpgei	zero,at,329
 8004c04:	08004978 	rdprs	zero,at,293
 8004c08:	08004978 	rdprs	zero,at,293
 8004c0c:	08005140 	call	800514 <__reset-0x77ffaec>
 8004c10:	d9012e17 	ldw	r4,1208(sp)
 8004c14:	d8812d15 	stw	r2,1204(sp)
 8004c18:	0109c83a 	sub	r4,zero,r4
 8004c1c:	d9012e15 	stw	r4,1208(sp)
 8004c20:	84000114 	ori	r16,r16,4
 8004c24:	ac800007 	ldb	r18,0(r21)
 8004c28:	003f5006 	br	800496c <___vfprintf_internal_r+0x170>
 8004c2c:	d9013017 	ldw	r4,1216(sp)
 8004c30:	d9412917 	ldw	r5,1188(sp)
 8004c34:	8007e900 	call	8007e90 <__swsetup_r>
 8004c38:	10003d1e 	bne	r2,zero,8004d30 <___vfprintf_internal_r+0x534>
 8004c3c:	d8c12917 	ldw	r3,1188(sp)
 8004c40:	1880030b 	ldhu	r2,12(r3)
 8004c44:	00c00284 	movi	r3,10
 8004c48:	1100068c 	andi	r4,r2,26
 8004c4c:	20ff101e 	bne	r4,r3,8004890 <___vfprintf_internal_r+0x94>
 8004c50:	d9012917 	ldw	r4,1188(sp)
 8004c54:	20c0038b 	ldhu	r3,14(r4)
 8004c58:	193fffcc 	andi	r4,r3,65535
 8004c5c:	2120001c 	xori	r4,r4,32768
 8004c60:	21200004 	addi	r4,r4,-32768
 8004c64:	203f0a16 	blt	r4,zero,8004890 <___vfprintf_internal_r+0x94>
 8004c68:	d9012917 	ldw	r4,1188(sp)
 8004c6c:	d9c12d17 	ldw	r7,1204(sp)
 8004c70:	10bfff4c 	andi	r2,r2,65533
 8004c74:	22800717 	ldw	r10,28(r4)
 8004c78:	22400917 	ldw	r9,36(r4)
 8004c7c:	d9013017 	ldw	r4,1216(sp)
 8004c80:	02010004 	movi	r8,1024
 8004c84:	d881070d 	sth	r2,1052(sp)
 8004c88:	d9410404 	addi	r5,sp,1040
 8004c8c:	d8800404 	addi	r2,sp,16
 8004c90:	800d883a 	mov	r6,r16
 8004c94:	d8c1078d 	sth	r3,1054(sp)
 8004c98:	da810b15 	stw	r10,1068(sp)
 8004c9c:	da410d15 	stw	r9,1076(sp)
 8004ca0:	d8810415 	stw	r2,1040(sp)
 8004ca4:	d8810815 	stw	r2,1056(sp)
 8004ca8:	da010615 	stw	r8,1048(sp)
 8004cac:	da010915 	stw	r8,1060(sp)
 8004cb0:	d8010a15 	stw	zero,1064(sp)
 8004cb4:	80047fc0 	call	80047fc <___vfprintf_internal_r>
 8004cb8:	d8812c15 	stw	r2,1200(sp)
 8004cbc:	10000416 	blt	r2,zero,8004cd0 <___vfprintf_internal_r+0x4d4>
 8004cc0:	d9013017 	ldw	r4,1216(sp)
 8004cc4:	d9410404 	addi	r5,sp,1040
 8004cc8:	800208c0 	call	800208c <_fflush_r>
 8004ccc:	1006501e 	bne	r2,zero,8006610 <___vfprintf_internal_r+0x1e14>
 8004cd0:	d881070b 	ldhu	r2,1052(sp)
 8004cd4:	1080100c 	andi	r2,r2,64
 8004cd8:	10bfffcc 	andi	r2,r2,65535
 8004cdc:	10a0001c 	xori	r2,r2,32768
 8004ce0:	10a00004 	addi	r2,r2,-32768
 8004ce4:	10001426 	beq	r2,zero,8004d38 <___vfprintf_internal_r+0x53c>
 8004ce8:	d8c12917 	ldw	r3,1188(sp)
 8004cec:	1880030b 	ldhu	r2,12(r3)
 8004cf0:	10801014 	ori	r2,r2,64
 8004cf4:	1880030d 	sth	r2,12(r3)
 8004cf8:	00000f06 	br	8004d38 <___vfprintf_internal_r+0x53c>
 8004cfc:	d8811d17 	ldw	r2,1140(sp)
 8004d00:	10000426 	beq	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 8004d04:	d9013017 	ldw	r4,1216(sp)
 8004d08:	d9412917 	ldw	r5,1188(sp)
 8004d0c:	d9811b04 	addi	r6,sp,1132
 8004d10:	80047c80 	call	80047c8 <__sprint_r>
 8004d14:	d8c12917 	ldw	r3,1188(sp)
 8004d18:	1880030b 	ldhu	r2,12(r3)
 8004d1c:	1080100c 	andi	r2,r2,64
 8004d20:	10bfffcc 	andi	r2,r2,65535
 8004d24:	10a0001c 	xori	r2,r2,32768
 8004d28:	10a00004 	addi	r2,r2,-32768
 8004d2c:	10000226 	beq	r2,zero,8004d38 <___vfprintf_internal_r+0x53c>
 8004d30:	00bfffc4 	movi	r2,-1
 8004d34:	d8812c15 	stw	r2,1200(sp)
 8004d38:	d8812c17 	ldw	r2,1200(sp)
 8004d3c:	dfc14617 	ldw	ra,1304(sp)
 8004d40:	df014517 	ldw	fp,1300(sp)
 8004d44:	ddc14417 	ldw	r23,1296(sp)
 8004d48:	dd814317 	ldw	r22,1292(sp)
 8004d4c:	dd414217 	ldw	r21,1288(sp)
 8004d50:	dd014117 	ldw	r20,1284(sp)
 8004d54:	dcc14017 	ldw	r19,1280(sp)
 8004d58:	dc813f17 	ldw	r18,1276(sp)
 8004d5c:	dc413e17 	ldw	r17,1272(sp)
 8004d60:	dc013d17 	ldw	r16,1268(sp)
 8004d64:	dec14704 	addi	sp,sp,1308
 8004d68:	f800283a 	ret
 8004d6c:	d9412917 	ldw	r5,1188(sp)
 8004d70:	8809883a 	mov	r4,r17
 8004d74:	d9811b04 	addi	r6,sp,1132
 8004d78:	80047c80 	call	80047c8 <__sprint_r>
 8004d7c:	103fe51e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 8004d80:	da400404 	addi	r9,sp,16
 8004d84:	003eea06 	br	8004930 <___vfprintf_internal_r+0x134>
 8004d88:	80023480 	call	8002348 <__sinit>
 8004d8c:	003eb306 	br	800485c <___vfprintf_internal_r+0x60>
 8004d90:	e013883a 	mov	r9,fp
 8004d94:	84000414 	ori	r16,r16,16
 8004d98:	1839883a 	mov	fp,r3
 8004d9c:	8080080c 	andi	r2,r16,32
 8004da0:	10034426 	beq	r2,zero,8005ab4 <___vfprintf_internal_r+0x12b8>
 8004da4:	d8c12d17 	ldw	r3,1204(sp)
 8004da8:	18800117 	ldw	r2,4(r3)
 8004dac:	1dc00017 	ldw	r23,0(r3)
 8004db0:	18c00204 	addi	r3,r3,8
 8004db4:	d8c12d15 	stw	r3,1204(sp)
 8004db8:	102d883a 	mov	r22,r2
 8004dbc:	1003020e 	bge	r2,zero,80059c8 <___vfprintf_internal_r+0x11cc>
 8004dc0:	05efc83a 	sub	r23,zero,r23
 8004dc4:	b804c03a 	cmpne	r2,r23,zero
 8004dc8:	05adc83a 	sub	r22,zero,r22
 8004dcc:	b0adc83a 	sub	r22,r22,r2
 8004dd0:	00800b44 	movi	r2,45
 8004dd4:	d8812585 	stb	r2,1174(sp)
 8004dd8:	00c00044 	movi	r3,1
 8004ddc:	bd84b03a 	or	r2,r23,r22
 8004de0:	e0000216 	blt	fp,zero,8004dec <___vfprintf_internal_r+0x5f0>
 8004de4:	013fdfc4 	movi	r4,-129
 8004de8:	8120703a 	and	r16,r16,r4
 8004dec:	1001cc1e 	bne	r2,zero,8005520 <___vfprintf_internal_r+0xd24>
 8004df0:	e001cb1e 	bne	fp,zero,8005520 <___vfprintf_internal_r+0xd24>
 8004df4:	18c03fcc 	andi	r3,r3,255
 8004df8:	1802ca1e 	bne	r3,zero,8005924 <___vfprintf_internal_r+0x1128>
 8004dfc:	8080004c 	andi	r2,r16,1
 8004e00:	1002c826 	beq	r2,zero,8005924 <___vfprintf_internal_r+0x1128>
 8004e04:	d8c13917 	ldw	r3,1252(sp)
 8004e08:	00800c04 	movi	r2,48
 8004e0c:	d8810dc5 	stb	r2,1079(sp)
 8004e10:	d8c12b15 	stw	r3,1196(sp)
 8004e14:	dcc10dc4 	addi	r19,sp,1079
 8004e18:	d8812b17 	ldw	r2,1196(sp)
 8004e1c:	d8812815 	stw	r2,1184(sp)
 8004e20:	1700010e 	bge	r2,fp,8004e28 <___vfprintf_internal_r+0x62c>
 8004e24:	df012815 	stw	fp,1184(sp)
 8004e28:	d8812583 	ldbu	r2,1174(sp)
 8004e2c:	df013115 	stw	fp,1220(sp)
 8004e30:	10803fcc 	andi	r2,r2,255
 8004e34:	1080201c 	xori	r2,r2,128
 8004e38:	10bfe004 	addi	r2,r2,-128
 8004e3c:	103ed726 	beq	r2,zero,800499c <___vfprintf_internal_r+0x1a0>
 8004e40:	d8c12817 	ldw	r3,1184(sp)
 8004e44:	18c00044 	addi	r3,r3,1
 8004e48:	d8c12815 	stw	r3,1184(sp)
 8004e4c:	003ed306 	br	800499c <___vfprintf_internal_r+0x1a0>
 8004e50:	8080020c 	andi	r2,r16,8
 8004e54:	e013883a 	mov	r9,fp
 8004e58:	1839883a 	mov	fp,r3
 8004e5c:	1003a626 	beq	r2,zero,8005cf8 <___vfprintf_internal_r+0x14fc>
 8004e60:	d9012d17 	ldw	r4,1204(sp)
 8004e64:	25800017 	ldw	r22,0(r4)
 8004e68:	25000117 	ldw	r20,4(r4)
 8004e6c:	21000204 	addi	r4,r4,8
 8004e70:	d9012d15 	stw	r4,1204(sp)
 8004e74:	dd813315 	stw	r22,1228(sp)
 8004e78:	dd013415 	stw	r20,1232(sp)
 8004e7c:	b009883a 	mov	r4,r22
 8004e80:	a00b883a 	mov	r5,r20
 8004e84:	da413c15 	stw	r9,1264(sp)
 8004e88:	800bbf00 	call	800bbf0 <__isinfd>
 8004e8c:	da413c17 	ldw	r9,1264(sp)
 8004e90:	b009883a 	mov	r4,r22
 8004e94:	a00b883a 	mov	r5,r20
 8004e98:	10041d26 	beq	r2,zero,8005f10 <___vfprintf_internal_r+0x1714>
 8004e9c:	000d883a 	mov	r6,zero
 8004ea0:	000f883a 	mov	r7,zero
 8004ea4:	80109200 	call	8010920 <__ltdf2>
 8004ea8:	da413c17 	ldw	r9,1264(sp)
 8004eac:	1004da16 	blt	r2,zero,8006218 <___vfprintf_internal_r+0x1a1c>
 8004eb0:	d8812583 	ldbu	r2,1174(sp)
 8004eb4:	00c011c4 	movi	r3,71
 8004eb8:	1c83d116 	blt	r3,r18,8005e00 <___vfprintf_internal_r+0x1604>
 8004ebc:	04c20074 	movhi	r19,2049
 8004ec0:	9cd1bc04 	addi	r19,r19,18160
 8004ec4:	00c000c4 	movi	r3,3
 8004ec8:	d8c12815 	stw	r3,1184(sp)
 8004ecc:	00ffdfc4 	movi	r3,-129
 8004ed0:	80e0703a 	and	r16,r16,r3
 8004ed4:	d8c12817 	ldw	r3,1184(sp)
 8004ed8:	d8013115 	stw	zero,1220(sp)
 8004edc:	d8c12b15 	stw	r3,1196(sp)
 8004ee0:	003fd306 	br	8004e30 <___vfprintf_internal_r+0x634>
 8004ee4:	84000214 	ori	r16,r16,8
 8004ee8:	ac800007 	ldb	r18,0(r21)
 8004eec:	003e9f06 	br	800496c <___vfprintf_internal_r+0x170>
 8004ef0:	e013883a 	mov	r9,fp
 8004ef4:	84000414 	ori	r16,r16,16
 8004ef8:	1839883a 	mov	fp,r3
 8004efc:	8080080c 	andi	r2,r16,32
 8004f00:	10031d26 	beq	r2,zero,8005b78 <___vfprintf_internal_r+0x137c>
 8004f04:	d8812d17 	ldw	r2,1204(sp)
 8004f08:	0007883a 	mov	r3,zero
 8004f0c:	15c00017 	ldw	r23,0(r2)
 8004f10:	15800117 	ldw	r22,4(r2)
 8004f14:	10800204 	addi	r2,r2,8
 8004f18:	d8812d15 	stw	r2,1204(sp)
 8004f1c:	d8012585 	stb	zero,1174(sp)
 8004f20:	bd84b03a 	or	r2,r23,r22
 8004f24:	003fae06 	br	8004de0 <___vfprintf_internal_r+0x5e4>
 8004f28:	e013883a 	mov	r9,fp
 8004f2c:	84000414 	ori	r16,r16,16
 8004f30:	1839883a 	mov	fp,r3
 8004f34:	8080080c 	andi	r2,r16,32
 8004f38:	1002e726 	beq	r2,zero,8005ad8 <___vfprintf_internal_r+0x12dc>
 8004f3c:	d8c12d17 	ldw	r3,1204(sp)
 8004f40:	d9012d17 	ldw	r4,1204(sp)
 8004f44:	1dc00017 	ldw	r23,0(r3)
 8004f48:	1d800117 	ldw	r22,4(r3)
 8004f4c:	21000204 	addi	r4,r4,8
 8004f50:	00c00044 	movi	r3,1
 8004f54:	d9012d15 	stw	r4,1204(sp)
 8004f58:	bd84b03a 	or	r2,r23,r22
 8004f5c:	d8012585 	stb	zero,1174(sp)
 8004f60:	003f9f06 	br	8004de0 <___vfprintf_internal_r+0x5e4>
 8004f64:	e013883a 	mov	r9,fp
 8004f68:	1839883a 	mov	fp,r3
 8004f6c:	00c20074 	movhi	r3,2049
 8004f70:	18d1c004 	addi	r3,r3,18176
 8004f74:	d8c13615 	stw	r3,1240(sp)
 8004f78:	8080080c 	andi	r2,r16,32
 8004f7c:	10007726 	beq	r2,zero,800515c <___vfprintf_internal_r+0x960>
 8004f80:	d9012d17 	ldw	r4,1204(sp)
 8004f84:	25c00017 	ldw	r23,0(r4)
 8004f88:	25800117 	ldw	r22,4(r4)
 8004f8c:	21000204 	addi	r4,r4,8
 8004f90:	d9012d15 	stw	r4,1204(sp)
 8004f94:	8080004c 	andi	r2,r16,1
 8004f98:	1002c226 	beq	r2,zero,8005aa4 <___vfprintf_internal_r+0x12a8>
 8004f9c:	bd84b03a 	or	r2,r23,r22
 8004fa0:	10035d26 	beq	r2,zero,8005d18 <___vfprintf_internal_r+0x151c>
 8004fa4:	00c00c04 	movi	r3,48
 8004fa8:	d8c12505 	stb	r3,1172(sp)
 8004fac:	dc812545 	stb	r18,1173(sp)
 8004fb0:	84000094 	ori	r16,r16,2
 8004fb4:	00c00084 	movi	r3,2
 8004fb8:	d8012585 	stb	zero,1174(sp)
 8004fbc:	003f8806 	br	8004de0 <___vfprintf_internal_r+0x5e4>
 8004fc0:	ac800007 	ldb	r18,0(r21)
 8004fc4:	00c00a84 	movi	r3,42
 8004fc8:	adc00044 	addi	r23,r21,1
 8004fcc:	90c57526 	beq	r18,r3,80065a4 <___vfprintf_internal_r+0x1da8>
 8004fd0:	95bff404 	addi	r22,r18,-48
 8004fd4:	0009883a 	mov	r4,zero
 8004fd8:	9d84ff36 	bltu	r19,r22,80063d8 <___vfprintf_internal_r+0x1bdc>
 8004fdc:	01400284 	movi	r5,10
 8004fe0:	8001a6c0 	call	8001a6c <__mulsi3>
 8004fe4:	bc800007 	ldb	r18,0(r23)
 8004fe8:	b089883a 	add	r4,r22,r2
 8004fec:	bdc00044 	addi	r23,r23,1
 8004ff0:	95bff404 	addi	r22,r18,-48
 8004ff4:	9dbff92e 	bgeu	r19,r22,8004fdc <___vfprintf_internal_r+0x7e0>
 8004ff8:	2007883a 	mov	r3,r4
 8004ffc:	20044316 	blt	r4,zero,800610c <___vfprintf_internal_r+0x1910>
 8005000:	b82b883a 	mov	r21,r23
 8005004:	003e5a06 	br	8004970 <___vfprintf_internal_r+0x174>
 8005008:	ac800007 	ldb	r18,0(r21)
 800500c:	01001b04 	movi	r4,108
 8005010:	a805883a 	mov	r2,r21
 8005014:	91045526 	beq	r18,r4,800616c <___vfprintf_internal_r+0x1970>
 8005018:	84000414 	ori	r16,r16,16
 800501c:	003e5306 	br	800496c <___vfprintf_internal_r+0x170>
 8005020:	8080080c 	andi	r2,r16,32
 8005024:	e013883a 	mov	r9,fp
 8005028:	10034026 	beq	r2,zero,8005d2c <___vfprintf_internal_r+0x1530>
 800502c:	d9012d17 	ldw	r4,1204(sp)
 8005030:	20800017 	ldw	r2,0(r4)
 8005034:	d9012c17 	ldw	r4,1200(sp)
 8005038:	2007d7fa 	srai	r3,r4,31
 800503c:	d9012d17 	ldw	r4,1204(sp)
 8005040:	10c00115 	stw	r3,4(r2)
 8005044:	21000104 	addi	r4,r4,4
 8005048:	d9012d15 	stw	r4,1204(sp)
 800504c:	d9012c17 	ldw	r4,1200(sp)
 8005050:	11000015 	stw	r4,0(r2)
 8005054:	003e1f06 	br	80048d4 <___vfprintf_internal_r+0xd8>
 8005058:	d9012d17 	ldw	r4,1204(sp)
 800505c:	21000017 	ldw	r4,0(r4)
 8005060:	d9012e15 	stw	r4,1208(sp)
 8005064:	d9012d17 	ldw	r4,1204(sp)
 8005068:	20800104 	addi	r2,r4,4
 800506c:	d9012e17 	ldw	r4,1208(sp)
 8005070:	203ee716 	blt	r4,zero,8004c10 <___vfprintf_internal_r+0x414>
 8005074:	d8812d15 	stw	r2,1204(sp)
 8005078:	ac800007 	ldb	r18,0(r21)
 800507c:	003e3b06 	br	800496c <___vfprintf_internal_r+0x170>
 8005080:	e013883a 	mov	r9,fp
 8005084:	1839883a 	mov	fp,r3
 8005088:	d8c12d17 	ldw	r3,1204(sp)
 800508c:	00800c04 	movi	r2,48
 8005090:	01020074 	movhi	r4,2049
 8005094:	2111c504 	addi	r4,r4,18196
 8005098:	1dc00017 	ldw	r23,0(r3)
 800509c:	18c00104 	addi	r3,r3,4
 80050a0:	d8812505 	stb	r2,1172(sp)
 80050a4:	00801e04 	movi	r2,120
 80050a8:	d8812545 	stb	r2,1173(sp)
 80050ac:	d8c12d15 	stw	r3,1204(sp)
 80050b0:	002d883a 	mov	r22,zero
 80050b4:	84000094 	ori	r16,r16,2
 80050b8:	d9013615 	stw	r4,1240(sp)
 80050bc:	00c00084 	movi	r3,2
 80050c0:	04801e04 	movi	r18,120
 80050c4:	b805883a 	mov	r2,r23
 80050c8:	d8012585 	stb	zero,1174(sp)
 80050cc:	003f4406 	br	8004de0 <___vfprintf_internal_r+0x5e4>
 80050d0:	84000814 	ori	r16,r16,32
 80050d4:	ac800007 	ldb	r18,0(r21)
 80050d8:	003e2406 	br	800496c <___vfprintf_internal_r+0x170>
 80050dc:	d8812d17 	ldw	r2,1204(sp)
 80050e0:	d8012585 	stb	zero,1174(sp)
 80050e4:	e013883a 	mov	r9,fp
 80050e8:	14c00017 	ldw	r19,0(r2)
 80050ec:	1839883a 	mov	fp,r3
 80050f0:	15c00104 	addi	r23,r2,4
 80050f4:	98045526 	beq	r19,zero,800624c <___vfprintf_internal_r+0x1a50>
 80050f8:	9809883a 	mov	r4,r19
 80050fc:	18043116 	blt	r3,zero,80061c4 <___vfprintf_internal_r+0x19c8>
 8005100:	000b883a 	mov	r5,zero
 8005104:	180d883a 	mov	r6,r3
 8005108:	da413c15 	stw	r9,1264(sp)
 800510c:	800a1080 	call	800a108 <memchr>
 8005110:	da413c17 	ldw	r9,1264(sp)
 8005114:	10047a26 	beq	r2,zero,8006300 <___vfprintf_internal_r+0x1b04>
 8005118:	14c5c83a 	sub	r2,r2,r19
 800511c:	d8812b15 	stw	r2,1196(sp)
 8005120:	e083d40e 	bge	fp,r2,8006074 <___vfprintf_internal_r+0x1878>
 8005124:	df012815 	stw	fp,1184(sp)
 8005128:	e004e416 	blt	fp,zero,80064bc <___vfprintf_internal_r+0x1cc0>
 800512c:	d8812583 	ldbu	r2,1174(sp)
 8005130:	df012b15 	stw	fp,1196(sp)
 8005134:	ddc12d15 	stw	r23,1204(sp)
 8005138:	d8013115 	stw	zero,1220(sp)
 800513c:	003f3c06 	br	8004e30 <___vfprintf_internal_r+0x634>
 8005140:	00820074 	movhi	r2,2049
 8005144:	1091c504 	addi	r2,r2,18196
 8005148:	d8813615 	stw	r2,1240(sp)
 800514c:	8080080c 	andi	r2,r16,32
 8005150:	e013883a 	mov	r9,fp
 8005154:	1839883a 	mov	fp,r3
 8005158:	103f891e 	bne	r2,zero,8004f80 <___vfprintf_internal_r+0x784>
 800515c:	8080040c 	andi	r2,r16,16
 8005160:	1002c326 	beq	r2,zero,8005c70 <___vfprintf_internal_r+0x1474>
 8005164:	d8812d17 	ldw	r2,1204(sp)
 8005168:	002d883a 	mov	r22,zero
 800516c:	15c00017 	ldw	r23,0(r2)
 8005170:	10800104 	addi	r2,r2,4
 8005174:	d8812d15 	stw	r2,1204(sp)
 8005178:	003f8606 	br	8004f94 <___vfprintf_internal_r+0x798>
 800517c:	84001014 	ori	r16,r16,64
 8005180:	ac800007 	ldb	r18,0(r21)
 8005184:	003df906 	br	800496c <___vfprintf_internal_r+0x170>
 8005188:	d8812587 	ldb	r2,1174(sp)
 800518c:	1002e51e 	bne	r2,zero,8005d24 <___vfprintf_internal_r+0x1528>
 8005190:	00800804 	movi	r2,32
 8005194:	d8812585 	stb	r2,1174(sp)
 8005198:	ac800007 	ldb	r18,0(r21)
 800519c:	003df306 	br	800496c <___vfprintf_internal_r+0x170>
 80051a0:	84000054 	ori	r16,r16,1
 80051a4:	ac800007 	ldb	r18,0(r21)
 80051a8:	003df006 	br	800496c <___vfprintf_internal_r+0x170>
 80051ac:	84002014 	ori	r16,r16,128
 80051b0:	ac800007 	ldb	r18,0(r21)
 80051b4:	003ded06 	br	800496c <___vfprintf_internal_r+0x170>
 80051b8:	0009883a 	mov	r4,zero
 80051bc:	95bff404 	addi	r22,r18,-48
 80051c0:	182f883a 	mov	r23,r3
 80051c4:	01400284 	movi	r5,10
 80051c8:	8001a6c0 	call	8001a6c <__mulsi3>
 80051cc:	ac800007 	ldb	r18,0(r21)
 80051d0:	1589883a 	add	r4,r2,r22
 80051d4:	ad400044 	addi	r21,r21,1
 80051d8:	95bff404 	addi	r22,r18,-48
 80051dc:	9dbff92e 	bgeu	r19,r22,80051c4 <___vfprintf_internal_r+0x9c8>
 80051e0:	b807883a 	mov	r3,r23
 80051e4:	d9012e15 	stw	r4,1208(sp)
 80051e8:	003de106 	br	8004970 <___vfprintf_internal_r+0x174>
 80051ec:	00800ac4 	movi	r2,43
 80051f0:	d8812585 	stb	r2,1174(sp)
 80051f4:	ac800007 	ldb	r18,0(r21)
 80051f8:	003ddc06 	br	800496c <___vfprintf_internal_r+0x170>
 80051fc:	d8c12d17 	ldw	r3,1204(sp)
 8005200:	d9012d17 	ldw	r4,1204(sp)
 8005204:	e013883a 	mov	r9,fp
 8005208:	18800017 	ldw	r2,0(r3)
 800520c:	21000104 	addi	r4,r4,4
 8005210:	00c00044 	movi	r3,1
 8005214:	d8c12815 	stw	r3,1184(sp)
 8005218:	d8012585 	stb	zero,1174(sp)
 800521c:	d8810405 	stb	r2,1040(sp)
 8005220:	d9012d15 	stw	r4,1204(sp)
 8005224:	d8c12b15 	stw	r3,1196(sp)
 8005228:	dcc10404 	addi	r19,sp,1040
 800522c:	003dda06 	br	8004998 <___vfprintf_internal_r+0x19c>
 8005230:	e013883a 	mov	r9,fp
 8005234:	1839883a 	mov	fp,r3
 8005238:	003ed806 	br	8004d9c <___vfprintf_internal_r+0x5a0>
 800523c:	e013883a 	mov	r9,fp
 8005240:	1839883a 	mov	fp,r3
 8005244:	003f2d06 	br	8004efc <___vfprintf_internal_r+0x700>
 8005248:	e013883a 	mov	r9,fp
 800524c:	1839883a 	mov	fp,r3
 8005250:	003f3806 	br	8004f34 <___vfprintf_internal_r+0x738>
 8005254:	da011d17 	ldw	r8,1140(sp)
 8005258:	d8c11c17 	ldw	r3,1136(sp)
 800525c:	d8812587 	ldb	r2,1174(sp)
 8005260:	10000b26 	beq	r2,zero,8005290 <___vfprintf_internal_r+0xa94>
 8005264:	d8812584 	addi	r2,sp,1174
 8005268:	48800015 	stw	r2,0(r9)
 800526c:	00800044 	movi	r2,1
 8005270:	48800115 	stw	r2,4(r9)
 8005274:	4091883a 	add	r8,r8,r2
 8005278:	1887883a 	add	r3,r3,r2
 800527c:	da011d15 	stw	r8,1140(sp)
 8005280:	d8c11c15 	stw	r3,1136(sp)
 8005284:	008001c4 	movi	r2,7
 8005288:	10c18e16 	blt	r2,r3,80058c4 <___vfprintf_internal_r+0x10c8>
 800528c:	4a400204 	addi	r9,r9,8
 8005290:	d9012a17 	ldw	r4,1192(sp)
 8005294:	20000b26 	beq	r4,zero,80052c4 <___vfprintf_internal_r+0xac8>
 8005298:	d8812504 	addi	r2,sp,1172
 800529c:	48800015 	stw	r2,0(r9)
 80052a0:	00800084 	movi	r2,2
 80052a4:	48800115 	stw	r2,4(r9)
 80052a8:	4091883a 	add	r8,r8,r2
 80052ac:	18c00044 	addi	r3,r3,1
 80052b0:	da011d15 	stw	r8,1140(sp)
 80052b4:	d8c11c15 	stw	r3,1136(sp)
 80052b8:	008001c4 	movi	r2,7
 80052bc:	10c17816 	blt	r2,r3,80058a0 <___vfprintf_internal_r+0x10a4>
 80052c0:	4a400204 	addi	r9,r9,8
 80052c4:	d9012f17 	ldw	r4,1212(sp)
 80052c8:	00802004 	movi	r2,128
 80052cc:	2080fc26 	beq	r4,r2,80056c0 <___vfprintf_internal_r+0xec4>
 80052d0:	d8813117 	ldw	r2,1220(sp)
 80052d4:	d9012b17 	ldw	r4,1196(sp)
 80052d8:	112fc83a 	sub	r23,r2,r4
 80052dc:	05c02a0e 	bge	zero,r23,8005388 <___vfprintf_internal_r+0xb8c>
 80052e0:	07000404 	movi	fp,16
 80052e4:	05020074 	movhi	r20,2049
 80052e8:	a511d084 	addi	r20,r20,18242
 80052ec:	e5c01d0e 	bge	fp,r23,8005364 <___vfprintf_internal_r+0xb68>
 80052f0:	dc812a15 	stw	r18,1192(sp)
 80052f4:	058001c4 	movi	r22,7
 80052f8:	a025883a 	mov	r18,r20
 80052fc:	8029883a 	mov	r20,r16
 8005300:	dc012917 	ldw	r16,1188(sp)
 8005304:	00000306 	br	8005314 <___vfprintf_internal_r+0xb18>
 8005308:	bdfffc04 	addi	r23,r23,-16
 800530c:	4a400204 	addi	r9,r9,8
 8005310:	e5c0110e 	bge	fp,r23,8005358 <___vfprintf_internal_r+0xb5c>
 8005314:	4c800015 	stw	r18,0(r9)
 8005318:	4f000115 	stw	fp,4(r9)
 800531c:	42000404 	addi	r8,r8,16
 8005320:	18c00044 	addi	r3,r3,1
 8005324:	da011d15 	stw	r8,1140(sp)
 8005328:	d8c11c15 	stw	r3,1136(sp)
 800532c:	b0fff60e 	bge	r22,r3,8005308 <___vfprintf_internal_r+0xb0c>
 8005330:	8809883a 	mov	r4,r17
 8005334:	800b883a 	mov	r5,r16
 8005338:	d9811b04 	addi	r6,sp,1132
 800533c:	80047c80 	call	80047c8 <__sprint_r>
 8005340:	103e741e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 8005344:	bdfffc04 	addi	r23,r23,-16
 8005348:	da011d17 	ldw	r8,1140(sp)
 800534c:	d8c11c17 	ldw	r3,1136(sp)
 8005350:	da400404 	addi	r9,sp,16
 8005354:	e5ffef16 	blt	fp,r23,8005314 <___vfprintf_internal_r+0xb18>
 8005358:	a021883a 	mov	r16,r20
 800535c:	9029883a 	mov	r20,r18
 8005360:	dc812a17 	ldw	r18,1192(sp)
 8005364:	4d000015 	stw	r20,0(r9)
 8005368:	4dc00115 	stw	r23,4(r9)
 800536c:	45d1883a 	add	r8,r8,r23
 8005370:	18c00044 	addi	r3,r3,1
 8005374:	da011d15 	stw	r8,1140(sp)
 8005378:	d8c11c15 	stw	r3,1136(sp)
 800537c:	008001c4 	movi	r2,7
 8005380:	10c13e16 	blt	r2,r3,800587c <___vfprintf_internal_r+0x1080>
 8005384:	4a400204 	addi	r9,r9,8
 8005388:	8080400c 	andi	r2,r16,256
 800538c:	1000831e 	bne	r2,zero,800559c <___vfprintf_internal_r+0xda0>
 8005390:	d8812b17 	ldw	r2,1196(sp)
 8005394:	4cc00015 	stw	r19,0(r9)
 8005398:	48800115 	stw	r2,4(r9)
 800539c:	4091883a 	add	r8,r8,r2
 80053a0:	18c00044 	addi	r3,r3,1
 80053a4:	da011d15 	stw	r8,1140(sp)
 80053a8:	d8c11c15 	stw	r3,1136(sp)
 80053ac:	008001c4 	movi	r2,7
 80053b0:	10c05316 	blt	r2,r3,8005500 <___vfprintf_internal_r+0xd04>
 80053b4:	4a400204 	addi	r9,r9,8
 80053b8:	8400010c 	andi	r16,r16,4
 80053bc:	80002e26 	beq	r16,zero,8005478 <___vfprintf_internal_r+0xc7c>
 80053c0:	d8812e17 	ldw	r2,1208(sp)
 80053c4:	d8c12817 	ldw	r3,1184(sp)
 80053c8:	10e1c83a 	sub	r16,r2,r3
 80053cc:	04002a0e 	bge	zero,r16,8005478 <___vfprintf_internal_r+0xc7c>
 80053d0:	04800404 	movi	r18,16
 80053d4:	d8c11c17 	ldw	r3,1136(sp)
 80053d8:	05c20074 	movhi	r23,2049
 80053dc:	bdd1cc84 	addi	r23,r23,18226
 80053e0:	9400170e 	bge	r18,r16,8005440 <___vfprintf_internal_r+0xc44>
 80053e4:	04c001c4 	movi	r19,7
 80053e8:	dd012917 	ldw	r20,1188(sp)
 80053ec:	00000306 	br	80053fc <___vfprintf_internal_r+0xc00>
 80053f0:	843ffc04 	addi	r16,r16,-16
 80053f4:	4a400204 	addi	r9,r9,8
 80053f8:	9400110e 	bge	r18,r16,8005440 <___vfprintf_internal_r+0xc44>
 80053fc:	4dc00015 	stw	r23,0(r9)
 8005400:	4c800115 	stw	r18,4(r9)
 8005404:	42000404 	addi	r8,r8,16
 8005408:	18c00044 	addi	r3,r3,1
 800540c:	da011d15 	stw	r8,1140(sp)
 8005410:	d8c11c15 	stw	r3,1136(sp)
 8005414:	98fff60e 	bge	r19,r3,80053f0 <___vfprintf_internal_r+0xbf4>
 8005418:	8809883a 	mov	r4,r17
 800541c:	a00b883a 	mov	r5,r20
 8005420:	d9811b04 	addi	r6,sp,1132
 8005424:	80047c80 	call	80047c8 <__sprint_r>
 8005428:	103e3a1e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 800542c:	843ffc04 	addi	r16,r16,-16
 8005430:	da011d17 	ldw	r8,1140(sp)
 8005434:	d8c11c17 	ldw	r3,1136(sp)
 8005438:	da400404 	addi	r9,sp,16
 800543c:	943fef16 	blt	r18,r16,80053fc <___vfprintf_internal_r+0xc00>
 8005440:	4dc00015 	stw	r23,0(r9)
 8005444:	4c000115 	stw	r16,4(r9)
 8005448:	8211883a 	add	r8,r16,r8
 800544c:	18c00044 	addi	r3,r3,1
 8005450:	da011d15 	stw	r8,1140(sp)
 8005454:	d8c11c15 	stw	r3,1136(sp)
 8005458:	008001c4 	movi	r2,7
 800545c:	10c0060e 	bge	r2,r3,8005478 <___vfprintf_internal_r+0xc7c>
 8005460:	d9412917 	ldw	r5,1188(sp)
 8005464:	8809883a 	mov	r4,r17
 8005468:	d9811b04 	addi	r6,sp,1132
 800546c:	80047c80 	call	80047c8 <__sprint_r>
 8005470:	103e281e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 8005474:	da011d17 	ldw	r8,1140(sp)
 8005478:	dd012817 	ldw	r20,1184(sp)
 800547c:	d9012e17 	ldw	r4,1208(sp)
 8005480:	a100010e 	bge	r20,r4,8005488 <___vfprintf_internal_r+0xc8c>
 8005484:	2029883a 	mov	r20,r4
 8005488:	d8812c17 	ldw	r2,1200(sp)
 800548c:	1505883a 	add	r2,r2,r20
 8005490:	d8812c15 	stw	r2,1200(sp)
 8005494:	4000b91e 	bne	r8,zero,800577c <___vfprintf_internal_r+0xf80>
 8005498:	d8011c15 	stw	zero,1136(sp)
 800549c:	a8800007 	ldb	r2,0(r21)
 80054a0:	da400404 	addi	r9,sp,16
 80054a4:	103d0d1e 	bne	r2,zero,80048dc <___vfprintf_internal_r+0xe0>
 80054a8:	a825883a 	mov	r18,r21
 80054ac:	003d2306 	br	800493c <___vfprintf_internal_r+0x140>
 80054b0:	d9412917 	ldw	r5,1188(sp)
 80054b4:	8809883a 	mov	r4,r17
 80054b8:	d9811b04 	addi	r6,sp,1132
 80054bc:	80047c80 	call	80047c8 <__sprint_r>
 80054c0:	103e141e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 80054c4:	da011d17 	ldw	r8,1140(sp)
 80054c8:	da400404 	addi	r9,sp,16
 80054cc:	8080004c 	andi	r2,r16,1
 80054d0:	103fb926 	beq	r2,zero,80053b8 <___vfprintf_internal_r+0xbbc>
 80054d4:	d8c11c17 	ldw	r3,1136(sp)
 80054d8:	d9013717 	ldw	r4,1244(sp)
 80054dc:	00800044 	movi	r2,1
 80054e0:	48800115 	stw	r2,4(r9)
 80054e4:	49000015 	stw	r4,0(r9)
 80054e8:	4091883a 	add	r8,r8,r2
 80054ec:	1887883a 	add	r3,r3,r2
 80054f0:	da011d15 	stw	r8,1140(sp)
 80054f4:	d8c11c15 	stw	r3,1136(sp)
 80054f8:	008001c4 	movi	r2,7
 80054fc:	10ffad0e 	bge	r2,r3,80053b4 <___vfprintf_internal_r+0xbb8>
 8005500:	d9412917 	ldw	r5,1188(sp)
 8005504:	8809883a 	mov	r4,r17
 8005508:	d9811b04 	addi	r6,sp,1132
 800550c:	80047c80 	call	80047c8 <__sprint_r>
 8005510:	103e001e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 8005514:	da400404 	addi	r9,sp,16
 8005518:	da011d17 	ldw	r8,1140(sp)
 800551c:	003fa606 	br	80053b8 <___vfprintf_internal_r+0xbbc>
 8005520:	18803fcc 	andi	r2,r3,255
 8005524:	00c00044 	movi	r3,1
 8005528:	10c10126 	beq	r2,r3,8005930 <___vfprintf_internal_r+0x1134>
 800552c:	00c00084 	movi	r3,2
 8005530:	10c0ed26 	beq	r2,r3,80058e8 <___vfprintf_internal_r+0x10ec>
 8005534:	d8c10dc4 	addi	r3,sp,1079
 8005538:	b808d0fa 	srli	r4,r23,3
 800553c:	b00a977a 	slli	r5,r22,29
 8005540:	b02cd0fa 	srli	r22,r22,3
 8005544:	bdc001cc 	andi	r23,r23,7
 8005548:	b8800c04 	addi	r2,r23,48
 800554c:	292eb03a 	or	r23,r5,r4
 8005550:	18800005 	stb	r2,0(r3)
 8005554:	bd88b03a 	or	r4,r23,r22
 8005558:	1827883a 	mov	r19,r3
 800555c:	18ffffc4 	addi	r3,r3,-1
 8005560:	203ff51e 	bne	r4,zero,8005538 <___vfprintf_internal_r+0xd3c>
 8005564:	8100004c 	andi	r4,r16,1
 8005568:	980b883a 	mov	r5,r19
 800556c:	20000726 	beq	r4,zero,800558c <___vfprintf_internal_r+0xd90>
 8005570:	10803fcc 	andi	r2,r2,255
 8005574:	1080201c 	xori	r2,r2,128
 8005578:	10bfe004 	addi	r2,r2,-128
 800557c:	01000c04 	movi	r4,48
 8005580:	11000226 	beq	r2,r4,800558c <___vfprintf_internal_r+0xd90>
 8005584:	1827883a 	mov	r19,r3
 8005588:	293fffc5 	stb	r4,-1(r5)
 800558c:	d8812717 	ldw	r2,1180(sp)
 8005590:	14c5c83a 	sub	r2,r2,r19
 8005594:	d8812b15 	stw	r2,1196(sp)
 8005598:	003e1f06 	br	8004e18 <___vfprintf_internal_r+0x61c>
 800559c:	00801944 	movi	r2,101
 80055a0:	14807c0e 	bge	r2,r18,8005794 <___vfprintf_internal_r+0xf98>
 80055a4:	d9013317 	ldw	r4,1228(sp)
 80055a8:	d9413417 	ldw	r5,1232(sp)
 80055ac:	000d883a 	mov	r6,zero
 80055b0:	000f883a 	mov	r7,zero
 80055b4:	d8c13b15 	stw	r3,1260(sp)
 80055b8:	da013a15 	stw	r8,1256(sp)
 80055bc:	da413c15 	stw	r9,1264(sp)
 80055c0:	80107a00 	call	80107a0 <__eqdf2>
 80055c4:	d8c13b17 	ldw	r3,1260(sp)
 80055c8:	da013a17 	ldw	r8,1256(sp)
 80055cc:	da413c17 	ldw	r9,1264(sp)
 80055d0:	1001001e 	bne	r2,zero,80059d4 <___vfprintf_internal_r+0x11d8>
 80055d4:	00820074 	movhi	r2,2049
 80055d8:	1091cc04 	addi	r2,r2,18224
 80055dc:	48800015 	stw	r2,0(r9)
 80055e0:	00800044 	movi	r2,1
 80055e4:	48800115 	stw	r2,4(r9)
 80055e8:	4091883a 	add	r8,r8,r2
 80055ec:	1887883a 	add	r3,r3,r2
 80055f0:	da011d15 	stw	r8,1140(sp)
 80055f4:	d8c11c15 	stw	r3,1136(sp)
 80055f8:	008001c4 	movi	r2,7
 80055fc:	10c20316 	blt	r2,r3,8005e0c <___vfprintf_internal_r+0x1610>
 8005600:	4a400204 	addi	r9,r9,8
 8005604:	d8812417 	ldw	r2,1168(sp)
 8005608:	d8c13217 	ldw	r3,1224(sp)
 800560c:	10c00216 	blt	r2,r3,8005618 <___vfprintf_internal_r+0xe1c>
 8005610:	8080004c 	andi	r2,r16,1
 8005614:	103f6826 	beq	r2,zero,80053b8 <___vfprintf_internal_r+0xbbc>
 8005618:	d8c11c17 	ldw	r3,1136(sp)
 800561c:	d9013717 	ldw	r4,1244(sp)
 8005620:	00800044 	movi	r2,1
 8005624:	48800115 	stw	r2,4(r9)
 8005628:	49000015 	stw	r4,0(r9)
 800562c:	4091883a 	add	r8,r8,r2
 8005630:	1887883a 	add	r3,r3,r2
 8005634:	da011d15 	stw	r8,1140(sp)
 8005638:	d8c11c15 	stw	r3,1136(sp)
 800563c:	008001c4 	movi	r2,7
 8005640:	10c2ce16 	blt	r2,r3,800617c <___vfprintf_internal_r+0x1980>
 8005644:	4a400204 	addi	r9,r9,8
 8005648:	d8813217 	ldw	r2,1224(sp)
 800564c:	14bfffc4 	addi	r18,r2,-1
 8005650:	04bf590e 	bge	zero,r18,80053b8 <___vfprintf_internal_r+0xbbc>
 8005654:	04c00404 	movi	r19,16
 8005658:	d8c11c17 	ldw	r3,1136(sp)
 800565c:	05020074 	movhi	r20,2049
 8005660:	a511d084 	addi	r20,r20,18242
 8005664:	9c818a0e 	bge	r19,r18,8005c90 <___vfprintf_internal_r+0x1494>
 8005668:	058001c4 	movi	r22,7
 800566c:	ddc12917 	ldw	r23,1188(sp)
 8005670:	00000306 	br	8005680 <___vfprintf_internal_r+0xe84>
 8005674:	4a400204 	addi	r9,r9,8
 8005678:	94bffc04 	addi	r18,r18,-16
 800567c:	9c81840e 	bge	r19,r18,8005c90 <___vfprintf_internal_r+0x1494>
 8005680:	4d000015 	stw	r20,0(r9)
 8005684:	4cc00115 	stw	r19,4(r9)
 8005688:	42000404 	addi	r8,r8,16
 800568c:	18c00044 	addi	r3,r3,1
 8005690:	da011d15 	stw	r8,1140(sp)
 8005694:	d8c11c15 	stw	r3,1136(sp)
 8005698:	b0fff60e 	bge	r22,r3,8005674 <___vfprintf_internal_r+0xe78>
 800569c:	8809883a 	mov	r4,r17
 80056a0:	b80b883a 	mov	r5,r23
 80056a4:	d9811b04 	addi	r6,sp,1132
 80056a8:	80047c80 	call	80047c8 <__sprint_r>
 80056ac:	103d991e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 80056b0:	da011d17 	ldw	r8,1140(sp)
 80056b4:	d8c11c17 	ldw	r3,1136(sp)
 80056b8:	da400404 	addi	r9,sp,16
 80056bc:	003fee06 	br	8005678 <___vfprintf_internal_r+0xe7c>
 80056c0:	d8812e17 	ldw	r2,1208(sp)
 80056c4:	d9012817 	ldw	r4,1184(sp)
 80056c8:	112fc83a 	sub	r23,r2,r4
 80056cc:	05ff000e 	bge	zero,r23,80052d0 <___vfprintf_internal_r+0xad4>
 80056d0:	07000404 	movi	fp,16
 80056d4:	05020074 	movhi	r20,2049
 80056d8:	a511d084 	addi	r20,r20,18242
 80056dc:	e5c01d0e 	bge	fp,r23,8005754 <___vfprintf_internal_r+0xf58>
 80056e0:	dc812a15 	stw	r18,1192(sp)
 80056e4:	058001c4 	movi	r22,7
 80056e8:	a025883a 	mov	r18,r20
 80056ec:	8029883a 	mov	r20,r16
 80056f0:	dc012917 	ldw	r16,1188(sp)
 80056f4:	00000306 	br	8005704 <___vfprintf_internal_r+0xf08>
 80056f8:	bdfffc04 	addi	r23,r23,-16
 80056fc:	4a400204 	addi	r9,r9,8
 8005700:	e5c0110e 	bge	fp,r23,8005748 <___vfprintf_internal_r+0xf4c>
 8005704:	4c800015 	stw	r18,0(r9)
 8005708:	4f000115 	stw	fp,4(r9)
 800570c:	42000404 	addi	r8,r8,16
 8005710:	18c00044 	addi	r3,r3,1
 8005714:	da011d15 	stw	r8,1140(sp)
 8005718:	d8c11c15 	stw	r3,1136(sp)
 800571c:	b0fff60e 	bge	r22,r3,80056f8 <___vfprintf_internal_r+0xefc>
 8005720:	8809883a 	mov	r4,r17
 8005724:	800b883a 	mov	r5,r16
 8005728:	d9811b04 	addi	r6,sp,1132
 800572c:	80047c80 	call	80047c8 <__sprint_r>
 8005730:	103d781e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 8005734:	bdfffc04 	addi	r23,r23,-16
 8005738:	da011d17 	ldw	r8,1140(sp)
 800573c:	d8c11c17 	ldw	r3,1136(sp)
 8005740:	da400404 	addi	r9,sp,16
 8005744:	e5ffef16 	blt	fp,r23,8005704 <___vfprintf_internal_r+0xf08>
 8005748:	a021883a 	mov	r16,r20
 800574c:	9029883a 	mov	r20,r18
 8005750:	dc812a17 	ldw	r18,1192(sp)
 8005754:	4d000015 	stw	r20,0(r9)
 8005758:	4dc00115 	stw	r23,4(r9)
 800575c:	45d1883a 	add	r8,r8,r23
 8005760:	18c00044 	addi	r3,r3,1
 8005764:	da011d15 	stw	r8,1140(sp)
 8005768:	d8c11c15 	stw	r3,1136(sp)
 800576c:	008001c4 	movi	r2,7
 8005770:	10c13616 	blt	r2,r3,8005c4c <___vfprintf_internal_r+0x1450>
 8005774:	4a400204 	addi	r9,r9,8
 8005778:	003ed506 	br	80052d0 <___vfprintf_internal_r+0xad4>
 800577c:	d9412917 	ldw	r5,1188(sp)
 8005780:	8809883a 	mov	r4,r17
 8005784:	d9811b04 	addi	r6,sp,1132
 8005788:	80047c80 	call	80047c8 <__sprint_r>
 800578c:	103f4226 	beq	r2,zero,8005498 <___vfprintf_internal_r+0xc9c>
 8005790:	003d6006 	br	8004d14 <___vfprintf_internal_r+0x518>
 8005794:	d9013217 	ldw	r4,1224(sp)
 8005798:	00800044 	movi	r2,1
 800579c:	4cc00015 	stw	r19,0(r9)
 80057a0:	1101000e 	bge	r2,r4,8005ba4 <___vfprintf_internal_r+0x13a8>
 80057a4:	00800044 	movi	r2,1
 80057a8:	48800115 	stw	r2,4(r9)
 80057ac:	4091883a 	add	r8,r8,r2
 80057b0:	1887883a 	add	r3,r3,r2
 80057b4:	da011d15 	stw	r8,1140(sp)
 80057b8:	d8c11c15 	stw	r3,1136(sp)
 80057bc:	008001c4 	movi	r2,7
 80057c0:	10c10c16 	blt	r2,r3,8005bf4 <___vfprintf_internal_r+0x13f8>
 80057c4:	4a400204 	addi	r9,r9,8
 80057c8:	d8813717 	ldw	r2,1244(sp)
 80057cc:	48800015 	stw	r2,0(r9)
 80057d0:	00800044 	movi	r2,1
 80057d4:	48800115 	stw	r2,4(r9)
 80057d8:	4091883a 	add	r8,r8,r2
 80057dc:	1887883a 	add	r3,r3,r2
 80057e0:	da011d15 	stw	r8,1140(sp)
 80057e4:	d8c11c15 	stw	r3,1136(sp)
 80057e8:	008001c4 	movi	r2,7
 80057ec:	10c10a16 	blt	r2,r3,8005c18 <___vfprintf_internal_r+0x141c>
 80057f0:	4c800204 	addi	r18,r9,8
 80057f4:	d9013317 	ldw	r4,1228(sp)
 80057f8:	d9413417 	ldw	r5,1232(sp)
 80057fc:	000d883a 	mov	r6,zero
 8005800:	000f883a 	mov	r7,zero
 8005804:	d8c13b15 	stw	r3,1260(sp)
 8005808:	da013a15 	stw	r8,1256(sp)
 800580c:	80107fc0 	call	80107fc <__nedf2>
 8005810:	d8c13b17 	ldw	r3,1260(sp)
 8005814:	da013a17 	ldw	r8,1256(sp)
 8005818:	1000ba26 	beq	r2,zero,8005b04 <___vfprintf_internal_r+0x1308>
 800581c:	d9013217 	ldw	r4,1224(sp)
 8005820:	9cc00044 	addi	r19,r19,1
 8005824:	94c00015 	stw	r19,0(r18)
 8005828:	20bfffc4 	addi	r2,r4,-1
 800582c:	90800115 	stw	r2,4(r18)
 8005830:	4091883a 	add	r8,r8,r2
 8005834:	18c00044 	addi	r3,r3,1
 8005838:	da011d15 	stw	r8,1140(sp)
 800583c:	d8c11c15 	stw	r3,1136(sp)
 8005840:	008001c4 	movi	r2,7
 8005844:	10c0e216 	blt	r2,r3,8005bd0 <___vfprintf_internal_r+0x13d4>
 8005848:	94800204 	addi	r18,r18,8
 800584c:	d9013517 	ldw	r4,1236(sp)
 8005850:	d8811fc4 	addi	r2,sp,1151
 8005854:	90800015 	stw	r2,0(r18)
 8005858:	91000115 	stw	r4,4(r18)
 800585c:	4111883a 	add	r8,r8,r4
 8005860:	18c00044 	addi	r3,r3,1
 8005864:	da011d15 	stw	r8,1140(sp)
 8005868:	d8c11c15 	stw	r3,1136(sp)
 800586c:	008001c4 	movi	r2,7
 8005870:	10ff2316 	blt	r2,r3,8005500 <___vfprintf_internal_r+0xd04>
 8005874:	92400204 	addi	r9,r18,8
 8005878:	003ecf06 	br	80053b8 <___vfprintf_internal_r+0xbbc>
 800587c:	d9412917 	ldw	r5,1188(sp)
 8005880:	8809883a 	mov	r4,r17
 8005884:	d9811b04 	addi	r6,sp,1132
 8005888:	80047c80 	call	80047c8 <__sprint_r>
 800588c:	103d211e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 8005890:	da011d17 	ldw	r8,1140(sp)
 8005894:	d8c11c17 	ldw	r3,1136(sp)
 8005898:	da400404 	addi	r9,sp,16
 800589c:	003eba06 	br	8005388 <___vfprintf_internal_r+0xb8c>
 80058a0:	d9412917 	ldw	r5,1188(sp)
 80058a4:	8809883a 	mov	r4,r17
 80058a8:	d9811b04 	addi	r6,sp,1132
 80058ac:	80047c80 	call	80047c8 <__sprint_r>
 80058b0:	103d181e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 80058b4:	da011d17 	ldw	r8,1140(sp)
 80058b8:	d8c11c17 	ldw	r3,1136(sp)
 80058bc:	da400404 	addi	r9,sp,16
 80058c0:	003e8006 	br	80052c4 <___vfprintf_internal_r+0xac8>
 80058c4:	d9412917 	ldw	r5,1188(sp)
 80058c8:	8809883a 	mov	r4,r17
 80058cc:	d9811b04 	addi	r6,sp,1132
 80058d0:	80047c80 	call	80047c8 <__sprint_r>
 80058d4:	103d0f1e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 80058d8:	da011d17 	ldw	r8,1140(sp)
 80058dc:	d8c11c17 	ldw	r3,1136(sp)
 80058e0:	da400404 	addi	r9,sp,16
 80058e4:	003e6a06 	br	8005290 <___vfprintf_internal_r+0xa94>
 80058e8:	d9413617 	ldw	r5,1240(sp)
 80058ec:	d8810dc4 	addi	r2,sp,1079
 80058f0:	b8c003cc 	andi	r3,r23,15
 80058f4:	b008973a 	slli	r4,r22,28
 80058f8:	28c7883a 	add	r3,r5,r3
 80058fc:	b82ed13a 	srli	r23,r23,4
 8005900:	18c00003 	ldbu	r3,0(r3)
 8005904:	b02cd13a 	srli	r22,r22,4
 8005908:	25eeb03a 	or	r23,r4,r23
 800590c:	10c00005 	stb	r3,0(r2)
 8005910:	bd86b03a 	or	r3,r23,r22
 8005914:	1027883a 	mov	r19,r2
 8005918:	10bfffc4 	addi	r2,r2,-1
 800591c:	183ff41e 	bne	r3,zero,80058f0 <___vfprintf_internal_r+0x10f4>
 8005920:	003f1a06 	br	800558c <___vfprintf_internal_r+0xd90>
 8005924:	d8012b15 	stw	zero,1196(sp)
 8005928:	dcc10e04 	addi	r19,sp,1080
 800592c:	003d3a06 	br	8004e18 <___vfprintf_internal_r+0x61c>
 8005930:	b0025426 	beq	r22,zero,8006284 <___vfprintf_internal_r+0x1a88>
 8005934:	b807883a 	mov	r3,r23
 8005938:	d8810dc4 	addi	r2,sp,1079
 800593c:	882f883a 	mov	r23,r17
 8005940:	04c00244 	movi	r19,9
 8005944:	8023883a 	mov	r17,r16
 8005948:	da412815 	stw	r9,1184(sp)
 800594c:	1821883a 	mov	r16,r3
 8005950:	8009883a 	mov	r4,r16
 8005954:	b00b883a 	mov	r5,r22
 8005958:	01800284 	movi	r6,10
 800595c:	000f883a 	mov	r7,zero
 8005960:	1029883a 	mov	r20,r2
 8005964:	800f9880 	call	800f988 <__umoddi3>
 8005968:	10800c04 	addi	r2,r2,48
 800596c:	8009883a 	mov	r4,r16
 8005970:	b00b883a 	mov	r5,r22
 8005974:	a0800005 	stb	r2,0(r20)
 8005978:	01800284 	movi	r6,10
 800597c:	000f883a 	mov	r7,zero
 8005980:	800f3380 	call	800f338 <__udivdi3>
 8005984:	1021883a 	mov	r16,r2
 8005988:	182d883a 	mov	r22,r3
 800598c:	a0bfffc4 	addi	r2,r20,-1
 8005990:	183fef1e 	bne	r3,zero,8005950 <___vfprintf_internal_r+0x1154>
 8005994:	9c3fee36 	bltu	r19,r16,8005950 <___vfprintf_internal_r+0x1154>
 8005998:	da412817 	ldw	r9,1184(sp)
 800599c:	8005883a 	mov	r2,r16
 80059a0:	8821883a 	mov	r16,r17
 80059a4:	b823883a 	mov	r17,r23
 80059a8:	102f883a 	mov	r23,r2
 80059ac:	d8812717 	ldw	r2,1180(sp)
 80059b0:	a4ffffc4 	addi	r19,r20,-1
 80059b4:	bdc00c04 	addi	r23,r23,48
 80059b8:	14c5c83a 	sub	r2,r2,r19
 80059bc:	a5ffffc5 	stb	r23,-1(r20)
 80059c0:	d8812b15 	stw	r2,1196(sp)
 80059c4:	003d1406 	br	8004e18 <___vfprintf_internal_r+0x61c>
 80059c8:	00c00044 	movi	r3,1
 80059cc:	bd84b03a 	or	r2,r23,r22
 80059d0:	003d0306 	br	8004de0 <___vfprintf_internal_r+0x5e4>
 80059d4:	dc812417 	ldw	r18,1168(sp)
 80059d8:	0481140e 	bge	zero,r18,8005e2c <___vfprintf_internal_r+0x1630>
 80059dc:	d9013217 	ldw	r4,1224(sp)
 80059e0:	4cc00015 	stw	r19,0(r9)
 80059e4:	9100ec16 	blt	r18,r4,8005d98 <___vfprintf_internal_r+0x159c>
 80059e8:	49000115 	stw	r4,4(r9)
 80059ec:	4111883a 	add	r8,r8,r4
 80059f0:	18c00044 	addi	r3,r3,1
 80059f4:	da011d15 	stw	r8,1140(sp)
 80059f8:	d8c11c15 	stw	r3,1136(sp)
 80059fc:	008001c4 	movi	r2,7
 8005a00:	10c23616 	blt	r2,r3,80062dc <___vfprintf_internal_r+0x1ae0>
 8005a04:	4a400204 	addi	r9,r9,8
 8005a08:	d8813217 	ldw	r2,1224(sp)
 8005a0c:	90a5c83a 	sub	r18,r18,r2
 8005a10:	04beae0e 	bge	zero,r18,80054cc <___vfprintf_internal_r+0xcd0>
 8005a14:	04c00404 	movi	r19,16
 8005a18:	d8c11c17 	ldw	r3,1136(sp)
 8005a1c:	05020074 	movhi	r20,2049
 8005a20:	a511d084 	addi	r20,r20,18242
 8005a24:	9c81dd0e 	bge	r19,r18,800619c <___vfprintf_internal_r+0x19a0>
 8005a28:	058001c4 	movi	r22,7
 8005a2c:	ddc12917 	ldw	r23,1188(sp)
 8005a30:	00000306 	br	8005a40 <___vfprintf_internal_r+0x1244>
 8005a34:	4a400204 	addi	r9,r9,8
 8005a38:	94bffc04 	addi	r18,r18,-16
 8005a3c:	9c81d70e 	bge	r19,r18,800619c <___vfprintf_internal_r+0x19a0>
 8005a40:	4d000015 	stw	r20,0(r9)
 8005a44:	4cc00115 	stw	r19,4(r9)
 8005a48:	42000404 	addi	r8,r8,16
 8005a4c:	18c00044 	addi	r3,r3,1
 8005a50:	da011d15 	stw	r8,1140(sp)
 8005a54:	d8c11c15 	stw	r3,1136(sp)
 8005a58:	b0fff60e 	bge	r22,r3,8005a34 <___vfprintf_internal_r+0x1238>
 8005a5c:	8809883a 	mov	r4,r17
 8005a60:	b80b883a 	mov	r5,r23
 8005a64:	d9811b04 	addi	r6,sp,1132
 8005a68:	80047c80 	call	80047c8 <__sprint_r>
 8005a6c:	103ca91e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 8005a70:	da011d17 	ldw	r8,1140(sp)
 8005a74:	d8c11c17 	ldw	r3,1136(sp)
 8005a78:	da400404 	addi	r9,sp,16
 8005a7c:	003fee06 	br	8005a38 <___vfprintf_internal_r+0x123c>
 8005a80:	d9412917 	ldw	r5,1188(sp)
 8005a84:	8809883a 	mov	r4,r17
 8005a88:	d9811b04 	addi	r6,sp,1132
 8005a8c:	80047c80 	call	80047c8 <__sprint_r>
 8005a90:	103ca01e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 8005a94:	da011d17 	ldw	r8,1140(sp)
 8005a98:	d8c11c17 	ldw	r3,1136(sp)
 8005a9c:	da400404 	addi	r9,sp,16
 8005aa0:	003dee06 	br	800525c <___vfprintf_internal_r+0xa60>
 8005aa4:	00c00084 	movi	r3,2
 8005aa8:	bd84b03a 	or	r2,r23,r22
 8005aac:	d8012585 	stb	zero,1174(sp)
 8005ab0:	003ccb06 	br	8004de0 <___vfprintf_internal_r+0x5e4>
 8005ab4:	8080040c 	andi	r2,r16,16
 8005ab8:	1000ae26 	beq	r2,zero,8005d74 <___vfprintf_internal_r+0x1578>
 8005abc:	d9012d17 	ldw	r4,1204(sp)
 8005ac0:	25c00017 	ldw	r23,0(r4)
 8005ac4:	21000104 	addi	r4,r4,4
 8005ac8:	d9012d15 	stw	r4,1204(sp)
 8005acc:	b82dd7fa 	srai	r22,r23,31
 8005ad0:	b005883a 	mov	r2,r22
 8005ad4:	003cb906 	br	8004dbc <___vfprintf_internal_r+0x5c0>
 8005ad8:	8080040c 	andi	r2,r16,16
 8005adc:	10007026 	beq	r2,zero,8005ca0 <___vfprintf_internal_r+0x14a4>
 8005ae0:	d8812d17 	ldw	r2,1204(sp)
 8005ae4:	002d883a 	mov	r22,zero
 8005ae8:	00c00044 	movi	r3,1
 8005aec:	15c00017 	ldw	r23,0(r2)
 8005af0:	10800104 	addi	r2,r2,4
 8005af4:	d8812d15 	stw	r2,1204(sp)
 8005af8:	d8012585 	stb	zero,1174(sp)
 8005afc:	b805883a 	mov	r2,r23
 8005b00:	003cb706 	br	8004de0 <___vfprintf_internal_r+0x5e4>
 8005b04:	d8813217 	ldw	r2,1224(sp)
 8005b08:	14ffffc4 	addi	r19,r2,-1
 8005b0c:	04ff4f0e 	bge	zero,r19,800584c <___vfprintf_internal_r+0x1050>
 8005b10:	05800404 	movi	r22,16
 8005b14:	05020074 	movhi	r20,2049
 8005b18:	a511d084 	addi	r20,r20,18242
 8005b1c:	b4c0470e 	bge	r22,r19,8005c3c <___vfprintf_internal_r+0x1440>
 8005b20:	05c001c4 	movi	r23,7
 8005b24:	df012917 	ldw	fp,1188(sp)
 8005b28:	00000306 	br	8005b38 <___vfprintf_internal_r+0x133c>
 8005b2c:	94800204 	addi	r18,r18,8
 8005b30:	9cfffc04 	addi	r19,r19,-16
 8005b34:	b4c0410e 	bge	r22,r19,8005c3c <___vfprintf_internal_r+0x1440>
 8005b38:	95000015 	stw	r20,0(r18)
 8005b3c:	95800115 	stw	r22,4(r18)
 8005b40:	42000404 	addi	r8,r8,16
 8005b44:	18c00044 	addi	r3,r3,1
 8005b48:	da011d15 	stw	r8,1140(sp)
 8005b4c:	d8c11c15 	stw	r3,1136(sp)
 8005b50:	b8fff60e 	bge	r23,r3,8005b2c <___vfprintf_internal_r+0x1330>
 8005b54:	8809883a 	mov	r4,r17
 8005b58:	e00b883a 	mov	r5,fp
 8005b5c:	d9811b04 	addi	r6,sp,1132
 8005b60:	80047c80 	call	80047c8 <__sprint_r>
 8005b64:	103c6b1e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 8005b68:	da011d17 	ldw	r8,1140(sp)
 8005b6c:	d8c11c17 	ldw	r3,1136(sp)
 8005b70:	dc800404 	addi	r18,sp,16
 8005b74:	003fee06 	br	8005b30 <___vfprintf_internal_r+0x1334>
 8005b78:	8080040c 	andi	r2,r16,16
 8005b7c:	10005326 	beq	r2,zero,8005ccc <___vfprintf_internal_r+0x14d0>
 8005b80:	d8c12d17 	ldw	r3,1204(sp)
 8005b84:	002d883a 	mov	r22,zero
 8005b88:	1dc00017 	ldw	r23,0(r3)
 8005b8c:	18c00104 	addi	r3,r3,4
 8005b90:	d8c12d15 	stw	r3,1204(sp)
 8005b94:	b805883a 	mov	r2,r23
 8005b98:	0007883a 	mov	r3,zero
 8005b9c:	d8012585 	stb	zero,1174(sp)
 8005ba0:	003c8f06 	br	8004de0 <___vfprintf_internal_r+0x5e4>
 8005ba4:	8088703a 	and	r4,r16,r2
 8005ba8:	203efe1e 	bne	r4,zero,80057a4 <___vfprintf_internal_r+0xfa8>
 8005bac:	48800115 	stw	r2,4(r9)
 8005bb0:	42000044 	addi	r8,r8,1
 8005bb4:	18c00044 	addi	r3,r3,1
 8005bb8:	da011d15 	stw	r8,1140(sp)
 8005bbc:	d8c11c15 	stw	r3,1136(sp)
 8005bc0:	008001c4 	movi	r2,7
 8005bc4:	10c00216 	blt	r2,r3,8005bd0 <___vfprintf_internal_r+0x13d4>
 8005bc8:	4c800204 	addi	r18,r9,8
 8005bcc:	003f1f06 	br	800584c <___vfprintf_internal_r+0x1050>
 8005bd0:	d9412917 	ldw	r5,1188(sp)
 8005bd4:	8809883a 	mov	r4,r17
 8005bd8:	d9811b04 	addi	r6,sp,1132
 8005bdc:	80047c80 	call	80047c8 <__sprint_r>
 8005be0:	103c4c1e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 8005be4:	dc800404 	addi	r18,sp,16
 8005be8:	da011d17 	ldw	r8,1140(sp)
 8005bec:	d8c11c17 	ldw	r3,1136(sp)
 8005bf0:	003f1606 	br	800584c <___vfprintf_internal_r+0x1050>
 8005bf4:	d9412917 	ldw	r5,1188(sp)
 8005bf8:	8809883a 	mov	r4,r17
 8005bfc:	d9811b04 	addi	r6,sp,1132
 8005c00:	80047c80 	call	80047c8 <__sprint_r>
 8005c04:	103c431e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 8005c08:	da011d17 	ldw	r8,1140(sp)
 8005c0c:	d8c11c17 	ldw	r3,1136(sp)
 8005c10:	da400404 	addi	r9,sp,16
 8005c14:	003eec06 	br	80057c8 <___vfprintf_internal_r+0xfcc>
 8005c18:	d9412917 	ldw	r5,1188(sp)
 8005c1c:	8809883a 	mov	r4,r17
 8005c20:	d9811b04 	addi	r6,sp,1132
 8005c24:	80047c80 	call	80047c8 <__sprint_r>
 8005c28:	103c3a1e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 8005c2c:	da011d17 	ldw	r8,1140(sp)
 8005c30:	d8c11c17 	ldw	r3,1136(sp)
 8005c34:	dc800404 	addi	r18,sp,16
 8005c38:	003eee06 	br	80057f4 <___vfprintf_internal_r+0xff8>
 8005c3c:	95000015 	stw	r20,0(r18)
 8005c40:	94c00115 	stw	r19,4(r18)
 8005c44:	44d1883a 	add	r8,r8,r19
 8005c48:	003efa06 	br	8005834 <___vfprintf_internal_r+0x1038>
 8005c4c:	d9412917 	ldw	r5,1188(sp)
 8005c50:	8809883a 	mov	r4,r17
 8005c54:	d9811b04 	addi	r6,sp,1132
 8005c58:	80047c80 	call	80047c8 <__sprint_r>
 8005c5c:	103c2d1e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 8005c60:	da011d17 	ldw	r8,1140(sp)
 8005c64:	d8c11c17 	ldw	r3,1136(sp)
 8005c68:	da400404 	addi	r9,sp,16
 8005c6c:	003d9806 	br	80052d0 <___vfprintf_internal_r+0xad4>
 8005c70:	8080100c 	andi	r2,r16,64
 8005c74:	10011626 	beq	r2,zero,80060d0 <___vfprintf_internal_r+0x18d4>
 8005c78:	d8c12d17 	ldw	r3,1204(sp)
 8005c7c:	002d883a 	mov	r22,zero
 8005c80:	1dc0000b 	ldhu	r23,0(r3)
 8005c84:	18c00104 	addi	r3,r3,4
 8005c88:	d8c12d15 	stw	r3,1204(sp)
 8005c8c:	003cc106 	br	8004f94 <___vfprintf_internal_r+0x798>
 8005c90:	4d000015 	stw	r20,0(r9)
 8005c94:	4c800115 	stw	r18,4(r9)
 8005c98:	4491883a 	add	r8,r8,r18
 8005c9c:	003dc006 	br	80053a0 <___vfprintf_internal_r+0xba4>
 8005ca0:	8080100c 	andi	r2,r16,64
 8005ca4:	10010126 	beq	r2,zero,80060ac <___vfprintf_internal_r+0x18b0>
 8005ca8:	d8c12d17 	ldw	r3,1204(sp)
 8005cac:	002d883a 	mov	r22,zero
 8005cb0:	1dc0000b 	ldhu	r23,0(r3)
 8005cb4:	18c00104 	addi	r3,r3,4
 8005cb8:	d8c12d15 	stw	r3,1204(sp)
 8005cbc:	b805883a 	mov	r2,r23
 8005cc0:	00c00044 	movi	r3,1
 8005cc4:	d8012585 	stb	zero,1174(sp)
 8005cc8:	003c4506 	br	8004de0 <___vfprintf_internal_r+0x5e4>
 8005ccc:	8080100c 	andi	r2,r16,64
 8005cd0:	10010526 	beq	r2,zero,80060e8 <___vfprintf_internal_r+0x18ec>
 8005cd4:	d9012d17 	ldw	r4,1204(sp)
 8005cd8:	002d883a 	mov	r22,zero
 8005cdc:	0007883a 	mov	r3,zero
 8005ce0:	25c0000b 	ldhu	r23,0(r4)
 8005ce4:	21000104 	addi	r4,r4,4
 8005ce8:	d9012d15 	stw	r4,1204(sp)
 8005cec:	b805883a 	mov	r2,r23
 8005cf0:	d8012585 	stb	zero,1174(sp)
 8005cf4:	003c3a06 	br	8004de0 <___vfprintf_internal_r+0x5e4>
 8005cf8:	d8812d17 	ldw	r2,1204(sp)
 8005cfc:	15800017 	ldw	r22,0(r2)
 8005d00:	15000117 	ldw	r20,4(r2)
 8005d04:	10800204 	addi	r2,r2,8
 8005d08:	d8812d15 	stw	r2,1204(sp)
 8005d0c:	dd813315 	stw	r22,1228(sp)
 8005d10:	dd013415 	stw	r20,1232(sp)
 8005d14:	003c5906 	br	8004e7c <___vfprintf_internal_r+0x680>
 8005d18:	00c00084 	movi	r3,2
 8005d1c:	d8012585 	stb	zero,1174(sp)
 8005d20:	003c2f06 	br	8004de0 <___vfprintf_internal_r+0x5e4>
 8005d24:	ac800007 	ldb	r18,0(r21)
 8005d28:	003b1006 	br	800496c <___vfprintf_internal_r+0x170>
 8005d2c:	8080040c 	andi	r2,r16,16
 8005d30:	1000091e 	bne	r2,zero,8005d58 <___vfprintf_internal_r+0x155c>
 8005d34:	8400100c 	andi	r16,r16,64
 8005d38:	80000726 	beq	r16,zero,8005d58 <___vfprintf_internal_r+0x155c>
 8005d3c:	d8c12d17 	ldw	r3,1204(sp)
 8005d40:	d9012c17 	ldw	r4,1200(sp)
 8005d44:	18800017 	ldw	r2,0(r3)
 8005d48:	18c00104 	addi	r3,r3,4
 8005d4c:	d8c12d15 	stw	r3,1204(sp)
 8005d50:	1100000d 	sth	r4,0(r2)
 8005d54:	003adf06 	br	80048d4 <___vfprintf_internal_r+0xd8>
 8005d58:	d8c12d17 	ldw	r3,1204(sp)
 8005d5c:	d9012c17 	ldw	r4,1200(sp)
 8005d60:	18800017 	ldw	r2,0(r3)
 8005d64:	18c00104 	addi	r3,r3,4
 8005d68:	d8c12d15 	stw	r3,1204(sp)
 8005d6c:	11000015 	stw	r4,0(r2)
 8005d70:	003ad806 	br	80048d4 <___vfprintf_internal_r+0xd8>
 8005d74:	8080100c 	andi	r2,r16,64
 8005d78:	1000c526 	beq	r2,zero,8006090 <___vfprintf_internal_r+0x1894>
 8005d7c:	d8812d17 	ldw	r2,1204(sp)
 8005d80:	15c0000f 	ldh	r23,0(r2)
 8005d84:	10800104 	addi	r2,r2,4
 8005d88:	d8812d15 	stw	r2,1204(sp)
 8005d8c:	b82dd7fa 	srai	r22,r23,31
 8005d90:	b005883a 	mov	r2,r22
 8005d94:	003c0906 	br	8004dbc <___vfprintf_internal_r+0x5c0>
 8005d98:	4c800115 	stw	r18,4(r9)
 8005d9c:	9211883a 	add	r8,r18,r8
 8005da0:	18c00044 	addi	r3,r3,1
 8005da4:	da011d15 	stw	r8,1140(sp)
 8005da8:	d8c11c15 	stw	r3,1136(sp)
 8005dac:	008001c4 	movi	r2,7
 8005db0:	10c14016 	blt	r2,r3,80062b4 <___vfprintf_internal_r+0x1ab8>
 8005db4:	4a400204 	addi	r9,r9,8
 8005db8:	d8813717 	ldw	r2,1244(sp)
 8005dbc:	9ca7883a 	add	r19,r19,r18
 8005dc0:	48800015 	stw	r2,0(r9)
 8005dc4:	00800044 	movi	r2,1
 8005dc8:	48800115 	stw	r2,4(r9)
 8005dcc:	4091883a 	add	r8,r8,r2
 8005dd0:	1887883a 	add	r3,r3,r2
 8005dd4:	da011d15 	stw	r8,1140(sp)
 8005dd8:	d8c11c15 	stw	r3,1136(sp)
 8005ddc:	008001c4 	movi	r2,7
 8005de0:	10c12c16 	blt	r2,r3,8006294 <___vfprintf_internal_r+0x1a98>
 8005de4:	4a400204 	addi	r9,r9,8
 8005de8:	d9013217 	ldw	r4,1224(sp)
 8005dec:	da011d17 	ldw	r8,1140(sp)
 8005df0:	d8c11c17 	ldw	r3,1136(sp)
 8005df4:	24a5c83a 	sub	r18,r4,r18
 8005df8:	4cc00015 	stw	r19,0(r9)
 8005dfc:	003fa506 	br	8005c94 <___vfprintf_internal_r+0x1498>
 8005e00:	04c20074 	movhi	r19,2049
 8005e04:	9cd1bd04 	addi	r19,r19,18164
 8005e08:	003c2e06 	br	8004ec4 <___vfprintf_internal_r+0x6c8>
 8005e0c:	d9412917 	ldw	r5,1188(sp)
 8005e10:	8809883a 	mov	r4,r17
 8005e14:	d9811b04 	addi	r6,sp,1132
 8005e18:	80047c80 	call	80047c8 <__sprint_r>
 8005e1c:	103bbd1e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 8005e20:	da011d17 	ldw	r8,1140(sp)
 8005e24:	da400404 	addi	r9,sp,16
 8005e28:	003df606 	br	8005604 <___vfprintf_internal_r+0xe08>
 8005e2c:	00820074 	movhi	r2,2049
 8005e30:	1091cc04 	addi	r2,r2,18224
 8005e34:	48800015 	stw	r2,0(r9)
 8005e38:	00800044 	movi	r2,1
 8005e3c:	48800115 	stw	r2,4(r9)
 8005e40:	4091883a 	add	r8,r8,r2
 8005e44:	1887883a 	add	r3,r3,r2
 8005e48:	da011d15 	stw	r8,1140(sp)
 8005e4c:	d8c11c15 	stw	r3,1136(sp)
 8005e50:	008001c4 	movi	r2,7
 8005e54:	10c0bc16 	blt	r2,r3,8006148 <___vfprintf_internal_r+0x194c>
 8005e58:	4a400204 	addi	r9,r9,8
 8005e5c:	9000041e 	bne	r18,zero,8005e70 <___vfprintf_internal_r+0x1674>
 8005e60:	d8c13217 	ldw	r3,1224(sp)
 8005e64:	1800021e 	bne	r3,zero,8005e70 <___vfprintf_internal_r+0x1674>
 8005e68:	8080004c 	andi	r2,r16,1
 8005e6c:	103d5226 	beq	r2,zero,80053b8 <___vfprintf_internal_r+0xbbc>
 8005e70:	d8c11c17 	ldw	r3,1136(sp)
 8005e74:	d9013717 	ldw	r4,1244(sp)
 8005e78:	00800044 	movi	r2,1
 8005e7c:	48800115 	stw	r2,4(r9)
 8005e80:	49000015 	stw	r4,0(r9)
 8005e84:	4091883a 	add	r8,r8,r2
 8005e88:	1887883a 	add	r3,r3,r2
 8005e8c:	da011d15 	stw	r8,1140(sp)
 8005e90:	d8c11c15 	stw	r3,1136(sp)
 8005e94:	008001c4 	movi	r2,7
 8005e98:	10c14516 	blt	r2,r3,80063b0 <___vfprintf_internal_r+0x1bb4>
 8005e9c:	4a400204 	addi	r9,r9,8
 8005ea0:	04a5c83a 	sub	r18,zero,r18
 8005ea4:	0480d70e 	bge	zero,r18,8006204 <___vfprintf_internal_r+0x1a08>
 8005ea8:	05800404 	movi	r22,16
 8005eac:	05020074 	movhi	r20,2049
 8005eb0:	a511d084 	addi	r20,r20,18242
 8005eb4:	b480db0e 	bge	r22,r18,8006224 <___vfprintf_internal_r+0x1a28>
 8005eb8:	05c001c4 	movi	r23,7
 8005ebc:	df012917 	ldw	fp,1188(sp)
 8005ec0:	00000306 	br	8005ed0 <___vfprintf_internal_r+0x16d4>
 8005ec4:	4a400204 	addi	r9,r9,8
 8005ec8:	94bffc04 	addi	r18,r18,-16
 8005ecc:	b480d50e 	bge	r22,r18,8006224 <___vfprintf_internal_r+0x1a28>
 8005ed0:	4d000015 	stw	r20,0(r9)
 8005ed4:	4d800115 	stw	r22,4(r9)
 8005ed8:	42000404 	addi	r8,r8,16
 8005edc:	18c00044 	addi	r3,r3,1
 8005ee0:	da011d15 	stw	r8,1140(sp)
 8005ee4:	d8c11c15 	stw	r3,1136(sp)
 8005ee8:	b8fff60e 	bge	r23,r3,8005ec4 <___vfprintf_internal_r+0x16c8>
 8005eec:	8809883a 	mov	r4,r17
 8005ef0:	e00b883a 	mov	r5,fp
 8005ef4:	d9811b04 	addi	r6,sp,1132
 8005ef8:	80047c80 	call	80047c8 <__sprint_r>
 8005efc:	103b851e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 8005f00:	da011d17 	ldw	r8,1140(sp)
 8005f04:	d8c11c17 	ldw	r3,1136(sp)
 8005f08:	da400404 	addi	r9,sp,16
 8005f0c:	003fee06 	br	8005ec8 <___vfprintf_internal_r+0x16cc>
 8005f10:	da413c15 	stw	r9,1264(sp)
 8005f14:	800bc280 	call	800bc28 <__isnand>
 8005f18:	da413c17 	ldw	r9,1264(sp)
 8005f1c:	10007e1e 	bne	r2,zero,8006118 <___vfprintf_internal_r+0x191c>
 8005f20:	00bfffc4 	movi	r2,-1
 8005f24:	e0816a26 	beq	fp,r2,80064d0 <___vfprintf_internal_r+0x1cd4>
 8005f28:	008019c4 	movi	r2,103
 8005f2c:	90816526 	beq	r18,r2,80064c4 <___vfprintf_internal_r+0x1cc8>
 8005f30:	008011c4 	movi	r2,71
 8005f34:	90816326 	beq	r18,r2,80064c4 <___vfprintf_internal_r+0x1cc8>
 8005f38:	80c04014 	ori	r3,r16,256
 8005f3c:	d8c12a15 	stw	r3,1192(sp)
 8005f40:	a0016516 	blt	r20,zero,80064d8 <___vfprintf_internal_r+0x1cdc>
 8005f44:	d8012f05 	stb	zero,1212(sp)
 8005f48:	00801984 	movi	r2,102
 8005f4c:	9080f226 	beq	r18,r2,8006318 <___vfprintf_internal_r+0x1b1c>
 8005f50:	00801184 	movi	r2,70
 8005f54:	9080f026 	beq	r18,r2,8006318 <___vfprintf_internal_r+0x1b1c>
 8005f58:	00801944 	movi	r2,101
 8005f5c:	90818d26 	beq	r18,r2,8006594 <___vfprintf_internal_r+0x1d98>
 8005f60:	00801144 	movi	r2,69
 8005f64:	90818b26 	beq	r18,r2,8006594 <___vfprintf_internal_r+0x1d98>
 8005f68:	e02f883a 	mov	r23,fp
 8005f6c:	d8812404 	addi	r2,sp,1168
 8005f70:	d8800115 	stw	r2,4(sp)
 8005f74:	d8812304 	addi	r2,sp,1164
 8005f78:	d8800215 	stw	r2,8(sp)
 8005f7c:	d8812204 	addi	r2,sp,1160
 8005f80:	ddc00015 	stw	r23,0(sp)
 8005f84:	d8800315 	stw	r2,12(sp)
 8005f88:	8809883a 	mov	r4,r17
 8005f8c:	b00b883a 	mov	r5,r22
 8005f90:	a00d883a 	mov	r6,r20
 8005f94:	01c00084 	movi	r7,2
 8005f98:	da413c15 	stw	r9,1264(sp)
 8005f9c:	80082a40 	call	80082a4 <_dtoa_r>
 8005fa0:	1027883a 	mov	r19,r2
 8005fa4:	008019c4 	movi	r2,103
 8005fa8:	da413c17 	ldw	r9,1264(sp)
 8005fac:	9081951e 	bne	r18,r2,8006604 <___vfprintf_internal_r+0x1e08>
 8005fb0:	8080004c 	andi	r2,r16,1
 8005fb4:	10017926 	beq	r2,zero,800659c <___vfprintf_internal_r+0x1da0>
 8005fb8:	00801184 	movi	r2,70
 8005fbc:	9dc7883a 	add	r3,r19,r23
 8005fc0:	9080e626 	beq	r18,r2,800635c <___vfprintf_internal_r+0x1b60>
 8005fc4:	b009883a 	mov	r4,r22
 8005fc8:	a00b883a 	mov	r5,r20
 8005fcc:	000d883a 	mov	r6,zero
 8005fd0:	000f883a 	mov	r7,zero
 8005fd4:	d8c13b15 	stw	r3,1260(sp)
 8005fd8:	da413c15 	stw	r9,1264(sp)
 8005fdc:	80107a00 	call	80107a0 <__eqdf2>
 8005fe0:	d8c13b17 	ldw	r3,1260(sp)
 8005fe4:	da413c17 	ldw	r9,1264(sp)
 8005fe8:	10000726 	beq	r2,zero,8006008 <___vfprintf_internal_r+0x180c>
 8005fec:	d8812217 	ldw	r2,1160(sp)
 8005ff0:	10c18a2e 	bgeu	r2,r3,800661c <___vfprintf_internal_r+0x1e20>
 8005ff4:	01000c04 	movi	r4,48
 8005ff8:	11000005 	stb	r4,0(r2)
 8005ffc:	10800044 	addi	r2,r2,1
 8006000:	d8812215 	stw	r2,1160(sp)
 8006004:	10fffc1e 	bne	r2,r3,8005ff8 <___vfprintf_internal_r+0x17fc>
 8006008:	1cc7c83a 	sub	r3,r3,r19
 800600c:	d8c13215 	stw	r3,1224(sp)
 8006010:	008019c4 	movi	r2,103
 8006014:	9080fa26 	beq	r18,r2,8006400 <___vfprintf_internal_r+0x1c04>
 8006018:	008011c4 	movi	r2,71
 800601c:	9080f826 	beq	r18,r2,8006400 <___vfprintf_internal_r+0x1c04>
 8006020:	00801984 	movi	r2,102
 8006024:	90818e1e 	bne	r18,r2,8006660 <___vfprintf_internal_r+0x1e64>
 8006028:	d8812417 	ldw	r2,1168(sp)
 800602c:	d8812b15 	stw	r2,1196(sp)
 8006030:	00817c0e 	bge	zero,r2,8006624 <___vfprintf_internal_r+0x1e28>
 8006034:	e000021e 	bne	fp,zero,8006040 <___vfprintf_internal_r+0x1844>
 8006038:	8400004c 	andi	r16,r16,1
 800603c:	80000426 	beq	r16,zero,8006050 <___vfprintf_internal_r+0x1854>
 8006040:	d8812b17 	ldw	r2,1196(sp)
 8006044:	e2000044 	addi	r8,fp,1
 8006048:	1205883a 	add	r2,r2,r8
 800604c:	d8812b15 	stw	r2,1196(sp)
 8006050:	d8812815 	stw	r2,1184(sp)
 8006054:	10010b16 	blt	r2,zero,8006484 <___vfprintf_internal_r+0x1c88>
 8006058:	ddc12f07 	ldb	r23,1212(sp)
 800605c:	b800e426 	beq	r23,zero,80063f0 <___vfprintf_internal_r+0x1bf4>
 8006060:	00800b44 	movi	r2,45
 8006064:	d8812585 	stb	r2,1174(sp)
 8006068:	dc012a17 	ldw	r16,1192(sp)
 800606c:	d8013115 	stw	zero,1220(sp)
 8006070:	003b7306 	br	8004e40 <___vfprintf_internal_r+0x644>
 8006074:	d8812b17 	ldw	r2,1196(sp)
 8006078:	d8812815 	stw	r2,1184(sp)
 800607c:	10005716 	blt	r2,zero,80061dc <___vfprintf_internal_r+0x19e0>
 8006080:	d8812583 	ldbu	r2,1174(sp)
 8006084:	ddc12d15 	stw	r23,1204(sp)
 8006088:	d8013115 	stw	zero,1220(sp)
 800608c:	003b6806 	br	8004e30 <___vfprintf_internal_r+0x634>
 8006090:	d8c12d17 	ldw	r3,1204(sp)
 8006094:	1dc00017 	ldw	r23,0(r3)
 8006098:	18c00104 	addi	r3,r3,4
 800609c:	d8c12d15 	stw	r3,1204(sp)
 80060a0:	b82dd7fa 	srai	r22,r23,31
 80060a4:	b005883a 	mov	r2,r22
 80060a8:	003b4406 	br	8004dbc <___vfprintf_internal_r+0x5c0>
 80060ac:	d9012d17 	ldw	r4,1204(sp)
 80060b0:	002d883a 	mov	r22,zero
 80060b4:	00c00044 	movi	r3,1
 80060b8:	25c00017 	ldw	r23,0(r4)
 80060bc:	21000104 	addi	r4,r4,4
 80060c0:	d9012d15 	stw	r4,1204(sp)
 80060c4:	b805883a 	mov	r2,r23
 80060c8:	d8012585 	stb	zero,1174(sp)
 80060cc:	003b4406 	br	8004de0 <___vfprintf_internal_r+0x5e4>
 80060d0:	d9012d17 	ldw	r4,1204(sp)
 80060d4:	002d883a 	mov	r22,zero
 80060d8:	25c00017 	ldw	r23,0(r4)
 80060dc:	21000104 	addi	r4,r4,4
 80060e0:	d9012d15 	stw	r4,1204(sp)
 80060e4:	003bab06 	br	8004f94 <___vfprintf_internal_r+0x798>
 80060e8:	d8812d17 	ldw	r2,1204(sp)
 80060ec:	002d883a 	mov	r22,zero
 80060f0:	0007883a 	mov	r3,zero
 80060f4:	15c00017 	ldw	r23,0(r2)
 80060f8:	10800104 	addi	r2,r2,4
 80060fc:	d8812d15 	stw	r2,1204(sp)
 8006100:	d8012585 	stb	zero,1174(sp)
 8006104:	b805883a 	mov	r2,r23
 8006108:	003b3506 	br	8004de0 <___vfprintf_internal_r+0x5e4>
 800610c:	00ffffc4 	movi	r3,-1
 8006110:	b82b883a 	mov	r21,r23
 8006114:	003a1606 	br	8004970 <___vfprintf_internal_r+0x174>
 8006118:	008011c4 	movi	r2,71
 800611c:	1480b116 	blt	r2,r18,80063e4 <___vfprintf_internal_r+0x1be8>
 8006120:	04c20074 	movhi	r19,2049
 8006124:	9cd1be04 	addi	r19,r19,18168
 8006128:	00c000c4 	movi	r3,3
 800612c:	00bfdfc4 	movi	r2,-129
 8006130:	80a0703a 	and	r16,r16,r2
 8006134:	d8c12815 	stw	r3,1184(sp)
 8006138:	d8812583 	ldbu	r2,1174(sp)
 800613c:	d8c12b15 	stw	r3,1196(sp)
 8006140:	d8013115 	stw	zero,1220(sp)
 8006144:	003b3a06 	br	8004e30 <___vfprintf_internal_r+0x634>
 8006148:	d9412917 	ldw	r5,1188(sp)
 800614c:	8809883a 	mov	r4,r17
 8006150:	d9811b04 	addi	r6,sp,1132
 8006154:	80047c80 	call	80047c8 <__sprint_r>
 8006158:	103aee1e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 800615c:	dc812417 	ldw	r18,1168(sp)
 8006160:	da011d17 	ldw	r8,1140(sp)
 8006164:	da400404 	addi	r9,sp,16
 8006168:	003f3c06 	br	8005e5c <___vfprintf_internal_r+0x1660>
 800616c:	ad400044 	addi	r21,r21,1
 8006170:	84000814 	ori	r16,r16,32
 8006174:	14800047 	ldb	r18,1(r2)
 8006178:	0039fc06 	br	800496c <___vfprintf_internal_r+0x170>
 800617c:	d9412917 	ldw	r5,1188(sp)
 8006180:	8809883a 	mov	r4,r17
 8006184:	d9811b04 	addi	r6,sp,1132
 8006188:	80047c80 	call	80047c8 <__sprint_r>
 800618c:	103ae11e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 8006190:	da011d17 	ldw	r8,1140(sp)
 8006194:	da400404 	addi	r9,sp,16
 8006198:	003d2b06 	br	8005648 <___vfprintf_internal_r+0xe4c>
 800619c:	4d000015 	stw	r20,0(r9)
 80061a0:	4c800115 	stw	r18,4(r9)
 80061a4:	4491883a 	add	r8,r8,r18
 80061a8:	18c00044 	addi	r3,r3,1
 80061ac:	da011d15 	stw	r8,1140(sp)
 80061b0:	d8c11c15 	stw	r3,1136(sp)
 80061b4:	008001c4 	movi	r2,7
 80061b8:	10fcbd16 	blt	r2,r3,80054b0 <___vfprintf_internal_r+0xcb4>
 80061bc:	4a400204 	addi	r9,r9,8
 80061c0:	003cc206 	br	80054cc <___vfprintf_internal_r+0xcd0>
 80061c4:	da413c15 	stw	r9,1264(sp)
 80061c8:	80047340 	call	8004734 <strlen>
 80061cc:	d8812b15 	stw	r2,1196(sp)
 80061d0:	d8812815 	stw	r2,1184(sp)
 80061d4:	da413c17 	ldw	r9,1264(sp)
 80061d8:	103fa90e 	bge	r2,zero,8006080 <___vfprintf_internal_r+0x1884>
 80061dc:	d8012815 	stw	zero,1184(sp)
 80061e0:	003fa706 	br	8006080 <___vfprintf_internal_r+0x1884>
 80061e4:	d9412917 	ldw	r5,1188(sp)
 80061e8:	8809883a 	mov	r4,r17
 80061ec:	d9811b04 	addi	r6,sp,1132
 80061f0:	80047c80 	call	80047c8 <__sprint_r>
 80061f4:	103ac71e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 80061f8:	da011d17 	ldw	r8,1140(sp)
 80061fc:	d8c11c17 	ldw	r3,1136(sp)
 8006200:	da400404 	addi	r9,sp,16
 8006204:	d8813217 	ldw	r2,1224(sp)
 8006208:	4cc00015 	stw	r19,0(r9)
 800620c:	48800115 	stw	r2,4(r9)
 8006210:	4091883a 	add	r8,r8,r2
 8006214:	003c6206 	br	80053a0 <___vfprintf_internal_r+0xba4>
 8006218:	00800b44 	movi	r2,45
 800621c:	d8812585 	stb	r2,1174(sp)
 8006220:	003b2406 	br	8004eb4 <___vfprintf_internal_r+0x6b8>
 8006224:	4d000015 	stw	r20,0(r9)
 8006228:	4c800115 	stw	r18,4(r9)
 800622c:	4491883a 	add	r8,r8,r18
 8006230:	18c00044 	addi	r3,r3,1
 8006234:	da011d15 	stw	r8,1140(sp)
 8006238:	d8c11c15 	stw	r3,1136(sp)
 800623c:	008001c4 	movi	r2,7
 8006240:	10ffe816 	blt	r2,r3,80061e4 <___vfprintf_internal_r+0x19e8>
 8006244:	4a400204 	addi	r9,r9,8
 8006248:	003fee06 	br	8006204 <___vfprintf_internal_r+0x1a08>
 800624c:	d8c12b15 	stw	r3,1196(sp)
 8006250:	00800184 	movi	r2,6
 8006254:	10c0062e 	bgeu	r2,r3,8006270 <___vfprintf_internal_r+0x1a74>
 8006258:	d8812b15 	stw	r2,1196(sp)
 800625c:	d8812815 	stw	r2,1184(sp)
 8006260:	ddc12d15 	stw	r23,1204(sp)
 8006264:	04c20074 	movhi	r19,2049
 8006268:	9cd1ca04 	addi	r19,r19,18216
 800626c:	0039ca06 	br	8004998 <___vfprintf_internal_r+0x19c>
 8006270:	d8812b17 	ldw	r2,1196(sp)
 8006274:	d8812815 	stw	r2,1184(sp)
 8006278:	103ff90e 	bge	r2,zero,8006260 <___vfprintf_internal_r+0x1a64>
 800627c:	d8012815 	stw	zero,1184(sp)
 8006280:	003ff706 	br	8006260 <___vfprintf_internal_r+0x1a64>
 8006284:	00800244 	movi	r2,9
 8006288:	15fdaa36 	bltu	r2,r23,8005934 <___vfprintf_internal_r+0x1138>
 800628c:	dd010e04 	addi	r20,sp,1080
 8006290:	003dc606 	br	80059ac <___vfprintf_internal_r+0x11b0>
 8006294:	d9412917 	ldw	r5,1188(sp)
 8006298:	8809883a 	mov	r4,r17
 800629c:	d9811b04 	addi	r6,sp,1132
 80062a0:	80047c80 	call	80047c8 <__sprint_r>
 80062a4:	103a9b1e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 80062a8:	dc812417 	ldw	r18,1168(sp)
 80062ac:	da400404 	addi	r9,sp,16
 80062b0:	003ecd06 	br	8005de8 <___vfprintf_internal_r+0x15ec>
 80062b4:	d9412917 	ldw	r5,1188(sp)
 80062b8:	8809883a 	mov	r4,r17
 80062bc:	d9811b04 	addi	r6,sp,1132
 80062c0:	80047c80 	call	80047c8 <__sprint_r>
 80062c4:	103a931e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 80062c8:	dc812417 	ldw	r18,1168(sp)
 80062cc:	da011d17 	ldw	r8,1140(sp)
 80062d0:	d8c11c17 	ldw	r3,1136(sp)
 80062d4:	da400404 	addi	r9,sp,16
 80062d8:	003eb706 	br	8005db8 <___vfprintf_internal_r+0x15bc>
 80062dc:	d9412917 	ldw	r5,1188(sp)
 80062e0:	8809883a 	mov	r4,r17
 80062e4:	d9811b04 	addi	r6,sp,1132
 80062e8:	80047c80 	call	80047c8 <__sprint_r>
 80062ec:	103a891e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 80062f0:	dc812417 	ldw	r18,1168(sp)
 80062f4:	da011d17 	ldw	r8,1140(sp)
 80062f8:	da400404 	addi	r9,sp,16
 80062fc:	003dc206 	br	8005a08 <___vfprintf_internal_r+0x120c>
 8006300:	df012815 	stw	fp,1184(sp)
 8006304:	d8812583 	ldbu	r2,1174(sp)
 8006308:	df012b15 	stw	fp,1196(sp)
 800630c:	ddc12d15 	stw	r23,1204(sp)
 8006310:	d8013115 	stw	zero,1220(sp)
 8006314:	003ac606 	br	8004e30 <___vfprintf_internal_r+0x634>
 8006318:	d8812404 	addi	r2,sp,1168
 800631c:	d8800115 	stw	r2,4(sp)
 8006320:	d8812304 	addi	r2,sp,1164
 8006324:	d8800215 	stw	r2,8(sp)
 8006328:	d8812204 	addi	r2,sp,1160
 800632c:	df000015 	stw	fp,0(sp)
 8006330:	d8800315 	stw	r2,12(sp)
 8006334:	8809883a 	mov	r4,r17
 8006338:	b00b883a 	mov	r5,r22
 800633c:	a00d883a 	mov	r6,r20
 8006340:	01c000c4 	movi	r7,3
 8006344:	da413c15 	stw	r9,1264(sp)
 8006348:	80082a40 	call	80082a4 <_dtoa_r>
 800634c:	da413c17 	ldw	r9,1264(sp)
 8006350:	1027883a 	mov	r19,r2
 8006354:	1707883a 	add	r3,r2,fp
 8006358:	e02f883a 	mov	r23,fp
 800635c:	99000007 	ldb	r4,0(r19)
 8006360:	00800c04 	movi	r2,48
 8006364:	20800326 	beq	r4,r2,8006374 <___vfprintf_internal_r+0x1b78>
 8006368:	da812417 	ldw	r10,1168(sp)
 800636c:	1a87883a 	add	r3,r3,r10
 8006370:	003f1406 	br	8005fc4 <___vfprintf_internal_r+0x17c8>
 8006374:	b009883a 	mov	r4,r22
 8006378:	a00b883a 	mov	r5,r20
 800637c:	000d883a 	mov	r6,zero
 8006380:	000f883a 	mov	r7,zero
 8006384:	d8c13b15 	stw	r3,1260(sp)
 8006388:	da413c15 	stw	r9,1264(sp)
 800638c:	80107fc0 	call	80107fc <__nedf2>
 8006390:	d8c13b17 	ldw	r3,1260(sp)
 8006394:	da413c17 	ldw	r9,1264(sp)
 8006398:	103ff326 	beq	r2,zero,8006368 <___vfprintf_internal_r+0x1b6c>
 800639c:	00800044 	movi	r2,1
 80063a0:	15d5c83a 	sub	r10,r2,r23
 80063a4:	da812415 	stw	r10,1168(sp)
 80063a8:	1a87883a 	add	r3,r3,r10
 80063ac:	003f0506 	br	8005fc4 <___vfprintf_internal_r+0x17c8>
 80063b0:	d9412917 	ldw	r5,1188(sp)
 80063b4:	8809883a 	mov	r4,r17
 80063b8:	d9811b04 	addi	r6,sp,1132
 80063bc:	80047c80 	call	80047c8 <__sprint_r>
 80063c0:	103a541e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x518>
 80063c4:	dc812417 	ldw	r18,1168(sp)
 80063c8:	da011d17 	ldw	r8,1140(sp)
 80063cc:	d8c11c17 	ldw	r3,1136(sp)
 80063d0:	da400404 	addi	r9,sp,16
 80063d4:	003eb206 	br	8005ea0 <___vfprintf_internal_r+0x16a4>
 80063d8:	b82b883a 	mov	r21,r23
 80063dc:	0007883a 	mov	r3,zero
 80063e0:	00396306 	br	8004970 <___vfprintf_internal_r+0x174>
 80063e4:	04c20074 	movhi	r19,2049
 80063e8:	9cd1bf04 	addi	r19,r19,18172
 80063ec:	003f4e06 	br	8006128 <___vfprintf_internal_r+0x192c>
 80063f0:	d8812583 	ldbu	r2,1174(sp)
 80063f4:	dc012a17 	ldw	r16,1192(sp)
 80063f8:	d8013115 	stw	zero,1220(sp)
 80063fc:	003a8c06 	br	8004e30 <___vfprintf_internal_r+0x634>
 8006400:	d8812417 	ldw	r2,1168(sp)
 8006404:	d8812b15 	stw	r2,1196(sp)
 8006408:	1029883a 	mov	r20,r2
 800640c:	00bfff44 	movi	r2,-3
 8006410:	a0800116 	blt	r20,r2,8006418 <___vfprintf_internal_r+0x1c1c>
 8006414:	e5001d0e 	bge	fp,r20,800648c <___vfprintf_internal_r+0x1c90>
 8006418:	94bfff84 	addi	r18,r18,-2
 800641c:	a53fffc4 	addi	r20,r20,-1
 8006420:	dd012415 	stw	r20,1168(sp)
 8006424:	dc811fc5 	stb	r18,1151(sp)
 8006428:	a0007216 	blt	r20,zero,80065f4 <___vfprintf_internal_r+0x1df8>
 800642c:	00800ac4 	movi	r2,43
 8006430:	d8812005 	stb	r2,1152(sp)
 8006434:	00800244 	movi	r2,9
 8006438:	15003516 	blt	r2,r20,8006510 <___vfprintf_internal_r+0x1d14>
 800643c:	00800c04 	movi	r2,48
 8006440:	a5000c04 	addi	r20,r20,48
 8006444:	d8812045 	stb	r2,1153(sp)
 8006448:	dd012085 	stb	r20,1154(sp)
 800644c:	d8c120c4 	addi	r3,sp,1155
 8006450:	d8811fc4 	addi	r2,sp,1151
 8006454:	1885c83a 	sub	r2,r3,r2
 8006458:	d8c13217 	ldw	r3,1224(sp)
 800645c:	d8813515 	stw	r2,1236(sp)
 8006460:	1885883a 	add	r2,r3,r2
 8006464:	d8812b15 	stw	r2,1196(sp)
 8006468:	00800044 	movi	r2,1
 800646c:	10c0580e 	bge	r2,r3,80065d0 <___vfprintf_internal_r+0x1dd4>
 8006470:	d8812b17 	ldw	r2,1196(sp)
 8006474:	10800044 	addi	r2,r2,1
 8006478:	d8812b15 	stw	r2,1196(sp)
 800647c:	d8812815 	stw	r2,1184(sp)
 8006480:	103ef50e 	bge	r2,zero,8006058 <___vfprintf_internal_r+0x185c>
 8006484:	d8012815 	stw	zero,1184(sp)
 8006488:	003ef306 	br	8006058 <___vfprintf_internal_r+0x185c>
 800648c:	d8812b17 	ldw	r2,1196(sp)
 8006490:	d8c13217 	ldw	r3,1224(sp)
 8006494:	10c01416 	blt	r2,r3,80064e8 <___vfprintf_internal_r+0x1cec>
 8006498:	8400004c 	andi	r16,r16,1
 800649c:	80000326 	beq	r16,zero,80064ac <___vfprintf_internal_r+0x1cb0>
 80064a0:	d8812b17 	ldw	r2,1196(sp)
 80064a4:	10800044 	addi	r2,r2,1
 80064a8:	d8812b15 	stw	r2,1196(sp)
 80064ac:	d8812815 	stw	r2,1184(sp)
 80064b0:	10001416 	blt	r2,zero,8006504 <___vfprintf_internal_r+0x1d08>
 80064b4:	048019c4 	movi	r18,103
 80064b8:	003ee706 	br	8006058 <___vfprintf_internal_r+0x185c>
 80064bc:	d8012815 	stw	zero,1184(sp)
 80064c0:	003b1a06 	br	800512c <___vfprintf_internal_r+0x930>
 80064c4:	e03e9c1e 	bne	fp,zero,8005f38 <___vfprintf_internal_r+0x173c>
 80064c8:	07000044 	movi	fp,1
 80064cc:	003e9a06 	br	8005f38 <___vfprintf_internal_r+0x173c>
 80064d0:	07000184 	movi	fp,6
 80064d4:	003e9806 	br	8005f38 <___vfprintf_internal_r+0x173c>
 80064d8:	00c00b44 	movi	r3,45
 80064dc:	a520003c 	xorhi	r20,r20,32768
 80064e0:	d8c12f05 	stb	r3,1212(sp)
 80064e4:	003e9806 	br	8005f48 <___vfprintf_internal_r+0x174c>
 80064e8:	05003f0e 	bge	zero,r20,80065e8 <___vfprintf_internal_r+0x1dec>
 80064ec:	05000044 	movi	r20,1
 80064f0:	d8c13217 	ldw	r3,1224(sp)
 80064f4:	a0e9883a 	add	r20,r20,r3
 80064f8:	dd012b15 	stw	r20,1196(sp)
 80064fc:	dd012815 	stw	r20,1184(sp)
 8006500:	a03fec0e 	bge	r20,zero,80064b4 <___vfprintf_internal_r+0x1cb8>
 8006504:	d8012815 	stw	zero,1184(sp)
 8006508:	048019c4 	movi	r18,103
 800650c:	003ed206 	br	8006058 <___vfprintf_internal_r+0x185c>
 8006510:	d8c11f84 	addi	r3,sp,1150
 8006514:	102f883a 	mov	r23,r2
 8006518:	4839883a 	mov	fp,r9
 800651c:	a009883a 	mov	r4,r20
 8006520:	01400284 	movi	r5,10
 8006524:	182d883a 	mov	r22,r3
 8006528:	8010bd00 	call	8010bd0 <__modsi3>
 800652c:	10800c04 	addi	r2,r2,48
 8006530:	a009883a 	mov	r4,r20
 8006534:	b0800005 	stb	r2,0(r22)
 8006538:	01400284 	movi	r5,10
 800653c:	8010b800 	call	8010b80 <__divsi3>
 8006540:	1029883a 	mov	r20,r2
 8006544:	b0ffffc4 	addi	r3,r22,-1
 8006548:	b8bff416 	blt	r23,r2,800651c <___vfprintf_internal_r+0x1d20>
 800654c:	11400c04 	addi	r5,r2,48
 8006550:	b17fffc5 	stb	r5,-1(r22)
 8006554:	d8811fc4 	addi	r2,sp,1151
 8006558:	e013883a 	mov	r9,fp
 800655c:	18803e2e 	bgeu	r3,r2,8006658 <___vfprintf_internal_r+0x1e5c>
 8006560:	b007883a 	mov	r3,r22
 8006564:	d9012044 	addi	r4,sp,1153
 8006568:	00000206 	br	8006574 <___vfprintf_internal_r+0x1d78>
 800656c:	19400003 	ldbu	r5,0(r3)
 8006570:	18c00044 	addi	r3,r3,1
 8006574:	21400005 	stb	r5,0(r4)
 8006578:	21000044 	addi	r4,r4,1
 800657c:	10fffb1e 	bne	r2,r3,800656c <___vfprintf_internal_r+0x1d70>
 8006580:	d8c12004 	addi	r3,sp,1152
 8006584:	1d87c83a 	sub	r3,r3,r22
 8006588:	d9012044 	addi	r4,sp,1153
 800658c:	20c7883a 	add	r3,r4,r3
 8006590:	003fb006 	br	8006454 <___vfprintf_internal_r+0x1c58>
 8006594:	e5c00044 	addi	r23,fp,1
 8006598:	003e7406 	br	8005f6c <___vfprintf_internal_r+0x1770>
 800659c:	d8c12217 	ldw	r3,1160(sp)
 80065a0:	003e9906 	br	8006008 <___vfprintf_internal_r+0x180c>
 80065a4:	d9012d17 	ldw	r4,1204(sp)
 80065a8:	ac800043 	ldbu	r18,1(r21)
 80065ac:	b82b883a 	mov	r21,r23
 80065b0:	20c00017 	ldw	r3,0(r4)
 80065b4:	20800104 	addi	r2,r4,4
 80065b8:	d8812d15 	stw	r2,1204(sp)
 80065bc:	18002116 	blt	r3,zero,8006644 <___vfprintf_internal_r+0x1e48>
 80065c0:	94803fcc 	andi	r18,r18,255
 80065c4:	9480201c 	xori	r18,r18,128
 80065c8:	94bfe004 	addi	r18,r18,-128
 80065cc:	0038e706 	br	800496c <___vfprintf_internal_r+0x170>
 80065d0:	80a0703a 	and	r16,r16,r2
 80065d4:	803fa61e 	bne	r16,zero,8006470 <___vfprintf_internal_r+0x1c74>
 80065d8:	d8812b17 	ldw	r2,1196(sp)
 80065dc:	d8812815 	stw	r2,1184(sp)
 80065e0:	103e9d0e 	bge	r2,zero,8006058 <___vfprintf_internal_r+0x185c>
 80065e4:	003fa706 	br	8006484 <___vfprintf_internal_r+0x1c88>
 80065e8:	00800084 	movi	r2,2
 80065ec:	1529c83a 	sub	r20,r2,r20
 80065f0:	003fbf06 	br	80064f0 <___vfprintf_internal_r+0x1cf4>
 80065f4:	00800b44 	movi	r2,45
 80065f8:	0529c83a 	sub	r20,zero,r20
 80065fc:	d8812005 	stb	r2,1152(sp)
 8006600:	003f8c06 	br	8006434 <___vfprintf_internal_r+0x1c38>
 8006604:	008011c4 	movi	r2,71
 8006608:	90be6926 	beq	r18,r2,8005fb0 <___vfprintf_internal_r+0x17b4>
 800660c:	003e6a06 	br	8005fb8 <___vfprintf_internal_r+0x17bc>
 8006610:	00bfffc4 	movi	r2,-1
 8006614:	d8812c15 	stw	r2,1200(sp)
 8006618:	0039ad06 	br	8004cd0 <___vfprintf_internal_r+0x4d4>
 800661c:	1007883a 	mov	r3,r2
 8006620:	003e7906 	br	8006008 <___vfprintf_internal_r+0x180c>
 8006624:	e000021e 	bne	fp,zero,8006630 <___vfprintf_internal_r+0x1e34>
 8006628:	8400004c 	andi	r16,r16,1
 800662c:	80000e26 	beq	r16,zero,8006668 <___vfprintf_internal_r+0x1e6c>
 8006630:	e7000084 	addi	fp,fp,2
 8006634:	df012b15 	stw	fp,1196(sp)
 8006638:	df012815 	stw	fp,1184(sp)
 800663c:	e03e860e 	bge	fp,zero,8006058 <___vfprintf_internal_r+0x185c>
 8006640:	003f9006 	br	8006484 <___vfprintf_internal_r+0x1c88>
 8006644:	94803fcc 	andi	r18,r18,255
 8006648:	9480201c 	xori	r18,r18,128
 800664c:	00ffffc4 	movi	r3,-1
 8006650:	94bfe004 	addi	r18,r18,-128
 8006654:	0038c506 	br	800496c <___vfprintf_internal_r+0x170>
 8006658:	d8c12044 	addi	r3,sp,1153
 800665c:	003f7d06 	br	8006454 <___vfprintf_internal_r+0x1c58>
 8006660:	dd012417 	ldw	r20,1168(sp)
 8006664:	003f6d06 	br	800641c <___vfprintf_internal_r+0x1c20>
 8006668:	00c00044 	movi	r3,1
 800666c:	d8c12815 	stw	r3,1184(sp)
 8006670:	d8c12b15 	stw	r3,1196(sp)
 8006674:	003e7806 	br	8006058 <___vfprintf_internal_r+0x185c>

08006678 <__vfprintf_internal>:
 8006678:	00820074 	movhi	r2,2049
 800667c:	10999c04 	addi	r2,r2,26224
 8006680:	2007883a 	mov	r3,r4
 8006684:	11000017 	ldw	r4,0(r2)
 8006688:	2805883a 	mov	r2,r5
 800668c:	300f883a 	mov	r7,r6
 8006690:	180b883a 	mov	r5,r3
 8006694:	100d883a 	mov	r6,r2
 8006698:	80047fc1 	jmpi	80047fc <___vfprintf_internal_r>

0800669c <__svfscanf_r>:
 800669c:	deff4c04 	addi	sp,sp,-720
 80066a0:	ddc0b115 	stw	r23,708(sp)
 80066a4:	dd00ae15 	stw	r20,696(sp)
 80066a8:	dcc0ad15 	stw	r19,692(sp)
 80066ac:	dc80ac15 	stw	r18,688(sp)
 80066b0:	dc40ab15 	stw	r17,684(sp)
 80066b4:	dc00aa15 	stw	r16,680(sp)
 80066b8:	dfc0b315 	stw	ra,716(sp)
 80066bc:	df00b215 	stw	fp,712(sp)
 80066c0:	dd80b015 	stw	r22,704(sp)
 80066c4:	dd40af15 	stw	r21,700(sp)
 80066c8:	30800007 	ldb	r2,0(r6)
 80066cc:	002f883a 	mov	r23,zero
 80066d0:	d9c09c15 	stw	r7,624(sp)
 80066d4:	d800a015 	stw	zero,640(sp)
 80066d8:	d8009f15 	stw	zero,636(sp)
 80066dc:	d8009e15 	stw	zero,632(sp)
 80066e0:	d8809b15 	stw	r2,620(sp)
 80066e4:	2023883a 	mov	r17,r4
 80066e8:	04820074 	movhi	r18,2049
 80066ec:	94999f04 	addi	r18,r18,26236
 80066f0:	b829883a 	mov	r20,r23
 80066f4:	2827883a 	mov	r19,r5
 80066f8:	34000044 	addi	r16,r6,1
 80066fc:	10002426 	beq	r2,zero,8006790 <__svfscanf_r+0xf4>
 8006700:	95400017 	ldw	r21,0(r18)
 8006704:	a887883a 	add	r3,r21,r2
 8006708:	18c00003 	ldbu	r3,0(r3)
 800670c:	18c0020c 	andi	r3,r3,8
 8006710:	18c03fcc 	andi	r3,r3,255
 8006714:	18c0201c 	xori	r3,r3,128
 8006718:	18ffe004 	addi	r3,r3,-128
 800671c:	18002926 	beq	r3,zero,80067c4 <__svfscanf_r+0x128>
 8006720:	98800117 	ldw	r2,4(r19)
 8006724:	0080110e 	bge	zero,r2,800676c <__svfscanf_r+0xd0>
 8006728:	98c00017 	ldw	r3,0(r19)
 800672c:	91000017 	ldw	r4,0(r18)
 8006730:	18800003 	ldbu	r2,0(r3)
 8006734:	2085883a 	add	r2,r4,r2
 8006738:	10800003 	ldbu	r2,0(r2)
 800673c:	1080020c 	andi	r2,r2,8
 8006740:	10803fcc 	andi	r2,r2,255
 8006744:	1080201c 	xori	r2,r2,128
 8006748:	10bfe004 	addi	r2,r2,-128
 800674c:	10000b26 	beq	r2,zero,800677c <__svfscanf_r+0xe0>
 8006750:	98800117 	ldw	r2,4(r19)
 8006754:	18c00044 	addi	r3,r3,1
 8006758:	98c00015 	stw	r3,0(r19)
 800675c:	10bfffc4 	addi	r2,r2,-1
 8006760:	98800115 	stw	r2,4(r19)
 8006764:	a5000044 	addi	r20,r20,1
 8006768:	00bfef16 	blt	zero,r2,8006728 <__svfscanf_r+0x8c>
 800676c:	8809883a 	mov	r4,r17
 8006770:	980b883a 	mov	r5,r19
 8006774:	80042780 	call	8004278 <__srefill_r>
 8006778:	103feb26 	beq	r2,zero,8006728 <__svfscanf_r+0x8c>
 800677c:	800d883a 	mov	r6,r16
 8006780:	30800007 	ldb	r2,0(r6)
 8006784:	34000044 	addi	r16,r6,1
 8006788:	d8809b15 	stw	r2,620(sp)
 800678c:	103fdc1e 	bne	r2,zero,8006700 <__svfscanf_r+0x64>
 8006790:	d8809e17 	ldw	r2,632(sp)
 8006794:	dfc0b317 	ldw	ra,716(sp)
 8006798:	df00b217 	ldw	fp,712(sp)
 800679c:	ddc0b117 	ldw	r23,708(sp)
 80067a0:	dd80b017 	ldw	r22,704(sp)
 80067a4:	dd40af17 	ldw	r21,700(sp)
 80067a8:	dd00ae17 	ldw	r20,696(sp)
 80067ac:	dcc0ad17 	ldw	r19,692(sp)
 80067b0:	dc80ac17 	ldw	r18,688(sp)
 80067b4:	dc40ab17 	ldw	r17,684(sp)
 80067b8:	dc00aa17 	ldw	r16,680(sp)
 80067bc:	dec0b404 	addi	sp,sp,720
 80067c0:	f800283a 	ret
 80067c4:	00c00944 	movi	r3,37
 80067c8:	10c00e26 	beq	r2,r3,8006804 <__svfscanf_r+0x168>
 80067cc:	98800117 	ldw	r2,4(r19)
 80067d0:	0080e40e 	bge	zero,r2,8006b64 <__svfscanf_r+0x4c8>
 80067d4:	98800017 	ldw	r2,0(r19)
 80067d8:	80ffffc7 	ldb	r3,-1(r16)
 80067dc:	11000003 	ldbu	r4,0(r2)
 80067e0:	20ffeb1e 	bne	r4,r3,8006790 <__svfscanf_r+0xf4>
 80067e4:	98c00117 	ldw	r3,4(r19)
 80067e8:	10800044 	addi	r2,r2,1
 80067ec:	98800015 	stw	r2,0(r19)
 80067f0:	18bfffc4 	addi	r2,r3,-1
 80067f4:	98800115 	stw	r2,4(r19)
 80067f8:	a5000044 	addi	r20,r20,1
 80067fc:	800d883a 	mov	r6,r16
 8006800:	003fdf06 	br	8006780 <__svfscanf_r+0xe4>
 8006804:	0039883a 	mov	fp,zero
 8006808:	35c00043 	ldbu	r23,1(r6)
 800680c:	002d883a 	mov	r22,zero
 8006810:	00c01e04 	movi	r3,120
 8006814:	01801b04 	movi	r6,108
 8006818:	e009883a 	mov	r4,fp
 800681c:	b8803fcc 	andi	r2,r23,255
 8006820:	87000044 	addi	fp,r16,1
 8006824:	18804f2e 	bgeu	r3,r2,8006964 <__svfscanf_r+0x2c8>
 8006828:	bdc03fcc 	andi	r23,r23,255
 800682c:	bdc0201c 	xori	r23,r23,128
 8006830:	bdffe004 	addi	r23,r23,-128
 8006834:	adeb883a 	add	r21,r21,r23
 8006838:	a8800003 	ldbu	r2,0(r21)
 800683c:	df009d15 	stw	fp,628(sp)
 8006840:	2039883a 	mov	fp,r4
 8006844:	1080004c 	andi	r2,r2,1
 8006848:	1002d926 	beq	r2,zero,80073b0 <__svfscanf_r+0xd14>
 800684c:	b5800054 	ori	r22,r22,1
 8006850:	00820074 	movhi	r2,2049
 8006854:	10b54304 	addi	r2,r2,-10996
 8006858:	00c00284 	movi	r3,10
 800685c:	d880a015 	stw	r2,640(sp)
 8006860:	d8c09f15 	stw	r3,636(sp)
 8006864:	040000c4 	movi	r16,3
 8006868:	98800117 	ldw	r2,4(r19)
 800686c:	0081bd0e 	bge	zero,r2,8006f64 <__svfscanf_r+0x8c8>
 8006870:	b080100c 	andi	r2,r22,64
 8006874:	1000ce26 	beq	r2,zero,8006bb0 <__svfscanf_r+0x514>
 8006878:	00800084 	movi	r2,2
 800687c:	80818426 	beq	r16,r2,8006e90 <__svfscanf_r+0x7f4>
 8006880:	1400f716 	blt	r2,r16,8006c60 <__svfscanf_r+0x5c4>
 8006884:	00800044 	movi	r2,1
 8006888:	8080dc26 	beq	r16,r2,8006bfc <__svfscanf_r+0x560>
 800688c:	e000011e 	bne	fp,zero,8006894 <__svfscanf_r+0x1f8>
 8006890:	07000044 	movi	fp,1
 8006894:	b080004c 	andi	r2,r22,1
 8006898:	10022826 	beq	r2,zero,800713c <__svfscanf_r+0xaa0>
 800689c:	b5c0040c 	andi	r23,r22,16
 80068a0:	b804601e 	bne	r23,zero,8007a24 <__svfscanf_r+0x1388>
 80068a4:	d8c09c17 	ldw	r3,624(sp)
 80068a8:	1d800017 	ldw	r22,0(r3)
 80068ac:	18c00104 	addi	r3,r3,4
 80068b0:	d8c09c15 	stw	r3,624(sp)
 80068b4:	0021883a 	mov	r16,zero
 80068b8:	dd409904 	addi	r21,sp,612
 80068bc:	01020074 	movhi	r4,2049
 80068c0:	2119a004 	addi	r4,r4,26240
 80068c4:	20800017 	ldw	r2,0(r4)
 80068c8:	8080aa26 	beq	r16,r2,8006b74 <__svfscanf_r+0x4d8>
 80068cc:	98800017 	ldw	r2,0(r19)
 80068d0:	9a000117 	ldw	r8,4(r19)
 80068d4:	d9400104 	addi	r5,sp,4
 80068d8:	11c00003 	ldbu	r7,0(r2)
 80068dc:	423fffc4 	addi	r8,r8,-1
 80068e0:	10800044 	addi	r2,r2,1
 80068e4:	2c07883a 	add	r3,r5,r16
 80068e8:	a809883a 	mov	r4,r21
 80068ec:	000b883a 	mov	r5,zero
 80068f0:	01800204 	movi	r6,8
 80068f4:	9a000115 	stw	r8,4(r19)
 80068f8:	98800015 	stw	r2,0(r19)
 80068fc:	19c00005 	stb	r7,0(r3)
 8006900:	84000044 	addi	r16,r16,1
 8006904:	8003ff00 	call	8003ff0 <memset>
 8006908:	8809883a 	mov	r4,r17
 800690c:	dd400015 	stw	r21,0(sp)
 8006910:	b00b883a 	mov	r5,r22
 8006914:	d9800104 	addi	r6,sp,4
 8006918:	800f883a 	mov	r7,r16
 800691c:	800a0200 	call	800a020 <_mbrtowc_r>
 8006920:	00ffffc4 	movi	r3,-1
 8006924:	10c09326 	beq	r2,r3,8006b74 <__svfscanf_r+0x4d8>
 8006928:	1003281e 	bne	r2,zero,80075cc <__svfscanf_r+0xf30>
 800692c:	b800011e 	bne	r23,zero,8006934 <__svfscanf_r+0x298>
 8006930:	b0000015 	stw	zero,0(r22)
 8006934:	a429883a 	add	r20,r20,r16
 8006938:	e73fffc4 	addi	fp,fp,-1
 800693c:	b803281e 	bne	r23,zero,80075e0 <__svfscanf_r+0xf44>
 8006940:	b5800104 	addi	r22,r22,4
 8006944:	0021883a 	mov	r16,zero
 8006948:	98800117 	ldw	r2,4(r19)
 800694c:	00820b0e 	bge	zero,r2,800717c <__svfscanf_r+0xae0>
 8006950:	e03fda1e 	bne	fp,zero,80068bc <__svfscanf_r+0x220>
 8006954:	b8012226 	beq	r23,zero,8006de0 <__svfscanf_r+0x744>
 8006958:	dc009d17 	ldw	r16,628(sp)
 800695c:	800d883a 	mov	r6,r16
 8006960:	003f8706 	br	8006780 <__svfscanf_r+0xe4>
 8006964:	1085883a 	add	r2,r2,r2
 8006968:	1085883a 	add	r2,r2,r2
 800696c:	01420034 	movhi	r5,2048
 8006970:	295a6004 	addi	r5,r5,27008
 8006974:	1145883a 	add	r2,r2,r5
 8006978:	10800017 	ldw	r2,0(r2)
 800697c:	1000683a 	jmp	r2
 8006980:	08006b94 	ori	zero,at,430
 8006984:	08006828 	cmpgeui	zero,at,416
 8006988:	08006828 	cmpgeui	zero,at,416
 800698c:	08006828 	cmpgeui	zero,at,416
 8006990:	08006828 	cmpgeui	zero,at,416
 8006994:	08006828 	cmpgeui	zero,at,416
 8006998:	08006828 	cmpgeui	zero,at,416
 800699c:	08006828 	cmpgeui	zero,at,416
 80069a0:	08006828 	cmpgeui	zero,at,416
 80069a4:	08006828 	cmpgeui	zero,at,416
 80069a8:	08006828 	cmpgeui	zero,at,416
 80069ac:	08006828 	cmpgeui	zero,at,416
 80069b0:	08006828 	cmpgeui	zero,at,416
 80069b4:	08006828 	cmpgeui	zero,at,416
 80069b8:	08006828 	cmpgeui	zero,at,416
 80069bc:	08006828 	cmpgeui	zero,at,416
 80069c0:	08006828 	cmpgeui	zero,at,416
 80069c4:	08006828 	cmpgeui	zero,at,416
 80069c8:	08006828 	cmpgeui	zero,at,416
 80069cc:	08006828 	cmpgeui	zero,at,416
 80069d0:	08006828 	cmpgeui	zero,at,416
 80069d4:	08006828 	cmpgeui	zero,at,416
 80069d8:	08006828 	cmpgeui	zero,at,416
 80069dc:	08006828 	cmpgeui	zero,at,416
 80069e0:	08006828 	cmpgeui	zero,at,416
 80069e4:	08006828 	cmpgeui	zero,at,416
 80069e8:	08006828 	cmpgeui	zero,at,416
 80069ec:	08006828 	cmpgeui	zero,at,416
 80069f0:	08006828 	cmpgeui	zero,at,416
 80069f4:	08006828 	cmpgeui	zero,at,416
 80069f8:	08006828 	cmpgeui	zero,at,416
 80069fc:	08006828 	cmpgeui	zero,at,416
 8006a00:	08006828 	cmpgeui	zero,at,416
 8006a04:	08006828 	cmpgeui	zero,at,416
 8006a08:	08006828 	cmpgeui	zero,at,416
 8006a0c:	08006828 	cmpgeui	zero,at,416
 8006a10:	08006828 	cmpgeui	zero,at,416
 8006a14:	08007464 	muli	zero,at,465
 8006a18:	08006828 	cmpgeui	zero,at,416
 8006a1c:	08006828 	cmpgeui	zero,at,416
 8006a20:	08006828 	cmpgeui	zero,at,416
 8006a24:	08006828 	cmpgeui	zero,at,416
 8006a28:	08007470 	cmpltui	zero,at,465
 8006a2c:	08006828 	cmpgeui	zero,at,416
 8006a30:	08006828 	cmpgeui	zero,at,416
 8006a34:	08006828 	cmpgeui	zero,at,416
 8006a38:	08006828 	cmpgeui	zero,at,416
 8006a3c:	08006828 	cmpgeui	zero,at,416
 8006a40:	08007400 	call	800740 <__reset-0x77ff8c0>
 8006a44:	08007400 	call	800740 <__reset-0x77ff8c0>
 8006a48:	08007400 	call	800740 <__reset-0x77ff8c0>
 8006a4c:	08007400 	call	800740 <__reset-0x77ff8c0>
 8006a50:	08007400 	call	800740 <__reset-0x77ff8c0>
 8006a54:	08007400 	call	800740 <__reset-0x77ff8c0>
 8006a58:	08007400 	call	800740 <__reset-0x77ff8c0>
 8006a5c:	08007400 	call	800740 <__reset-0x77ff8c0>
 8006a60:	08007400 	call	800740 <__reset-0x77ff8c0>
 8006a64:	08007400 	call	800740 <__reset-0x77ff8c0>
 8006a68:	08006828 	cmpgeui	zero,at,416
 8006a6c:	08006828 	cmpgeui	zero,at,416
 8006a70:	08006828 	cmpgeui	zero,at,416
 8006a74:	08006828 	cmpgeui	zero,at,416
 8006a78:	08006828 	cmpgeui	zero,at,416
 8006a7c:	08006828 	cmpgeui	zero,at,416
 8006a80:	08006828 	cmpgeui	zero,at,416
 8006a84:	08006828 	cmpgeui	zero,at,416
 8006a88:	08006828 	cmpgeui	zero,at,416
 8006a8c:	08006828 	cmpgeui	zero,at,416
 8006a90:	08007438 	rdprs	zero,at,464
 8006a94:	08007444 	addi	zero,at,465
 8006a98:	08006828 	cmpgeui	zero,at,416
 8006a9c:	08007444 	addi	zero,at,465
 8006aa0:	08006828 	cmpgeui	zero,at,416
 8006aa4:	08006828 	cmpgeui	zero,at,416
 8006aa8:	08006828 	cmpgeui	zero,at,416
 8006aac:	08006828 	cmpgeui	zero,at,416
 8006ab0:	08007454 	ori	zero,at,465
 8006ab4:	08006828 	cmpgeui	zero,at,416
 8006ab8:	08006828 	cmpgeui	zero,at,416
 8006abc:	08007480 	call	800748 <__reset-0x77ff8b8>
 8006ac0:	08006828 	cmpgeui	zero,at,416
 8006ac4:	08006828 	cmpgeui	zero,at,416
 8006ac8:	08006828 	cmpgeui	zero,at,416
 8006acc:	08006828 	cmpgeui	zero,at,416
 8006ad0:	08006828 	cmpgeui	zero,at,416
 8006ad4:	08006828 	cmpgeui	zero,at,416
 8006ad8:	08006828 	cmpgeui	zero,at,416
 8006adc:	08006828 	cmpgeui	zero,at,416
 8006ae0:	080074a8 	cmpgeui	zero,at,466
 8006ae4:	08006828 	cmpgeui	zero,at,416
 8006ae8:	08006828 	cmpgeui	zero,at,416
 8006aec:	080074d0 	cmplti	zero,at,467
 8006af0:	08006828 	cmpgeui	zero,at,416
 8006af4:	08006828 	cmpgeui	zero,at,416
 8006af8:	08006828 	cmpgeui	zero,at,416
 8006afc:	08006828 	cmpgeui	zero,at,416
 8006b00:	08006828 	cmpgeui	zero,at,416
 8006b04:	08006828 	cmpgeui	zero,at,416
 8006b08:	08006828 	cmpgeui	zero,at,416
 8006b0c:	080074f4 	orhi	zero,at,467
 8006b10:	08007508 	cmpgei	zero,at,468
 8006b14:	08007444 	addi	zero,at,465
 8006b18:	08007444 	addi	zero,at,465
 8006b1c:	08007444 	addi	zero,at,465
 8006b20:	08007514 	ori	zero,at,468
 8006b24:	08007524 	muli	zero,at,468
 8006b28:	08006828 	cmpgeui	zero,at,416
 8006b2c:	08006828 	cmpgeui	zero,at,416
 8006b30:	08007544 	addi	zero,at,469
 8006b34:	08006828 	cmpgeui	zero,at,416
 8006b38:	08007564 	muli	zero,at,469
 8006b3c:	08007598 	cmpnei	zero,at,470
 8006b40:	080075a4 	muli	zero,at,470
 8006b44:	08006828 	cmpgeui	zero,at,416
 8006b48:	08006828 	cmpgeui	zero,at,416
 8006b4c:	080073cc 	andi	zero,at,463
 8006b50:	08006828 	cmpgeui	zero,at,416
 8006b54:	080073dc 	xori	zero,at,463
 8006b58:	08006828 	cmpgeui	zero,at,416
 8006b5c:	08006828 	cmpgeui	zero,at,416
 8006b60:	080074a8 	cmpgeui	zero,at,466
 8006b64:	8809883a 	mov	r4,r17
 8006b68:	980b883a 	mov	r5,r19
 8006b6c:	80042780 	call	8004278 <__srefill_r>
 8006b70:	103f1826 	beq	r2,zero,80067d4 <__svfscanf_r+0x138>
 8006b74:	d8809e17 	ldw	r2,632(sp)
 8006b78:	10000626 	beq	r2,zero,8006b94 <__svfscanf_r+0x4f8>
 8006b7c:	9880030b 	ldhu	r2,12(r19)
 8006b80:	1080100c 	andi	r2,r2,64
 8006b84:	10bfffcc 	andi	r2,r2,65535
 8006b88:	10a0001c 	xori	r2,r2,32768
 8006b8c:	10a00004 	addi	r2,r2,-32768
 8006b90:	103eff26 	beq	r2,zero,8006790 <__svfscanf_r+0xf4>
 8006b94:	00bfffc4 	movi	r2,-1
 8006b98:	d8809e15 	stw	r2,632(sp)
 8006b9c:	003efc06 	br	8006790 <__svfscanf_r+0xf4>
 8006ba0:	8809883a 	mov	r4,r17
 8006ba4:	980b883a 	mov	r5,r19
 8006ba8:	80042780 	call	8004278 <__srefill_r>
 8006bac:	103ff11e 	bne	r2,zero,8006b74 <__svfscanf_r+0x4d8>
 8006bb0:	91400017 	ldw	r5,0(r18)
 8006bb4:	98800017 	ldw	r2,0(r19)
 8006bb8:	00000206 	br	8006bc4 <__svfscanf_r+0x528>
 8006bbc:	10800044 	addi	r2,r2,1
 8006bc0:	98800015 	stw	r2,0(r19)
 8006bc4:	10c00003 	ldbu	r3,0(r2)
 8006bc8:	28c7883a 	add	r3,r5,r3
 8006bcc:	18c00003 	ldbu	r3,0(r3)
 8006bd0:	18c0020c 	andi	r3,r3,8
 8006bd4:	18c03fcc 	andi	r3,r3,255
 8006bd8:	18c0201c 	xori	r3,r3,128
 8006bdc:	18ffe004 	addi	r3,r3,-128
 8006be0:	183f2526 	beq	r3,zero,8006878 <__svfscanf_r+0x1dc>
 8006be4:	98c00117 	ldw	r3,4(r19)
 8006be8:	a5000044 	addi	r20,r20,1
 8006bec:	18ffffc4 	addi	r3,r3,-1
 8006bf0:	98c00115 	stw	r3,4(r19)
 8006bf4:	00fff116 	blt	zero,r3,8006bbc <__svfscanf_r+0x520>
 8006bf8:	003fe906 	br	8006ba0 <__svfscanf_r+0x504>
 8006bfc:	e000011e 	bne	fp,zero,8006c04 <__svfscanf_r+0x568>
 8006c00:	073fffc4 	movi	fp,-1
 8006c04:	b580040c 	andi	r22,r22,16
 8006c08:	b0016826 	beq	r22,zero,80071ac <__svfscanf_r+0xb10>
 8006c0c:	98800017 	ldw	r2,0(r19)
 8006c10:	0021883a 	mov	r16,zero
 8006c14:	dd805884 	addi	r22,sp,354
 8006c18:	10c00003 	ldbu	r3,0(r2)
 8006c1c:	b0c7883a 	add	r3,r22,r3
 8006c20:	18c00007 	ldb	r3,0(r3)
 8006c24:	18039726 	beq	r3,zero,8007a84 <__svfscanf_r+0x13e8>
 8006c28:	98c00117 	ldw	r3,4(r19)
 8006c2c:	10800044 	addi	r2,r2,1
 8006c30:	84000044 	addi	r16,r16,1
 8006c34:	18ffffc4 	addi	r3,r3,-1
 8006c38:	98c00115 	stw	r3,4(r19)
 8006c3c:	98800015 	stw	r2,0(r19)
 8006c40:	e4008f26 	beq	fp,r16,8006e80 <__svfscanf_r+0x7e4>
 8006c44:	00fff416 	blt	zero,r3,8006c18 <__svfscanf_r+0x57c>
 8006c48:	8809883a 	mov	r4,r17
 8006c4c:	980b883a 	mov	r5,r19
 8006c50:	80042780 	call	8004278 <__srefill_r>
 8006c54:	10008a1e 	bne	r2,zero,8006e80 <__svfscanf_r+0x7e4>
 8006c58:	98800017 	ldw	r2,0(r19)
 8006c5c:	003fee06 	br	8006c18 <__svfscanf_r+0x57c>
 8006c60:	008000c4 	movi	r2,3
 8006c64:	80806426 	beq	r16,r2,8006df8 <__svfscanf_r+0x75c>
 8006c68:	00800104 	movi	r2,4
 8006c6c:	80bf071e 	bne	r16,r2,800688c <__svfscanf_r+0x1f0>
 8006c70:	e0bfffc4 	addi	r2,fp,-1
 8006c74:	01005704 	movi	r4,348
 8006c78:	20814736 	bltu	r4,r2,8007198 <__svfscanf_r+0xafc>
 8006c7c:	0017883a 	mov	r11,zero
 8006c80:	b581e014 	ori	r22,r22,1920
 8006c84:	0021883a 	mov	r16,zero
 8006c88:	d800a115 	stw	zero,644(sp)
 8006c8c:	d800a315 	stw	zero,652(sp)
 8006c90:	002b883a 	mov	r21,zero
 8006c94:	d800a215 	stw	zero,648(sp)
 8006c98:	ddc00104 	addi	r23,sp,4
 8006c9c:	000d883a 	mov	r6,zero
 8006ca0:	00c01384 	movi	r3,78
 8006ca4:	03810004 	movi	r14,1024
 8006ca8:	033e1fc4 	movi	r12,-1921
 8006cac:	03ff5fc4 	movi	r15,-641
 8006cb0:	99c00017 	ldw	r7,0(r19)
 8006cb4:	39400003 	ldbu	r5,0(r7)
 8006cb8:	28bff544 	addi	r2,r5,-43
 8006cbc:	10803fcc 	andi	r2,r2,255
 8006cc0:	1880c82e 	bgeu	r3,r2,8006fe4 <__svfscanf_r+0x948>
 8006cc4:	a8000226 	beq	r21,zero,8006cd0 <__svfscanf_r+0x634>
 8006cc8:	00bfbfc4 	movi	r2,-257
 8006ccc:	b0ac703a 	and	r22,r22,r2
 8006cd0:	31bfffc4 	addi	r6,r6,-1
 8006cd4:	00800044 	movi	r2,1
 8006cd8:	1184092e 	bgeu	r2,r6,8007d00 <__svfscanf_r+0x1664>
 8006cdc:	80803fcc 	andi	r2,r16,255
 8006ce0:	1080201c 	xori	r2,r2,128
 8006ce4:	10bfe004 	addi	r2,r2,-128
 8006ce8:	10ffffc4 	addi	r3,r2,-1
 8006cec:	01000184 	movi	r4,6
 8006cf0:	20c01036 	bltu	r4,r3,8006d34 <__svfscanf_r+0x698>
 8006cf4:	00c00084 	movi	r3,2
 8006cf8:	1883f50e 	bge	r3,r2,8007cd0 <__svfscanf_r+0x1634>
 8006cfc:	00c000c4 	movi	r3,3
 8006d00:	10c00c26 	beq	r2,r3,8006d34 <__svfscanf_r+0x698>
 8006d04:	843fff04 	addi	r16,r16,-4
 8006d08:	84003fcc 	andi	r16,r16,255
 8006d0c:	0438303a 	nor	fp,zero,r16
 8006d10:	bf39883a 	add	fp,r23,fp
 8006d14:	bdffffc4 	addi	r23,r23,-1
 8006d18:	b9400007 	ldb	r5,0(r23)
 8006d1c:	8809883a 	mov	r4,r17
 8006d20:	980d883a 	mov	r6,r19
 8006d24:	800e2240 	call	800e224 <_ungetc_r>
 8006d28:	bf3ffa1e 	bne	r23,fp,8006d14 <__svfscanf_r+0x678>
 8006d2c:	a27fffc4 	addi	r9,r20,-1
 8006d30:	4c29c83a 	sub	r20,r9,r16
 8006d34:	b080400c 	andi	r2,r22,256
 8006d38:	10001326 	beq	r2,zero,8006d88 <__svfscanf_r+0x6ec>
 8006d3c:	b081000c 	andi	r2,r22,1024
 8006d40:	1003d21e 	bne	r2,zero,8007c8c <__svfscanf_r+0x15f0>
 8006d44:	b97fffc7 	ldb	r5,-1(r23)
 8006d48:	00801944 	movi	r2,101
 8006d4c:	bc3fffc4 	addi	r16,r23,-1
 8006d50:	a53fffc4 	addi	r20,r20,-1
 8006d54:	28800826 	beq	r5,r2,8006d78 <__svfscanf_r+0x6dc>
 8006d58:	00801144 	movi	r2,69
 8006d5c:	28800626 	beq	r5,r2,8006d78 <__svfscanf_r+0x6dc>
 8006d60:	8809883a 	mov	r4,r17
 8006d64:	980d883a 	mov	r6,r19
 8006d68:	800e2240 	call	800e224 <_ungetc_r>
 8006d6c:	b97fff87 	ldb	r5,-2(r23)
 8006d70:	bc3fff84 	addi	r16,r23,-2
 8006d74:	a53fffc4 	addi	r20,r20,-1
 8006d78:	8809883a 	mov	r4,r17
 8006d7c:	980d883a 	mov	r6,r19
 8006d80:	800e2240 	call	800e224 <_ungetc_r>
 8006d84:	802f883a 	mov	r23,r16
 8006d88:	b080040c 	andi	r2,r22,16
 8006d8c:	103ef21e 	bne	r2,zero,8006958 <__svfscanf_r+0x2bc>
 8006d90:	b8000005 	stb	zero,0(r23)
 8006d94:	b0c1800c 	andi	r3,r22,1536
 8006d98:	00810004 	movi	r2,1024
 8006d9c:	18837726 	beq	r3,r2,8007b7c <__svfscanf_r+0x14e0>
 8006da0:	d8c0a317 	ldw	r3,652(sp)
 8006da4:	1803601e 	bne	r3,zero,8007b28 <__svfscanf_r+0x148c>
 8006da8:	8809883a 	mov	r4,r17
 8006dac:	d9400104 	addi	r5,sp,4
 8006db0:	000d883a 	mov	r6,zero
 8006db4:	800be880 	call	800be88 <_strtod_r>
 8006db8:	102b883a 	mov	r21,r2
 8006dbc:	b080004c 	andi	r2,r22,1
 8006dc0:	182f883a 	mov	r23,r3
 8006dc4:	10031f26 	beq	r2,zero,8007a44 <__svfscanf_r+0x13a8>
 8006dc8:	d9409c17 	ldw	r5,624(sp)
 8006dcc:	28800017 	ldw	r2,0(r5)
 8006dd0:	29400104 	addi	r5,r5,4
 8006dd4:	d9409c15 	stw	r5,624(sp)
 8006dd8:	15400015 	stw	r21,0(r2)
 8006ddc:	10c00115 	stw	r3,4(r2)
 8006de0:	d8809e17 	ldw	r2,632(sp)
 8006de4:	dc009d17 	ldw	r16,628(sp)
 8006de8:	10800044 	addi	r2,r2,1
 8006dec:	d8809e15 	stw	r2,632(sp)
 8006df0:	800d883a 	mov	r6,r16
 8006df4:	003e6206 	br	8006780 <__svfscanf_r+0xe4>
 8006df8:	e0bfffc4 	addi	r2,fp,-1
 8006dfc:	01005704 	movi	r4,348
 8006e00:	2080e82e 	bgeu	r4,r2,80071a4 <__svfscanf_r+0xb08>
 8006e04:	e0ffa8c4 	addi	r3,fp,-349
 8006e08:	07005744 	movi	fp,349
 8006e0c:	da409f17 	ldw	r9,636(sp)
 8006e10:	b5836014 	ori	r22,r22,3456
 8006e14:	0021883a 	mov	r16,zero
 8006e18:	dd400104 	addi	r21,sp,4
 8006e1c:	05c01344 	movi	r23,77
 8006e20:	01c08004 	movi	r7,512
 8006e24:	01bf7fc4 	movi	r6,-513
 8006e28:	9a000017 	ldw	r8,0(r19)
 8006e2c:	41400003 	ldbu	r5,0(r8)
 8006e30:	28bff544 	addi	r2,r5,-43
 8006e34:	10803fcc 	andi	r2,r2,255
 8006e38:	b881eb2e 	bgeu	r23,r2,80075e8 <__svfscanf_r+0xf4c>
 8006e3c:	da409f15 	stw	r9,636(sp)
 8006e40:	b080400c 	andi	r2,r22,256
 8006e44:	10000926 	beq	r2,zero,8006e6c <__svfscanf_r+0x7d0>
 8006e48:	d9400104 	addi	r5,sp,4
 8006e4c:	2d40052e 	bgeu	r5,r21,8006e64 <__svfscanf_r+0x7c8>
 8006e50:	a97fffc7 	ldb	r5,-1(r21)
 8006e54:	8809883a 	mov	r4,r17
 8006e58:	980d883a 	mov	r6,r19
 8006e5c:	ad7fffc4 	addi	r21,r21,-1
 8006e60:	800e2240 	call	800e224 <_ungetc_r>
 8006e64:	d8800104 	addi	r2,sp,4
 8006e68:	157e4926 	beq	r2,r21,8006790 <__svfscanf_r+0xf4>
 8006e6c:	b080040c 	andi	r2,r22,16
 8006e70:	1002ac26 	beq	r2,zero,8007924 <__svfscanf_r+0x1288>
 8006e74:	d8c00104 	addi	r3,sp,4
 8006e78:	a8ebc83a 	sub	r21,r21,r3
 8006e7c:	ac21883a 	add	r16,r21,r16
 8006e80:	a429883a 	add	r20,r20,r16
 8006e84:	dc009d17 	ldw	r16,628(sp)
 8006e88:	800d883a 	mov	r6,r16
 8006e8c:	003e3c06 	br	8006780 <__svfscanf_r+0xe4>
 8006e90:	e000011e 	bne	fp,zero,8006e98 <__svfscanf_r+0x7fc>
 8006e94:	073fffc4 	movi	fp,-1
 8006e98:	b080004c 	andi	r2,r22,1
 8006e9c:	b580040c 	andi	r22,r22,16
 8006ea0:	10003526 	beq	r2,zero,8006f78 <__svfscanf_r+0x8dc>
 8006ea4:	b002dd1e 	bne	r22,zero,8007a1c <__svfscanf_r+0x1380>
 8006ea8:	d8c09c17 	ldw	r3,624(sp)
 8006eac:	1d400017 	ldw	r21,0(r3)
 8006eb0:	18c00104 	addi	r3,r3,4
 8006eb4:	d8c09c15 	stw	r3,624(sp)
 8006eb8:	0021883a 	mov	r16,zero
 8006ebc:	ddc09904 	addi	r23,sp,612
 8006ec0:	98c00017 	ldw	r3,0(r19)
 8006ec4:	91400017 	ldw	r5,0(r18)
 8006ec8:	18800003 	ldbu	r2,0(r3)
 8006ecc:	11003fcc 	andi	r4,r2,255
 8006ed0:	2909883a 	add	r4,r5,r4
 8006ed4:	21000003 	ldbu	r4,0(r4)
 8006ed8:	2100020c 	andi	r4,r4,8
 8006edc:	21003fcc 	andi	r4,r4,255
 8006ee0:	2100201c 	xori	r4,r4,128
 8006ee4:	213fe004 	addi	r4,r4,-128
 8006ee8:	2002731e 	bne	r4,zero,80078b8 <__svfscanf_r+0x121c>
 8006eec:	e0027226 	beq	fp,zero,80078b8 <__svfscanf_r+0x121c>
 8006ef0:	01420074 	movhi	r5,2049
 8006ef4:	2959a004 	addi	r5,r5,26240
 8006ef8:	29000017 	ldw	r4,0(r5)
 8006efc:	813f1d26 	beq	r16,r4,8006b74 <__svfscanf_r+0x4d8>
 8006f00:	9a000117 	ldw	r8,4(r19)
 8006f04:	18c00044 	addi	r3,r3,1
 8006f08:	d9000104 	addi	r4,sp,4
 8006f0c:	423fffc4 	addi	r8,r8,-1
 8006f10:	240f883a 	add	r7,r4,r16
 8006f14:	000b883a 	mov	r5,zero
 8006f18:	b809883a 	mov	r4,r23
 8006f1c:	01800204 	movi	r6,8
 8006f20:	9a000115 	stw	r8,4(r19)
 8006f24:	98c00015 	stw	r3,0(r19)
 8006f28:	38800005 	stb	r2,0(r7)
 8006f2c:	84000044 	addi	r16,r16,1
 8006f30:	8003ff00 	call	8003ff0 <memset>
 8006f34:	a80b883a 	mov	r5,r21
 8006f38:	8809883a 	mov	r4,r17
 8006f3c:	ddc00015 	stw	r23,0(sp)
 8006f40:	d9800104 	addi	r6,sp,4
 8006f44:	800f883a 	mov	r7,r16
 8006f48:	800a0200 	call	800a020 <_mbrtowc_r>
 8006f4c:	017fffc4 	movi	r5,-1
 8006f50:	117f0826 	beq	r2,r5,8006b74 <__svfscanf_r+0x4d8>
 8006f54:	1002de1e 	bne	r2,zero,8007ad0 <__svfscanf_r+0x1434>
 8006f58:	a8000015 	stw	zero,0(r21)
 8006f5c:	0009883a 	mov	r4,zero
 8006f60:	0002de06 	br	8007adc <__svfscanf_r+0x1440>
 8006f64:	8809883a 	mov	r4,r17
 8006f68:	980b883a 	mov	r5,r19
 8006f6c:	80042780 	call	8004278 <__srefill_r>
 8006f70:	103e3f26 	beq	r2,zero,8006870 <__svfscanf_r+0x1d4>
 8006f74:	003eff06 	br	8006b74 <__svfscanf_r+0x4d8>
 8006f78:	b0027e26 	beq	r22,zero,8007974 <__svfscanf_r+0x12d8>
 8006f7c:	91400017 	ldw	r5,0(r18)
 8006f80:	98800017 	ldw	r2,0(r19)
 8006f84:	0021883a 	mov	r16,zero
 8006f88:	10c00003 	ldbu	r3,0(r2)
 8006f8c:	28c7883a 	add	r3,r5,r3
 8006f90:	18c00003 	ldbu	r3,0(r3)
 8006f94:	18c0020c 	andi	r3,r3,8
 8006f98:	18c03fcc 	andi	r3,r3,255
 8006f9c:	18c0201c 	xori	r3,r3,128
 8006fa0:	18ffe004 	addi	r3,r3,-128
 8006fa4:	183fb61e 	bne	r3,zero,8006e80 <__svfscanf_r+0x7e4>
 8006fa8:	98c00117 	ldw	r3,4(r19)
 8006fac:	10800044 	addi	r2,r2,1
 8006fb0:	84000044 	addi	r16,r16,1
 8006fb4:	18ffffc4 	addi	r3,r3,-1
 8006fb8:	98c00115 	stw	r3,4(r19)
 8006fbc:	98800015 	stw	r2,0(r19)
 8006fc0:	e43faf26 	beq	fp,r16,8006e80 <__svfscanf_r+0x7e4>
 8006fc4:	00fff016 	blt	zero,r3,8006f88 <__svfscanf_r+0x8ec>
 8006fc8:	8809883a 	mov	r4,r17
 8006fcc:	980b883a 	mov	r5,r19
 8006fd0:	80042780 	call	8004278 <__srefill_r>
 8006fd4:	103faa1e 	bne	r2,zero,8006e80 <__svfscanf_r+0x7e4>
 8006fd8:	91400017 	ldw	r5,0(r18)
 8006fdc:	98800017 	ldw	r2,0(r19)
 8006fe0:	003fe906 	br	8006f88 <__svfscanf_r+0x8ec>
 8006fe4:	1085883a 	add	r2,r2,r2
 8006fe8:	1085883a 	add	r2,r2,r2
 8006fec:	01020034 	movhi	r4,2048
 8006ff0:	211c0004 	addi	r4,r4,28672
 8006ff4:	1105883a 	add	r2,r2,r4
 8006ff8:	10800017 	ldw	r2,0(r2)
 8006ffc:	1000683a 	jmp	r2
 8007000:	080072a0 	cmpeqi	zero,at,458
 8007004:	08006cc4 	addi	zero,at,435
 8007008:	080072a0 	cmpeqi	zero,at,458
 800700c:	0800728c 	andi	zero,at,458
 8007010:	08006cc4 	addi	zero,at,435
 8007014:	08007268 	cmpgeui	zero,at,457
 8007018:	0800721c 	xori	zero,at,456
 800701c:	0800721c 	xori	zero,at,456
 8007020:	0800721c 	xori	zero,at,456
 8007024:	0800721c 	xori	zero,at,456
 8007028:	0800721c 	xori	zero,at,456
 800702c:	0800721c 	xori	zero,at,456
 8007030:	0800721c 	xori	zero,at,456
 8007034:	0800721c 	xori	zero,at,456
 8007038:	0800721c 	xori	zero,at,456
 800703c:	08006cc4 	addi	zero,at,435
 8007040:	08006cc4 	addi	zero,at,435
 8007044:	08006cc4 	addi	zero,at,435
 8007048:	08006cc4 	addi	zero,at,435
 800704c:	08006cc4 	addi	zero,at,435
 8007050:	08006cc4 	addi	zero,at,435
 8007054:	08006cc4 	addi	zero,at,435
 8007058:	08007384 	addi	zero,at,462
 800705c:	08006cc4 	addi	zero,at,435
 8007060:	08006cc4 	addi	zero,at,435
 8007064:	08006cc4 	addi	zero,at,435
 8007068:	08007348 	cmpgei	zero,at,461
 800706c:	08007394 	ori	zero,at,462
 8007070:	08006cc4 	addi	zero,at,435
 8007074:	08006cc4 	addi	zero,at,435
 8007078:	08007320 	cmpeqi	zero,at,460
 800707c:	08006cc4 	addi	zero,at,435
 8007080:	08006cc4 	addi	zero,at,435
 8007084:	08006cc4 	addi	zero,at,435
 8007088:	08006cc4 	addi	zero,at,435
 800708c:	080072ec 	andhi	zero,at,459
 8007090:	08006cc4 	addi	zero,at,435
 8007094:	08006cc4 	addi	zero,at,435
 8007098:	08006cc4 	addi	zero,at,435
 800709c:	08006cc4 	addi	zero,at,435
 80070a0:	08006cc4 	addi	zero,at,435
 80070a4:	080072d0 	cmplti	zero,at,459
 80070a8:	08006cc4 	addi	zero,at,435
 80070ac:	08006cc4 	addi	zero,at,435
 80070b0:	08006cc4 	addi	zero,at,435
 80070b4:	08006cc4 	addi	zero,at,435
 80070b8:	080072b4 	orhi	zero,at,458
 80070bc:	08006cc4 	addi	zero,at,435
 80070c0:	08006cc4 	addi	zero,at,435
 80070c4:	08006cc4 	addi	zero,at,435
 80070c8:	08006cc4 	addi	zero,at,435
 80070cc:	08006cc4 	addi	zero,at,435
 80070d0:	08006cc4 	addi	zero,at,435
 80070d4:	08006cc4 	addi	zero,at,435
 80070d8:	08007384 	addi	zero,at,462
 80070dc:	08006cc4 	addi	zero,at,435
 80070e0:	08006cc4 	addi	zero,at,435
 80070e4:	08006cc4 	addi	zero,at,435
 80070e8:	08007348 	cmpgei	zero,at,461
 80070ec:	08007394 	ori	zero,at,462
 80070f0:	08006cc4 	addi	zero,at,435
 80070f4:	08006cc4 	addi	zero,at,435
 80070f8:	08007320 	cmpeqi	zero,at,460
 80070fc:	08006cc4 	addi	zero,at,435
 8007100:	08006cc4 	addi	zero,at,435
 8007104:	08006cc4 	addi	zero,at,435
 8007108:	08006cc4 	addi	zero,at,435
 800710c:	080072ec 	andhi	zero,at,459
 8007110:	08006cc4 	addi	zero,at,435
 8007114:	08006cc4 	addi	zero,at,435
 8007118:	08006cc4 	addi	zero,at,435
 800711c:	08006cc4 	addi	zero,at,435
 8007120:	08006cc4 	addi	zero,at,435
 8007124:	080072d0 	cmplti	zero,at,459
 8007128:	08006cc4 	addi	zero,at,435
 800712c:	08006cc4 	addi	zero,at,435
 8007130:	08006cc4 	addi	zero,at,435
 8007134:	08006cc4 	addi	zero,at,435
 8007138:	080072b4 	orhi	zero,at,458
 800713c:	b580040c 	andi	r22,r22,16
 8007140:	b0025226 	beq	r22,zero,8007a8c <__svfscanf_r+0x13f0>
 8007144:	0021883a 	mov	r16,zero
 8007148:	98800117 	ldw	r2,4(r19)
 800714c:	17026f0e 	bge	r2,fp,8007b0c <__svfscanf_r+0x1470>
 8007150:	98c00017 	ldw	r3,0(r19)
 8007154:	8809883a 	mov	r4,r17
 8007158:	980b883a 	mov	r5,r19
 800715c:	1887883a 	add	r3,r3,r2
 8007160:	98c00015 	stw	r3,0(r19)
 8007164:	80a1883a 	add	r16,r16,r2
 8007168:	e0b9c83a 	sub	fp,fp,r2
 800716c:	80042780 	call	8004278 <__srefill_r>
 8007170:	103ff526 	beq	r2,zero,8007148 <__svfscanf_r+0xaac>
 8007174:	803f421e 	bne	r16,zero,8006e80 <__svfscanf_r+0x7e4>
 8007178:	003e7e06 	br	8006b74 <__svfscanf_r+0x4d8>
 800717c:	8809883a 	mov	r4,r17
 8007180:	980b883a 	mov	r5,r19
 8007184:	80042780 	call	8004278 <__srefill_r>
 8007188:	103df126 	beq	r2,zero,8006950 <__svfscanf_r+0x2b4>
 800718c:	803e791e 	bne	r16,zero,8006b74 <__svfscanf_r+0x4d8>
 8007190:	b83f1326 	beq	r23,zero,8006de0 <__svfscanf_r+0x744>
 8007194:	003df006 	br	8006958 <__svfscanf_r+0x2bc>
 8007198:	e2ffa8c4 	addi	r11,fp,-349
 800719c:	07005744 	movi	fp,349
 80071a0:	003eb706 	br	8006c80 <__svfscanf_r+0x5e4>
 80071a4:	0007883a 	mov	r3,zero
 80071a8:	003f1806 	br	8006e0c <__svfscanf_r+0x770>
 80071ac:	d8c09c17 	ldw	r3,624(sp)
 80071b0:	98800017 	ldw	r2,0(r19)
 80071b4:	dd805884 	addi	r22,sp,354
 80071b8:	1c000017 	ldw	r16,0(r3)
 80071bc:	1dc00104 	addi	r23,r3,4
 80071c0:	802b883a 	mov	r21,r16
 80071c4:	10c00003 	ldbu	r3,0(r2)
 80071c8:	b0c7883a 	add	r3,r22,r3
 80071cc:	18c00007 	ldb	r3,0(r3)
 80071d0:	1801c226 	beq	r3,zero,80078dc <__svfscanf_r+0x1240>
 80071d4:	98c00117 	ldw	r3,4(r19)
 80071d8:	10800044 	addi	r2,r2,1
 80071dc:	ad400044 	addi	r21,r21,1
 80071e0:	18ffffc4 	addi	r3,r3,-1
 80071e4:	98c00115 	stw	r3,4(r19)
 80071e8:	10ffffc3 	ldbu	r3,-1(r2)
 80071ec:	e73fffc4 	addi	fp,fp,-1
 80071f0:	a8ffffc5 	stb	r3,-1(r21)
 80071f4:	98800015 	stw	r2,0(r19)
 80071f8:	e001b826 	beq	fp,zero,80078dc <__svfscanf_r+0x1240>
 80071fc:	98c00117 	ldw	r3,4(r19)
 8007200:	00fff016 	blt	zero,r3,80071c4 <__svfscanf_r+0xb28>
 8007204:	8809883a 	mov	r4,r17
 8007208:	980b883a 	mov	r5,r19
 800720c:	80042780 	call	8004278 <__srefill_r>
 8007210:	1001b11e 	bne	r2,zero,80078d8 <__svfscanf_r+0x123c>
 8007214:	98800017 	ldw	r2,0(r19)
 8007218:	003fea06 	br	80071c4 <__svfscanf_r+0xb28>
 800721c:	80803fcc 	andi	r2,r16,255
 8007220:	1080201c 	xori	r2,r2,128
 8007224:	10bfe004 	addi	r2,r2,-128
 8007228:	3085883a 	add	r2,r6,r2
 800722c:	103ea51e 	bne	r2,zero,8006cc4 <__svfscanf_r+0x628>
 8007230:	00bf9fc4 	movi	r2,-385
 8007234:	b0ac703a 	and	r22,r22,r2
 8007238:	b9400005 	stb	r5,0(r23)
 800723c:	bdc00044 	addi	r23,r23,1
 8007240:	98800117 	ldw	r2,4(r19)
 8007244:	e73fffc4 	addi	fp,fp,-1
 8007248:	a5000044 	addi	r20,r20,1
 800724c:	10bfffc4 	addi	r2,r2,-1
 8007250:	98800115 	stw	r2,4(r19)
 8007254:	00816d0e 	bge	zero,r2,800780c <__svfscanf_r+0x1170>
 8007258:	39c00044 	addi	r7,r7,1
 800725c:	99c00015 	stw	r7,0(r19)
 8007260:	e03e931e 	bne	fp,zero,8006cb0 <__svfscanf_r+0x614>
 8007264:	003e9706 	br	8006cc4 <__svfscanf_r+0x628>
 8007268:	b080400c 	andi	r2,r22,256
 800726c:	103feb26 	beq	r2,zero,800721c <__svfscanf_r+0xb80>
 8007270:	00bfdfc4 	movi	r2,-129
 8007274:	b0ac703a 	and	r22,r22,r2
 8007278:	ad400044 	addi	r21,r21,1
 800727c:	583ff026 	beq	r11,zero,8007240 <__svfscanf_r+0xba4>
 8007280:	5affffc4 	addi	r11,r11,-1
 8007284:	e7000044 	addi	fp,fp,1
 8007288:	003fed06 	br	8007240 <__svfscanf_r+0xba4>
 800728c:	b080800c 	andi	r2,r22,512
 8007290:	103e8c26 	beq	r2,zero,8006cc4 <__svfscanf_r+0x628>
 8007294:	b3ec703a 	and	r22,r22,r15
 8007298:	dd40a215 	stw	r21,648(sp)
 800729c:	003fe606 	br	8007238 <__svfscanf_r+0xb9c>
 80072a0:	b080200c 	andi	r2,r22,128
 80072a4:	103e8726 	beq	r2,zero,8006cc4 <__svfscanf_r+0x628>
 80072a8:	00bfdfc4 	movi	r2,-129
 80072ac:	b0ac703a 	and	r22,r22,r2
 80072b0:	003fe106 	br	8007238 <__svfscanf_r+0xb9c>
 80072b4:	81003fcc 	andi	r4,r16,255
 80072b8:	2100201c 	xori	r4,r4,128
 80072bc:	213fe004 	addi	r4,r4,-128
 80072c0:	008001c4 	movi	r2,7
 80072c4:	20be7f1e 	bne	r4,r2,8006cc4 <__svfscanf_r+0x628>
 80072c8:	04000204 	movi	r16,8
 80072cc:	003fda06 	br	8007238 <__svfscanf_r+0xb9c>
 80072d0:	81003fcc 	andi	r4,r16,255
 80072d4:	2100201c 	xori	r4,r4,128
 80072d8:	213fe004 	addi	r4,r4,-128
 80072dc:	00800184 	movi	r2,6
 80072e0:	20be781e 	bne	r4,r2,8006cc4 <__svfscanf_r+0x628>
 80072e4:	040001c4 	movi	r16,7
 80072e8:	003fd306 	br	8007238 <__svfscanf_r+0xb9c>
 80072ec:	3001891e 	bne	r6,zero,8007914 <__svfscanf_r+0x1278>
 80072f0:	b101c00c 	andi	r4,r22,1792
 80072f4:	0081c004 	movi	r2,1792
 80072f8:	20821d26 	beq	r4,r2,8007b70 <__svfscanf_r+0x14d4>
 80072fc:	80803fcc 	andi	r2,r16,255
 8007300:	1080201c 	xori	r2,r2,128
 8007304:	10bfe004 	addi	r2,r2,-128
 8007308:	01000044 	movi	r4,1
 800730c:	11000226 	beq	r2,r4,8007318 <__svfscanf_r+0xc7c>
 8007310:	01000104 	movi	r4,4
 8007314:	113e6b1e 	bne	r2,r4,8006cc4 <__svfscanf_r+0x628>
 8007318:	84000044 	addi	r16,r16,1
 800731c:	003fc606 	br	8007238 <__svfscanf_r+0xb9c>
 8007320:	80803fcc 	andi	r2,r16,255
 8007324:	1080201c 	xori	r2,r2,128
 8007328:	10bfe004 	addi	r2,r2,-128
 800732c:	1001731e 	bne	r2,zero,80078fc <__svfscanf_r+0x1260>
 8007330:	b101c00c 	andi	r4,r22,1792
 8007334:	0081c004 	movi	r2,1792
 8007338:	20be621e 	bne	r4,r2,8006cc4 <__svfscanf_r+0x628>
 800733c:	b32c703a 	and	r22,r22,r12
 8007340:	04000044 	movi	r16,1
 8007344:	003fbc06 	br	8007238 <__svfscanf_r+0xb9c>
 8007348:	b081400c 	andi	r2,r22,1280
 800734c:	13800326 	beq	r2,r14,800735c <__svfscanf_r+0xcc0>
 8007350:	b081000c 	andi	r2,r22,1024
 8007354:	103e5b26 	beq	r2,zero,8006cc4 <__svfscanf_r+0x628>
 8007358:	a83e5d26 	beq	r21,zero,8006cd0 <__svfscanf_r+0x634>
 800735c:	b080800c 	andi	r2,r22,512
 8007360:	1000041e 	bne	r2,zero,8007374 <__svfscanf_r+0xcd8>
 8007364:	d880a217 	ldw	r2,648(sp)
 8007368:	ddc0a115 	stw	r23,644(sp)
 800736c:	a8abc83a 	sub	r21,r21,r2
 8007370:	dd40a315 	stw	r21,652(sp)
 8007374:	b32c703a 	and	r22,r22,r12
 8007378:	b5806014 	ori	r22,r22,384
 800737c:	002b883a 	mov	r21,zero
 8007380:	003fad06 	br	8007238 <__svfscanf_r+0xb9c>
 8007384:	00800044 	movi	r2,1
 8007388:	30be4e1e 	bne	r6,r2,8006cc4 <__svfscanf_r+0x628>
 800738c:	01800084 	movi	r6,2
 8007390:	003fa906 	br	8007238 <__svfscanf_r+0xb9c>
 8007394:	81003fcc 	andi	r4,r16,255
 8007398:	2100201c 	xori	r4,r4,128
 800739c:	213fe004 	addi	r4,r4,-128
 80073a0:	00800084 	movi	r2,2
 80073a4:	20be471e 	bne	r4,r2,8006cc4 <__svfscanf_r+0x628>
 80073a8:	040000c4 	movi	r16,3
 80073ac:	003fa206 	br	8007238 <__svfscanf_r+0xb9c>
 80073b0:	01420074 	movhi	r5,2049
 80073b4:	29754304 	addi	r5,r5,-10996
 80073b8:	00800284 	movi	r2,10
 80073bc:	d940a015 	stw	r5,640(sp)
 80073c0:	d8809f15 	stw	r2,636(sp)
 80073c4:	040000c4 	movi	r16,3
 80073c8:	003d2706 	br	8006868 <__svfscanf_r+0x1cc>
 80073cc:	df009d15 	stw	fp,628(sp)
 80073d0:	04000084 	movi	r16,2
 80073d4:	2039883a 	mov	fp,r4
 80073d8:	003d2306 	br	8006868 <__svfscanf_r+0x1cc>
 80073dc:	00820074 	movhi	r2,2049
 80073e0:	10b6b604 	addi	r2,r2,-9512
 80073e4:	00c00284 	movi	r3,10
 80073e8:	df009d15 	stw	fp,628(sp)
 80073ec:	d880a015 	stw	r2,640(sp)
 80073f0:	2039883a 	mov	fp,r4
 80073f4:	d8c09f15 	stw	r3,636(sp)
 80073f8:	040000c4 	movi	r16,3
 80073fc:	003d1a06 	br	8006868 <__svfscanf_r+0x1cc>
 8007400:	bdc03fcc 	andi	r23,r23,255
 8007404:	01400284 	movi	r5,10
 8007408:	bdc0201c 	xori	r23,r23,128
 800740c:	d8c0a815 	stw	r3,672(sp)
 8007410:	d980a915 	stw	r6,676(sp)
 8007414:	bdffe004 	addi	r23,r23,-128
 8007418:	8001a6c0 	call	8001a6c <__mulsi3>
 800741c:	15c5883a 	add	r2,r2,r23
 8007420:	113ff404 	addi	r4,r2,-48
 8007424:	85c00043 	ldbu	r23,1(r16)
 8007428:	d8c0a817 	ldw	r3,672(sp)
 800742c:	e021883a 	mov	r16,fp
 8007430:	d980a917 	ldw	r6,676(sp)
 8007434:	003cf906 	br	800681c <__svfscanf_r+0x180>
 8007438:	df009d15 	stw	fp,628(sp)
 800743c:	2039883a 	mov	fp,r4
 8007440:	003d0206 	br	800684c <__svfscanf_r+0x1b0>
 8007444:	df009d15 	stw	fp,628(sp)
 8007448:	04000104 	movi	r16,4
 800744c:	2039883a 	mov	fp,r4
 8007450:	003d0506 	br	8006868 <__svfscanf_r+0x1cc>
 8007454:	85c00043 	ldbu	r23,1(r16)
 8007458:	b5800094 	ori	r22,r22,2
 800745c:	e021883a 	mov	r16,fp
 8007460:	003cee06 	br	800681c <__svfscanf_r+0x180>
 8007464:	df009d15 	stw	fp,628(sp)
 8007468:	e021883a 	mov	r16,fp
 800746c:	003cd706 	br	80067cc <__svfscanf_r+0x130>
 8007470:	85c00043 	ldbu	r23,1(r16)
 8007474:	b5800414 	ori	r22,r22,16
 8007478:	e021883a 	mov	r16,fp
 800747c:	003ce706 	br	800681c <__svfscanf_r+0x180>
 8007480:	df009d15 	stw	fp,628(sp)
 8007484:	b5800054 	ori	r22,r22,1
 8007488:	2039883a 	mov	fp,r4
 800748c:	01020074 	movhi	r4,2049
 8007490:	2136b604 	addi	r4,r4,-9512
 8007494:	01400204 	movi	r5,8
 8007498:	d900a015 	stw	r4,640(sp)
 800749c:	d9409f15 	stw	r5,636(sp)
 80074a0:	040000c4 	movi	r16,3
 80074a4:	003cf006 	br	8006868 <__svfscanf_r+0x1cc>
 80074a8:	df009d15 	stw	fp,628(sp)
 80074ac:	01400404 	movi	r5,16
 80074b0:	2039883a 	mov	fp,r4
 80074b4:	01020074 	movhi	r4,2049
 80074b8:	2136b604 	addi	r4,r4,-9512
 80074bc:	b5808014 	ori	r22,r22,512
 80074c0:	d900a015 	stw	r4,640(sp)
 80074c4:	d9409f15 	stw	r5,636(sp)
 80074c8:	040000c4 	movi	r16,3
 80074cc:	003ce606 	br	8006868 <__svfscanf_r+0x1cc>
 80074d0:	df009d15 	stw	fp,628(sp)
 80074d4:	d9409d17 	ldw	r5,628(sp)
 80074d8:	2039883a 	mov	fp,r4
 80074dc:	d9005884 	addi	r4,sp,354
 80074e0:	800bc540 	call	800bc54 <__sccl>
 80074e4:	d8809d15 	stw	r2,628(sp)
 80074e8:	b5801014 	ori	r22,r22,64
 80074ec:	04000044 	movi	r16,1
 80074f0:	003cdd06 	br	8006868 <__svfscanf_r+0x1cc>
 80074f4:	df009d15 	stw	fp,628(sp)
 80074f8:	b5801014 	ori	r22,r22,64
 80074fc:	2039883a 	mov	fp,r4
 8007500:	0021883a 	mov	r16,zero
 8007504:	003cd806 	br	8006868 <__svfscanf_r+0x1cc>
 8007508:	df009d15 	stw	fp,628(sp)
 800750c:	2039883a 	mov	fp,r4
 8007510:	003ccf06 	br	8006850 <__svfscanf_r+0x1b4>
 8007514:	85c00043 	ldbu	r23,1(r16)
 8007518:	b5800114 	ori	r22,r22,4
 800751c:	e021883a 	mov	r16,fp
 8007520:	003cbe06 	br	800681c <__svfscanf_r+0x180>
 8007524:	df009d15 	stw	fp,628(sp)
 8007528:	2039883a 	mov	fp,r4
 800752c:	01020074 	movhi	r4,2049
 8007530:	21354304 	addi	r4,r4,-10996
 8007534:	d900a015 	stw	r4,640(sp)
 8007538:	d8009f15 	stw	zero,636(sp)
 800753c:	040000c4 	movi	r16,3
 8007540:	003cc906 	br	8006868 <__svfscanf_r+0x1cc>
 8007544:	85c00043 	ldbu	r23,1(r16)
 8007548:	b8803fcc 	andi	r2,r23,255
 800754c:	1080201c 	xori	r2,r2,128
 8007550:	10bfe004 	addi	r2,r2,-128
 8007554:	11818f26 	beq	r2,r6,8007b94 <__svfscanf_r+0x14f8>
 8007558:	b5800054 	ori	r22,r22,1
 800755c:	e021883a 	mov	r16,fp
 8007560:	003cae06 	br	800681c <__svfscanf_r+0x180>
 8007564:	df009d15 	stw	fp,628(sp)
 8007568:	b080040c 	andi	r2,r22,16
 800756c:	103cfa1e 	bne	r2,zero,8006958 <__svfscanf_r+0x2bc>
 8007570:	b080010c 	andi	r2,r22,4
 8007574:	10018b26 	beq	r2,zero,8007ba4 <__svfscanf_r+0x1508>
 8007578:	d9009c17 	ldw	r4,624(sp)
 800757c:	e021883a 	mov	r16,fp
 8007580:	800d883a 	mov	r6,r16
 8007584:	20800017 	ldw	r2,0(r4)
 8007588:	21000104 	addi	r4,r4,4
 800758c:	d9009c15 	stw	r4,624(sp)
 8007590:	1500000d 	sth	r20,0(r2)
 8007594:	003c7a06 	br	8006780 <__svfscanf_r+0xe4>
 8007598:	df009d15 	stw	fp,628(sp)
 800759c:	2039883a 	mov	fp,r4
 80075a0:	003fba06 	br	800748c <__svfscanf_r+0xdf0>
 80075a4:	00820074 	movhi	r2,2049
 80075a8:	10b6b604 	addi	r2,r2,-9512
 80075ac:	00c00404 	movi	r3,16
 80075b0:	df009d15 	stw	fp,628(sp)
 80075b4:	b5808814 	ori	r22,r22,544
 80075b8:	2039883a 	mov	fp,r4
 80075bc:	d880a015 	stw	r2,640(sp)
 80075c0:	d8c09f15 	stw	r3,636(sp)
 80075c4:	040000c4 	movi	r16,3
 80075c8:	003ca706 	br	8006868 <__svfscanf_r+0x1cc>
 80075cc:	013fff84 	movi	r4,-2
 80075d0:	113cdd26 	beq	r2,r4,8006948 <__svfscanf_r+0x2ac>
 80075d4:	a429883a 	add	r20,r20,r16
 80075d8:	e73fffc4 	addi	fp,fp,-1
 80075dc:	b83cd826 	beq	r23,zero,8006940 <__svfscanf_r+0x2a4>
 80075e0:	0021883a 	mov	r16,zero
 80075e4:	003cd806 	br	8006948 <__svfscanf_r+0x2ac>
 80075e8:	1085883a 	add	r2,r2,r2
 80075ec:	1085883a 	add	r2,r2,r2
 80075f0:	01020034 	movhi	r4,2048
 80075f4:	211d8104 	addi	r4,r4,30212
 80075f8:	1105883a 	add	r2,r2,r4
 80075fc:	10800017 	ldw	r2,0(r2)
 8007600:	1000683a 	jmp	r2
 8007604:	080077f8 	rdprs	zero,at,479
 8007608:	08006e3c 	xorhi	zero,at,440
 800760c:	080077f8 	rdprs	zero,at,479
 8007610:	08006e3c 	xorhi	zero,at,440
 8007614:	08006e3c 	xorhi	zero,at,440
 8007618:	080077d0 	cmplti	zero,at,479
 800761c:	080077b0 	cmpltui	zero,at,478
 8007620:	080077b0 	cmpltui	zero,at,478
 8007624:	080077b0 	cmpltui	zero,at,478
 8007628:	080077b0 	cmpltui	zero,at,478
 800762c:	080077b0 	cmpltui	zero,at,478
 8007630:	080077b0 	cmpltui	zero,at,478
 8007634:	080077b0 	cmpltui	zero,at,478
 8007638:	08007790 	cmplti	zero,at,478
 800763c:	08007790 	cmplti	zero,at,478
 8007640:	08006e3c 	xorhi	zero,at,440
 8007644:	08006e3c 	xorhi	zero,at,440
 8007648:	08006e3c 	xorhi	zero,at,440
 800764c:	08006e3c 	xorhi	zero,at,440
 8007650:	08006e3c 	xorhi	zero,at,440
 8007654:	08006e3c 	xorhi	zero,at,440
 8007658:	08006e3c 	xorhi	zero,at,440
 800765c:	0800777c 	xorhi	zero,at,477
 8007660:	0800777c 	xorhi	zero,at,477
 8007664:	0800777c 	xorhi	zero,at,477
 8007668:	0800777c 	xorhi	zero,at,477
 800766c:	0800777c 	xorhi	zero,at,477
 8007670:	0800777c 	xorhi	zero,at,477
 8007674:	08006e3c 	xorhi	zero,at,440
 8007678:	08006e3c 	xorhi	zero,at,440
 800767c:	08006e3c 	xorhi	zero,at,440
 8007680:	08006e3c 	xorhi	zero,at,440
 8007684:	08006e3c 	xorhi	zero,at,440
 8007688:	08006e3c 	xorhi	zero,at,440
 800768c:	08006e3c 	xorhi	zero,at,440
 8007690:	08006e3c 	xorhi	zero,at,440
 8007694:	08006e3c 	xorhi	zero,at,440
 8007698:	08006e3c 	xorhi	zero,at,440
 800769c:	08006e3c 	xorhi	zero,at,440
 80076a0:	08006e3c 	xorhi	zero,at,440
 80076a4:	08006e3c 	xorhi	zero,at,440
 80076a8:	08006e3c 	xorhi	zero,at,440
 80076ac:	08006e3c 	xorhi	zero,at,440
 80076b0:	08006e3c 	xorhi	zero,at,440
 80076b4:	08006e3c 	xorhi	zero,at,440
 80076b8:	0800773c 	xorhi	zero,at,476
 80076bc:	08006e3c 	xorhi	zero,at,440
 80076c0:	08006e3c 	xorhi	zero,at,440
 80076c4:	08006e3c 	xorhi	zero,at,440
 80076c8:	08006e3c 	xorhi	zero,at,440
 80076cc:	08006e3c 	xorhi	zero,at,440
 80076d0:	08006e3c 	xorhi	zero,at,440
 80076d4:	08006e3c 	xorhi	zero,at,440
 80076d8:	08006e3c 	xorhi	zero,at,440
 80076dc:	0800777c 	xorhi	zero,at,477
 80076e0:	0800777c 	xorhi	zero,at,477
 80076e4:	0800777c 	xorhi	zero,at,477
 80076e8:	0800777c 	xorhi	zero,at,477
 80076ec:	0800777c 	xorhi	zero,at,477
 80076f0:	0800777c 	xorhi	zero,at,477
 80076f4:	08006e3c 	xorhi	zero,at,440
 80076f8:	08006e3c 	xorhi	zero,at,440
 80076fc:	08006e3c 	xorhi	zero,at,440
 8007700:	08006e3c 	xorhi	zero,at,440
 8007704:	08006e3c 	xorhi	zero,at,440
 8007708:	08006e3c 	xorhi	zero,at,440
 800770c:	08006e3c 	xorhi	zero,at,440
 8007710:	08006e3c 	xorhi	zero,at,440
 8007714:	08006e3c 	xorhi	zero,at,440
 8007718:	08006e3c 	xorhi	zero,at,440
 800771c:	08006e3c 	xorhi	zero,at,440
 8007720:	08006e3c 	xorhi	zero,at,440
 8007724:	08006e3c 	xorhi	zero,at,440
 8007728:	08006e3c 	xorhi	zero,at,440
 800772c:	08006e3c 	xorhi	zero,at,440
 8007730:	08006e3c 	xorhi	zero,at,440
 8007734:	08006e3c 	xorhi	zero,at,440
 8007738:	0800773c 	xorhi	zero,at,476
 800773c:	b081800c 	andi	r2,r22,1536
 8007740:	11fdbe1e 	bne	r2,r7,8006e3c <__svfscanf_r+0x7a0>
 8007744:	b1ac703a 	and	r22,r22,r6
 8007748:	b5814014 	ori	r22,r22,1280
 800774c:	02400404 	movi	r9,16
 8007750:	a9400005 	stb	r5,0(r21)
 8007754:	ad400044 	addi	r21,r21,1
 8007758:	98800117 	ldw	r2,4(r19)
 800775c:	10bfffc4 	addi	r2,r2,-1
 8007760:	98800115 	stw	r2,4(r19)
 8007764:	00803b0e 	bge	zero,r2,8007854 <__svfscanf_r+0x11b8>
 8007768:	42000044 	addi	r8,r8,1
 800776c:	9a000015 	stw	r8,0(r19)
 8007770:	e73fffc4 	addi	fp,fp,-1
 8007774:	e03dac1e 	bne	fp,zero,8006e28 <__svfscanf_r+0x78c>
 8007778:	003db006 	br	8006e3c <__svfscanf_r+0x7a0>
 800777c:	00800284 	movi	r2,10
 8007780:	127dae0e 	bge	r2,r9,8006e3c <__svfscanf_r+0x7a0>
 8007784:	00bd1fc4 	movi	r2,-2945
 8007788:	b0ac703a 	and	r22,r22,r2
 800778c:	003ff006 	br	8007750 <__svfscanf_r+0x10b4>
 8007790:	4a53883a 	add	r9,r9,r9
 8007794:	01020074 	movhi	r4,2049
 8007798:	2111d684 	addi	r4,r4,18266
 800779c:	2245883a 	add	r2,r4,r9
 80077a0:	1240000f 	ldh	r9,0(r2)
 80077a4:	00800204 	movi	r2,8
 80077a8:	127ff616 	blt	r2,r9,8007784 <__svfscanf_r+0x10e8>
 80077ac:	003da306 	br	8006e3c <__svfscanf_r+0x7a0>
 80077b0:	4a53883a 	add	r9,r9,r9
 80077b4:	01020074 	movhi	r4,2049
 80077b8:	2111d684 	addi	r4,r4,18266
 80077bc:	2245883a 	add	r2,r4,r9
 80077c0:	1240000f 	ldh	r9,0(r2)
 80077c4:	00bd1fc4 	movi	r2,-2945
 80077c8:	b0ac703a 	and	r22,r22,r2
 80077cc:	003fe006 	br	8007750 <__svfscanf_r+0x10b4>
 80077d0:	b082000c 	andi	r2,r22,2048
 80077d4:	103fde26 	beq	r2,zero,8007750 <__svfscanf_r+0x10b4>
 80077d8:	4800021e 	bne	r9,zero,80077e4 <__svfscanf_r+0x1148>
 80077dc:	b5808014 	ori	r22,r22,512
 80077e0:	02400204 	movi	r9,8
 80077e4:	b081000c 	andi	r2,r22,1024
 80077e8:	10009f26 	beq	r2,zero,8007a68 <__svfscanf_r+0x13cc>
 80077ec:	00be9fc4 	movi	r2,-1409
 80077f0:	b0ac703a 	and	r22,r22,r2
 80077f4:	003fd606 	br	8007750 <__svfscanf_r+0x10b4>
 80077f8:	b080200c 	andi	r2,r22,128
 80077fc:	103d8f26 	beq	r2,zero,8006e3c <__svfscanf_r+0x7a0>
 8007800:	00bfdfc4 	movi	r2,-129
 8007804:	b0ac703a 	and	r22,r22,r2
 8007808:	003fd106 	br	8007750 <__svfscanf_r+0x10b4>
 800780c:	8809883a 	mov	r4,r17
 8007810:	980b883a 	mov	r5,r19
 8007814:	d8c0a815 	stw	r3,672(sp)
 8007818:	d980a915 	stw	r6,676(sp)
 800781c:	dac0a715 	stw	r11,668(sp)
 8007820:	db00a515 	stw	r12,660(sp)
 8007824:	db80a415 	stw	r14,656(sp)
 8007828:	dbc0a615 	stw	r15,664(sp)
 800782c:	80042780 	call	8004278 <__srefill_r>
 8007830:	d8c0a817 	ldw	r3,672(sp)
 8007834:	d980a917 	ldw	r6,676(sp)
 8007838:	dac0a717 	ldw	r11,668(sp)
 800783c:	db00a517 	ldw	r12,660(sp)
 8007840:	db80a417 	ldw	r14,656(sp)
 8007844:	dbc0a617 	ldw	r15,664(sp)
 8007848:	103d1e1e 	bne	r2,zero,8006cc4 <__svfscanf_r+0x628>
 800784c:	e03d181e 	bne	fp,zero,8006cb0 <__svfscanf_r+0x614>
 8007850:	003d1c06 	br	8006cc4 <__svfscanf_r+0x628>
 8007854:	8809883a 	mov	r4,r17
 8007858:	980b883a 	mov	r5,r19
 800785c:	d8c0a815 	stw	r3,672(sp)
 8007860:	d980a915 	stw	r6,676(sp)
 8007864:	d9c0a415 	stw	r7,656(sp)
 8007868:	da40a515 	stw	r9,660(sp)
 800786c:	80042780 	call	8004278 <__srefill_r>
 8007870:	d8c0a817 	ldw	r3,672(sp)
 8007874:	d980a917 	ldw	r6,676(sp)
 8007878:	d9c0a417 	ldw	r7,656(sp)
 800787c:	da40a517 	ldw	r9,660(sp)
 8007880:	103fbb26 	beq	r2,zero,8007770 <__svfscanf_r+0x10d4>
 8007884:	003d6d06 	br	8006e3c <__svfscanf_r+0x7a0>
 8007888:	a429883a 	add	r20,r20,r16
 800788c:	e73fffc4 	addi	fp,fp,-1
 8007890:	b000fc1e 	bne	r22,zero,8007c84 <__svfscanf_r+0x15e8>
 8007894:	ad400104 	addi	r21,r21,4
 8007898:	0021883a 	mov	r16,zero
 800789c:	98800117 	ldw	r2,4(r19)
 80078a0:	00bd8716 	blt	zero,r2,8006ec0 <__svfscanf_r+0x824>
 80078a4:	8809883a 	mov	r4,r17
 80078a8:	980b883a 	mov	r5,r19
 80078ac:	80042780 	call	8004278 <__srefill_r>
 80078b0:	103d8326 	beq	r2,zero,8006ec0 <__svfscanf_r+0x824>
 80078b4:	803caf1e 	bne	r16,zero,8006b74 <__svfscanf_r+0x4d8>
 80078b8:	b03c271e 	bne	r22,zero,8006958 <__svfscanf_r+0x2bc>
 80078bc:	d8809e17 	ldw	r2,632(sp)
 80078c0:	dc009d17 	ldw	r16,628(sp)
 80078c4:	a8000015 	stw	zero,0(r21)
 80078c8:	10800044 	addi	r2,r2,1
 80078cc:	d8809e15 	stw	r2,632(sp)
 80078d0:	800d883a 	mov	r6,r16
 80078d4:	003baa06 	br	8006780 <__svfscanf_r+0xe4>
 80078d8:	857ca626 	beq	r16,r21,8006b74 <__svfscanf_r+0x4d8>
 80078dc:	ac21c83a 	sub	r16,r21,r16
 80078e0:	803bab26 	beq	r16,zero,8006790 <__svfscanf_r+0xf4>
 80078e4:	d8809e17 	ldw	r2,632(sp)
 80078e8:	a8000005 	stb	zero,0(r21)
 80078ec:	ddc09c15 	stw	r23,624(sp)
 80078f0:	10800044 	addi	r2,r2,1
 80078f4:	d8809e15 	stw	r2,632(sp)
 80078f8:	003d6106 	br	8006e80 <__svfscanf_r+0x7e4>
 80078fc:	010000c4 	movi	r4,3
 8007900:	113e8526 	beq	r2,r4,8007318 <__svfscanf_r+0xc7c>
 8007904:	01000144 	movi	r4,5
 8007908:	113cee1e 	bne	r2,r4,8006cc4 <__svfscanf_r+0x628>
 800790c:	84000044 	addi	r16,r16,1
 8007910:	003e4906 	br	8007238 <__svfscanf_r+0xb9c>
 8007914:	00800084 	movi	r2,2
 8007918:	30be781e 	bne	r6,r2,80072fc <__svfscanf_r+0xc60>
 800791c:	018000c4 	movi	r6,3
 8007920:	003e4506 	br	8007238 <__svfscanf_r+0xb9c>
 8007924:	d8c0a017 	ldw	r3,640(sp)
 8007928:	d9c09f17 	ldw	r7,636(sp)
 800792c:	8809883a 	mov	r4,r17
 8007930:	d9400104 	addi	r5,sp,4
 8007934:	000d883a 	mov	r6,zero
 8007938:	a8000005 	stb	zero,0(r21)
 800793c:	183ee83a 	callr	r3
 8007940:	b0c0080c 	andi	r3,r22,32
 8007944:	1800391e 	bne	r3,zero,8007a2c <__svfscanf_r+0x1390>
 8007948:	b0c0010c 	andi	r3,r22,4
 800794c:	1800ac26 	beq	r3,zero,8007c00 <__svfscanf_r+0x1564>
 8007950:	d9409c17 	ldw	r5,624(sp)
 8007954:	28c00017 	ldw	r3,0(r5)
 8007958:	29400104 	addi	r5,r5,4
 800795c:	d9409c15 	stw	r5,624(sp)
 8007960:	1880000d 	sth	r2,0(r3)
 8007964:	d8809e17 	ldw	r2,632(sp)
 8007968:	10800044 	addi	r2,r2,1
 800796c:	d8809e15 	stw	r2,632(sp)
 8007970:	003d4006 	br	8006e74 <__svfscanf_r+0x7d8>
 8007974:	d8c09c17 	ldw	r3,624(sp)
 8007978:	98800017 	ldw	r2,0(r19)
 800797c:	1d400017 	ldw	r21,0(r3)
 8007980:	1d800104 	addi	r22,r3,4
 8007984:	a821883a 	mov	r16,r21
 8007988:	10c00003 	ldbu	r3,0(r2)
 800798c:	91400017 	ldw	r5,0(r18)
 8007990:	28c7883a 	add	r3,r5,r3
 8007994:	18c00003 	ldbu	r3,0(r3)
 8007998:	18c0020c 	andi	r3,r3,8
 800799c:	18c03fcc 	andi	r3,r3,255
 80079a0:	18c0201c 	xori	r3,r3,128
 80079a4:	18ffe004 	addi	r3,r3,-128
 80079a8:	1800121e 	bne	r3,zero,80079f4 <__svfscanf_r+0x1358>
 80079ac:	98c00117 	ldw	r3,4(r19)
 80079b0:	10800044 	addi	r2,r2,1
 80079b4:	84000044 	addi	r16,r16,1
 80079b8:	18ffffc4 	addi	r3,r3,-1
 80079bc:	98c00115 	stw	r3,4(r19)
 80079c0:	10ffffc3 	ldbu	r3,-1(r2)
 80079c4:	e73fffc4 	addi	fp,fp,-1
 80079c8:	80ffffc5 	stb	r3,-1(r16)
 80079cc:	98800015 	stw	r2,0(r19)
 80079d0:	e0000826 	beq	fp,zero,80079f4 <__svfscanf_r+0x1358>
 80079d4:	98c00117 	ldw	r3,4(r19)
 80079d8:	00ffeb16 	blt	zero,r3,8007988 <__svfscanf_r+0x12ec>
 80079dc:	8809883a 	mov	r4,r17
 80079e0:	980b883a 	mov	r5,r19
 80079e4:	80042780 	call	8004278 <__srefill_r>
 80079e8:	1000021e 	bne	r2,zero,80079f4 <__svfscanf_r+0x1358>
 80079ec:	98800017 	ldw	r2,0(r19)
 80079f0:	003fe506 	br	8007988 <__svfscanf_r+0x12ec>
 80079f4:	d8809e17 	ldw	r2,632(sp)
 80079f8:	856bc83a 	sub	r21,r16,r21
 80079fc:	80000005 	stb	zero,0(r16)
 8007a00:	dc009d17 	ldw	r16,628(sp)
 8007a04:	10800044 	addi	r2,r2,1
 8007a08:	a569883a 	add	r20,r20,r21
 8007a0c:	d8809e15 	stw	r2,632(sp)
 8007a10:	dd809c15 	stw	r22,624(sp)
 8007a14:	800d883a 	mov	r6,r16
 8007a18:	003b5906 	br	8006780 <__svfscanf_r+0xe4>
 8007a1c:	dd409b04 	addi	r21,sp,620
 8007a20:	003d2506 	br	8006eb8 <__svfscanf_r+0x81c>
 8007a24:	002d883a 	mov	r22,zero
 8007a28:	003ba206 	br	80068b4 <__svfscanf_r+0x218>
 8007a2c:	d9009c17 	ldw	r4,624(sp)
 8007a30:	20c00017 	ldw	r3,0(r4)
 8007a34:	21000104 	addi	r4,r4,4
 8007a38:	d9009c15 	stw	r4,624(sp)
 8007a3c:	18800015 	stw	r2,0(r3)
 8007a40:	003fc806 	br	8007964 <__svfscanf_r+0x12c8>
 8007a44:	b280008c 	andi	r10,r22,2
 8007a48:	50008126 	beq	r10,zero,8007c50 <__svfscanf_r+0x15b4>
 8007a4c:	d8c09c17 	ldw	r3,624(sp)
 8007a50:	18800017 	ldw	r2,0(r3)
 8007a54:	18c00104 	addi	r3,r3,4
 8007a58:	d8c09c15 	stw	r3,624(sp)
 8007a5c:	15400015 	stw	r21,0(r2)
 8007a60:	15c00115 	stw	r23,4(r2)
 8007a64:	003cde06 	br	8006de0 <__svfscanf_r+0x744>
 8007a68:	00bf1fc4 	movi	r2,-897
 8007a6c:	b0ac703a 	and	r22,r22,r2
 8007a70:	18000226 	beq	r3,zero,8007a7c <__svfscanf_r+0x13e0>
 8007a74:	18ffffc4 	addi	r3,r3,-1
 8007a78:	e7000044 	addi	fp,fp,1
 8007a7c:	84000044 	addi	r16,r16,1
 8007a80:	003f3506 	br	8007758 <__svfscanf_r+0x10bc>
 8007a84:	803cfe1e 	bne	r16,zero,8006e80 <__svfscanf_r+0x7e4>
 8007a88:	003b4106 	br	8006790 <__svfscanf_r+0xf4>
 8007a8c:	d8c09c17 	ldw	r3,624(sp)
 8007a90:	01400044 	movi	r5,1
 8007a94:	e00d883a 	mov	r6,fp
 8007a98:	19000017 	ldw	r4,0(r3)
 8007a9c:	980f883a 	mov	r7,r19
 8007aa0:	80029640 	call	8002964 <fread>
 8007aa4:	d9009c17 	ldw	r4,624(sp)
 8007aa8:	20c00104 	addi	r3,r4,4
 8007aac:	103c3126 	beq	r2,zero,8006b74 <__svfscanf_r+0x4d8>
 8007ab0:	1529883a 	add	r20,r2,r20
 8007ab4:	d8809e17 	ldw	r2,632(sp)
 8007ab8:	dc009d17 	ldw	r16,628(sp)
 8007abc:	d8c09c15 	stw	r3,624(sp)
 8007ac0:	10800044 	addi	r2,r2,1
 8007ac4:	d8809e15 	stw	r2,632(sp)
 8007ac8:	800d883a 	mov	r6,r16
 8007acc:	003b2c06 	br	8006780 <__svfscanf_r+0xe4>
 8007ad0:	00ffff84 	movi	r3,-2
 8007ad4:	10ff7126 	beq	r2,r3,800789c <__svfscanf_r+0x1200>
 8007ad8:	a9000017 	ldw	r4,0(r21)
 8007adc:	8009ea00 	call	8009ea0 <iswspace>
 8007ae0:	103f6926 	beq	r2,zero,8007888 <__svfscanf_r+0x11ec>
 8007ae4:	803f7426 	beq	r16,zero,80078b8 <__svfscanf_r+0x121c>
 8007ae8:	843fffc4 	addi	r16,r16,-1
 8007aec:	d9000104 	addi	r4,sp,4
 8007af0:	2405883a 	add	r2,r4,r16
 8007af4:	11400003 	ldbu	r5,0(r2)
 8007af8:	8809883a 	mov	r4,r17
 8007afc:	980d883a 	mov	r6,r19
 8007b00:	800e2240 	call	800e224 <_ungetc_r>
 8007b04:	803ff81e 	bne	r16,zero,8007ae8 <__svfscanf_r+0x144c>
 8007b08:	003f6b06 	br	80078b8 <__svfscanf_r+0x121c>
 8007b0c:	99000017 	ldw	r4,0(r19)
 8007b10:	1705c83a 	sub	r2,r2,fp
 8007b14:	8721883a 	add	r16,r16,fp
 8007b18:	2707883a 	add	r3,r4,fp
 8007b1c:	98800115 	stw	r2,4(r19)
 8007b20:	98c00015 	stw	r3,0(r19)
 8007b24:	003cd606 	br	8006e80 <__svfscanf_r+0x7e4>
 8007b28:	d880a117 	ldw	r2,644(sp)
 8007b2c:	000d883a 	mov	r6,zero
 8007b30:	8809883a 	mov	r4,r17
 8007b34:	11400044 	addi	r5,r2,1
 8007b38:	01c00284 	movi	r7,10
 8007b3c:	800d50c0 	call	800d50c <_strtol_r>
 8007b40:	d8c0a317 	ldw	r3,652(sp)
 8007b44:	10cdc83a 	sub	r6,r2,r3
 8007b48:	d900a117 	ldw	r4,644(sp)
 8007b4c:	d88055c4 	addi	r2,sp,343
 8007b50:	20800236 	bltu	r4,r2,8007b5c <__svfscanf_r+0x14c0>
 8007b54:	d9005584 	addi	r4,sp,342
 8007b58:	d900a115 	stw	r4,644(sp)
 8007b5c:	d900a117 	ldw	r4,644(sp)
 8007b60:	01420074 	movhi	r5,2049
 8007b64:	2951d504 	addi	r5,r5,18260
 8007b68:	800bd780 	call	800bd78 <sprintf>
 8007b6c:	003c8e06 	br	8006da8 <__svfscanf_r+0x70c>
 8007b70:	b32c703a 	and	r22,r22,r12
 8007b74:	01800044 	movi	r6,1
 8007b78:	003daf06 	br	8007238 <__svfscanf_r+0xb9c>
 8007b7c:	d8c0a217 	ldw	r3,648(sp)
 8007b80:	a8ebc83a 	sub	r21,r21,r3
 8007b84:	054dc83a 	sub	r6,zero,r21
 8007b88:	a83c8726 	beq	r21,zero,8006da8 <__svfscanf_r+0x70c>
 8007b8c:	ddc0a115 	stw	r23,644(sp)
 8007b90:	003fed06 	br	8007b48 <__svfscanf_r+0x14ac>
 8007b94:	85c00083 	ldbu	r23,2(r16)
 8007b98:	b5800094 	ori	r22,r22,2
 8007b9c:	84000084 	addi	r16,r16,2
 8007ba0:	003b1e06 	br	800681c <__svfscanf_r+0x180>
 8007ba4:	b080004c 	andi	r2,r22,1
 8007ba8:	10000d1e 	bne	r2,zero,8007be0 <__svfscanf_r+0x1544>
 8007bac:	b580008c 	andi	r22,r22,2
 8007bb0:	b0000b26 	beq	r22,zero,8007be0 <__svfscanf_r+0x1544>
 8007bb4:	d8c09c17 	ldw	r3,624(sp)
 8007bb8:	d9009c17 	ldw	r4,624(sp)
 8007bbc:	dc009d17 	ldw	r16,628(sp)
 8007bc0:	18800017 	ldw	r2,0(r3)
 8007bc4:	a007d7fa 	srai	r3,r20,31
 8007bc8:	21000104 	addi	r4,r4,4
 8007bcc:	15000015 	stw	r20,0(r2)
 8007bd0:	10c00115 	stw	r3,4(r2)
 8007bd4:	d9009c15 	stw	r4,624(sp)
 8007bd8:	800d883a 	mov	r6,r16
 8007bdc:	003ae806 	br	8006780 <__svfscanf_r+0xe4>
 8007be0:	d9409c17 	ldw	r5,624(sp)
 8007be4:	dc009d17 	ldw	r16,628(sp)
 8007be8:	28800017 	ldw	r2,0(r5)
 8007bec:	29400104 	addi	r5,r5,4
 8007bf0:	d9409c15 	stw	r5,624(sp)
 8007bf4:	15000015 	stw	r20,0(r2)
 8007bf8:	800d883a 	mov	r6,r16
 8007bfc:	003ae006 	br	8006780 <__svfscanf_r+0xe4>
 8007c00:	b0c0004c 	andi	r3,r22,1
 8007c04:	183f891e 	bne	r3,zero,8007a2c <__svfscanf_r+0x1390>
 8007c08:	b580008c 	andi	r22,r22,2
 8007c0c:	b03f8726 	beq	r22,zero,8007a2c <__svfscanf_r+0x1390>
 8007c10:	d940a017 	ldw	r5,640(sp)
 8007c14:	00820074 	movhi	r2,2049
 8007c18:	10b6b604 	addi	r2,r2,-9512
 8007c1c:	8809883a 	mov	r4,r17
 8007c20:	28802626 	beq	r5,r2,8007cbc <__svfscanf_r+0x1620>
 8007c24:	d9c09f17 	ldw	r7,636(sp)
 8007c28:	d9400104 	addi	r5,sp,4
 8007c2c:	000d883a 	mov	r6,zero
 8007c30:	800d7a80 	call	800d7a8 <_strtoll_r>
 8007c34:	d9409c17 	ldw	r5,624(sp)
 8007c38:	29000017 	ldw	r4,0(r5)
 8007c3c:	29400104 	addi	r5,r5,4
 8007c40:	d9409c15 	stw	r5,624(sp)
 8007c44:	20800015 	stw	r2,0(r4)
 8007c48:	20c00115 	stw	r3,4(r4)
 8007c4c:	003f4506 	br	8007964 <__svfscanf_r+0x12c8>
 8007c50:	d8809c17 	ldw	r2,624(sp)
 8007c54:	a809883a 	mov	r4,r21
 8007c58:	180b883a 	mov	r5,r3
 8007c5c:	14000104 	addi	r16,r2,4
 8007c60:	15800017 	ldw	r22,0(r2)
 8007c64:	800bc280 	call	800bc28 <__isnand>
 8007c68:	1000311e 	bne	r2,zero,8007d30 <__svfscanf_r+0x1694>
 8007c6c:	a809883a 	mov	r4,r21
 8007c70:	b80b883a 	mov	r5,r23
 8007c74:	8010aac0 	call	8010aac <__truncdfsf2>
 8007c78:	b0800015 	stw	r2,0(r22)
 8007c7c:	dc009c15 	stw	r16,624(sp)
 8007c80:	003c5706 	br	8006de0 <__svfscanf_r+0x744>
 8007c84:	0021883a 	mov	r16,zero
 8007c88:	003f0406 	br	800789c <__svfscanf_r+0x1200>
 8007c8c:	d9400104 	addi	r5,sp,4
 8007c90:	9821883a 	mov	r16,r19
 8007c94:	2dfabe2e 	bgeu	r5,r23,8006790 <__svfscanf_r+0xf4>
 8007c98:	bcbfffc4 	addi	r18,r23,-1
 8007c9c:	dcc000c4 	addi	r19,sp,3
 8007ca0:	91400007 	ldb	r5,0(r18)
 8007ca4:	8809883a 	mov	r4,r17
 8007ca8:	94bfffc4 	addi	r18,r18,-1
 8007cac:	800d883a 	mov	r6,r16
 8007cb0:	800e2240 	call	800e224 <_ungetc_r>
 8007cb4:	94fffa1e 	bne	r18,r19,8007ca0 <__svfscanf_r+0x1604>
 8007cb8:	003ab506 	br	8006790 <__svfscanf_r+0xf4>
 8007cbc:	d9c09f17 	ldw	r7,636(sp)
 8007cc0:	d9400104 	addi	r5,sp,4
 8007cc4:	000d883a 	mov	r6,zero
 8007cc8:	800dda00 	call	800dda0 <_strtoull_r>
 8007ccc:	003fd906 	br	8007c34 <__svfscanf_r+0x1598>
 8007cd0:	d9000104 	addi	r4,sp,4
 8007cd4:	9821883a 	mov	r16,r19
 8007cd8:	25faad2e 	bgeu	r4,r23,8006790 <__svfscanf_r+0xf4>
 8007cdc:	bcbfffc4 	addi	r18,r23,-1
 8007ce0:	dcc000c4 	addi	r19,sp,3
 8007ce4:	91400007 	ldb	r5,0(r18)
 8007ce8:	8809883a 	mov	r4,r17
 8007cec:	94bfffc4 	addi	r18,r18,-1
 8007cf0:	800d883a 	mov	r6,r16
 8007cf4:	800e2240 	call	800e224 <_ungetc_r>
 8007cf8:	94fffa1e 	bne	r18,r19,8007ce4 <__svfscanf_r+0x1648>
 8007cfc:	003aa406 	br	8006790 <__svfscanf_r+0xf4>
 8007d00:	d8c00104 	addi	r3,sp,4
 8007d04:	9821883a 	mov	r16,r19
 8007d08:	1dfaa12e 	bgeu	r3,r23,8006790 <__svfscanf_r+0xf4>
 8007d0c:	bcbfffc4 	addi	r18,r23,-1
 8007d10:	dcc000c4 	addi	r19,sp,3
 8007d14:	91400007 	ldb	r5,0(r18)
 8007d18:	8809883a 	mov	r4,r17
 8007d1c:	94bfffc4 	addi	r18,r18,-1
 8007d20:	800d883a 	mov	r6,r16
 8007d24:	800e2240 	call	800e224 <_ungetc_r>
 8007d28:	94fffa1e 	bne	r18,r19,8007d14 <__svfscanf_r+0x1678>
 8007d2c:	003a9806 	br	8006790 <__svfscanf_r+0xf4>
 8007d30:	0009883a 	mov	r4,zero
 8007d34:	800bd180 	call	800bd18 <nanf>
 8007d38:	b0800015 	stw	r2,0(r22)
 8007d3c:	dc009c15 	stw	r16,624(sp)
 8007d40:	003c2706 	br	8006de0 <__svfscanf_r+0x744>

08007d44 <_vfscanf_r>:
 8007d44:	defffb04 	addi	sp,sp,-20
 8007d48:	dc000315 	stw	r16,12(sp)
 8007d4c:	dfc00415 	stw	ra,16(sp)
 8007d50:	2021883a 	mov	r16,r4
 8007d54:	20000926 	beq	r4,zero,8007d7c <_vfscanf_r+0x38>
 8007d58:	20800e17 	ldw	r2,56(r4)
 8007d5c:	1000071e 	bne	r2,zero,8007d7c <_vfscanf_r+0x38>
 8007d60:	d9400015 	stw	r5,0(sp)
 8007d64:	d9800115 	stw	r6,4(sp)
 8007d68:	d9c00215 	stw	r7,8(sp)
 8007d6c:	80023480 	call	8002348 <__sinit>
 8007d70:	d9c00217 	ldw	r7,8(sp)
 8007d74:	d9800117 	ldw	r6,4(sp)
 8007d78:	d9400017 	ldw	r5,0(sp)
 8007d7c:	8009883a 	mov	r4,r16
 8007d80:	dfc00417 	ldw	ra,16(sp)
 8007d84:	dc000317 	ldw	r16,12(sp)
 8007d88:	dec00504 	addi	sp,sp,20
 8007d8c:	800669c1 	jmpi	800669c <__svfscanf_r>

08007d90 <__svfscanf>:
 8007d90:	00820074 	movhi	r2,2049
 8007d94:	10999c04 	addi	r2,r2,26224
 8007d98:	2007883a 	mov	r3,r4
 8007d9c:	11000017 	ldw	r4,0(r2)
 8007da0:	2805883a 	mov	r2,r5
 8007da4:	300f883a 	mov	r7,r6
 8007da8:	180b883a 	mov	r5,r3
 8007dac:	100d883a 	mov	r6,r2
 8007db0:	800669c1 	jmpi	800669c <__svfscanf_r>

08007db4 <vfscanf>:
 8007db4:	defffb04 	addi	sp,sp,-20
 8007db8:	dc000115 	stw	r16,4(sp)
 8007dbc:	04020074 	movhi	r16,2049
 8007dc0:	84199c04 	addi	r16,r16,26224
 8007dc4:	80800017 	ldw	r2,0(r16)
 8007dc8:	dc800315 	stw	r18,12(sp)
 8007dcc:	dc400215 	stw	r17,8(sp)
 8007dd0:	dfc00415 	stw	ra,16(sp)
 8007dd4:	2025883a 	mov	r18,r4
 8007dd8:	2823883a 	mov	r17,r5
 8007ddc:	300f883a 	mov	r7,r6
 8007de0:	10000726 	beq	r2,zero,8007e00 <vfscanf+0x4c>
 8007de4:	10c00e17 	ldw	r3,56(r2)
 8007de8:	1800051e 	bne	r3,zero,8007e00 <vfscanf+0x4c>
 8007dec:	1009883a 	mov	r4,r2
 8007df0:	d9800015 	stw	r6,0(sp)
 8007df4:	80023480 	call	8002348 <__sinit>
 8007df8:	80800017 	ldw	r2,0(r16)
 8007dfc:	d9c00017 	ldw	r7,0(sp)
 8007e00:	1009883a 	mov	r4,r2
 8007e04:	900b883a 	mov	r5,r18
 8007e08:	880d883a 	mov	r6,r17
 8007e0c:	dfc00417 	ldw	ra,16(sp)
 8007e10:	dc800317 	ldw	r18,12(sp)
 8007e14:	dc400217 	ldw	r17,8(sp)
 8007e18:	dc000117 	ldw	r16,4(sp)
 8007e1c:	dec00504 	addi	sp,sp,20
 8007e20:	800669c1 	jmpi	800669c <__svfscanf_r>

08007e24 <_write_r>:
 8007e24:	defffd04 	addi	sp,sp,-12
 8007e28:	dc400115 	stw	r17,4(sp)
 8007e2c:	dc000015 	stw	r16,0(sp)
 8007e30:	2023883a 	mov	r17,r4
 8007e34:	040200b4 	movhi	r16,2050
 8007e38:	84207a04 	addi	r16,r16,-32280
 8007e3c:	2809883a 	mov	r4,r5
 8007e40:	300b883a 	mov	r5,r6
 8007e44:	380d883a 	mov	r6,r7
 8007e48:	dfc00215 	stw	ra,8(sp)
 8007e4c:	80000015 	stw	zero,0(r16)
 8007e50:	8011c1c0 	call	8011c1c <write>
 8007e54:	00ffffc4 	movi	r3,-1
 8007e58:	10c00526 	beq	r2,r3,8007e70 <_write_r+0x4c>
 8007e5c:	dfc00217 	ldw	ra,8(sp)
 8007e60:	dc400117 	ldw	r17,4(sp)
 8007e64:	dc000017 	ldw	r16,0(sp)
 8007e68:	dec00304 	addi	sp,sp,12
 8007e6c:	f800283a 	ret
 8007e70:	80c00017 	ldw	r3,0(r16)
 8007e74:	183ff926 	beq	r3,zero,8007e5c <_write_r+0x38>
 8007e78:	88c00015 	stw	r3,0(r17)
 8007e7c:	dfc00217 	ldw	ra,8(sp)
 8007e80:	dc400117 	ldw	r17,4(sp)
 8007e84:	dc000017 	ldw	r16,0(sp)
 8007e88:	dec00304 	addi	sp,sp,12
 8007e8c:	f800283a 	ret

08007e90 <__swsetup_r>:
 8007e90:	00820074 	movhi	r2,2049
 8007e94:	10999c04 	addi	r2,r2,26224
 8007e98:	10800017 	ldw	r2,0(r2)
 8007e9c:	defffd04 	addi	sp,sp,-12
 8007ea0:	dc400115 	stw	r17,4(sp)
 8007ea4:	dc000015 	stw	r16,0(sp)
 8007ea8:	dfc00215 	stw	ra,8(sp)
 8007eac:	2023883a 	mov	r17,r4
 8007eb0:	2821883a 	mov	r16,r5
 8007eb4:	10000226 	beq	r2,zero,8007ec0 <__swsetup_r+0x30>
 8007eb8:	10c00e17 	ldw	r3,56(r2)
 8007ebc:	18003d26 	beq	r3,zero,8007fb4 <__swsetup_r+0x124>
 8007ec0:	8080030b 	ldhu	r2,12(r16)
 8007ec4:	10c0020c 	andi	r3,r2,8
 8007ec8:	18ffffcc 	andi	r3,r3,65535
 8007ecc:	18e0001c 	xori	r3,r3,32768
 8007ed0:	18e00004 	addi	r3,r3,-32768
 8007ed4:	18001226 	beq	r3,zero,8007f20 <__swsetup_r+0x90>
 8007ed8:	80c00417 	ldw	r3,16(r16)
 8007edc:	18001f26 	beq	r3,zero,8007f5c <__swsetup_r+0xcc>
 8007ee0:	1100004c 	andi	r4,r2,1
 8007ee4:	2000261e 	bne	r4,zero,8007f80 <__swsetup_r+0xf0>
 8007ee8:	1080008c 	andi	r2,r2,2
 8007eec:	10bfffcc 	andi	r2,r2,65535
 8007ef0:	10a0001c 	xori	r2,r2,32768
 8007ef4:	10a00004 	addi	r2,r2,-32768
 8007ef8:	1000311e 	bne	r2,zero,8007fc0 <__swsetup_r+0x130>
 8007efc:	80800517 	ldw	r2,20(r16)
 8007f00:	80800215 	stw	r2,8(r16)
 8007f04:	18002326 	beq	r3,zero,8007f94 <__swsetup_r+0x104>
 8007f08:	0005883a 	mov	r2,zero
 8007f0c:	dfc00217 	ldw	ra,8(sp)
 8007f10:	dc400117 	ldw	r17,4(sp)
 8007f14:	dc000017 	ldw	r16,0(sp)
 8007f18:	dec00304 	addi	sp,sp,12
 8007f1c:	f800283a 	ret
 8007f20:	10c0040c 	andi	r3,r2,16
 8007f24:	18ffffcc 	andi	r3,r3,65535
 8007f28:	18e0001c 	xori	r3,r3,32768
 8007f2c:	18e00004 	addi	r3,r3,-32768
 8007f30:	18001e26 	beq	r3,zero,8007fac <__swsetup_r+0x11c>
 8007f34:	10c0010c 	andi	r3,r2,4
 8007f38:	18ffffcc 	andi	r3,r3,65535
 8007f3c:	18e0001c 	xori	r3,r3,32768
 8007f40:	18e00004 	addi	r3,r3,-32768
 8007f44:	1800211e 	bne	r3,zero,8007fcc <__swsetup_r+0x13c>
 8007f48:	80c00417 	ldw	r3,16(r16)
 8007f4c:	11400214 	ori	r5,r2,8
 8007f50:	8140030d 	sth	r5,12(r16)
 8007f54:	2805883a 	mov	r2,r5
 8007f58:	183fe11e 	bne	r3,zero,8007ee0 <__swsetup_r+0x50>
 8007f5c:	1140a00c 	andi	r5,r2,640
 8007f60:	01008004 	movi	r4,512
 8007f64:	293fde26 	beq	r5,r4,8007ee0 <__swsetup_r+0x50>
 8007f68:	8809883a 	mov	r4,r17
 8007f6c:	800b883a 	mov	r5,r16
 8007f70:	800355c0 	call	800355c <__smakebuf_r>
 8007f74:	8080030b 	ldhu	r2,12(r16)
 8007f78:	80c00417 	ldw	r3,16(r16)
 8007f7c:	003fd806 	br	8007ee0 <__swsetup_r+0x50>
 8007f80:	80800517 	ldw	r2,20(r16)
 8007f84:	80000215 	stw	zero,8(r16)
 8007f88:	0085c83a 	sub	r2,zero,r2
 8007f8c:	80800615 	stw	r2,24(r16)
 8007f90:	183fdd1e 	bne	r3,zero,8007f08 <__swsetup_r+0x78>
 8007f94:	8080030b 	ldhu	r2,12(r16)
 8007f98:	1080200c 	andi	r2,r2,128
 8007f9c:	10bfffcc 	andi	r2,r2,65535
 8007fa0:	10a0001c 	xori	r2,r2,32768
 8007fa4:	10a00004 	addi	r2,r2,-32768
 8007fa8:	103fd826 	beq	r2,zero,8007f0c <__swsetup_r+0x7c>
 8007fac:	00bfffc4 	movi	r2,-1
 8007fb0:	003fd606 	br	8007f0c <__swsetup_r+0x7c>
 8007fb4:	1009883a 	mov	r4,r2
 8007fb8:	80023480 	call	8002348 <__sinit>
 8007fbc:	003fc006 	br	8007ec0 <__swsetup_r+0x30>
 8007fc0:	0005883a 	mov	r2,zero
 8007fc4:	80800215 	stw	r2,8(r16)
 8007fc8:	003fce06 	br	8007f04 <__swsetup_r+0x74>
 8007fcc:	81400c17 	ldw	r5,48(r16)
 8007fd0:	28000626 	beq	r5,zero,8007fec <__swsetup_r+0x15c>
 8007fd4:	80c01004 	addi	r3,r16,64
 8007fd8:	28c00326 	beq	r5,r3,8007fe8 <__swsetup_r+0x158>
 8007fdc:	8809883a 	mov	r4,r17
 8007fe0:	8002ae00 	call	8002ae0 <_free_r>
 8007fe4:	8080030b 	ldhu	r2,12(r16)
 8007fe8:	80000c15 	stw	zero,48(r16)
 8007fec:	80c00417 	ldw	r3,16(r16)
 8007ff0:	013ff6c4 	movi	r4,-37
 8007ff4:	2084703a 	and	r2,r4,r2
 8007ff8:	80000115 	stw	zero,4(r16)
 8007ffc:	80c00015 	stw	r3,0(r16)
 8008000:	003fd206 	br	8007f4c <__swsetup_r+0xbc>

08008004 <_close_r>:
 8008004:	defffd04 	addi	sp,sp,-12
 8008008:	dc400115 	stw	r17,4(sp)
 800800c:	dc000015 	stw	r16,0(sp)
 8008010:	2023883a 	mov	r17,r4
 8008014:	040200b4 	movhi	r16,2050
 8008018:	84207a04 	addi	r16,r16,-32280
 800801c:	2809883a 	mov	r4,r5
 8008020:	dfc00215 	stw	ra,8(sp)
 8008024:	80000015 	stw	zero,0(r16)
 8008028:	80110380 	call	8011038 <close>
 800802c:	00ffffc4 	movi	r3,-1
 8008030:	10c00526 	beq	r2,r3,8008048 <_close_r+0x44>
 8008034:	dfc00217 	ldw	ra,8(sp)
 8008038:	dc400117 	ldw	r17,4(sp)
 800803c:	dc000017 	ldw	r16,0(sp)
 8008040:	dec00304 	addi	sp,sp,12
 8008044:	f800283a 	ret
 8008048:	80c00017 	ldw	r3,0(r16)
 800804c:	183ff926 	beq	r3,zero,8008034 <_close_r+0x30>
 8008050:	88c00015 	stw	r3,0(r17)
 8008054:	dfc00217 	ldw	ra,8(sp)
 8008058:	dc400117 	ldw	r17,4(sp)
 800805c:	dc000017 	ldw	r16,0(sp)
 8008060:	dec00304 	addi	sp,sp,12
 8008064:	f800283a 	ret

08008068 <quorem>:
 8008068:	defff204 	addi	sp,sp,-56
 800806c:	dd000815 	stw	r20,32(sp)
 8008070:	20800417 	ldw	r2,16(r4)
 8008074:	2d000417 	ldw	r20,16(r5)
 8008078:	dcc00715 	stw	r19,28(sp)
 800807c:	dfc00d15 	stw	ra,52(sp)
 8008080:	df000c15 	stw	fp,48(sp)
 8008084:	ddc00b15 	stw	r23,44(sp)
 8008088:	dd800a15 	stw	r22,40(sp)
 800808c:	dd400915 	stw	r21,36(sp)
 8008090:	dc800615 	stw	r18,24(sp)
 8008094:	dc400515 	stw	r17,20(sp)
 8008098:	dc000415 	stw	r16,16(sp)
 800809c:	d9400015 	stw	r5,0(sp)
 80080a0:	2027883a 	mov	r19,r4
 80080a4:	15007d16 	blt	r2,r20,800829c <quorem+0x234>
 80080a8:	a0800104 	addi	r2,r20,4
 80080ac:	1085883a 	add	r2,r2,r2
 80080b0:	1085883a 	add	r2,r2,r2
 80080b4:	28ad883a 	add	r22,r5,r2
 80080b8:	2085883a 	add	r2,r4,r2
 80080bc:	10800017 	ldw	r2,0(r2)
 80080c0:	b1400017 	ldw	r5,0(r22)
 80080c4:	a53fffc4 	addi	r20,r20,-1
 80080c8:	1009883a 	mov	r4,r2
 80080cc:	29400044 	addi	r5,r5,1
 80080d0:	d8800115 	stw	r2,4(sp)
 80080d4:	8010c2c0 	call	8010c2c <__udivsi3>
 80080d8:	1025883a 	mov	r18,r2
 80080dc:	d8800017 	ldw	r2,0(sp)
 80080e0:	9f000504 	addi	fp,r19,20
 80080e4:	14000504 	addi	r16,r2,20
 80080e8:	90003626 	beq	r18,zero,80081c4 <quorem+0x15c>
 80080ec:	802b883a 	mov	r21,r16
 80080f0:	e023883a 	mov	r17,fp
 80080f4:	0007883a 	mov	r3,zero
 80080f8:	002f883a 	mov	r23,zero
 80080fc:	a9800017 	ldw	r6,0(r21)
 8008100:	900b883a 	mov	r5,r18
 8008104:	d8c00315 	stw	r3,12(sp)
 8008108:	313fffcc 	andi	r4,r6,65535
 800810c:	d9800215 	stw	r6,8(sp)
 8008110:	8001a6c0 	call	8001a6c <__mulsi3>
 8008114:	d9800217 	ldw	r6,8(sp)
 8008118:	d8c00317 	ldw	r3,12(sp)
 800811c:	900b883a 	mov	r5,r18
 8008120:	3008d43a 	srli	r4,r6,16
 8008124:	1887883a 	add	r3,r3,r2
 8008128:	d8c00315 	stw	r3,12(sp)
 800812c:	8001a6c0 	call	8001a6c <__mulsi3>
 8008130:	89400017 	ldw	r5,0(r17)
 8008134:	d8c00317 	ldw	r3,12(sp)
 8008138:	ad400104 	addi	r21,r21,4
 800813c:	293fffcc 	andi	r4,r5,65535
 8008140:	1810d43a 	srli	r8,r3,16
 8008144:	25c9883a 	add	r4,r4,r23
 8008148:	18ffffcc 	andi	r3,r3,65535
 800814c:	20c9c83a 	sub	r4,r4,r3
 8008150:	280cd43a 	srli	r6,r5,16
 8008154:	4085883a 	add	r2,r8,r2
 8008158:	2007d43a 	srai	r3,r4,16
 800815c:	117fffcc 	andi	r5,r2,65535
 8008160:	314bc83a 	sub	r5,r6,r5
 8008164:	28cb883a 	add	r5,r5,r3
 8008168:	8940008d 	sth	r5,2(r17)
 800816c:	8900000d 	sth	r4,0(r17)
 8008170:	1006d43a 	srli	r3,r2,16
 8008174:	282fd43a 	srai	r23,r5,16
 8008178:	8c400104 	addi	r17,r17,4
 800817c:	b57fdf2e 	bgeu	r22,r21,80080fc <quorem+0x94>
 8008180:	d8c00117 	ldw	r3,4(sp)
 8008184:	18000f1e 	bne	r3,zero,80081c4 <quorem+0x15c>
 8008188:	a0800144 	addi	r2,r20,5
 800818c:	1085883a 	add	r2,r2,r2
 8008190:	1085883a 	add	r2,r2,r2
 8008194:	9887883a 	add	r3,r19,r2
 8008198:	18bfff04 	addi	r2,r3,-4
 800819c:	e080082e 	bgeu	fp,r2,80081c0 <quorem+0x158>
 80081a0:	18ffff17 	ldw	r3,-4(r3)
 80081a4:	18000326 	beq	r3,zero,80081b4 <quorem+0x14c>
 80081a8:	00000506 	br	80081c0 <quorem+0x158>
 80081ac:	10c00017 	ldw	r3,0(r2)
 80081b0:	1800031e 	bne	r3,zero,80081c0 <quorem+0x158>
 80081b4:	10bfff04 	addi	r2,r2,-4
 80081b8:	a53fffc4 	addi	r20,r20,-1
 80081bc:	e0bffb36 	bltu	fp,r2,80081ac <quorem+0x144>
 80081c0:	9d000415 	stw	r20,16(r19)
 80081c4:	d9400017 	ldw	r5,0(sp)
 80081c8:	9809883a 	mov	r4,r19
 80081cc:	800acd80 	call	800acd8 <__mcmp>
 80081d0:	10002516 	blt	r2,zero,8008268 <quorem+0x200>
 80081d4:	94800044 	addi	r18,r18,1
 80081d8:	e007883a 	mov	r3,fp
 80081dc:	000d883a 	mov	r6,zero
 80081e0:	18800017 	ldw	r2,0(r3)
 80081e4:	82000017 	ldw	r8,0(r16)
 80081e8:	84000104 	addi	r16,r16,4
 80081ec:	11ffffcc 	andi	r7,r2,65535
 80081f0:	413fffcc 	andi	r4,r8,65535
 80081f4:	398d883a 	add	r6,r7,r6
 80081f8:	310fc83a 	sub	r7,r6,r4
 80081fc:	4010d43a 	srli	r8,r8,16
 8008200:	100cd43a 	srli	r6,r2,16
 8008204:	3809d43a 	srai	r4,r7,16
 8008208:	19c0000d 	sth	r7,0(r3)
 800820c:	320dc83a 	sub	r6,r6,r8
 8008210:	310d883a 	add	r6,r6,r4
 8008214:	1980008d 	sth	r6,2(r3)
 8008218:	300dd43a 	srai	r6,r6,16
 800821c:	18c00104 	addi	r3,r3,4
 8008220:	b43fef2e 	bgeu	r22,r16,80081e0 <quorem+0x178>
 8008224:	a0800144 	addi	r2,r20,5
 8008228:	1085883a 	add	r2,r2,r2
 800822c:	1085883a 	add	r2,r2,r2
 8008230:	9885883a 	add	r2,r19,r2
 8008234:	10c00017 	ldw	r3,0(r2)
 8008238:	18000b1e 	bne	r3,zero,8008268 <quorem+0x200>
 800823c:	10ffff04 	addi	r3,r2,-4
 8008240:	e0c0082e 	bgeu	fp,r3,8008264 <quorem+0x1fc>
 8008244:	10bfff17 	ldw	r2,-4(r2)
 8008248:	10000326 	beq	r2,zero,8008258 <quorem+0x1f0>
 800824c:	00000506 	br	8008264 <quorem+0x1fc>
 8008250:	18800017 	ldw	r2,0(r3)
 8008254:	1000031e 	bne	r2,zero,8008264 <quorem+0x1fc>
 8008258:	18ffff04 	addi	r3,r3,-4
 800825c:	a53fffc4 	addi	r20,r20,-1
 8008260:	e0fffb36 	bltu	fp,r3,8008250 <quorem+0x1e8>
 8008264:	9d000415 	stw	r20,16(r19)
 8008268:	9005883a 	mov	r2,r18
 800826c:	dfc00d17 	ldw	ra,52(sp)
 8008270:	df000c17 	ldw	fp,48(sp)
 8008274:	ddc00b17 	ldw	r23,44(sp)
 8008278:	dd800a17 	ldw	r22,40(sp)
 800827c:	dd400917 	ldw	r21,36(sp)
 8008280:	dd000817 	ldw	r20,32(sp)
 8008284:	dcc00717 	ldw	r19,28(sp)
 8008288:	dc800617 	ldw	r18,24(sp)
 800828c:	dc400517 	ldw	r17,20(sp)
 8008290:	dc000417 	ldw	r16,16(sp)
 8008294:	dec00e04 	addi	sp,sp,56
 8008298:	f800283a 	ret
 800829c:	0005883a 	mov	r2,zero
 80082a0:	003ff206 	br	800826c <quorem+0x204>

080082a4 <_dtoa_r>:
 80082a4:	20801017 	ldw	r2,64(r4)
 80082a8:	deffdf04 	addi	sp,sp,-132
 80082ac:	dcc01a15 	stw	r19,104(sp)
 80082b0:	dc801915 	stw	r18,100(sp)
 80082b4:	dc401815 	stw	r17,96(sp)
 80082b8:	dc001715 	stw	r16,92(sp)
 80082bc:	dfc02015 	stw	ra,128(sp)
 80082c0:	df001f15 	stw	fp,124(sp)
 80082c4:	ddc01e15 	stw	r23,120(sp)
 80082c8:	dd801d15 	stw	r22,116(sp)
 80082cc:	dd401c15 	stw	r21,112(sp)
 80082d0:	dd001b15 	stw	r20,108(sp)
 80082d4:	d9400315 	stw	r5,12(sp)
 80082d8:	d9c00415 	stw	r7,16(sp)
 80082dc:	2021883a 	mov	r16,r4
 80082e0:	3025883a 	mov	r18,r6
 80082e4:	dcc02317 	ldw	r19,140(sp)
 80082e8:	3023883a 	mov	r17,r6
 80082ec:	10000826 	beq	r2,zero,8008310 <_dtoa_r+0x6c>
 80082f0:	20c01117 	ldw	r3,68(r4)
 80082f4:	01800044 	movi	r6,1
 80082f8:	100b883a 	mov	r5,r2
 80082fc:	30cc983a 	sll	r6,r6,r3
 8008300:	10c00115 	stw	r3,4(r2)
 8008304:	11800215 	stw	r6,8(r2)
 8008308:	800a4340 	call	800a434 <_Bfree>
 800830c:	80001015 	stw	zero,64(r16)
 8008310:	90002f16 	blt	r18,zero,80083d0 <_dtoa_r+0x12c>
 8008314:	98000015 	stw	zero,0(r19)
 8008318:	90dffc2c 	andhi	r3,r18,32752
 800831c:	009ffc34 	movhi	r2,32752
 8008320:	18801c26 	beq	r3,r2,8008394 <_dtoa_r+0xf0>
 8008324:	d9000317 	ldw	r4,12(sp)
 8008328:	880b883a 	mov	r5,r17
 800832c:	000d883a 	mov	r6,zero
 8008330:	000f883a 	mov	r7,zero
 8008334:	80107a00 	call	80107a0 <__eqdf2>
 8008338:	10002c1e 	bne	r2,zero,80083ec <_dtoa_r+0x148>
 800833c:	d9002217 	ldw	r4,136(sp)
 8008340:	d9c02417 	ldw	r7,144(sp)
 8008344:	00800044 	movi	r2,1
 8008348:	20800015 	stw	r2,0(r4)
 800834c:	38019426 	beq	r7,zero,80089a0 <_dtoa_r+0x6fc>
 8008350:	00820074 	movhi	r2,2049
 8008354:	1091cc44 	addi	r2,r2,18225
 8008358:	38800015 	stw	r2,0(r7)
 800835c:	15ffffc4 	addi	r23,r2,-1
 8008360:	b805883a 	mov	r2,r23
 8008364:	dfc02017 	ldw	ra,128(sp)
 8008368:	df001f17 	ldw	fp,124(sp)
 800836c:	ddc01e17 	ldw	r23,120(sp)
 8008370:	dd801d17 	ldw	r22,116(sp)
 8008374:	dd401c17 	ldw	r21,112(sp)
 8008378:	dd001b17 	ldw	r20,108(sp)
 800837c:	dcc01a17 	ldw	r19,104(sp)
 8008380:	dc801917 	ldw	r18,100(sp)
 8008384:	dc401817 	ldw	r17,96(sp)
 8008388:	dc001717 	ldw	r16,92(sp)
 800838c:	dec02104 	addi	sp,sp,132
 8008390:	f800283a 	ret
 8008394:	d8c02217 	ldw	r3,136(sp)
 8008398:	d9000317 	ldw	r4,12(sp)
 800839c:	0089c3c4 	movi	r2,9999
 80083a0:	18800015 	stw	r2,0(r3)
 80083a4:	20016c26 	beq	r4,zero,8008958 <_dtoa_r+0x6b4>
 80083a8:	05c20074 	movhi	r23,2049
 80083ac:	bdd28304 	addi	r23,r23,18956
 80083b0:	d9c02417 	ldw	r7,144(sp)
 80083b4:	383fea26 	beq	r7,zero,8008360 <_dtoa_r+0xbc>
 80083b8:	b88000c7 	ldb	r2,3(r23)
 80083bc:	10016d1e 	bne	r2,zero,8008974 <_dtoa_r+0x6d0>
 80083c0:	b88000c4 	addi	r2,r23,3
 80083c4:	d8c02417 	ldw	r3,144(sp)
 80083c8:	18800015 	stw	r2,0(r3)
 80083cc:	003fe406 	br	8008360 <_dtoa_r+0xbc>
 80083d0:	04600034 	movhi	r17,32768
 80083d4:	8c7fffc4 	addi	r17,r17,-1
 80083d8:	9462703a 	and	r17,r18,r17
 80083dc:	00800044 	movi	r2,1
 80083e0:	98800015 	stw	r2,0(r19)
 80083e4:	8825883a 	mov	r18,r17
 80083e8:	003fcb06 	br	8008318 <_dtoa_r+0x74>
 80083ec:	d9400317 	ldw	r5,12(sp)
 80083f0:	9028d53a 	srli	r20,r18,20
 80083f4:	d8800204 	addi	r2,sp,8
 80083f8:	d8800015 	stw	r2,0(sp)
 80083fc:	8009883a 	mov	r4,r16
 8008400:	880d883a 	mov	r6,r17
 8008404:	d9c00104 	addi	r7,sp,4
 8008408:	800b0800 	call	800b080 <__d2b>
 800840c:	a501ffcc 	andi	r20,r20,2047
 8008410:	1039883a 	mov	fp,r2
 8008414:	a001591e 	bne	r20,zero,800897c <_dtoa_r+0x6d8>
 8008418:	dd400217 	ldw	r21,8(sp)
 800841c:	dd000117 	ldw	r20,4(sp)
 8008420:	00befbc4 	movi	r2,-1041
 8008424:	ad29883a 	add	r20,r21,r20
 8008428:	a082d216 	blt	r20,r2,8008f74 <_dtoa_r+0xcd0>
 800842c:	d8c00317 	ldw	r3,12(sp)
 8008430:	013f0384 	movi	r4,-1010
 8008434:	2509c83a 	sub	r4,r4,r20
 8008438:	a0810484 	addi	r2,r20,1042
 800843c:	9124983a 	sll	r18,r18,r4
 8008440:	1884d83a 	srl	r2,r3,r2
 8008444:	9088b03a 	or	r4,r18,r2
 8008448:	80019500 	call	8001950 <__floatunsidf>
 800844c:	1009883a 	mov	r4,r2
 8008450:	017f8434 	movhi	r5,65040
 8008454:	00800044 	movi	r2,1
 8008458:	194b883a 	add	r5,r3,r5
 800845c:	a53fffc4 	addi	r20,r20,-1
 8008460:	d8800f15 	stw	r2,60(sp)
 8008464:	000d883a 	mov	r6,zero
 8008468:	01cffe34 	movhi	r7,16376
 800846c:	801045c0 	call	801045c <__subdf3>
 8008470:	1009883a 	mov	r4,r2
 8008474:	180b883a 	mov	r5,r3
 8008478:	0198dbf4 	movhi	r6,25455
 800847c:	3190d844 	addi	r6,r6,17249
 8008480:	01cff4f4 	movhi	r7,16339
 8008484:	39e1e9c4 	addi	r7,r7,-30809
 8008488:	80104bc0 	call	80104bc <__muldf3>
 800848c:	180b883a 	mov	r5,r3
 8008490:	01a2d874 	movhi	r6,35681
 8008494:	31b22cc4 	addi	r6,r6,-14157
 8008498:	01cff1f4 	movhi	r7,16327
 800849c:	39e28a04 	addi	r7,r7,-30168
 80084a0:	1009883a 	mov	r4,r2
 80084a4:	80104080 	call	8010408 <__adddf3>
 80084a8:	a009883a 	mov	r4,r20
 80084ac:	1027883a 	mov	r19,r2
 80084b0:	1825883a 	mov	r18,r3
 80084b4:	800187c0 	call	800187c <__floatsidf>
 80084b8:	1009883a 	mov	r4,r2
 80084bc:	180b883a 	mov	r5,r3
 80084c0:	019427f4 	movhi	r6,20639
 80084c4:	319e7ec4 	addi	r6,r6,31227
 80084c8:	01cff4f4 	movhi	r7,16339
 80084cc:	39d104c4 	addi	r7,r7,17427
 80084d0:	80104bc0 	call	80104bc <__muldf3>
 80084d4:	9809883a 	mov	r4,r19
 80084d8:	900b883a 	mov	r5,r18
 80084dc:	100d883a 	mov	r6,r2
 80084e0:	180f883a 	mov	r7,r3
 80084e4:	80104080 	call	8010408 <__adddf3>
 80084e8:	1009883a 	mov	r4,r2
 80084ec:	180b883a 	mov	r5,r3
 80084f0:	1027883a 	mov	r19,r2
 80084f4:	1825883a 	mov	r18,r3
 80084f8:	80109d80 	call	80109d8 <__fixdfsi>
 80084fc:	9809883a 	mov	r4,r19
 8008500:	900b883a 	mov	r5,r18
 8008504:	000d883a 	mov	r6,zero
 8008508:	000f883a 	mov	r7,zero
 800850c:	d8800615 	stw	r2,24(sp)
 8008510:	80109200 	call	8010920 <__ltdf2>
 8008514:	10027e16 	blt	r2,zero,8008f10 <_dtoa_r+0xc6c>
 8008518:	d8c00617 	ldw	r3,24(sp)
 800851c:	00800584 	movi	r2,22
 8008520:	10c26c36 	bltu	r2,r3,8008ed4 <_dtoa_r+0xc30>
 8008524:	180490fa 	slli	r2,r3,3
 8008528:	00c20074 	movhi	r3,2049
 800852c:	18d2a804 	addi	r3,r3,19104
 8008530:	d9800317 	ldw	r6,12(sp)
 8008534:	1885883a 	add	r2,r3,r2
 8008538:	11000017 	ldw	r4,0(r2)
 800853c:	11400117 	ldw	r5,4(r2)
 8008540:	880f883a 	mov	r7,r17
 8008544:	80108580 	call	8010858 <__gtdf2>
 8008548:	00828f0e 	bge	zero,r2,8008f88 <_dtoa_r+0xce4>
 800854c:	d8800617 	ldw	r2,24(sp)
 8008550:	d8000d15 	stw	zero,52(sp)
 8008554:	10bfffc4 	addi	r2,r2,-1
 8008558:	d8800615 	stw	r2,24(sp)
 800855c:	ad29c83a 	sub	r20,r21,r20
 8008560:	a53fffc4 	addi	r20,r20,-1
 8008564:	a0026616 	blt	r20,zero,8008f00 <_dtoa_r+0xc5c>
 8008568:	dd000715 	stw	r20,28(sp)
 800856c:	d8000815 	stw	zero,32(sp)
 8008570:	d8800617 	ldw	r2,24(sp)
 8008574:	10025a16 	blt	r2,zero,8008ee0 <_dtoa_r+0xc3c>
 8008578:	d8c00717 	ldw	r3,28(sp)
 800857c:	d8800b15 	stw	r2,44(sp)
 8008580:	d8000a15 	stw	zero,40(sp)
 8008584:	1887883a 	add	r3,r3,r2
 8008588:	d8c00715 	stw	r3,28(sp)
 800858c:	d9c00417 	ldw	r7,16(sp)
 8008590:	00800244 	movi	r2,9
 8008594:	11c10536 	bltu	r2,r7,80089ac <_dtoa_r+0x708>
 8008598:	00800144 	movi	r2,5
 800859c:	11c4c60e 	bge	r2,r7,80098b8 <_dtoa_r+0x1614>
 80085a0:	39ffff04 	addi	r7,r7,-4
 80085a4:	d9c00415 	stw	r7,16(sp)
 80085a8:	0027883a 	mov	r19,zero
 80085ac:	d9c00417 	ldw	r7,16(sp)
 80085b0:	008000c4 	movi	r2,3
 80085b4:	3883a226 	beq	r7,r2,8009440 <_dtoa_r+0x119c>
 80085b8:	11c2bc16 	blt	r2,r7,80090ac <_dtoa_r+0xe08>
 80085bc:	00800084 	movi	r2,2
 80085c0:	3880fb1e 	bne	r7,r2,80089b0 <_dtoa_r+0x70c>
 80085c4:	d8000c15 	stw	zero,48(sp)
 80085c8:	d9002117 	ldw	r4,132(sp)
 80085cc:	0103ae0e 	bge	zero,r4,8009488 <_dtoa_r+0x11e4>
 80085d0:	2025883a 	mov	r18,r4
 80085d4:	d9000e15 	stw	r4,56(sp)
 80085d8:	d9000915 	stw	r4,36(sp)
 80085dc:	80001115 	stw	zero,68(r16)
 80085e0:	008005c4 	movi	r2,23
 80085e4:	1484b22e 	bgeu	r2,r18,80098b0 <_dtoa_r+0x160c>
 80085e8:	00c00044 	movi	r3,1
 80085ec:	00800104 	movi	r2,4
 80085f0:	1085883a 	add	r2,r2,r2
 80085f4:	11000504 	addi	r4,r2,20
 80085f8:	180b883a 	mov	r5,r3
 80085fc:	18c00044 	addi	r3,r3,1
 8008600:	913ffb2e 	bgeu	r18,r4,80085f0 <_dtoa_r+0x34c>
 8008604:	81401115 	stw	r5,68(r16)
 8008608:	8009883a 	mov	r4,r16
 800860c:	800a38c0 	call	800a38c <_Balloc>
 8008610:	102f883a 	mov	r23,r2
 8008614:	80801015 	stw	r2,64(r16)
 8008618:	00800384 	movi	r2,14
 800861c:	1480f036 	bltu	r2,r18,80089e0 <_dtoa_r+0x73c>
 8008620:	9800ef26 	beq	r19,zero,80089e0 <_dtoa_r+0x73c>
 8008624:	d8800617 	ldw	r2,24(sp)
 8008628:	00839c0e 	bge	zero,r2,800949c <_dtoa_r+0x11f8>
 800862c:	d8c00617 	ldw	r3,24(sp)
 8008630:	108003cc 	andi	r2,r2,15
 8008634:	100490fa 	slli	r2,r2,3
 8008638:	182bd13a 	srai	r21,r3,4
 800863c:	00c20074 	movhi	r3,2049
 8008640:	18d2a804 	addi	r3,r3,19104
 8008644:	1885883a 	add	r2,r3,r2
 8008648:	a8c0040c 	andi	r3,r21,16
 800864c:	12800017 	ldw	r10,0(r2)
 8008650:	15800117 	ldw	r22,4(r2)
 8008654:	18038726 	beq	r3,zero,8009474 <_dtoa_r+0x11d0>
 8008658:	00820074 	movhi	r2,2049
 800865c:	10929e04 	addi	r2,r2,19064
 8008660:	11800817 	ldw	r6,32(r2)
 8008664:	11c00917 	ldw	r7,36(r2)
 8008668:	d9000317 	ldw	r4,12(sp)
 800866c:	880b883a 	mov	r5,r17
 8008670:	da801515 	stw	r10,84(sp)
 8008674:	80016c80 	call	80016c8 <__divdf3>
 8008678:	da801517 	ldw	r10,84(sp)
 800867c:	d8801015 	stw	r2,64(sp)
 8008680:	1829883a 	mov	r20,r3
 8008684:	ad4003cc 	andi	r21,r21,15
 8008688:	048000c4 	movi	r18,3
 800868c:	a8001126 	beq	r21,zero,80086d4 <_dtoa_r+0x430>
 8008690:	04c20074 	movhi	r19,2049
 8008694:	9cd29e04 	addi	r19,r19,19064
 8008698:	5005883a 	mov	r2,r10
 800869c:	b007883a 	mov	r3,r22
 80086a0:	a980004c 	andi	r6,r21,1
 80086a4:	1009883a 	mov	r4,r2
 80086a8:	a82bd07a 	srai	r21,r21,1
 80086ac:	180b883a 	mov	r5,r3
 80086b0:	30000426 	beq	r6,zero,80086c4 <_dtoa_r+0x420>
 80086b4:	99800017 	ldw	r6,0(r19)
 80086b8:	99c00117 	ldw	r7,4(r19)
 80086bc:	94800044 	addi	r18,r18,1
 80086c0:	80104bc0 	call	80104bc <__muldf3>
 80086c4:	9cc00204 	addi	r19,r19,8
 80086c8:	a83ff51e 	bne	r21,zero,80086a0 <_dtoa_r+0x3fc>
 80086cc:	1015883a 	mov	r10,r2
 80086d0:	182d883a 	mov	r22,r3
 80086d4:	d9001017 	ldw	r4,64(sp)
 80086d8:	a00b883a 	mov	r5,r20
 80086dc:	500d883a 	mov	r6,r10
 80086e0:	b00f883a 	mov	r7,r22
 80086e4:	80016c80 	call	80016c8 <__divdf3>
 80086e8:	1027883a 	mov	r19,r2
 80086ec:	1829883a 	mov	r20,r3
 80086f0:	d8c00d17 	ldw	r3,52(sp)
 80086f4:	18000626 	beq	r3,zero,8008710 <_dtoa_r+0x46c>
 80086f8:	9809883a 	mov	r4,r19
 80086fc:	a00b883a 	mov	r5,r20
 8008700:	000d883a 	mov	r6,zero
 8008704:	01cffc34 	movhi	r7,16368
 8008708:	80109200 	call	8010920 <__ltdf2>
 800870c:	10040e16 	blt	r2,zero,8009748 <_dtoa_r+0x14a4>
 8008710:	9009883a 	mov	r4,r18
 8008714:	800187c0 	call	800187c <__floatsidf>
 8008718:	1009883a 	mov	r4,r2
 800871c:	180b883a 	mov	r5,r3
 8008720:	980d883a 	mov	r6,r19
 8008724:	a00f883a 	mov	r7,r20
 8008728:	80104bc0 	call	80104bc <__muldf3>
 800872c:	1009883a 	mov	r4,r2
 8008730:	180b883a 	mov	r5,r3
 8008734:	000d883a 	mov	r6,zero
 8008738:	01d00734 	movhi	r7,16412
 800873c:	80104080 	call	8010408 <__adddf3>
 8008740:	057f3034 	movhi	r21,64704
 8008744:	1d6b883a 	add	r21,r3,r21
 8008748:	d8c00917 	ldw	r3,36(sp)
 800874c:	1025883a 	mov	r18,r2
 8008750:	18031f26 	beq	r3,zero,80093d0 <_dtoa_r+0x112c>
 8008754:	d8800617 	ldw	r2,24(sp)
 8008758:	dac00917 	ldw	r11,36(sp)
 800875c:	d8801315 	stw	r2,76(sp)
 8008760:	d8c00c17 	ldw	r3,48(sp)
 8008764:	18039026 	beq	r3,zero,80095a8 <_dtoa_r+0x1304>
 8008768:	58bfffc4 	addi	r2,r11,-1
 800876c:	100490fa 	slli	r2,r2,3
 8008770:	00c20074 	movhi	r3,2049
 8008774:	18d2a804 	addi	r3,r3,19104
 8008778:	0009883a 	mov	r4,zero
 800877c:	1885883a 	add	r2,r3,r2
 8008780:	11800017 	ldw	r6,0(r2)
 8008784:	11c00117 	ldw	r7,4(r2)
 8008788:	014ff834 	movhi	r5,16352
 800878c:	dac01615 	stw	r11,88(sp)
 8008790:	80016c80 	call	80016c8 <__divdf3>
 8008794:	900d883a 	mov	r6,r18
 8008798:	a80f883a 	mov	r7,r21
 800879c:	1009883a 	mov	r4,r2
 80087a0:	180b883a 	mov	r5,r3
 80087a4:	801045c0 	call	801045c <__subdf3>
 80087a8:	a00b883a 	mov	r5,r20
 80087ac:	9809883a 	mov	r4,r19
 80087b0:	182b883a 	mov	r21,r3
 80087b4:	d8801015 	stw	r2,64(sp)
 80087b8:	80109d80 	call	80109d8 <__fixdfsi>
 80087bc:	1009883a 	mov	r4,r2
 80087c0:	d8801515 	stw	r2,84(sp)
 80087c4:	800187c0 	call	800187c <__floatsidf>
 80087c8:	9809883a 	mov	r4,r19
 80087cc:	a00b883a 	mov	r5,r20
 80087d0:	100d883a 	mov	r6,r2
 80087d4:	180f883a 	mov	r7,r3
 80087d8:	801045c0 	call	801045c <__subdf3>
 80087dc:	da401517 	ldw	r9,84(sp)
 80087e0:	d9001017 	ldw	r4,64(sp)
 80087e4:	a80b883a 	mov	r5,r21
 80087e8:	4d000c04 	addi	r20,r9,48
 80087ec:	bd000005 	stb	r20,0(r23)
 80087f0:	100d883a 	mov	r6,r2
 80087f4:	180f883a 	mov	r7,r3
 80087f8:	bd800044 	addi	r22,r23,1
 80087fc:	1025883a 	mov	r18,r2
 8008800:	1827883a 	mov	r19,r3
 8008804:	80108580 	call	8010858 <__gtdf2>
 8008808:	00842216 	blt	zero,r2,8009894 <_dtoa_r+0x15f0>
 800880c:	0009883a 	mov	r4,zero
 8008810:	014ffc34 	movhi	r5,16368
 8008814:	900d883a 	mov	r6,r18
 8008818:	980f883a 	mov	r7,r19
 800881c:	801045c0 	call	801045c <__subdf3>
 8008820:	d9001017 	ldw	r4,64(sp)
 8008824:	a80b883a 	mov	r5,r21
 8008828:	100d883a 	mov	r6,r2
 800882c:	180f883a 	mov	r7,r3
 8008830:	80108580 	call	8010858 <__gtdf2>
 8008834:	dac01617 	ldw	r11,88(sp)
 8008838:	00841316 	blt	zero,r2,8009888 <_dtoa_r+0x15e4>
 800883c:	00800044 	movi	r2,1
 8008840:	12c0670e 	bge	r2,r11,80089e0 <_dtoa_r+0x73c>
 8008844:	bad7883a 	add	r11,r23,r11
 8008848:	df001115 	stw	fp,68(sp)
 800884c:	dc401215 	stw	r17,72(sp)
 8008850:	5839883a 	mov	fp,r11
 8008854:	dc401017 	ldw	r17,64(sp)
 8008858:	00000806 	br	800887c <_dtoa_r+0x5d8>
 800885c:	801045c0 	call	801045c <__subdf3>
 8008860:	1009883a 	mov	r4,r2
 8008864:	180b883a 	mov	r5,r3
 8008868:	880d883a 	mov	r6,r17
 800886c:	a80f883a 	mov	r7,r21
 8008870:	80109200 	call	8010920 <__ltdf2>
 8008874:	1003ee16 	blt	r2,zero,8009830 <_dtoa_r+0x158c>
 8008878:	b703f126 	beq	r22,fp,8009840 <_dtoa_r+0x159c>
 800887c:	8809883a 	mov	r4,r17
 8008880:	a80b883a 	mov	r5,r21
 8008884:	000d883a 	mov	r6,zero
 8008888:	01d00934 	movhi	r7,16420
 800888c:	80104bc0 	call	80104bc <__muldf3>
 8008890:	000d883a 	mov	r6,zero
 8008894:	01d00934 	movhi	r7,16420
 8008898:	9009883a 	mov	r4,r18
 800889c:	980b883a 	mov	r5,r19
 80088a0:	1023883a 	mov	r17,r2
 80088a4:	182b883a 	mov	r21,r3
 80088a8:	80104bc0 	call	80104bc <__muldf3>
 80088ac:	180b883a 	mov	r5,r3
 80088b0:	1009883a 	mov	r4,r2
 80088b4:	1825883a 	mov	r18,r3
 80088b8:	1027883a 	mov	r19,r2
 80088bc:	80109d80 	call	80109d8 <__fixdfsi>
 80088c0:	1009883a 	mov	r4,r2
 80088c4:	1029883a 	mov	r20,r2
 80088c8:	800187c0 	call	800187c <__floatsidf>
 80088cc:	9809883a 	mov	r4,r19
 80088d0:	900b883a 	mov	r5,r18
 80088d4:	100d883a 	mov	r6,r2
 80088d8:	180f883a 	mov	r7,r3
 80088dc:	801045c0 	call	801045c <__subdf3>
 80088e0:	a5000c04 	addi	r20,r20,48
 80088e4:	b5000005 	stb	r20,0(r22)
 80088e8:	1009883a 	mov	r4,r2
 80088ec:	180b883a 	mov	r5,r3
 80088f0:	880d883a 	mov	r6,r17
 80088f4:	a80f883a 	mov	r7,r21
 80088f8:	1025883a 	mov	r18,r2
 80088fc:	1827883a 	mov	r19,r3
 8008900:	80109200 	call	8010920 <__ltdf2>
 8008904:	b5800044 	addi	r22,r22,1
 8008908:	0009883a 	mov	r4,zero
 800890c:	014ffc34 	movhi	r5,16368
 8008910:	900d883a 	mov	r6,r18
 8008914:	980f883a 	mov	r7,r19
 8008918:	103fd00e 	bge	r2,zero,800885c <_dtoa_r+0x5b8>
 800891c:	d9001317 	ldw	r4,76(sp)
 8008920:	df001117 	ldw	fp,68(sp)
 8008924:	d9000615 	stw	r4,24(sp)
 8008928:	8009883a 	mov	r4,r16
 800892c:	e00b883a 	mov	r5,fp
 8008930:	800a4340 	call	800a434 <_Bfree>
 8008934:	d9c00617 	ldw	r7,24(sp)
 8008938:	d8c02217 	ldw	r3,136(sp)
 800893c:	d9002417 	ldw	r4,144(sp)
 8008940:	b0000005 	stb	zero,0(r22)
 8008944:	38800044 	addi	r2,r7,1
 8008948:	18800015 	stw	r2,0(r3)
 800894c:	203e8426 	beq	r4,zero,8008360 <_dtoa_r+0xbc>
 8008950:	25800015 	stw	r22,0(r4)
 8008954:	003e8206 	br	8008360 <_dtoa_r+0xbc>
 8008958:	00800434 	movhi	r2,16
 800895c:	10bfffc4 	addi	r2,r2,-1
 8008960:	90a4703a 	and	r18,r18,r2
 8008964:	903e901e 	bne	r18,zero,80083a8 <_dtoa_r+0x104>
 8008968:	05c20074 	movhi	r23,2049
 800896c:	bdd28004 	addi	r23,r23,18944
 8008970:	003e8f06 	br	80083b0 <_dtoa_r+0x10c>
 8008974:	b8800204 	addi	r2,r23,8
 8008978:	003e9206 	br	80083c4 <_dtoa_r+0x120>
 800897c:	01400434 	movhi	r5,16
 8008980:	297fffc4 	addi	r5,r5,-1
 8008984:	894a703a 	and	r5,r17,r5
 8008988:	d9000317 	ldw	r4,12(sp)
 800898c:	294ffc34 	orhi	r5,r5,16368
 8008990:	a53f0044 	addi	r20,r20,-1023
 8008994:	dd400217 	ldw	r21,8(sp)
 8008998:	d8000f15 	stw	zero,60(sp)
 800899c:	003eb106 	br	8008464 <_dtoa_r+0x1c0>
 80089a0:	05c20074 	movhi	r23,2049
 80089a4:	bdd1cc04 	addi	r23,r23,18224
 80089a8:	003e6d06 	br	8008360 <_dtoa_r+0xbc>
 80089ac:	d8000415 	stw	zero,16(sp)
 80089b0:	80001115 	stw	zero,68(r16)
 80089b4:	8009883a 	mov	r4,r16
 80089b8:	000b883a 	mov	r5,zero
 80089bc:	800a38c0 	call	800a38c <_Balloc>
 80089c0:	01ffffc4 	movi	r7,-1
 80089c4:	102f883a 	mov	r23,r2
 80089c8:	80801015 	stw	r2,64(r16)
 80089cc:	00800044 	movi	r2,1
 80089d0:	d9c00915 	stw	r7,36(sp)
 80089d4:	d8002115 	stw	zero,132(sp)
 80089d8:	d9c00e15 	stw	r7,56(sp)
 80089dc:	d8800c15 	stw	r2,48(sp)
 80089e0:	d8800117 	ldw	r2,4(sp)
 80089e4:	10008b16 	blt	r2,zero,8008c14 <_dtoa_r+0x970>
 80089e8:	d9000617 	ldw	r4,24(sp)
 80089ec:	00c00384 	movi	r3,14
 80089f0:	19008816 	blt	r3,r4,8008c14 <_dtoa_r+0x970>
 80089f4:	200490fa 	slli	r2,r4,3
 80089f8:	d9c02117 	ldw	r7,132(sp)
 80089fc:	00c20074 	movhi	r3,2049
 8008a00:	18d2a804 	addi	r3,r3,19104
 8008a04:	1885883a 	add	r2,r3,r2
 8008a08:	14800017 	ldw	r18,0(r2)
 8008a0c:	14c00117 	ldw	r19,4(r2)
 8008a10:	3801c916 	blt	r7,zero,8009138 <_dtoa_r+0xe94>
 8008a14:	d9000317 	ldw	r4,12(sp)
 8008a18:	900d883a 	mov	r6,r18
 8008a1c:	980f883a 	mov	r7,r19
 8008a20:	880b883a 	mov	r5,r17
 8008a24:	80016c80 	call	80016c8 <__divdf3>
 8008a28:	180b883a 	mov	r5,r3
 8008a2c:	1009883a 	mov	r4,r2
 8008a30:	80109d80 	call	80109d8 <__fixdfsi>
 8008a34:	1009883a 	mov	r4,r2
 8008a38:	102b883a 	mov	r21,r2
 8008a3c:	800187c0 	call	800187c <__floatsidf>
 8008a40:	1009883a 	mov	r4,r2
 8008a44:	180b883a 	mov	r5,r3
 8008a48:	900d883a 	mov	r6,r18
 8008a4c:	980f883a 	mov	r7,r19
 8008a50:	80104bc0 	call	80104bc <__muldf3>
 8008a54:	d9000317 	ldw	r4,12(sp)
 8008a58:	880b883a 	mov	r5,r17
 8008a5c:	100d883a 	mov	r6,r2
 8008a60:	180f883a 	mov	r7,r3
 8008a64:	801045c0 	call	801045c <__subdf3>
 8008a68:	d9c00917 	ldw	r7,36(sp)
 8008a6c:	1009883a 	mov	r4,r2
 8008a70:	a8800c04 	addi	r2,r21,48
 8008a74:	b8800005 	stb	r2,0(r23)
 8008a78:	01800044 	movi	r6,1
 8008a7c:	180b883a 	mov	r5,r3
 8008a80:	2005883a 	mov	r2,r4
 8008a84:	bd800044 	addi	r22,r23,1
 8008a88:	39803726 	beq	r7,r6,8008b68 <_dtoa_r+0x8c4>
 8008a8c:	000d883a 	mov	r6,zero
 8008a90:	01d00934 	movhi	r7,16420
 8008a94:	80104bc0 	call	80104bc <__muldf3>
 8008a98:	1009883a 	mov	r4,r2
 8008a9c:	180b883a 	mov	r5,r3
 8008aa0:	000d883a 	mov	r6,zero
 8008aa4:	000f883a 	mov	r7,zero
 8008aa8:	1029883a 	mov	r20,r2
 8008aac:	1823883a 	mov	r17,r3
 8008ab0:	80107a00 	call	80107a0 <__eqdf2>
 8008ab4:	103f9c26 	beq	r2,zero,8008928 <_dtoa_r+0x684>
 8008ab8:	dd400917 	ldw	r21,36(sp)
 8008abc:	dc000415 	stw	r16,16(sp)
 8008ac0:	00000906 	br	8008ae8 <_dtoa_r+0x844>
 8008ac4:	80104bc0 	call	80104bc <__muldf3>
 8008ac8:	1009883a 	mov	r4,r2
 8008acc:	180b883a 	mov	r5,r3
 8008ad0:	000d883a 	mov	r6,zero
 8008ad4:	000f883a 	mov	r7,zero
 8008ad8:	1029883a 	mov	r20,r2
 8008adc:	1823883a 	mov	r17,r3
 8008ae0:	80107a00 	call	80107a0 <__eqdf2>
 8008ae4:	10022926 	beq	r2,zero,800938c <_dtoa_r+0x10e8>
 8008ae8:	900d883a 	mov	r6,r18
 8008aec:	980f883a 	mov	r7,r19
 8008af0:	a009883a 	mov	r4,r20
 8008af4:	880b883a 	mov	r5,r17
 8008af8:	80016c80 	call	80016c8 <__divdf3>
 8008afc:	180b883a 	mov	r5,r3
 8008b00:	1009883a 	mov	r4,r2
 8008b04:	80109d80 	call	80109d8 <__fixdfsi>
 8008b08:	1009883a 	mov	r4,r2
 8008b0c:	1021883a 	mov	r16,r2
 8008b10:	800187c0 	call	800187c <__floatsidf>
 8008b14:	1009883a 	mov	r4,r2
 8008b18:	180b883a 	mov	r5,r3
 8008b1c:	900d883a 	mov	r6,r18
 8008b20:	980f883a 	mov	r7,r19
 8008b24:	80104bc0 	call	80104bc <__muldf3>
 8008b28:	a009883a 	mov	r4,r20
 8008b2c:	880b883a 	mov	r5,r17
 8008b30:	100d883a 	mov	r6,r2
 8008b34:	180f883a 	mov	r7,r3
 8008b38:	801045c0 	call	801045c <__subdf3>
 8008b3c:	82400c04 	addi	r9,r16,48
 8008b40:	b2400005 	stb	r9,0(r22)
 8008b44:	b5800044 	addi	r22,r22,1
 8008b48:	b5d3c83a 	sub	r9,r22,r23
 8008b4c:	000d883a 	mov	r6,zero
 8008b50:	01d00934 	movhi	r7,16420
 8008b54:	1009883a 	mov	r4,r2
 8008b58:	180b883a 	mov	r5,r3
 8008b5c:	aa7fd91e 	bne	r21,r9,8008ac4 <_dtoa_r+0x820>
 8008b60:	802b883a 	mov	r21,r16
 8008b64:	dc000417 	ldw	r16,16(sp)
 8008b68:	1009883a 	mov	r4,r2
 8008b6c:	180b883a 	mov	r5,r3
 8008b70:	100d883a 	mov	r6,r2
 8008b74:	180f883a 	mov	r7,r3
 8008b78:	80104080 	call	8010408 <__adddf3>
 8008b7c:	9009883a 	mov	r4,r18
 8008b80:	980b883a 	mov	r5,r19
 8008b84:	100d883a 	mov	r6,r2
 8008b88:	180f883a 	mov	r7,r3
 8008b8c:	1023883a 	mov	r17,r2
 8008b90:	1829883a 	mov	r20,r3
 8008b94:	80109200 	call	8010920 <__ltdf2>
 8008b98:	10000816 	blt	r2,zero,8008bbc <_dtoa_r+0x918>
 8008b9c:	9009883a 	mov	r4,r18
 8008ba0:	980b883a 	mov	r5,r19
 8008ba4:	880d883a 	mov	r6,r17
 8008ba8:	a00f883a 	mov	r7,r20
 8008bac:	80107a00 	call	80107a0 <__eqdf2>
 8008bb0:	103f5d1e 	bne	r2,zero,8008928 <_dtoa_r+0x684>
 8008bb4:	ad40004c 	andi	r21,r21,1
 8008bb8:	a83f5b26 	beq	r21,zero,8008928 <_dtoa_r+0x684>
 8008bbc:	b53fffc3 	ldbu	r20,-1(r22)
 8008bc0:	b0ffff84 	addi	r3,r22,-2
 8008bc4:	01400e44 	movi	r5,57
 8008bc8:	00000306 	br	8008bd8 <_dtoa_r+0x934>
 8008bcc:	1d000003 	ldbu	r20,0(r3)
 8008bd0:	102d883a 	mov	r22,r2
 8008bd4:	18ffffc4 	addi	r3,r3,-1
 8008bd8:	a1003fcc 	andi	r4,r20,255
 8008bdc:	2100201c 	xori	r4,r4,128
 8008be0:	213fe004 	addi	r4,r4,-128
 8008be4:	b0bfffc4 	addi	r2,r22,-1
 8008be8:	2142ca1e 	bne	r4,r5,8009714 <_dtoa_r+0x1470>
 8008bec:	b8bff71e 	bne	r23,r2,8008bcc <_dtoa_r+0x928>
 8008bf0:	d8800617 	ldw	r2,24(sp)
 8008bf4:	05000c44 	movi	r20,49
 8008bf8:	10800044 	addi	r2,r2,1
 8008bfc:	d8800615 	stw	r2,24(sp)
 8008c00:	00800c04 	movi	r2,48
 8008c04:	b8800005 	stb	r2,0(r23)
 8008c08:	b805883a 	mov	r2,r23
 8008c0c:	15000005 	stb	r20,0(r2)
 8008c10:	003f4506 	br	8008928 <_dtoa_r+0x684>
 8008c14:	d9c00c17 	ldw	r7,48(sp)
 8008c18:	3800c926 	beq	r7,zero,8008f40 <_dtoa_r+0xc9c>
 8008c1c:	d9c00417 	ldw	r7,16(sp)
 8008c20:	00c00044 	movi	r3,1
 8008c24:	19c16c0e 	bge	r3,r7,80091d8 <_dtoa_r+0xf34>
 8008c28:	d9000917 	ldw	r4,36(sp)
 8008c2c:	d9c00a17 	ldw	r7,40(sp)
 8008c30:	24ffffc4 	addi	r19,r4,-1
 8008c34:	3cc20716 	blt	r7,r19,8009454 <_dtoa_r+0x11b0>
 8008c38:	3ce7c83a 	sub	r19,r7,r19
 8008c3c:	d9c00917 	ldw	r7,36(sp)
 8008c40:	3802ae16 	blt	r7,zero,80096fc <_dtoa_r+0x1458>
 8008c44:	dc800817 	ldw	r18,32(sp)
 8008c48:	d8800917 	ldw	r2,36(sp)
 8008c4c:	d8c00817 	ldw	r3,32(sp)
 8008c50:	d9c00717 	ldw	r7,28(sp)
 8008c54:	8009883a 	mov	r4,r16
 8008c58:	1887883a 	add	r3,r3,r2
 8008c5c:	388f883a 	add	r7,r7,r2
 8008c60:	01400044 	movi	r5,1
 8008c64:	d8c00815 	stw	r3,32(sp)
 8008c68:	d9c00715 	stw	r7,28(sp)
 8008c6c:	800a7bc0 	call	800a7bc <__i2b>
 8008c70:	102b883a 	mov	r21,r2
 8008c74:	90000a26 	beq	r18,zero,8008ca0 <_dtoa_r+0x9fc>
 8008c78:	d8800717 	ldw	r2,28(sp)
 8008c7c:	0080080e 	bge	zero,r2,8008ca0 <_dtoa_r+0x9fc>
 8008c80:	90812b16 	blt	r18,r2,8009130 <_dtoa_r+0xe8c>
 8008c84:	d8c00817 	ldw	r3,32(sp)
 8008c88:	d9000717 	ldw	r4,28(sp)
 8008c8c:	90a5c83a 	sub	r18,r18,r2
 8008c90:	1887c83a 	sub	r3,r3,r2
 8008c94:	2089c83a 	sub	r4,r4,r2
 8008c98:	d8c00815 	stw	r3,32(sp)
 8008c9c:	d9000715 	stw	r4,28(sp)
 8008ca0:	d9c00a17 	ldw	r7,40(sp)
 8008ca4:	01c0140e 	bge	zero,r7,8008cf8 <_dtoa_r+0xa54>
 8008ca8:	d8800c17 	ldw	r2,48(sp)
 8008cac:	1001de26 	beq	r2,zero,8009428 <_dtoa_r+0x1184>
 8008cb0:	04c00e0e 	bge	zero,r19,8008cec <_dtoa_r+0xa48>
 8008cb4:	a80b883a 	mov	r5,r21
 8008cb8:	8009883a 	mov	r4,r16
 8008cbc:	980d883a 	mov	r6,r19
 8008cc0:	800aa500 	call	800aa50 <__pow5mult>
 8008cc4:	e00d883a 	mov	r6,fp
 8008cc8:	8009883a 	mov	r4,r16
 8008ccc:	100b883a 	mov	r5,r2
 8008cd0:	102b883a 	mov	r21,r2
 8008cd4:	800a7f80 	call	800a7f8 <__multiply>
 8008cd8:	1029883a 	mov	r20,r2
 8008cdc:	e00b883a 	mov	r5,fp
 8008ce0:	8009883a 	mov	r4,r16
 8008ce4:	800a4340 	call	800a434 <_Bfree>
 8008ce8:	a039883a 	mov	fp,r20
 8008cec:	d8c00a17 	ldw	r3,40(sp)
 8008cf0:	1ccdc83a 	sub	r6,r3,r19
 8008cf4:	3001291e 	bne	r6,zero,800919c <_dtoa_r+0xef8>
 8008cf8:	8009883a 	mov	r4,r16
 8008cfc:	01400044 	movi	r5,1
 8008d00:	800a7bc0 	call	800a7bc <__i2b>
 8008d04:	d9000b17 	ldw	r4,44(sp)
 8008d08:	1029883a 	mov	r20,r2
 8008d0c:	0100050e 	bge	zero,r4,8008d24 <_dtoa_r+0xa80>
 8008d10:	d9800b17 	ldw	r6,44(sp)
 8008d14:	8009883a 	mov	r4,r16
 8008d18:	100b883a 	mov	r5,r2
 8008d1c:	800aa500 	call	800aa50 <__pow5mult>
 8008d20:	1029883a 	mov	r20,r2
 8008d24:	d9c00417 	ldw	r7,16(sp)
 8008d28:	00800044 	movi	r2,1
 8008d2c:	11c0f00e 	bge	r2,r7,80090f0 <_dtoa_r+0xe4c>
 8008d30:	0023883a 	mov	r17,zero
 8008d34:	d8800b17 	ldw	r2,44(sp)
 8008d38:	1001741e 	bne	r2,zero,800930c <_dtoa_r+0x1068>
 8008d3c:	00800044 	movi	r2,1
 8008d40:	d8c00717 	ldw	r3,28(sp)
 8008d44:	10c5883a 	add	r2,r2,r3
 8008d48:	108007cc 	andi	r2,r2,31
 8008d4c:	10008026 	beq	r2,zero,8008f50 <_dtoa_r+0xcac>
 8008d50:	01000804 	movi	r4,32
 8008d54:	2089c83a 	sub	r4,r4,r2
 8008d58:	00c00104 	movi	r3,4
 8008d5c:	1902d00e 	bge	r3,r4,80098a0 <_dtoa_r+0x15fc>
 8008d60:	d9000817 	ldw	r4,32(sp)
 8008d64:	d9c00717 	ldw	r7,28(sp)
 8008d68:	00c00704 	movi	r3,28
 8008d6c:	1885c83a 	sub	r2,r3,r2
 8008d70:	2089883a 	add	r4,r4,r2
 8008d74:	388f883a 	add	r7,r7,r2
 8008d78:	d9000815 	stw	r4,32(sp)
 8008d7c:	90a5883a 	add	r18,r18,r2
 8008d80:	d9c00715 	stw	r7,28(sp)
 8008d84:	d9c00817 	ldw	r7,32(sp)
 8008d88:	01c0050e 	bge	zero,r7,8008da0 <_dtoa_r+0xafc>
 8008d8c:	e00b883a 	mov	r5,fp
 8008d90:	8009883a 	mov	r4,r16
 8008d94:	380d883a 	mov	r6,r7
 8008d98:	800ab7c0 	call	800ab7c <__lshift>
 8008d9c:	1039883a 	mov	fp,r2
 8008da0:	d8800717 	ldw	r2,28(sp)
 8008da4:	0080050e 	bge	zero,r2,8008dbc <_dtoa_r+0xb18>
 8008da8:	a00b883a 	mov	r5,r20
 8008dac:	8009883a 	mov	r4,r16
 8008db0:	100d883a 	mov	r6,r2
 8008db4:	800ab7c0 	call	800ab7c <__lshift>
 8008db8:	1029883a 	mov	r20,r2
 8008dbc:	d8c00d17 	ldw	r3,52(sp)
 8008dc0:	1801401e 	bne	r3,zero,80092c4 <_dtoa_r+0x1020>
 8008dc4:	d8800917 	ldw	r2,36(sp)
 8008dc8:	00815a0e 	bge	zero,r2,8009334 <_dtoa_r+0x1090>
 8008dcc:	d8c00c17 	ldw	r3,48(sp)
 8008dd0:	18006f1e 	bne	r3,zero,8008f90 <_dtoa_r+0xcec>
 8008dd4:	b823883a 	mov	r17,r23
 8008dd8:	dc800917 	ldw	r18,36(sp)
 8008ddc:	00000206 	br	8008de8 <_dtoa_r+0xb44>
 8008de0:	800a45c0 	call	800a45c <__multadd>
 8008de4:	1039883a 	mov	fp,r2
 8008de8:	e009883a 	mov	r4,fp
 8008dec:	a00b883a 	mov	r5,r20
 8008df0:	80080680 	call	8008068 <quorem>
 8008df4:	10800c04 	addi	r2,r2,48
 8008df8:	88800005 	stb	r2,0(r17)
 8008dfc:	8c400044 	addi	r17,r17,1
 8008e00:	8dc7c83a 	sub	r3,r17,r23
 8008e04:	8009883a 	mov	r4,r16
 8008e08:	e00b883a 	mov	r5,fp
 8008e0c:	01800284 	movi	r6,10
 8008e10:	000f883a 	mov	r7,zero
 8008e14:	1cbff216 	blt	r3,r18,8008de0 <_dtoa_r+0xb3c>
 8008e18:	dd800917 	ldw	r22,36(sp)
 8008e1c:	1007883a 	mov	r3,r2
 8008e20:	05823a0e 	bge	zero,r22,800970c <_dtoa_r+0x1468>
 8008e24:	bdad883a 	add	r22,r23,r22
 8008e28:	0023883a 	mov	r17,zero
 8008e2c:	e00b883a 	mov	r5,fp
 8008e30:	01800044 	movi	r6,1
 8008e34:	8009883a 	mov	r4,r16
 8008e38:	d8c01515 	stw	r3,84(sp)
 8008e3c:	800ab7c0 	call	800ab7c <__lshift>
 8008e40:	1009883a 	mov	r4,r2
 8008e44:	a00b883a 	mov	r5,r20
 8008e48:	1039883a 	mov	fp,r2
 8008e4c:	800acd80 	call	800acd8 <__mcmp>
 8008e50:	d8c01517 	ldw	r3,84(sp)
 8008e54:	0080d60e 	bge	zero,r2,80091b0 <_dtoa_r+0xf0c>
 8008e58:	b13fffc3 	ldbu	r4,-1(r22)
 8008e5c:	b0ffff84 	addi	r3,r22,-2
 8008e60:	01800e44 	movi	r6,57
 8008e64:	00000306 	br	8008e74 <_dtoa_r+0xbd0>
 8008e68:	19000003 	ldbu	r4,0(r3)
 8008e6c:	102d883a 	mov	r22,r2
 8008e70:	18ffffc4 	addi	r3,r3,-1
 8008e74:	21403fcc 	andi	r5,r4,255
 8008e78:	2940201c 	xori	r5,r5,128
 8008e7c:	297fe004 	addi	r5,r5,-128
 8008e80:	b0bfffc4 	addi	r2,r22,-1
 8008e84:	2981a71e 	bne	r5,r6,8009524 <_dtoa_r+0x1280>
 8008e88:	b8bff71e 	bne	r23,r2,8008e68 <_dtoa_r+0xbc4>
 8008e8c:	d8800617 	ldw	r2,24(sp)
 8008e90:	10800044 	addi	r2,r2,1
 8008e94:	d8800615 	stw	r2,24(sp)
 8008e98:	00800c44 	movi	r2,49
 8008e9c:	b8800005 	stb	r2,0(r23)
 8008ea0:	8009883a 	mov	r4,r16
 8008ea4:	a00b883a 	mov	r5,r20
 8008ea8:	800a4340 	call	800a434 <_Bfree>
 8008eac:	a83e9e26 	beq	r21,zero,8008928 <_dtoa_r+0x684>
 8008eb0:	88000426 	beq	r17,zero,8008ec4 <_dtoa_r+0xc20>
 8008eb4:	8d400326 	beq	r17,r21,8008ec4 <_dtoa_r+0xc20>
 8008eb8:	8009883a 	mov	r4,r16
 8008ebc:	880b883a 	mov	r5,r17
 8008ec0:	800a4340 	call	800a434 <_Bfree>
 8008ec4:	8009883a 	mov	r4,r16
 8008ec8:	a80b883a 	mov	r5,r21
 8008ecc:	800a4340 	call	800a434 <_Bfree>
 8008ed0:	003e9506 	br	8008928 <_dtoa_r+0x684>
 8008ed4:	00c00044 	movi	r3,1
 8008ed8:	d8c00d15 	stw	r3,52(sp)
 8008edc:	003d9f06 	br	800855c <_dtoa_r+0x2b8>
 8008ee0:	d9000817 	ldw	r4,32(sp)
 8008ee4:	d8800617 	ldw	r2,24(sp)
 8008ee8:	d8000b15 	stw	zero,44(sp)
 8008eec:	2089c83a 	sub	r4,r4,r2
 8008ef0:	0087c83a 	sub	r3,zero,r2
 8008ef4:	d9000815 	stw	r4,32(sp)
 8008ef8:	d8c00a15 	stw	r3,40(sp)
 8008efc:	003da306 	br	800858c <_dtoa_r+0x2e8>
 8008f00:	0529c83a 	sub	r20,zero,r20
 8008f04:	dd000815 	stw	r20,32(sp)
 8008f08:	d8000715 	stw	zero,28(sp)
 8008f0c:	003d9806 	br	8008570 <_dtoa_r+0x2cc>
 8008f10:	d9000617 	ldw	r4,24(sp)
 8008f14:	800187c0 	call	800187c <__floatsidf>
 8008f18:	1009883a 	mov	r4,r2
 8008f1c:	180b883a 	mov	r5,r3
 8008f20:	980d883a 	mov	r6,r19
 8008f24:	900f883a 	mov	r7,r18
 8008f28:	80107fc0 	call	80107fc <__nedf2>
 8008f2c:	103d7a26 	beq	r2,zero,8008518 <_dtoa_r+0x274>
 8008f30:	d8800617 	ldw	r2,24(sp)
 8008f34:	10bfffc4 	addi	r2,r2,-1
 8008f38:	d8800615 	stw	r2,24(sp)
 8008f3c:	003d7606 	br	8008518 <_dtoa_r+0x274>
 8008f40:	dcc00a17 	ldw	r19,40(sp)
 8008f44:	dc800817 	ldw	r18,32(sp)
 8008f48:	002b883a 	mov	r21,zero
 8008f4c:	003f4906 	br	8008c74 <_dtoa_r+0x9d0>
 8008f50:	00800704 	movi	r2,28
 8008f54:	d8c00817 	ldw	r3,32(sp)
 8008f58:	d9000717 	ldw	r4,28(sp)
 8008f5c:	90a5883a 	add	r18,r18,r2
 8008f60:	1887883a 	add	r3,r3,r2
 8008f64:	2089883a 	add	r4,r4,r2
 8008f68:	d8c00815 	stw	r3,32(sp)
 8008f6c:	d9000715 	stw	r4,28(sp)
 8008f70:	003f8406 	br	8008d84 <_dtoa_r+0xae0>
 8008f74:	d9c00317 	ldw	r7,12(sp)
 8008f78:	013efb84 	movi	r4,-1042
 8008f7c:	2509c83a 	sub	r4,r4,r20
 8008f80:	3908983a 	sll	r4,r7,r4
 8008f84:	003d3006 	br	8008448 <_dtoa_r+0x1a4>
 8008f88:	d8000d15 	stw	zero,52(sp)
 8008f8c:	003d7306 	br	800855c <_dtoa_r+0x2b8>
 8008f90:	0480050e 	bge	zero,r18,8008fa8 <_dtoa_r+0xd04>
 8008f94:	a80b883a 	mov	r5,r21
 8008f98:	8009883a 	mov	r4,r16
 8008f9c:	900d883a 	mov	r6,r18
 8008fa0:	800ab7c0 	call	800ab7c <__lshift>
 8008fa4:	102b883a 	mov	r21,r2
 8008fa8:	8801611e 	bne	r17,zero,8009530 <_dtoa_r+0x128c>
 8008fac:	a827883a 	mov	r19,r21
 8008fb0:	d8c00317 	ldw	r3,12(sp)
 8008fb4:	d9000917 	ldw	r4,36(sp)
 8008fb8:	b8bfffc4 	addi	r2,r23,-1
 8008fbc:	18c0004c 	andi	r3,r3,1
 8008fc0:	1105883a 	add	r2,r2,r4
 8008fc4:	b825883a 	mov	r18,r23
 8008fc8:	d8800515 	stw	r2,20(sp)
 8008fcc:	a823883a 	mov	r17,r21
 8008fd0:	d8c00315 	stw	r3,12(sp)
 8008fd4:	ddc00715 	stw	r23,28(sp)
 8008fd8:	e009883a 	mov	r4,fp
 8008fdc:	a00b883a 	mov	r5,r20
 8008fe0:	80080680 	call	8008068 <quorem>
 8008fe4:	e009883a 	mov	r4,fp
 8008fe8:	880b883a 	mov	r5,r17
 8008fec:	102d883a 	mov	r22,r2
 8008ff0:	800acd80 	call	800acd8 <__mcmp>
 8008ff4:	980d883a 	mov	r6,r19
 8008ff8:	8009883a 	mov	r4,r16
 8008ffc:	a00b883a 	mov	r5,r20
 8009000:	102b883a 	mov	r21,r2
 8009004:	800ad300 	call	800ad30 <__mdiff>
 8009008:	100d883a 	mov	r6,r2
 800900c:	10800317 	ldw	r2,12(r2)
 8009010:	b5c00c04 	addi	r23,r22,48
 8009014:	10008c26 	beq	r2,zero,8009248 <_dtoa_r+0xfa4>
 8009018:	8009883a 	mov	r4,r16
 800901c:	300b883a 	mov	r5,r6
 8009020:	800a4340 	call	800a434 <_Bfree>
 8009024:	00800044 	movi	r2,1
 8009028:	a8007116 	blt	r21,zero,80091f0 <_dtoa_r+0xf4c>
 800902c:	a800041e 	bne	r21,zero,8009040 <_dtoa_r+0xd9c>
 8009030:	d9c00417 	ldw	r7,16(sp)
 8009034:	3800021e 	bne	r7,zero,8009040 <_dtoa_r+0xd9c>
 8009038:	d8c00317 	ldw	r3,12(sp)
 800903c:	18006c26 	beq	r3,zero,80091f0 <_dtoa_r+0xf4c>
 8009040:	00814c16 	blt	zero,r2,8009574 <_dtoa_r+0x12d0>
 8009044:	d8c00517 	ldw	r3,20(sp)
 8009048:	95400044 	addi	r21,r18,1
 800904c:	95c00005 	stb	r23,0(r18)
 8009050:	a82d883a 	mov	r22,r21
 8009054:	90c14d26 	beq	r18,r3,800958c <_dtoa_r+0x12e8>
 8009058:	e00b883a 	mov	r5,fp
 800905c:	8009883a 	mov	r4,r16
 8009060:	01800284 	movi	r6,10
 8009064:	000f883a 	mov	r7,zero
 8009068:	800a45c0 	call	800a45c <__multadd>
 800906c:	1039883a 	mov	fp,r2
 8009070:	8cc08b26 	beq	r17,r19,80092a0 <_dtoa_r+0xffc>
 8009074:	880b883a 	mov	r5,r17
 8009078:	01800284 	movi	r6,10
 800907c:	000f883a 	mov	r7,zero
 8009080:	8009883a 	mov	r4,r16
 8009084:	800a45c0 	call	800a45c <__multadd>
 8009088:	980b883a 	mov	r5,r19
 800908c:	8009883a 	mov	r4,r16
 8009090:	01800284 	movi	r6,10
 8009094:	000f883a 	mov	r7,zero
 8009098:	1023883a 	mov	r17,r2
 800909c:	800a45c0 	call	800a45c <__multadd>
 80090a0:	1027883a 	mov	r19,r2
 80090a4:	a825883a 	mov	r18,r21
 80090a8:	003fcb06 	br	8008fd8 <_dtoa_r+0xd34>
 80090ac:	d9c00417 	ldw	r7,16(sp)
 80090b0:	00800104 	movi	r2,4
 80090b4:	3880e426 	beq	r7,r2,8009448 <_dtoa_r+0x11a4>
 80090b8:	00800144 	movi	r2,5
 80090bc:	38be3c1e 	bne	r7,r2,80089b0 <_dtoa_r+0x70c>
 80090c0:	00c00044 	movi	r3,1
 80090c4:	d8c00c15 	stw	r3,48(sp)
 80090c8:	d9c02117 	ldw	r7,132(sp)
 80090cc:	d8800617 	ldw	r2,24(sp)
 80090d0:	388f883a 	add	r7,r7,r2
 80090d4:	3c800044 	addi	r18,r7,1
 80090d8:	d9c00e15 	stw	r7,56(sp)
 80090dc:	dc800915 	stw	r18,36(sp)
 80090e0:	04bd3e16 	blt	zero,r18,80085dc <_dtoa_r+0x338>
 80090e4:	80001115 	stw	zero,68(r16)
 80090e8:	000b883a 	mov	r5,zero
 80090ec:	003d4606 	br	8008608 <_dtoa_r+0x364>
 80090f0:	d8c00317 	ldw	r3,12(sp)
 80090f4:	183f0e1e 	bne	r3,zero,8008d30 <_dtoa_r+0xa8c>
 80090f8:	00c00434 	movhi	r3,16
 80090fc:	18ffffc4 	addi	r3,r3,-1
 8009100:	88c6703a 	and	r3,r17,r3
 8009104:	183f0a1e 	bne	r3,zero,8008d30 <_dtoa_r+0xa8c>
 8009108:	8c5ffc2c 	andhi	r17,r17,32752
 800910c:	883f0826 	beq	r17,zero,8008d30 <_dtoa_r+0xa8c>
 8009110:	d9000817 	ldw	r4,32(sp)
 8009114:	d9c00717 	ldw	r7,28(sp)
 8009118:	1023883a 	mov	r17,r2
 800911c:	2089883a 	add	r4,r4,r2
 8009120:	388f883a 	add	r7,r7,r2
 8009124:	d9000815 	stw	r4,32(sp)
 8009128:	d9c00715 	stw	r7,28(sp)
 800912c:	003f0106 	br	8008d34 <_dtoa_r+0xa90>
 8009130:	9005883a 	mov	r2,r18
 8009134:	003ed306 	br	8008c84 <_dtoa_r+0x9e0>
 8009138:	d8800917 	ldw	r2,36(sp)
 800913c:	00be3516 	blt	zero,r2,8008a14 <_dtoa_r+0x770>
 8009140:	1000b61e 	bne	r2,zero,800941c <_dtoa_r+0x1178>
 8009144:	9009883a 	mov	r4,r18
 8009148:	980b883a 	mov	r5,r19
 800914c:	000d883a 	mov	r6,zero
 8009150:	01d00534 	movhi	r7,16404
 8009154:	80104bc0 	call	80104bc <__muldf3>
 8009158:	d9800317 	ldw	r6,12(sp)
 800915c:	1009883a 	mov	r4,r2
 8009160:	180b883a 	mov	r5,r3
 8009164:	880f883a 	mov	r7,r17
 8009168:	80108bc0 	call	80108bc <__gedf2>
 800916c:	0029883a 	mov	r20,zero
 8009170:	002b883a 	mov	r21,zero
 8009174:	10007e16 	blt	r2,zero,8009370 <_dtoa_r+0x10cc>
 8009178:	d8802117 	ldw	r2,132(sp)
 800917c:	b82d883a 	mov	r22,r23
 8009180:	0084303a 	nor	r2,zero,r2
 8009184:	d8800615 	stw	r2,24(sp)
 8009188:	8009883a 	mov	r4,r16
 800918c:	a00b883a 	mov	r5,r20
 8009190:	800a4340 	call	800a434 <_Bfree>
 8009194:	a83f4b1e 	bne	r21,zero,8008ec4 <_dtoa_r+0xc20>
 8009198:	003de306 	br	8008928 <_dtoa_r+0x684>
 800919c:	e00b883a 	mov	r5,fp
 80091a0:	8009883a 	mov	r4,r16
 80091a4:	800aa500 	call	800aa50 <__pow5mult>
 80091a8:	1039883a 	mov	fp,r2
 80091ac:	003ed206 	br	8008cf8 <_dtoa_r+0xa54>
 80091b0:	1000021e 	bne	r2,zero,80091bc <_dtoa_r+0xf18>
 80091b4:	18c0004c 	andi	r3,r3,1
 80091b8:	183f271e 	bne	r3,zero,8008e58 <_dtoa_r+0xbb4>
 80091bc:	01000c04 	movi	r4,48
 80091c0:	00000106 	br	80091c8 <_dtoa_r+0xf24>
 80091c4:	102d883a 	mov	r22,r2
 80091c8:	b0bfffc4 	addi	r2,r22,-1
 80091cc:	10c00007 	ldb	r3,0(r2)
 80091d0:	193ffc26 	beq	r3,r4,80091c4 <_dtoa_r+0xf20>
 80091d4:	003f3206 	br	8008ea0 <_dtoa_r+0xbfc>
 80091d8:	d8c00f17 	ldw	r3,60(sp)
 80091dc:	18015026 	beq	r3,zero,8009720 <_dtoa_r+0x147c>
 80091e0:	10810cc4 	addi	r2,r2,1075
 80091e4:	dcc00a17 	ldw	r19,40(sp)
 80091e8:	dc800817 	ldw	r18,32(sp)
 80091ec:	003e9706 	br	8008c4c <_dtoa_r+0x9a8>
 80091f0:	b807883a 	mov	r3,r23
 80091f4:	182b883a 	mov	r21,r3
 80091f8:	ddc00717 	ldw	r23,28(sp)
 80091fc:	00800e0e 	bge	zero,r2,8009238 <_dtoa_r+0xf94>
 8009200:	e00b883a 	mov	r5,fp
 8009204:	01800044 	movi	r6,1
 8009208:	8009883a 	mov	r4,r16
 800920c:	d8c01515 	stw	r3,84(sp)
 8009210:	800ab7c0 	call	800ab7c <__lshift>
 8009214:	1009883a 	mov	r4,r2
 8009218:	a00b883a 	mov	r5,r20
 800921c:	1039883a 	mov	fp,r2
 8009220:	800acd80 	call	800acd8 <__mcmp>
 8009224:	d8c01517 	ldw	r3,84(sp)
 8009228:	0081880e 	bge	zero,r2,800984c <_dtoa_r+0x15a8>
 800922c:	00800e44 	movi	r2,57
 8009230:	b0c00c44 	addi	r3,r22,49
 8009234:	a8816326 	beq	r21,r2,80097c4 <_dtoa_r+0x1520>
 8009238:	90c00005 	stb	r3,0(r18)
 800923c:	95800044 	addi	r22,r18,1
 8009240:	982b883a 	mov	r21,r19
 8009244:	003f1606 	br	8008ea0 <_dtoa_r+0xbfc>
 8009248:	300b883a 	mov	r5,r6
 800924c:	e009883a 	mov	r4,fp
 8009250:	d9801515 	stw	r6,84(sp)
 8009254:	800acd80 	call	800acd8 <__mcmp>
 8009258:	d9801517 	ldw	r6,84(sp)
 800925c:	8009883a 	mov	r4,r16
 8009260:	d8801515 	stw	r2,84(sp)
 8009264:	300b883a 	mov	r5,r6
 8009268:	800a4340 	call	800a434 <_Bfree>
 800926c:	d8801517 	ldw	r2,84(sp)
 8009270:	103f6d1e 	bne	r2,zero,8009028 <_dtoa_r+0xd84>
 8009274:	d9c00417 	ldw	r7,16(sp)
 8009278:	383f6b1e 	bne	r7,zero,8009028 <_dtoa_r+0xd84>
 800927c:	d8c00317 	ldw	r3,12(sp)
 8009280:	183f691e 	bne	r3,zero,8009028 <_dtoa_r+0xd84>
 8009284:	b807883a 	mov	r3,r23
 8009288:	00800e44 	movi	r2,57
 800928c:	ddc00717 	ldw	r23,28(sp)
 8009290:	18814c26 	beq	r3,r2,80097c4 <_dtoa_r+0x1520>
 8009294:	057fe80e 	bge	zero,r21,8009238 <_dtoa_r+0xf94>
 8009298:	b0c00c44 	addi	r3,r22,49
 800929c:	003fe606 	br	8009238 <_dtoa_r+0xf94>
 80092a0:	880b883a 	mov	r5,r17
 80092a4:	8009883a 	mov	r4,r16
 80092a8:	01800284 	movi	r6,10
 80092ac:	000f883a 	mov	r7,zero
 80092b0:	800a45c0 	call	800a45c <__multadd>
 80092b4:	1023883a 	mov	r17,r2
 80092b8:	1027883a 	mov	r19,r2
 80092bc:	a825883a 	mov	r18,r21
 80092c0:	003f4506 	br	8008fd8 <_dtoa_r+0xd34>
 80092c4:	e009883a 	mov	r4,fp
 80092c8:	a00b883a 	mov	r5,r20
 80092cc:	800acd80 	call	800acd8 <__mcmp>
 80092d0:	103ebc0e 	bge	r2,zero,8008dc4 <_dtoa_r+0xb20>
 80092d4:	e00b883a 	mov	r5,fp
 80092d8:	8009883a 	mov	r4,r16
 80092dc:	01800284 	movi	r6,10
 80092e0:	000f883a 	mov	r7,zero
 80092e4:	800a45c0 	call	800a45c <__multadd>
 80092e8:	1039883a 	mov	fp,r2
 80092ec:	d8800617 	ldw	r2,24(sp)
 80092f0:	d8c00c17 	ldw	r3,48(sp)
 80092f4:	10bfffc4 	addi	r2,r2,-1
 80092f8:	d8800615 	stw	r2,24(sp)
 80092fc:	1801571e 	bne	r3,zero,800985c <_dtoa_r+0x15b8>
 8009300:	d9c00e17 	ldw	r7,56(sp)
 8009304:	d9c00915 	stw	r7,36(sp)
 8009308:	003eae06 	br	8008dc4 <_dtoa_r+0xb20>
 800930c:	a0800417 	ldw	r2,16(r20)
 8009310:	10800104 	addi	r2,r2,4
 8009314:	1085883a 	add	r2,r2,r2
 8009318:	1085883a 	add	r2,r2,r2
 800931c:	a085883a 	add	r2,r20,r2
 8009320:	11000017 	ldw	r4,0(r2)
 8009324:	800a6a40 	call	800a6a4 <__hi0bits>
 8009328:	00c00804 	movi	r3,32
 800932c:	1885c83a 	sub	r2,r3,r2
 8009330:	003e8306 	br	8008d40 <_dtoa_r+0xa9c>
 8009334:	d9c00417 	ldw	r7,16(sp)
 8009338:	00800084 	movi	r2,2
 800933c:	11fea30e 	bge	r2,r7,8008dcc <_dtoa_r+0xb28>
 8009340:	d8800917 	ldw	r2,36(sp)
 8009344:	103f8c1e 	bne	r2,zero,8009178 <_dtoa_r+0xed4>
 8009348:	a00b883a 	mov	r5,r20
 800934c:	8009883a 	mov	r4,r16
 8009350:	01800144 	movi	r6,5
 8009354:	000f883a 	mov	r7,zero
 8009358:	800a45c0 	call	800a45c <__multadd>
 800935c:	e009883a 	mov	r4,fp
 8009360:	100b883a 	mov	r5,r2
 8009364:	1029883a 	mov	r20,r2
 8009368:	800acd80 	call	800acd8 <__mcmp>
 800936c:	00bf820e 	bge	zero,r2,8009178 <_dtoa_r+0xed4>
 8009370:	00800c44 	movi	r2,49
 8009374:	b8800005 	stb	r2,0(r23)
 8009378:	d8800617 	ldw	r2,24(sp)
 800937c:	bd800044 	addi	r22,r23,1
 8009380:	10800044 	addi	r2,r2,1
 8009384:	d8800615 	stw	r2,24(sp)
 8009388:	003f7f06 	br	8009188 <_dtoa_r+0xee4>
 800938c:	dc000417 	ldw	r16,16(sp)
 8009390:	003d6506 	br	8008928 <_dtoa_r+0x684>
 8009394:	9009883a 	mov	r4,r18
 8009398:	800187c0 	call	800187c <__floatsidf>
 800939c:	1009883a 	mov	r4,r2
 80093a0:	180b883a 	mov	r5,r3
 80093a4:	980d883a 	mov	r6,r19
 80093a8:	a00f883a 	mov	r7,r20
 80093ac:	80104bc0 	call	80104bc <__muldf3>
 80093b0:	1009883a 	mov	r4,r2
 80093b4:	180b883a 	mov	r5,r3
 80093b8:	000d883a 	mov	r6,zero
 80093bc:	01d00734 	movhi	r7,16412
 80093c0:	80104080 	call	8010408 <__adddf3>
 80093c4:	057f3034 	movhi	r21,64704
 80093c8:	1025883a 	mov	r18,r2
 80093cc:	1d6b883a 	add	r21,r3,r21
 80093d0:	9809883a 	mov	r4,r19
 80093d4:	a00b883a 	mov	r5,r20
 80093d8:	000d883a 	mov	r6,zero
 80093dc:	01d00534 	movhi	r7,16404
 80093e0:	801045c0 	call	801045c <__subdf3>
 80093e4:	1009883a 	mov	r4,r2
 80093e8:	180b883a 	mov	r5,r3
 80093ec:	900d883a 	mov	r6,r18
 80093f0:	a80f883a 	mov	r7,r21
 80093f4:	1027883a 	mov	r19,r2
 80093f8:	1829883a 	mov	r20,r3
 80093fc:	80108580 	call	8010858 <__gtdf2>
 8009400:	00806616 	blt	zero,r2,800959c <_dtoa_r+0x12f8>
 8009404:	a9e0003c 	xorhi	r7,r21,32768
 8009408:	9809883a 	mov	r4,r19
 800940c:	a00b883a 	mov	r5,r20
 8009410:	900d883a 	mov	r6,r18
 8009414:	80109200 	call	8010920 <__ltdf2>
 8009418:	103d710e 	bge	r2,zero,80089e0 <_dtoa_r+0x73c>
 800941c:	0029883a 	mov	r20,zero
 8009420:	002b883a 	mov	r21,zero
 8009424:	003f5406 	br	8009178 <_dtoa_r+0xed4>
 8009428:	d9800a17 	ldw	r6,40(sp)
 800942c:	e00b883a 	mov	r5,fp
 8009430:	8009883a 	mov	r4,r16
 8009434:	800aa500 	call	800aa50 <__pow5mult>
 8009438:	1039883a 	mov	fp,r2
 800943c:	003e2e06 	br	8008cf8 <_dtoa_r+0xa54>
 8009440:	d8000c15 	stw	zero,48(sp)
 8009444:	003f2006 	br	80090c8 <_dtoa_r+0xe24>
 8009448:	00800044 	movi	r2,1
 800944c:	d8800c15 	stw	r2,48(sp)
 8009450:	003c5d06 	br	80085c8 <_dtoa_r+0x324>
 8009454:	d8c00a17 	ldw	r3,40(sp)
 8009458:	d9000b17 	ldw	r4,44(sp)
 800945c:	dcc00a15 	stw	r19,40(sp)
 8009460:	98c5c83a 	sub	r2,r19,r3
 8009464:	2089883a 	add	r4,r4,r2
 8009468:	d9000b15 	stw	r4,44(sp)
 800946c:	0027883a 	mov	r19,zero
 8009470:	003df206 	br	8008c3c <_dtoa_r+0x998>
 8009474:	d9000317 	ldw	r4,12(sp)
 8009478:	8829883a 	mov	r20,r17
 800947c:	04800084 	movi	r18,2
 8009480:	d9001015 	stw	r4,64(sp)
 8009484:	003c8106 	br	800868c <_dtoa_r+0x3e8>
 8009488:	04800044 	movi	r18,1
 800948c:	dc800e15 	stw	r18,56(sp)
 8009490:	dc800915 	stw	r18,36(sp)
 8009494:	dc802115 	stw	r18,132(sp)
 8009498:	003f1206 	br	80090e4 <_dtoa_r+0xe40>
 800949c:	d8800617 	ldw	r2,24(sp)
 80094a0:	00abc83a 	sub	r21,zero,r2
 80094a4:	a800a426 	beq	r21,zero,8009738 <_dtoa_r+0x1494>
 80094a8:	a88003cc 	andi	r2,r21,15
 80094ac:	100490fa 	slli	r2,r2,3
 80094b0:	00c20074 	movhi	r3,2049
 80094b4:	18d2a804 	addi	r3,r3,19104
 80094b8:	d9000317 	ldw	r4,12(sp)
 80094bc:	1885883a 	add	r2,r3,r2
 80094c0:	11800017 	ldw	r6,0(r2)
 80094c4:	11c00117 	ldw	r7,4(r2)
 80094c8:	a82bd13a 	srai	r21,r21,4
 80094cc:	880b883a 	mov	r5,r17
 80094d0:	80104bc0 	call	80104bc <__muldf3>
 80094d4:	1027883a 	mov	r19,r2
 80094d8:	1829883a 	mov	r20,r3
 80094dc:	a800e826 	beq	r21,zero,8009880 <_dtoa_r+0x15dc>
 80094e0:	05820074 	movhi	r22,2049
 80094e4:	b5929e04 	addi	r22,r22,19064
 80094e8:	04800084 	movi	r18,2
 80094ec:	a980004c 	andi	r6,r21,1
 80094f0:	1009883a 	mov	r4,r2
 80094f4:	a82bd07a 	srai	r21,r21,1
 80094f8:	180b883a 	mov	r5,r3
 80094fc:	30000426 	beq	r6,zero,8009510 <_dtoa_r+0x126c>
 8009500:	b1800017 	ldw	r6,0(r22)
 8009504:	b1c00117 	ldw	r7,4(r22)
 8009508:	94800044 	addi	r18,r18,1
 800950c:	80104bc0 	call	80104bc <__muldf3>
 8009510:	b5800204 	addi	r22,r22,8
 8009514:	a83ff51e 	bne	r21,zero,80094ec <_dtoa_r+0x1248>
 8009518:	1027883a 	mov	r19,r2
 800951c:	1829883a 	mov	r20,r3
 8009520:	003c7306 	br	80086f0 <_dtoa_r+0x44c>
 8009524:	21000044 	addi	r4,r4,1
 8009528:	11000005 	stb	r4,0(r2)
 800952c:	003e5c06 	br	8008ea0 <_dtoa_r+0xbfc>
 8009530:	a9400117 	ldw	r5,4(r21)
 8009534:	8009883a 	mov	r4,r16
 8009538:	800a38c0 	call	800a38c <_Balloc>
 800953c:	a9800417 	ldw	r6,16(r21)
 8009540:	11000304 	addi	r4,r2,12
 8009544:	a9400304 	addi	r5,r21,12
 8009548:	31800084 	addi	r6,r6,2
 800954c:	318d883a 	add	r6,r6,r6
 8009550:	318d883a 	add	r6,r6,r6
 8009554:	1023883a 	mov	r17,r2
 8009558:	8003eb00 	call	8003eb0 <memcpy>
 800955c:	8009883a 	mov	r4,r16
 8009560:	880b883a 	mov	r5,r17
 8009564:	01800044 	movi	r6,1
 8009568:	800ab7c0 	call	800ab7c <__lshift>
 800956c:	1027883a 	mov	r19,r2
 8009570:	003e8f06 	br	8008fb0 <_dtoa_r+0xd0c>
 8009574:	b807883a 	mov	r3,r23
 8009578:	00800e44 	movi	r2,57
 800957c:	ddc00717 	ldw	r23,28(sp)
 8009580:	18809026 	beq	r3,r2,80097c4 <_dtoa_r+0x1520>
 8009584:	18c00044 	addi	r3,r3,1
 8009588:	003f2b06 	br	8009238 <_dtoa_r+0xf94>
 800958c:	b807883a 	mov	r3,r23
 8009590:	982b883a 	mov	r21,r19
 8009594:	ddc00717 	ldw	r23,28(sp)
 8009598:	003e2406 	br	8008e2c <_dtoa_r+0xb88>
 800959c:	0029883a 	mov	r20,zero
 80095a0:	002b883a 	mov	r21,zero
 80095a4:	003f7206 	br	8009370 <_dtoa_r+0x10cc>
 80095a8:	593fffc4 	addi	r4,r11,-1
 80095ac:	200490fa 	slli	r2,r4,3
 80095b0:	00c20074 	movhi	r3,2049
 80095b4:	18d2a804 	addi	r3,r3,19104
 80095b8:	d9001015 	stw	r4,64(sp)
 80095bc:	1885883a 	add	r2,r3,r2
 80095c0:	11000017 	ldw	r4,0(r2)
 80095c4:	11400117 	ldw	r5,4(r2)
 80095c8:	900d883a 	mov	r6,r18
 80095cc:	a80f883a 	mov	r7,r21
 80095d0:	dac01615 	stw	r11,88(sp)
 80095d4:	80104bc0 	call	80104bc <__muldf3>
 80095d8:	a00b883a 	mov	r5,r20
 80095dc:	9809883a 	mov	r4,r19
 80095e0:	d8c01215 	stw	r3,72(sp)
 80095e4:	d8801115 	stw	r2,68(sp)
 80095e8:	80109d80 	call	80109d8 <__fixdfsi>
 80095ec:	1009883a 	mov	r4,r2
 80095f0:	1025883a 	mov	r18,r2
 80095f4:	800187c0 	call	800187c <__floatsidf>
 80095f8:	9809883a 	mov	r4,r19
 80095fc:	a00b883a 	mov	r5,r20
 8009600:	100d883a 	mov	r6,r2
 8009604:	180f883a 	mov	r7,r3
 8009608:	94800c04 	addi	r18,r18,48
 800960c:	801045c0 	call	801045c <__subdf3>
 8009610:	bc800005 	stb	r18,0(r23)
 8009614:	dac01617 	ldw	r11,88(sp)
 8009618:	102b883a 	mov	r21,r2
 800961c:	00800044 	movi	r2,1
 8009620:	bd800044 	addi	r22,r23,1
 8009624:	1815883a 	mov	r10,r3
 8009628:	58802226 	beq	r11,r2,80096b4 <_dtoa_r+0x1410>
 800962c:	bad7883a 	add	r11,r23,r11
 8009630:	dc001415 	stw	r16,80(sp)
 8009634:	a805883a 	mov	r2,r21
 8009638:	b027883a 	mov	r19,r22
 800963c:	5821883a 	mov	r16,r11
 8009640:	882b883a 	mov	r21,r17
 8009644:	000d883a 	mov	r6,zero
 8009648:	01d00934 	movhi	r7,16420
 800964c:	1009883a 	mov	r4,r2
 8009650:	180b883a 	mov	r5,r3
 8009654:	80104bc0 	call	80104bc <__muldf3>
 8009658:	180b883a 	mov	r5,r3
 800965c:	1009883a 	mov	r4,r2
 8009660:	1829883a 	mov	r20,r3
 8009664:	1023883a 	mov	r17,r2
 8009668:	80109d80 	call	80109d8 <__fixdfsi>
 800966c:	1009883a 	mov	r4,r2
 8009670:	1025883a 	mov	r18,r2
 8009674:	800187c0 	call	800187c <__floatsidf>
 8009678:	8809883a 	mov	r4,r17
 800967c:	a00b883a 	mov	r5,r20
 8009680:	100d883a 	mov	r6,r2
 8009684:	180f883a 	mov	r7,r3
 8009688:	94800c04 	addi	r18,r18,48
 800968c:	801045c0 	call	801045c <__subdf3>
 8009690:	9cc00044 	addi	r19,r19,1
 8009694:	9cbfffc5 	stb	r18,-1(r19)
 8009698:	9c3fea1e 	bne	r19,r16,8009644 <_dtoa_r+0x13a0>
 800969c:	1815883a 	mov	r10,r3
 80096a0:	d8c01017 	ldw	r3,64(sp)
 80096a4:	dc001417 	ldw	r16,80(sp)
 80096a8:	a823883a 	mov	r17,r21
 80096ac:	b0ed883a 	add	r22,r22,r3
 80096b0:	102b883a 	mov	r21,r2
 80096b4:	d9001117 	ldw	r4,68(sp)
 80096b8:	d9401217 	ldw	r5,72(sp)
 80096bc:	000d883a 	mov	r6,zero
 80096c0:	01cff834 	movhi	r7,16352
 80096c4:	da801515 	stw	r10,84(sp)
 80096c8:	80104080 	call	8010408 <__adddf3>
 80096cc:	da801517 	ldw	r10,84(sp)
 80096d0:	1009883a 	mov	r4,r2
 80096d4:	180b883a 	mov	r5,r3
 80096d8:	500f883a 	mov	r7,r10
 80096dc:	a80d883a 	mov	r6,r21
 80096e0:	80109200 	call	8010920 <__ltdf2>
 80096e4:	da801517 	ldw	r10,84(sp)
 80096e8:	10003b0e 	bge	r2,zero,80097d8 <_dtoa_r+0x1534>
 80096ec:	d9c01317 	ldw	r7,76(sp)
 80096f0:	b53fffc3 	ldbu	r20,-1(r22)
 80096f4:	d9c00615 	stw	r7,24(sp)
 80096f8:	003d3106 	br	8008bc0 <_dtoa_r+0x91c>
 80096fc:	d8800817 	ldw	r2,32(sp)
 8009700:	11e5c83a 	sub	r18,r2,r7
 8009704:	0005883a 	mov	r2,zero
 8009708:	003d5006 	br	8008c4c <_dtoa_r+0x9a8>
 800970c:	05800044 	movi	r22,1
 8009710:	003dc406 	br	8008e24 <_dtoa_r+0xb80>
 8009714:	a5000044 	addi	r20,r20,1
 8009718:	15000005 	stb	r20,0(r2)
 800971c:	003c8206 	br	8008928 <_dtoa_r+0x684>
 8009720:	d8800217 	ldw	r2,8(sp)
 8009724:	00c00d84 	movi	r3,54
 8009728:	dcc00a17 	ldw	r19,40(sp)
 800972c:	1885c83a 	sub	r2,r3,r2
 8009730:	dc800817 	ldw	r18,32(sp)
 8009734:	003d4506 	br	8008c4c <_dtoa_r+0x9a8>
 8009738:	dcc00317 	ldw	r19,12(sp)
 800973c:	8829883a 	mov	r20,r17
 8009740:	04800084 	movi	r18,2
 8009744:	003bea06 	br	80086f0 <_dtoa_r+0x44c>
 8009748:	d9000917 	ldw	r4,36(sp)
 800974c:	203f1126 	beq	r4,zero,8009394 <_dtoa_r+0x10f0>
 8009750:	d9c00e17 	ldw	r7,56(sp)
 8009754:	01fca20e 	bge	zero,r7,80089e0 <_dtoa_r+0x73c>
 8009758:	a00b883a 	mov	r5,r20
 800975c:	9809883a 	mov	r4,r19
 8009760:	000d883a 	mov	r6,zero
 8009764:	01d00934 	movhi	r7,16420
 8009768:	80104bc0 	call	80104bc <__muldf3>
 800976c:	91000044 	addi	r4,r18,1
 8009770:	1027883a 	mov	r19,r2
 8009774:	1829883a 	mov	r20,r3
 8009778:	800187c0 	call	800187c <__floatsidf>
 800977c:	9809883a 	mov	r4,r19
 8009780:	a00b883a 	mov	r5,r20
 8009784:	100d883a 	mov	r6,r2
 8009788:	180f883a 	mov	r7,r3
 800978c:	80104bc0 	call	80104bc <__muldf3>
 8009790:	1009883a 	mov	r4,r2
 8009794:	180b883a 	mov	r5,r3
 8009798:	000d883a 	mov	r6,zero
 800979c:	01d00734 	movhi	r7,16412
 80097a0:	80104080 	call	8010408 <__adddf3>
 80097a4:	1025883a 	mov	r18,r2
 80097a8:	d8800617 	ldw	r2,24(sp)
 80097ac:	057f3034 	movhi	r21,64704
 80097b0:	1d6b883a 	add	r21,r3,r21
 80097b4:	10bfffc4 	addi	r2,r2,-1
 80097b8:	d8801315 	stw	r2,76(sp)
 80097bc:	dac00e17 	ldw	r11,56(sp)
 80097c0:	003be706 	br	8008760 <_dtoa_r+0x4bc>
 80097c4:	01000e44 	movi	r4,57
 80097c8:	91000005 	stb	r4,0(r18)
 80097cc:	95800044 	addi	r22,r18,1
 80097d0:	982b883a 	mov	r21,r19
 80097d4:	003da106 	br	8008e5c <_dtoa_r+0xbb8>
 80097d8:	d9801117 	ldw	r6,68(sp)
 80097dc:	d9c01217 	ldw	r7,72(sp)
 80097e0:	0009883a 	mov	r4,zero
 80097e4:	014ff834 	movhi	r5,16352
 80097e8:	da801515 	stw	r10,84(sp)
 80097ec:	801045c0 	call	801045c <__subdf3>
 80097f0:	da801517 	ldw	r10,84(sp)
 80097f4:	1009883a 	mov	r4,r2
 80097f8:	180b883a 	mov	r5,r3
 80097fc:	a80d883a 	mov	r6,r21
 8009800:	500f883a 	mov	r7,r10
 8009804:	80108580 	call	8010858 <__gtdf2>
 8009808:	00bc750e 	bge	zero,r2,80089e0 <_dtoa_r+0x73c>
 800980c:	01000c04 	movi	r4,48
 8009810:	00000106 	br	8009818 <_dtoa_r+0x1574>
 8009814:	102d883a 	mov	r22,r2
 8009818:	b0bfffc4 	addi	r2,r22,-1
 800981c:	10c00007 	ldb	r3,0(r2)
 8009820:	193ffc26 	beq	r3,r4,8009814 <_dtoa_r+0x1570>
 8009824:	d8801317 	ldw	r2,76(sp)
 8009828:	d8800615 	stw	r2,24(sp)
 800982c:	003c3e06 	br	8008928 <_dtoa_r+0x684>
 8009830:	d9001317 	ldw	r4,76(sp)
 8009834:	df001117 	ldw	fp,68(sp)
 8009838:	d9000615 	stw	r4,24(sp)
 800983c:	003ce006 	br	8008bc0 <_dtoa_r+0x91c>
 8009840:	df001117 	ldw	fp,68(sp)
 8009844:	dc401217 	ldw	r17,72(sp)
 8009848:	003c6506 	br	80089e0 <_dtoa_r+0x73c>
 800984c:	103e7a1e 	bne	r2,zero,8009238 <_dtoa_r+0xf94>
 8009850:	1880004c 	andi	r2,r3,1
 8009854:	103e7826 	beq	r2,zero,8009238 <_dtoa_r+0xf94>
 8009858:	003e7406 	br	800922c <_dtoa_r+0xf88>
 800985c:	8009883a 	mov	r4,r16
 8009860:	a80b883a 	mov	r5,r21
 8009864:	01800284 	movi	r6,10
 8009868:	000f883a 	mov	r7,zero
 800986c:	800a45c0 	call	800a45c <__multadd>
 8009870:	d9000e17 	ldw	r4,56(sp)
 8009874:	102b883a 	mov	r21,r2
 8009878:	d9000915 	stw	r4,36(sp)
 800987c:	003d5106 	br	8008dc4 <_dtoa_r+0xb20>
 8009880:	04800084 	movi	r18,2
 8009884:	003b9a06 	br	80086f0 <_dtoa_r+0x44c>
 8009888:	d8c01317 	ldw	r3,76(sp)
 800988c:	d8c00615 	stw	r3,24(sp)
 8009890:	003ccb06 	br	8008bc0 <_dtoa_r+0x91c>
 8009894:	d8c01317 	ldw	r3,76(sp)
 8009898:	d8c00615 	stw	r3,24(sp)
 800989c:	003c2206 	br	8008928 <_dtoa_r+0x684>
 80098a0:	20fd3826 	beq	r4,r3,8008d84 <_dtoa_r+0xae0>
 80098a4:	00c00f04 	movi	r3,60
 80098a8:	1885c83a 	sub	r2,r3,r2
 80098ac:	003da906 	br	8008f54 <_dtoa_r+0xcb0>
 80098b0:	000b883a 	mov	r5,zero
 80098b4:	003b5406 	br	8008608 <_dtoa_r+0x364>
 80098b8:	04c00044 	movi	r19,1
 80098bc:	003b3b06 	br	80085ac <_dtoa_r+0x308>

080098c0 <__sflags>:
 80098c0:	28800007 	ldb	r2,0(r5)
 80098c4:	00c01c84 	movi	r3,114
 80098c8:	10c01826 	beq	r2,r3,800992c <__sflags+0x6c>
 80098cc:	00c01dc4 	movi	r3,119
 80098d0:	10c01226 	beq	r2,r3,800991c <__sflags+0x5c>
 80098d4:	00c01844 	movi	r3,97
 80098d8:	10c00426 	beq	r2,r3,80098ec <__sflags+0x2c>
 80098dc:	00800584 	movi	r2,22
 80098e0:	20800015 	stw	r2,0(r4)
 80098e4:	0005883a 	mov	r2,zero
 80098e8:	f800283a 	ret
 80098ec:	01c08204 	movi	r7,520
 80098f0:	01000044 	movi	r4,1
 80098f4:	00804204 	movi	r2,264
 80098f8:	28c00047 	ldb	r3,1(r5)
 80098fc:	18000426 	beq	r3,zero,8009910 <__sflags+0x50>
 8009900:	02000ac4 	movi	r8,43
 8009904:	1a000d26 	beq	r3,r8,800993c <__sflags+0x7c>
 8009908:	28c00087 	ldb	r3,2(r5)
 800990c:	1a000b26 	beq	r3,r8,800993c <__sflags+0x7c>
 8009910:	21c8b03a 	or	r4,r4,r7
 8009914:	31000015 	stw	r4,0(r6)
 8009918:	f800283a 	ret
 800991c:	01c18004 	movi	r7,1536
 8009920:	01000044 	movi	r4,1
 8009924:	00800204 	movi	r2,8
 8009928:	003ff306 	br	80098f8 <__sflags+0x38>
 800992c:	000f883a 	mov	r7,zero
 8009930:	0009883a 	mov	r4,zero
 8009934:	00800104 	movi	r2,4
 8009938:	003fef06 	br	80098f8 <__sflags+0x38>
 800993c:	00fff8c4 	movi	r3,-29
 8009940:	01000084 	movi	r4,2
 8009944:	10c4703a 	and	r2,r2,r3
 8009948:	21c8b03a 	or	r4,r4,r7
 800994c:	10800414 	ori	r2,r2,16
 8009950:	31000015 	stw	r4,0(r6)
 8009954:	f800283a 	ret

08009958 <__sfvwrite_r>:
 8009958:	30800217 	ldw	r2,8(r6)
 800995c:	defff504 	addi	sp,sp,-44
 8009960:	dd400615 	stw	r21,24(sp)
 8009964:	dd000515 	stw	r20,20(sp)
 8009968:	dc000115 	stw	r16,4(sp)
 800996c:	dfc00a15 	stw	ra,40(sp)
 8009970:	df000915 	stw	fp,36(sp)
 8009974:	ddc00815 	stw	r23,32(sp)
 8009978:	dd800715 	stw	r22,28(sp)
 800997c:	dcc00415 	stw	r19,16(sp)
 8009980:	dc800315 	stw	r18,12(sp)
 8009984:	dc400215 	stw	r17,8(sp)
 8009988:	3029883a 	mov	r20,r6
 800998c:	202b883a 	mov	r21,r4
 8009990:	2821883a 	mov	r16,r5
 8009994:	10002126 	beq	r2,zero,8009a1c <__sfvwrite_r+0xc4>
 8009998:	2880030b 	ldhu	r2,12(r5)
 800999c:	10c0020c 	andi	r3,r2,8
 80099a0:	18ffffcc 	andi	r3,r3,65535
 80099a4:	18e0001c 	xori	r3,r3,32768
 80099a8:	18e00004 	addi	r3,r3,-32768
 80099ac:	18002826 	beq	r3,zero,8009a50 <__sfvwrite_r+0xf8>
 80099b0:	28c00417 	ldw	r3,16(r5)
 80099b4:	18002626 	beq	r3,zero,8009a50 <__sfvwrite_r+0xf8>
 80099b8:	10c0008c 	andi	r3,r2,2
 80099bc:	18ffffcc 	andi	r3,r3,65535
 80099c0:	18e0001c 	xori	r3,r3,32768
 80099c4:	18e00004 	addi	r3,r3,-32768
 80099c8:	a4400017 	ldw	r17,0(r20)
 80099cc:	18002b26 	beq	r3,zero,8009a7c <__sfvwrite_r+0x124>
 80099d0:	0027883a 	mov	r19,zero
 80099d4:	0025883a 	mov	r18,zero
 80099d8:	05810004 	movi	r22,1024
 80099dc:	980d883a 	mov	r6,r19
 80099e0:	a809883a 	mov	r4,r21
 80099e4:	90004f26 	beq	r18,zero,8009b24 <__sfvwrite_r+0x1cc>
 80099e8:	900f883a 	mov	r7,r18
 80099ec:	81400717 	ldw	r5,28(r16)
 80099f0:	b480012e 	bgeu	r22,r18,80099f8 <__sfvwrite_r+0xa0>
 80099f4:	01c10004 	movi	r7,1024
 80099f8:	80800917 	ldw	r2,36(r16)
 80099fc:	103ee83a 	callr	r2
 8009a00:	0080540e 	bge	zero,r2,8009b54 <__sfvwrite_r+0x1fc>
 8009a04:	a0c00217 	ldw	r3,8(r20)
 8009a08:	98a7883a 	add	r19,r19,r2
 8009a0c:	90a5c83a 	sub	r18,r18,r2
 8009a10:	1885c83a 	sub	r2,r3,r2
 8009a14:	a0800215 	stw	r2,8(r20)
 8009a18:	103ff01e 	bne	r2,zero,80099dc <__sfvwrite_r+0x84>
 8009a1c:	0005883a 	mov	r2,zero
 8009a20:	dfc00a17 	ldw	ra,40(sp)
 8009a24:	df000917 	ldw	fp,36(sp)
 8009a28:	ddc00817 	ldw	r23,32(sp)
 8009a2c:	dd800717 	ldw	r22,28(sp)
 8009a30:	dd400617 	ldw	r21,24(sp)
 8009a34:	dd000517 	ldw	r20,20(sp)
 8009a38:	dcc00417 	ldw	r19,16(sp)
 8009a3c:	dc800317 	ldw	r18,12(sp)
 8009a40:	dc400217 	ldw	r17,8(sp)
 8009a44:	dc000117 	ldw	r16,4(sp)
 8009a48:	dec00b04 	addi	sp,sp,44
 8009a4c:	f800283a 	ret
 8009a50:	a809883a 	mov	r4,r21
 8009a54:	800b883a 	mov	r5,r16
 8009a58:	8007e900 	call	8007e90 <__swsetup_r>
 8009a5c:	1000f01e 	bne	r2,zero,8009e20 <__sfvwrite_r+0x4c8>
 8009a60:	8080030b 	ldhu	r2,12(r16)
 8009a64:	a4400017 	ldw	r17,0(r20)
 8009a68:	10c0008c 	andi	r3,r2,2
 8009a6c:	18ffffcc 	andi	r3,r3,65535
 8009a70:	18e0001c 	xori	r3,r3,32768
 8009a74:	18e00004 	addi	r3,r3,-32768
 8009a78:	183fd51e 	bne	r3,zero,80099d0 <__sfvwrite_r+0x78>
 8009a7c:	10c0004c 	andi	r3,r2,1
 8009a80:	002d883a 	mov	r22,zero
 8009a84:	1800381e 	bne	r3,zero,8009b68 <__sfvwrite_r+0x210>
 8009a88:	0025883a 	mov	r18,zero
 8009a8c:	90002126 	beq	r18,zero,8009b14 <__sfvwrite_r+0x1bc>
 8009a90:	10c0800c 	andi	r3,r2,512
 8009a94:	18ffffcc 	andi	r3,r3,65535
 8009a98:	18e0001c 	xori	r3,r3,32768
 8009a9c:	18e00004 	addi	r3,r3,-32768
 8009aa0:	84c00217 	ldw	r19,8(r16)
 8009aa4:	18006b26 	beq	r3,zero,8009c54 <__sfvwrite_r+0x2fc>
 8009aa8:	980f883a 	mov	r7,r19
 8009aac:	94c08636 	bltu	r18,r19,8009cc8 <__sfvwrite_r+0x370>
 8009ab0:	10c1200c 	andi	r3,r2,1152
 8009ab4:	18009f1e 	bne	r3,zero,8009d34 <__sfvwrite_r+0x3dc>
 8009ab8:	81000017 	ldw	r4,0(r16)
 8009abc:	982f883a 	mov	r23,r19
 8009ac0:	9039883a 	mov	fp,r18
 8009ac4:	9027883a 	mov	r19,r18
 8009ac8:	380d883a 	mov	r6,r7
 8009acc:	b00b883a 	mov	r5,r22
 8009ad0:	d9c00015 	stw	r7,0(sp)
 8009ad4:	800a2000 	call	800a200 <memmove>
 8009ad8:	d9c00017 	ldw	r7,0(sp)
 8009adc:	81000217 	ldw	r4,8(r16)
 8009ae0:	80800017 	ldw	r2,0(r16)
 8009ae4:	25efc83a 	sub	r23,r4,r23
 8009ae8:	11cf883a 	add	r7,r2,r7
 8009aec:	85c00215 	stw	r23,8(r16)
 8009af0:	81c00015 	stw	r7,0(r16)
 8009af4:	a0800217 	ldw	r2,8(r20)
 8009af8:	b72d883a 	add	r22,r22,fp
 8009afc:	9725c83a 	sub	r18,r18,fp
 8009b00:	14e7c83a 	sub	r19,r2,r19
 8009b04:	a4c00215 	stw	r19,8(r20)
 8009b08:	983fc426 	beq	r19,zero,8009a1c <__sfvwrite_r+0xc4>
 8009b0c:	8080030b 	ldhu	r2,12(r16)
 8009b10:	903fdf1e 	bne	r18,zero,8009a90 <__sfvwrite_r+0x138>
 8009b14:	8d800017 	ldw	r22,0(r17)
 8009b18:	8c800117 	ldw	r18,4(r17)
 8009b1c:	8c400204 	addi	r17,r17,8
 8009b20:	003fda06 	br	8009a8c <__sfvwrite_r+0x134>
 8009b24:	8cc00017 	ldw	r19,0(r17)
 8009b28:	8c800117 	ldw	r18,4(r17)
 8009b2c:	8c400204 	addi	r17,r17,8
 8009b30:	003faa06 	br	80099dc <__sfvwrite_r+0x84>
 8009b34:	800b5f40 	call	800b5f4 <_realloc_r>
 8009b38:	102f883a 	mov	r23,r2
 8009b3c:	10009f1e 	bne	r2,zero,8009dbc <__sfvwrite_r+0x464>
 8009b40:	81400417 	ldw	r5,16(r16)
 8009b44:	a809883a 	mov	r4,r21
 8009b48:	8002ae00 	call	8002ae0 <_free_r>
 8009b4c:	00800304 	movi	r2,12
 8009b50:	a8800015 	stw	r2,0(r21)
 8009b54:	80c0030b 	ldhu	r3,12(r16)
 8009b58:	00bfffc4 	movi	r2,-1
 8009b5c:	18c01014 	ori	r3,r3,64
 8009b60:	80c0030d 	sth	r3,12(r16)
 8009b64:	003fae06 	br	8009a20 <__sfvwrite_r+0xc8>
 8009b68:	0007883a 	mov	r3,zero
 8009b6c:	0039883a 	mov	fp,zero
 8009b70:	0025883a 	mov	r18,zero
 8009b74:	90001e26 	beq	r18,zero,8009bf0 <__sfvwrite_r+0x298>
 8009b78:	18006526 	beq	r3,zero,8009d10 <__sfvwrite_r+0x3b8>
 8009b7c:	b02f883a 	mov	r23,r22
 8009b80:	9580012e 	bgeu	r18,r22,8009b88 <__sfvwrite_r+0x230>
 8009b84:	902f883a 	mov	r23,r18
 8009b88:	81000017 	ldw	r4,0(r16)
 8009b8c:	80800417 	ldw	r2,16(r16)
 8009b90:	84c00217 	ldw	r19,8(r16)
 8009b94:	81c00517 	ldw	r7,20(r16)
 8009b98:	1100022e 	bgeu	r2,r4,8009ba4 <__sfvwrite_r+0x24c>
 8009b9c:	99e7883a 	add	r19,r19,r7
 8009ba0:	9dc01816 	blt	r19,r23,8009c04 <__sfvwrite_r+0x2ac>
 8009ba4:	b9c03b16 	blt	r23,r7,8009c94 <__sfvwrite_r+0x33c>
 8009ba8:	80800917 	ldw	r2,36(r16)
 8009bac:	81400717 	ldw	r5,28(r16)
 8009bb0:	a809883a 	mov	r4,r21
 8009bb4:	d8c00015 	stw	r3,0(sp)
 8009bb8:	e00d883a 	mov	r6,fp
 8009bbc:	103ee83a 	callr	r2
 8009bc0:	1027883a 	mov	r19,r2
 8009bc4:	d8c00017 	ldw	r3,0(sp)
 8009bc8:	00bfe20e 	bge	zero,r2,8009b54 <__sfvwrite_r+0x1fc>
 8009bcc:	b4edc83a 	sub	r22,r22,r19
 8009bd0:	b0001a26 	beq	r22,zero,8009c3c <__sfvwrite_r+0x2e4>
 8009bd4:	a0800217 	ldw	r2,8(r20)
 8009bd8:	e4f9883a 	add	fp,fp,r19
 8009bdc:	94e5c83a 	sub	r18,r18,r19
 8009be0:	14e7c83a 	sub	r19,r2,r19
 8009be4:	a4c00215 	stw	r19,8(r20)
 8009be8:	983f8c26 	beq	r19,zero,8009a1c <__sfvwrite_r+0xc4>
 8009bec:	903fe21e 	bne	r18,zero,8009b78 <__sfvwrite_r+0x220>
 8009bf0:	8f000017 	ldw	fp,0(r17)
 8009bf4:	8c800117 	ldw	r18,4(r17)
 8009bf8:	0007883a 	mov	r3,zero
 8009bfc:	8c400204 	addi	r17,r17,8
 8009c00:	003fdc06 	br	8009b74 <__sfvwrite_r+0x21c>
 8009c04:	e00b883a 	mov	r5,fp
 8009c08:	980d883a 	mov	r6,r19
 8009c0c:	d8c00015 	stw	r3,0(sp)
 8009c10:	800a2000 	call	800a200 <memmove>
 8009c14:	80800017 	ldw	r2,0(r16)
 8009c18:	a809883a 	mov	r4,r21
 8009c1c:	800b883a 	mov	r5,r16
 8009c20:	14c5883a 	add	r2,r2,r19
 8009c24:	80800015 	stw	r2,0(r16)
 8009c28:	800208c0 	call	800208c <_fflush_r>
 8009c2c:	d8c00017 	ldw	r3,0(sp)
 8009c30:	103fc81e 	bne	r2,zero,8009b54 <__sfvwrite_r+0x1fc>
 8009c34:	b4edc83a 	sub	r22,r22,r19
 8009c38:	b03fe61e 	bne	r22,zero,8009bd4 <__sfvwrite_r+0x27c>
 8009c3c:	a809883a 	mov	r4,r21
 8009c40:	800b883a 	mov	r5,r16
 8009c44:	800208c0 	call	800208c <_fflush_r>
 8009c48:	103fc21e 	bne	r2,zero,8009b54 <__sfvwrite_r+0x1fc>
 8009c4c:	0007883a 	mov	r3,zero
 8009c50:	003fe006 	br	8009bd4 <__sfvwrite_r+0x27c>
 8009c54:	81000017 	ldw	r4,0(r16)
 8009c58:	80800417 	ldw	r2,16(r16)
 8009c5c:	1100022e 	bgeu	r2,r4,8009c68 <__sfvwrite_r+0x310>
 8009c60:	9839883a 	mov	fp,r19
 8009c64:	9c806036 	bltu	r19,r18,8009de8 <__sfvwrite_r+0x490>
 8009c68:	81c00517 	ldw	r7,20(r16)
 8009c6c:	91c01c36 	bltu	r18,r7,8009ce0 <__sfvwrite_r+0x388>
 8009c70:	80800917 	ldw	r2,36(r16)
 8009c74:	81400717 	ldw	r5,28(r16)
 8009c78:	a809883a 	mov	r4,r21
 8009c7c:	b00d883a 	mov	r6,r22
 8009c80:	103ee83a 	callr	r2
 8009c84:	1027883a 	mov	r19,r2
 8009c88:	00bfb20e 	bge	zero,r2,8009b54 <__sfvwrite_r+0x1fc>
 8009c8c:	1039883a 	mov	fp,r2
 8009c90:	003f9806 	br	8009af4 <__sfvwrite_r+0x19c>
 8009c94:	b80d883a 	mov	r6,r23
 8009c98:	e00b883a 	mov	r5,fp
 8009c9c:	d8c00015 	stw	r3,0(sp)
 8009ca0:	800a2000 	call	800a200 <memmove>
 8009ca4:	80800217 	ldw	r2,8(r16)
 8009ca8:	81000017 	ldw	r4,0(r16)
 8009cac:	b827883a 	mov	r19,r23
 8009cb0:	15c5c83a 	sub	r2,r2,r23
 8009cb4:	25ef883a 	add	r23,r4,r23
 8009cb8:	80800215 	stw	r2,8(r16)
 8009cbc:	85c00015 	stw	r23,0(r16)
 8009cc0:	d8c00017 	ldw	r3,0(sp)
 8009cc4:	003fc106 	br	8009bcc <__sfvwrite_r+0x274>
 8009cc8:	81000017 	ldw	r4,0(r16)
 8009ccc:	902f883a 	mov	r23,r18
 8009cd0:	9039883a 	mov	fp,r18
 8009cd4:	9027883a 	mov	r19,r18
 8009cd8:	900f883a 	mov	r7,r18
 8009cdc:	003f7a06 	br	8009ac8 <__sfvwrite_r+0x170>
 8009ce0:	b00b883a 	mov	r5,r22
 8009ce4:	900d883a 	mov	r6,r18
 8009ce8:	800a2000 	call	800a200 <memmove>
 8009cec:	80c00217 	ldw	r3,8(r16)
 8009cf0:	80800017 	ldw	r2,0(r16)
 8009cf4:	9027883a 	mov	r19,r18
 8009cf8:	1c87c83a 	sub	r3,r3,r18
 8009cfc:	1485883a 	add	r2,r2,r18
 8009d00:	80c00215 	stw	r3,8(r16)
 8009d04:	80800015 	stw	r2,0(r16)
 8009d08:	9039883a 	mov	fp,r18
 8009d0c:	003f7906 	br	8009af4 <__sfvwrite_r+0x19c>
 8009d10:	e009883a 	mov	r4,fp
 8009d14:	01400284 	movi	r5,10
 8009d18:	900d883a 	mov	r6,r18
 8009d1c:	800a1080 	call	800a108 <memchr>
 8009d20:	10003c26 	beq	r2,zero,8009e14 <__sfvwrite_r+0x4bc>
 8009d24:	15800044 	addi	r22,r2,1
 8009d28:	b72dc83a 	sub	r22,r22,fp
 8009d2c:	00c00044 	movi	r3,1
 8009d30:	003f9206 	br	8009b7c <__sfvwrite_r+0x224>
 8009d34:	81000517 	ldw	r4,20(r16)
 8009d38:	81400417 	ldw	r5,16(r16)
 8009d3c:	80c00017 	ldw	r3,0(r16)
 8009d40:	210d883a 	add	r6,r4,r4
 8009d44:	3109883a 	add	r4,r6,r4
 8009d48:	2026d7fa 	srli	r19,r4,31
 8009d4c:	1979c83a 	sub	fp,r3,r5
 8009d50:	e1800044 	addi	r6,fp,1
 8009d54:	9909883a 	add	r4,r19,r4
 8009d58:	2027d07a 	srai	r19,r4,1
 8009d5c:	3489883a 	add	r4,r6,r18
 8009d60:	980d883a 	mov	r6,r19
 8009d64:	9900022e 	bgeu	r19,r4,8009d70 <__sfvwrite_r+0x418>
 8009d68:	2027883a 	mov	r19,r4
 8009d6c:	200d883a 	mov	r6,r4
 8009d70:	1081000c 	andi	r2,r2,1024
 8009d74:	10bfffcc 	andi	r2,r2,65535
 8009d78:	10a0001c 	xori	r2,r2,32768
 8009d7c:	10a00004 	addi	r2,r2,-32768
 8009d80:	a809883a 	mov	r4,r21
 8009d84:	103f6b26 	beq	r2,zero,8009b34 <__sfvwrite_r+0x1dc>
 8009d88:	300b883a 	mov	r5,r6
 8009d8c:	800372c0 	call	800372c <_malloc_r>
 8009d90:	102f883a 	mov	r23,r2
 8009d94:	103f6d26 	beq	r2,zero,8009b4c <__sfvwrite_r+0x1f4>
 8009d98:	81400417 	ldw	r5,16(r16)
 8009d9c:	1009883a 	mov	r4,r2
 8009da0:	e00d883a 	mov	r6,fp
 8009da4:	8003eb00 	call	8003eb0 <memcpy>
 8009da8:	8080030b 	ldhu	r2,12(r16)
 8009dac:	00fedfc4 	movi	r3,-1153
 8009db0:	10c4703a 	and	r2,r2,r3
 8009db4:	10802014 	ori	r2,r2,128
 8009db8:	8080030d 	sth	r2,12(r16)
 8009dbc:	bf09883a 	add	r4,r23,fp
 8009dc0:	9f07c83a 	sub	r3,r19,fp
 8009dc4:	85c00415 	stw	r23,16(r16)
 8009dc8:	84c00515 	stw	r19,20(r16)
 8009dcc:	81000015 	stw	r4,0(r16)
 8009dd0:	902f883a 	mov	r23,r18
 8009dd4:	80c00215 	stw	r3,8(r16)
 8009dd8:	9039883a 	mov	fp,r18
 8009ddc:	9027883a 	mov	r19,r18
 8009de0:	900f883a 	mov	r7,r18
 8009de4:	003f3806 	br	8009ac8 <__sfvwrite_r+0x170>
 8009de8:	b00b883a 	mov	r5,r22
 8009dec:	980d883a 	mov	r6,r19
 8009df0:	800a2000 	call	800a200 <memmove>
 8009df4:	80800017 	ldw	r2,0(r16)
 8009df8:	a809883a 	mov	r4,r21
 8009dfc:	800b883a 	mov	r5,r16
 8009e00:	14c5883a 	add	r2,r2,r19
 8009e04:	80800015 	stw	r2,0(r16)
 8009e08:	800208c0 	call	800208c <_fflush_r>
 8009e0c:	103f3926 	beq	r2,zero,8009af4 <__sfvwrite_r+0x19c>
 8009e10:	003f5006 	br	8009b54 <__sfvwrite_r+0x1fc>
 8009e14:	95800044 	addi	r22,r18,1
 8009e18:	00c00044 	movi	r3,1
 8009e1c:	003f5706 	br	8009b7c <__sfvwrite_r+0x224>
 8009e20:	80c0030b 	ldhu	r3,12(r16)
 8009e24:	00bfffc4 	movi	r2,-1
 8009e28:	18c01014 	ori	r3,r3,64
 8009e2c:	80c0030d 	sth	r3,12(r16)
 8009e30:	00c00244 	movi	r3,9
 8009e34:	a8c00015 	stw	r3,0(r21)
 8009e38:	003ef906 	br	8009a20 <__sfvwrite_r+0xc8>

08009e3c <_isatty_r>:
 8009e3c:	defffd04 	addi	sp,sp,-12
 8009e40:	dc400115 	stw	r17,4(sp)
 8009e44:	dc000015 	stw	r16,0(sp)
 8009e48:	2023883a 	mov	r17,r4
 8009e4c:	040200b4 	movhi	r16,2050
 8009e50:	84207a04 	addi	r16,r16,-32280
 8009e54:	2809883a 	mov	r4,r5
 8009e58:	dfc00215 	stw	ra,8(sp)
 8009e5c:	80000015 	stw	zero,0(r16)
 8009e60:	80112800 	call	8011280 <isatty>
 8009e64:	00ffffc4 	movi	r3,-1
 8009e68:	10c00526 	beq	r2,r3,8009e80 <_isatty_r+0x44>
 8009e6c:	dfc00217 	ldw	ra,8(sp)
 8009e70:	dc400117 	ldw	r17,4(sp)
 8009e74:	dc000017 	ldw	r16,0(sp)
 8009e78:	dec00304 	addi	sp,sp,12
 8009e7c:	f800283a 	ret
 8009e80:	80c00017 	ldw	r3,0(r16)
 8009e84:	183ff926 	beq	r3,zero,8009e6c <_isatty_r+0x30>
 8009e88:	88c00015 	stw	r3,0(r17)
 8009e8c:	dfc00217 	ldw	ra,8(sp)
 8009e90:	dc400117 	ldw	r17,4(sp)
 8009e94:	dc000017 	ldw	r16,0(sp)
 8009e98:	dec00304 	addi	sp,sp,12
 8009e9c:	f800283a 	ret

08009ea0 <iswspace>:
 8009ea0:	00803fc4 	movi	r2,255
 8009ea4:	11000a36 	bltu	r2,r4,8009ed0 <iswspace+0x30>
 8009ea8:	00820074 	movhi	r2,2049
 8009eac:	10999f04 	addi	r2,r2,26236
 8009eb0:	10800017 	ldw	r2,0(r2)
 8009eb4:	1109883a 	add	r4,r2,r4
 8009eb8:	20800003 	ldbu	r2,0(r4)
 8009ebc:	1080020c 	andi	r2,r2,8
 8009ec0:	10803fcc 	andi	r2,r2,255
 8009ec4:	1080201c 	xori	r2,r2,128
 8009ec8:	10bfe004 	addi	r2,r2,-128
 8009ecc:	f800283a 	ret
 8009ed0:	0005883a 	mov	r2,zero
 8009ed4:	f800283a 	ret

08009ed8 <_setlocale_r>:
 8009ed8:	defffc04 	addi	sp,sp,-16
 8009edc:	dc800215 	stw	r18,8(sp)
 8009ee0:	dc400115 	stw	r17,4(sp)
 8009ee4:	dc000015 	stw	r16,0(sp)
 8009ee8:	dfc00315 	stw	ra,12(sp)
 8009eec:	3021883a 	mov	r16,r6
 8009ef0:	2023883a 	mov	r17,r4
 8009ef4:	2825883a 	mov	r18,r5
 8009ef8:	30001626 	beq	r6,zero,8009f54 <_setlocale_r+0x7c>
 8009efc:	3009883a 	mov	r4,r6
 8009f00:	01420074 	movhi	r5,2049
 8009f04:	2951ba04 	addi	r5,r5,18152
 8009f08:	800bde40 	call	800bde4 <strcmp>
 8009f0c:	10000a1e 	bne	r2,zero,8009f38 <_setlocale_r+0x60>
 8009f10:	8c800c15 	stw	r18,48(r17)
 8009f14:	8c000d15 	stw	r16,52(r17)
 8009f18:	00820074 	movhi	r2,2049
 8009f1c:	1091ba04 	addi	r2,r2,18152
 8009f20:	dfc00317 	ldw	ra,12(sp)
 8009f24:	dc800217 	ldw	r18,8(sp)
 8009f28:	dc400117 	ldw	r17,4(sp)
 8009f2c:	dc000017 	ldw	r16,0(sp)
 8009f30:	dec00404 	addi	sp,sp,16
 8009f34:	f800283a 	ret
 8009f38:	8009883a 	mov	r4,r16
 8009f3c:	01420074 	movhi	r5,2049
 8009f40:	2951c404 	addi	r5,r5,18192
 8009f44:	800bde40 	call	800bde4 <strcmp>
 8009f48:	103ff126 	beq	r2,zero,8009f10 <_setlocale_r+0x38>
 8009f4c:	0005883a 	mov	r2,zero
 8009f50:	003ff306 	br	8009f20 <_setlocale_r+0x48>
 8009f54:	00820074 	movhi	r2,2049
 8009f58:	1091ba04 	addi	r2,r2,18152
 8009f5c:	dfc00317 	ldw	ra,12(sp)
 8009f60:	dc800217 	ldw	r18,8(sp)
 8009f64:	dc400117 	ldw	r17,4(sp)
 8009f68:	dc000017 	ldw	r16,0(sp)
 8009f6c:	dec00404 	addi	sp,sp,16
 8009f70:	f800283a 	ret

08009f74 <__locale_charset>:
 8009f74:	00820074 	movhi	r2,2049
 8009f78:	10928404 	addi	r2,r2,18960
 8009f7c:	f800283a 	ret

08009f80 <_localeconv_r>:
 8009f80:	00820074 	movhi	r2,2049
 8009f84:	10928804 	addi	r2,r2,18976
 8009f88:	f800283a 	ret

08009f8c <setlocale>:
 8009f8c:	00c20074 	movhi	r3,2049
 8009f90:	18d99c04 	addi	r3,r3,26224
 8009f94:	2005883a 	mov	r2,r4
 8009f98:	19000017 	ldw	r4,0(r3)
 8009f9c:	280d883a 	mov	r6,r5
 8009fa0:	100b883a 	mov	r5,r2
 8009fa4:	8009ed81 	jmpi	8009ed8 <_setlocale_r>

08009fa8 <localeconv>:
 8009fa8:	00820074 	movhi	r2,2049
 8009fac:	10928804 	addi	r2,r2,18976
 8009fb0:	f800283a 	ret

08009fb4 <_lseek_r>:
 8009fb4:	defffd04 	addi	sp,sp,-12
 8009fb8:	dc400115 	stw	r17,4(sp)
 8009fbc:	dc000015 	stw	r16,0(sp)
 8009fc0:	2023883a 	mov	r17,r4
 8009fc4:	040200b4 	movhi	r16,2050
 8009fc8:	84207a04 	addi	r16,r16,-32280
 8009fcc:	2809883a 	mov	r4,r5
 8009fd0:	300b883a 	mov	r5,r6
 8009fd4:	380d883a 	mov	r6,r7
 8009fd8:	dfc00215 	stw	ra,8(sp)
 8009fdc:	80000015 	stw	zero,0(r16)
 8009fe0:	80114600 	call	8011460 <lseek>
 8009fe4:	00ffffc4 	movi	r3,-1
 8009fe8:	10c00526 	beq	r2,r3,800a000 <_lseek_r+0x4c>
 8009fec:	dfc00217 	ldw	ra,8(sp)
 8009ff0:	dc400117 	ldw	r17,4(sp)
 8009ff4:	dc000017 	ldw	r16,0(sp)
 8009ff8:	dec00304 	addi	sp,sp,12
 8009ffc:	f800283a 	ret
 800a000:	80c00017 	ldw	r3,0(r16)
 800a004:	183ff926 	beq	r3,zero,8009fec <_lseek_r+0x38>
 800a008:	88c00015 	stw	r3,0(r17)
 800a00c:	dfc00217 	ldw	ra,8(sp)
 800a010:	dc400117 	ldw	r17,4(sp)
 800a014:	dc000017 	ldw	r16,0(sp)
 800a018:	dec00304 	addi	sp,sp,12
 800a01c:	f800283a 	ret

0800a020 <_mbrtowc_r>:
 800a020:	defffc04 	addi	sp,sp,-16
 800a024:	dc000115 	stw	r16,4(sp)
 800a028:	dc000417 	ldw	r16,16(sp)
 800a02c:	dc400215 	stw	r17,8(sp)
 800a030:	dfc00315 	stw	ra,12(sp)
 800a034:	dc000015 	stw	r16,0(sp)
 800a038:	2023883a 	mov	r17,r4
 800a03c:	30000b26 	beq	r6,zero,800a06c <_mbrtowc_r+0x4c>
 800a040:	800a0c40 	call	800a0c4 <_mbtowc_r>
 800a044:	00ffffc4 	movi	r3,-1
 800a048:	10c0031e 	bne	r2,r3,800a058 <_mbrtowc_r+0x38>
 800a04c:	80000015 	stw	zero,0(r16)
 800a050:	00c02284 	movi	r3,138
 800a054:	88c00015 	stw	r3,0(r17)
 800a058:	dfc00317 	ldw	ra,12(sp)
 800a05c:	dc400217 	ldw	r17,8(sp)
 800a060:	dc000117 	ldw	r16,4(sp)
 800a064:	dec00404 	addi	sp,sp,16
 800a068:	f800283a 	ret
 800a06c:	000b883a 	mov	r5,zero
 800a070:	01820074 	movhi	r6,2049
 800a074:	3191c404 	addi	r6,r6,18192
 800a078:	01c00044 	movi	r7,1
 800a07c:	800a0c40 	call	800a0c4 <_mbtowc_r>
 800a080:	003ff006 	br	800a044 <_mbrtowc_r+0x24>

0800a084 <mbrtowc>:
 800a084:	00820074 	movhi	r2,2049
 800a088:	10999c04 	addi	r2,r2,26224
 800a08c:	2011883a 	mov	r8,r4
 800a090:	11000017 	ldw	r4,0(r2)
 800a094:	defffe04 	addi	sp,sp,-8
 800a098:	2807883a 	mov	r3,r5
 800a09c:	3005883a 	mov	r2,r6
 800a0a0:	d9c00015 	stw	r7,0(sp)
 800a0a4:	400b883a 	mov	r5,r8
 800a0a8:	180d883a 	mov	r6,r3
 800a0ac:	100f883a 	mov	r7,r2
 800a0b0:	dfc00115 	stw	ra,4(sp)
 800a0b4:	800a0200 	call	800a020 <_mbrtowc_r>
 800a0b8:	dfc00117 	ldw	ra,4(sp)
 800a0bc:	dec00204 	addi	sp,sp,8
 800a0c0:	f800283a 	ret

0800a0c4 <_mbtowc_r>:
 800a0c4:	deffff04 	addi	sp,sp,-4
 800a0c8:	28000826 	beq	r5,zero,800a0ec <_mbtowc_r+0x28>
 800a0cc:	30000926 	beq	r6,zero,800a0f4 <_mbtowc_r+0x30>
 800a0d0:	38000b26 	beq	r7,zero,800a100 <_mbtowc_r+0x3c>
 800a0d4:	30800003 	ldbu	r2,0(r6)
 800a0d8:	28800015 	stw	r2,0(r5)
 800a0dc:	30800003 	ldbu	r2,0(r6)
 800a0e0:	1004c03a 	cmpne	r2,r2,zero
 800a0e4:	dec00104 	addi	sp,sp,4
 800a0e8:	f800283a 	ret
 800a0ec:	d80b883a 	mov	r5,sp
 800a0f0:	303ff71e 	bne	r6,zero,800a0d0 <_mbtowc_r+0xc>
 800a0f4:	0005883a 	mov	r2,zero
 800a0f8:	dec00104 	addi	sp,sp,4
 800a0fc:	f800283a 	ret
 800a100:	00bfff84 	movi	r2,-2
 800a104:	003ff706 	br	800a0e4 <_mbtowc_r+0x20>

0800a108 <memchr>:
 800a108:	008000c4 	movi	r2,3
 800a10c:	29403fcc 	andi	r5,r5,255
 800a110:	1180282e 	bgeu	r2,r6,800a1b4 <memchr+0xac>
 800a114:	2086703a 	and	r3,r4,r2
 800a118:	1800351e 	bne	r3,zero,800a1f0 <memchr+0xe8>
 800a11c:	2816923a 	slli	r11,r5,8
 800a120:	2093883a 	add	r9,r4,r2
 800a124:	22000084 	addi	r8,r4,2
 800a128:	5957883a 	add	r11,r11,r5
 800a12c:	5816923a 	slli	r11,r11,8
 800a130:	20c00044 	addi	r3,r4,1
 800a134:	037fbff4 	movhi	r13,65279
 800a138:	6b7fbfc4 	addi	r13,r13,-257
 800a13c:	5957883a 	add	r11,r11,r5
 800a140:	5816923a 	slli	r11,r11,8
 800a144:	03202074 	movhi	r12,32897
 800a148:	63202004 	addi	r12,r12,-32640
 800a14c:	101d883a 	mov	r14,r2
 800a150:	5957883a 	add	r11,r11,r5
 800a154:	21c00017 	ldw	r7,0(r4)
 800a158:	31bfff04 	addi	r6,r6,-4
 800a15c:	1805883a 	mov	r2,r3
 800a160:	3acef03a 	xor	r7,r7,r11
 800a164:	3b55883a 	add	r10,r7,r13
 800a168:	01ce303a 	nor	r7,zero,r7
 800a16c:	51ce703a 	and	r7,r10,r7
 800a170:	3b0e703a 	and	r7,r7,r12
 800a174:	38000a26 	beq	r7,zero,800a1a0 <memchr+0x98>
 800a178:	21c00003 	ldbu	r7,0(r4)
 800a17c:	39401e26 	beq	r7,r5,800a1f8 <memchr+0xf0>
 800a180:	19c00003 	ldbu	r7,0(r3)
 800a184:	39401926 	beq	r7,r5,800a1ec <memchr+0xe4>
 800a188:	41c00003 	ldbu	r7,0(r8)
 800a18c:	4005883a 	mov	r2,r8
 800a190:	39401626 	beq	r7,r5,800a1ec <memchr+0xe4>
 800a194:	49c00003 	ldbu	r7,0(r9)
 800a198:	4805883a 	mov	r2,r9
 800a19c:	39401326 	beq	r7,r5,800a1ec <memchr+0xe4>
 800a1a0:	21000104 	addi	r4,r4,4
 800a1a4:	4a400104 	addi	r9,r9,4
 800a1a8:	42000104 	addi	r8,r8,4
 800a1ac:	18c00104 	addi	r3,r3,4
 800a1b0:	71bfe836 	bltu	r14,r6,800a154 <memchr+0x4c>
 800a1b4:	2005883a 	mov	r2,r4
 800a1b8:	30000a26 	beq	r6,zero,800a1e4 <memchr+0xdc>
 800a1bc:	10c00003 	ldbu	r3,0(r2)
 800a1c0:	19400a26 	beq	r3,r5,800a1ec <memchr+0xe4>
 800a1c4:	10c00044 	addi	r3,r2,1
 800a1c8:	118d883a 	add	r6,r2,r6
 800a1cc:	00000306 	br	800a1dc <memchr+0xd4>
 800a1d0:	11000003 	ldbu	r4,0(r2)
 800a1d4:	18c00044 	addi	r3,r3,1
 800a1d8:	21400426 	beq	r4,r5,800a1ec <memchr+0xe4>
 800a1dc:	1805883a 	mov	r2,r3
 800a1e0:	19bffb1e 	bne	r3,r6,800a1d0 <memchr+0xc8>
 800a1e4:	0005883a 	mov	r2,zero
 800a1e8:	f800283a 	ret
 800a1ec:	f800283a 	ret
 800a1f0:	2005883a 	mov	r2,r4
 800a1f4:	003ff106 	br	800a1bc <memchr+0xb4>
 800a1f8:	2005883a 	mov	r2,r4
 800a1fc:	f800283a 	ret

0800a200 <memmove>:
 800a200:	defffb04 	addi	sp,sp,-20
 800a204:	dc000015 	stw	r16,0(sp)
 800a208:	dfc00415 	stw	ra,16(sp)
 800a20c:	dcc00315 	stw	r19,12(sp)
 800a210:	dc800215 	stw	r18,8(sp)
 800a214:	dc400115 	stw	r17,4(sp)
 800a218:	2021883a 	mov	r16,r4
 800a21c:	300f883a 	mov	r7,r6
 800a220:	2900122e 	bgeu	r5,r4,800a26c <memmove+0x6c>
 800a224:	2987883a 	add	r3,r5,r6
 800a228:	20c0102e 	bgeu	r4,r3,800a26c <memmove+0x6c>
 800a22c:	218b883a 	add	r5,r4,r6
 800a230:	1989c83a 	sub	r4,r3,r6
 800a234:	30000526 	beq	r6,zero,800a24c <memmove+0x4c>
 800a238:	18ffffc4 	addi	r3,r3,-1
 800a23c:	18800003 	ldbu	r2,0(r3)
 800a240:	297fffc4 	addi	r5,r5,-1
 800a244:	28800005 	stb	r2,0(r5)
 800a248:	193ffb1e 	bne	r3,r4,800a238 <memmove+0x38>
 800a24c:	8005883a 	mov	r2,r16
 800a250:	dfc00417 	ldw	ra,16(sp)
 800a254:	dcc00317 	ldw	r19,12(sp)
 800a258:	dc800217 	ldw	r18,8(sp)
 800a25c:	dc400117 	ldw	r17,4(sp)
 800a260:	dc000017 	ldw	r16,0(sp)
 800a264:	dec00504 	addi	sp,sp,20
 800a268:	f800283a 	ret
 800a26c:	008003c4 	movi	r2,15
 800a270:	1180422e 	bgeu	r2,r6,800a37c <memmove+0x17c>
 800a274:	2c04b03a 	or	r2,r5,r16
 800a278:	108000cc 	andi	r2,r2,3
 800a27c:	10003f1e 	bne	r2,zero,800a37c <memmove+0x17c>
 800a280:	32bffc04 	addi	r10,r6,-16
 800a284:	5014d13a 	srli	r10,r10,4
 800a288:	81000404 	addi	r4,r16,16
 800a28c:	8007883a 	mov	r3,r16
 800a290:	5004913a 	slli	r2,r10,4
 800a294:	280f883a 	mov	r7,r5
 800a298:	2089883a 	add	r4,r4,r2
 800a29c:	38800017 	ldw	r2,0(r7)
 800a2a0:	18c00404 	addi	r3,r3,16
 800a2a4:	39c00404 	addi	r7,r7,16
 800a2a8:	18bffc15 	stw	r2,-16(r3)
 800a2ac:	38bffd17 	ldw	r2,-12(r7)
 800a2b0:	18bffd15 	stw	r2,-12(r3)
 800a2b4:	38bffe17 	ldw	r2,-8(r7)
 800a2b8:	18bffe15 	stw	r2,-8(r3)
 800a2bc:	38bfff17 	ldw	r2,-4(r7)
 800a2c0:	18bfff15 	stw	r2,-4(r3)
 800a2c4:	193ff51e 	bne	r3,r4,800a29c <memmove+0x9c>
 800a2c8:	52800044 	addi	r10,r10,1
 800a2cc:	5014913a 	slli	r10,r10,4
 800a2d0:	31c003cc 	andi	r7,r6,15
 800a2d4:	008000c4 	movi	r2,3
 800a2d8:	8287883a 	add	r3,r16,r10
 800a2dc:	2a95883a 	add	r10,r5,r10
 800a2e0:	11c0282e 	bgeu	r2,r7,800a384 <memmove+0x184>
 800a2e4:	3c7fff04 	addi	r17,r7,-4
 800a2e8:	8808d0ba 	srli	r4,r17,2
 800a2ec:	1a400104 	addi	r9,r3,4
 800a2f0:	180d883a 	mov	r6,r3
 800a2f4:	2105883a 	add	r2,r4,r4
 800a2f8:	1085883a 	add	r2,r2,r2
 800a2fc:	4893883a 	add	r9,r9,r2
 800a300:	5005883a 	mov	r2,r10
 800a304:	12000017 	ldw	r8,0(r2)
 800a308:	31800104 	addi	r6,r6,4
 800a30c:	10800104 	addi	r2,r2,4
 800a310:	323fff15 	stw	r8,-4(r6)
 800a314:	327ffb1e 	bne	r6,r9,800a304 <memmove+0x104>
 800a318:	20800044 	addi	r2,r4,1
 800a31c:	1085883a 	add	r2,r2,r2
 800a320:	1085883a 	add	r2,r2,r2
 800a324:	017fff04 	movi	r5,-4
 800a328:	18a5883a 	add	r18,r3,r2
 800a32c:	50a7883a 	add	r19,r10,r2
 800a330:	8001a6c0 	call	8001a6c <__mulsi3>
 800a334:	144f883a 	add	r7,r2,r17
 800a338:	980b883a 	mov	r5,r19
 800a33c:	9007883a 	mov	r3,r18
 800a340:	383fc226 	beq	r7,zero,800a24c <memmove+0x4c>
 800a344:	19cf883a 	add	r7,r3,r7
 800a348:	29800003 	ldbu	r6,0(r5)
 800a34c:	18c00044 	addi	r3,r3,1
 800a350:	29400044 	addi	r5,r5,1
 800a354:	19bfffc5 	stb	r6,-1(r3)
 800a358:	19fffb1e 	bne	r3,r7,800a348 <memmove+0x148>
 800a35c:	8005883a 	mov	r2,r16
 800a360:	dfc00417 	ldw	ra,16(sp)
 800a364:	dcc00317 	ldw	r19,12(sp)
 800a368:	dc800217 	ldw	r18,8(sp)
 800a36c:	dc400117 	ldw	r17,4(sp)
 800a370:	dc000017 	ldw	r16,0(sp)
 800a374:	dec00504 	addi	sp,sp,20
 800a378:	f800283a 	ret
 800a37c:	8007883a 	mov	r3,r16
 800a380:	003fef06 	br	800a340 <memmove+0x140>
 800a384:	500b883a 	mov	r5,r10
 800a388:	003fed06 	br	800a340 <memmove+0x140>

0800a38c <_Balloc>:
 800a38c:	20801317 	ldw	r2,76(r4)
 800a390:	defffc04 	addi	sp,sp,-16
 800a394:	dc400115 	stw	r17,4(sp)
 800a398:	dc000015 	stw	r16,0(sp)
 800a39c:	dfc00315 	stw	ra,12(sp)
 800a3a0:	dc800215 	stw	r18,8(sp)
 800a3a4:	2023883a 	mov	r17,r4
 800a3a8:	2821883a 	mov	r16,r5
 800a3ac:	10000f26 	beq	r2,zero,800a3ec <_Balloc+0x60>
 800a3b0:	8407883a 	add	r3,r16,r16
 800a3b4:	18c7883a 	add	r3,r3,r3
 800a3b8:	10c7883a 	add	r3,r2,r3
 800a3bc:	18800017 	ldw	r2,0(r3)
 800a3c0:	10001126 	beq	r2,zero,800a408 <_Balloc+0x7c>
 800a3c4:	11000017 	ldw	r4,0(r2)
 800a3c8:	19000015 	stw	r4,0(r3)
 800a3cc:	10000415 	stw	zero,16(r2)
 800a3d0:	10000315 	stw	zero,12(r2)
 800a3d4:	dfc00317 	ldw	ra,12(sp)
 800a3d8:	dc800217 	ldw	r18,8(sp)
 800a3dc:	dc400117 	ldw	r17,4(sp)
 800a3e0:	dc000017 	ldw	r16,0(sp)
 800a3e4:	dec00404 	addi	sp,sp,16
 800a3e8:	f800283a 	ret
 800a3ec:	01400104 	movi	r5,4
 800a3f0:	01800404 	movi	r6,16
 800a3f4:	800e5340 	call	800e534 <_calloc_r>
 800a3f8:	88801315 	stw	r2,76(r17)
 800a3fc:	103fec1e 	bne	r2,zero,800a3b0 <_Balloc+0x24>
 800a400:	0005883a 	mov	r2,zero
 800a404:	003ff306 	br	800a3d4 <_Balloc+0x48>
 800a408:	01400044 	movi	r5,1
 800a40c:	2c24983a 	sll	r18,r5,r16
 800a410:	8809883a 	mov	r4,r17
 800a414:	91800144 	addi	r6,r18,5
 800a418:	318d883a 	add	r6,r6,r6
 800a41c:	318d883a 	add	r6,r6,r6
 800a420:	800e5340 	call	800e534 <_calloc_r>
 800a424:	103ff626 	beq	r2,zero,800a400 <_Balloc+0x74>
 800a428:	14000115 	stw	r16,4(r2)
 800a42c:	14800215 	stw	r18,8(r2)
 800a430:	003fe606 	br	800a3cc <_Balloc+0x40>

0800a434 <_Bfree>:
 800a434:	28000826 	beq	r5,zero,800a458 <_Bfree+0x24>
 800a438:	28c00117 	ldw	r3,4(r5)
 800a43c:	20801317 	ldw	r2,76(r4)
 800a440:	18c7883a 	add	r3,r3,r3
 800a444:	18c7883a 	add	r3,r3,r3
 800a448:	10c5883a 	add	r2,r2,r3
 800a44c:	10c00017 	ldw	r3,0(r2)
 800a450:	28c00015 	stw	r3,0(r5)
 800a454:	11400015 	stw	r5,0(r2)
 800a458:	f800283a 	ret

0800a45c <__multadd>:
 800a45c:	defff604 	addi	sp,sp,-40
 800a460:	dd400515 	stw	r21,20(sp)
 800a464:	2d400417 	ldw	r21,16(r5)
 800a468:	df000815 	stw	fp,32(sp)
 800a46c:	ddc00715 	stw	r23,28(sp)
 800a470:	dd800615 	stw	r22,24(sp)
 800a474:	dd000415 	stw	r20,16(sp)
 800a478:	dc400115 	stw	r17,4(sp)
 800a47c:	dc000015 	stw	r16,0(sp)
 800a480:	dfc00915 	stw	ra,36(sp)
 800a484:	dcc00315 	stw	r19,12(sp)
 800a488:	dc800215 	stw	r18,8(sp)
 800a48c:	282d883a 	mov	r22,r5
 800a490:	202f883a 	mov	r23,r4
 800a494:	3029883a 	mov	r20,r6
 800a498:	3839883a 	mov	fp,r7
 800a49c:	2c000504 	addi	r16,r5,20
 800a4a0:	0023883a 	mov	r17,zero
 800a4a4:	84c00017 	ldw	r19,0(r16)
 800a4a8:	a00b883a 	mov	r5,r20
 800a4ac:	8c400044 	addi	r17,r17,1
 800a4b0:	993fffcc 	andi	r4,r19,65535
 800a4b4:	8001a6c0 	call	8001a6c <__mulsi3>
 800a4b8:	1725883a 	add	r18,r2,fp
 800a4bc:	9808d43a 	srli	r4,r19,16
 800a4c0:	9026d43a 	srli	r19,r18,16
 800a4c4:	a00b883a 	mov	r5,r20
 800a4c8:	8001a6c0 	call	8001a6c <__mulsi3>
 800a4cc:	988f883a 	add	r7,r19,r2
 800a4d0:	3804943a 	slli	r2,r7,16
 800a4d4:	94bfffcc 	andi	r18,r18,65535
 800a4d8:	3838d43a 	srli	fp,r7,16
 800a4dc:	14a5883a 	add	r18,r2,r18
 800a4e0:	84800015 	stw	r18,0(r16)
 800a4e4:	84000104 	addi	r16,r16,4
 800a4e8:	8d7fee16 	blt	r17,r21,800a4a4 <__multadd+0x48>
 800a4ec:	e0000926 	beq	fp,zero,800a514 <__multadd+0xb8>
 800a4f0:	b0800217 	ldw	r2,8(r22)
 800a4f4:	a880140e 	bge	r21,r2,800a548 <__multadd+0xec>
 800a4f8:	a8800144 	addi	r2,r21,5
 800a4fc:	1085883a 	add	r2,r2,r2
 800a500:	1085883a 	add	r2,r2,r2
 800a504:	b085883a 	add	r2,r22,r2
 800a508:	ad400044 	addi	r21,r21,1
 800a50c:	17000015 	stw	fp,0(r2)
 800a510:	b5400415 	stw	r21,16(r22)
 800a514:	b005883a 	mov	r2,r22
 800a518:	dfc00917 	ldw	ra,36(sp)
 800a51c:	df000817 	ldw	fp,32(sp)
 800a520:	ddc00717 	ldw	r23,28(sp)
 800a524:	dd800617 	ldw	r22,24(sp)
 800a528:	dd400517 	ldw	r21,20(sp)
 800a52c:	dd000417 	ldw	r20,16(sp)
 800a530:	dcc00317 	ldw	r19,12(sp)
 800a534:	dc800217 	ldw	r18,8(sp)
 800a538:	dc400117 	ldw	r17,4(sp)
 800a53c:	dc000017 	ldw	r16,0(sp)
 800a540:	dec00a04 	addi	sp,sp,40
 800a544:	f800283a 	ret
 800a548:	b1400117 	ldw	r5,4(r22)
 800a54c:	b809883a 	mov	r4,r23
 800a550:	29400044 	addi	r5,r5,1
 800a554:	800a38c0 	call	800a38c <_Balloc>
 800a558:	b1800417 	ldw	r6,16(r22)
 800a55c:	b1400304 	addi	r5,r22,12
 800a560:	11000304 	addi	r4,r2,12
 800a564:	31800084 	addi	r6,r6,2
 800a568:	318d883a 	add	r6,r6,r6
 800a56c:	318d883a 	add	r6,r6,r6
 800a570:	1021883a 	mov	r16,r2
 800a574:	8003eb00 	call	8003eb0 <memcpy>
 800a578:	b0c00117 	ldw	r3,4(r22)
 800a57c:	b8801317 	ldw	r2,76(r23)
 800a580:	18c7883a 	add	r3,r3,r3
 800a584:	18c7883a 	add	r3,r3,r3
 800a588:	10c5883a 	add	r2,r2,r3
 800a58c:	10c00017 	ldw	r3,0(r2)
 800a590:	b0c00015 	stw	r3,0(r22)
 800a594:	15800015 	stw	r22,0(r2)
 800a598:	802d883a 	mov	r22,r16
 800a59c:	003fd606 	br	800a4f8 <__multadd+0x9c>

0800a5a0 <__s2b>:
 800a5a0:	defff904 	addi	sp,sp,-28
 800a5a4:	dd000415 	stw	r20,16(sp)
 800a5a8:	dc400115 	stw	r17,4(sp)
 800a5ac:	2829883a 	mov	r20,r5
 800a5b0:	2023883a 	mov	r17,r4
 800a5b4:	01400244 	movi	r5,9
 800a5b8:	39000204 	addi	r4,r7,8
 800a5bc:	dcc00315 	stw	r19,12(sp)
 800a5c0:	dc800215 	stw	r18,8(sp)
 800a5c4:	dfc00615 	stw	ra,24(sp)
 800a5c8:	dd400515 	stw	r21,20(sp)
 800a5cc:	dc000015 	stw	r16,0(sp)
 800a5d0:	3825883a 	mov	r18,r7
 800a5d4:	3027883a 	mov	r19,r6
 800a5d8:	8010b800 	call	8010b80 <__divsi3>
 800a5dc:	00c00044 	movi	r3,1
 800a5e0:	000b883a 	mov	r5,zero
 800a5e4:	1880030e 	bge	r3,r2,800a5f4 <__s2b+0x54>
 800a5e8:	18c7883a 	add	r3,r3,r3
 800a5ec:	29400044 	addi	r5,r5,1
 800a5f0:	18bffd16 	blt	r3,r2,800a5e8 <__s2b+0x48>
 800a5f4:	8809883a 	mov	r4,r17
 800a5f8:	800a38c0 	call	800a38c <_Balloc>
 800a5fc:	d8c00717 	ldw	r3,28(sp)
 800a600:	10c00515 	stw	r3,20(r2)
 800a604:	00c00044 	movi	r3,1
 800a608:	10c00415 	stw	r3,16(r2)
 800a60c:	00c00244 	movi	r3,9
 800a610:	1cc0210e 	bge	r3,r19,800a698 <__s2b+0xf8>
 800a614:	a0eb883a 	add	r21,r20,r3
 800a618:	a821883a 	mov	r16,r21
 800a61c:	a4e9883a 	add	r20,r20,r19
 800a620:	81c00007 	ldb	r7,0(r16)
 800a624:	8809883a 	mov	r4,r17
 800a628:	84000044 	addi	r16,r16,1
 800a62c:	100b883a 	mov	r5,r2
 800a630:	01800284 	movi	r6,10
 800a634:	39fff404 	addi	r7,r7,-48
 800a638:	800a45c0 	call	800a45c <__multadd>
 800a63c:	853ff81e 	bne	r16,r20,800a620 <__s2b+0x80>
 800a640:	ace1883a 	add	r16,r21,r19
 800a644:	843ffe04 	addi	r16,r16,-8
 800a648:	9c800a0e 	bge	r19,r18,800a674 <__s2b+0xd4>
 800a64c:	94e5c83a 	sub	r18,r18,r19
 800a650:	84a5883a 	add	r18,r16,r18
 800a654:	81c00007 	ldb	r7,0(r16)
 800a658:	8809883a 	mov	r4,r17
 800a65c:	84000044 	addi	r16,r16,1
 800a660:	100b883a 	mov	r5,r2
 800a664:	01800284 	movi	r6,10
 800a668:	39fff404 	addi	r7,r7,-48
 800a66c:	800a45c0 	call	800a45c <__multadd>
 800a670:	84bff81e 	bne	r16,r18,800a654 <__s2b+0xb4>
 800a674:	dfc00617 	ldw	ra,24(sp)
 800a678:	dd400517 	ldw	r21,20(sp)
 800a67c:	dd000417 	ldw	r20,16(sp)
 800a680:	dcc00317 	ldw	r19,12(sp)
 800a684:	dc800217 	ldw	r18,8(sp)
 800a688:	dc400117 	ldw	r17,4(sp)
 800a68c:	dc000017 	ldw	r16,0(sp)
 800a690:	dec00704 	addi	sp,sp,28
 800a694:	f800283a 	ret
 800a698:	a4000284 	addi	r16,r20,10
 800a69c:	1827883a 	mov	r19,r3
 800a6a0:	003fe906 	br	800a648 <__s2b+0xa8>

0800a6a4 <__hi0bits>:
 800a6a4:	20bfffec 	andhi	r2,r4,65535
 800a6a8:	1000141e 	bne	r2,zero,800a6fc <__hi0bits+0x58>
 800a6ac:	2008943a 	slli	r4,r4,16
 800a6b0:	00800404 	movi	r2,16
 800a6b4:	20ffc02c 	andhi	r3,r4,65280
 800a6b8:	1800021e 	bne	r3,zero,800a6c4 <__hi0bits+0x20>
 800a6bc:	2008923a 	slli	r4,r4,8
 800a6c0:	10800204 	addi	r2,r2,8
 800a6c4:	20fc002c 	andhi	r3,r4,61440
 800a6c8:	1800021e 	bne	r3,zero,800a6d4 <__hi0bits+0x30>
 800a6cc:	2008913a 	slli	r4,r4,4
 800a6d0:	10800104 	addi	r2,r2,4
 800a6d4:	20f0002c 	andhi	r3,r4,49152
 800a6d8:	1800031e 	bne	r3,zero,800a6e8 <__hi0bits+0x44>
 800a6dc:	2109883a 	add	r4,r4,r4
 800a6e0:	10800084 	addi	r2,r2,2
 800a6e4:	2109883a 	add	r4,r4,r4
 800a6e8:	20000316 	blt	r4,zero,800a6f8 <__hi0bits+0x54>
 800a6ec:	2110002c 	andhi	r4,r4,16384
 800a6f0:	2000041e 	bne	r4,zero,800a704 <__hi0bits+0x60>
 800a6f4:	00800804 	movi	r2,32
 800a6f8:	f800283a 	ret
 800a6fc:	0005883a 	mov	r2,zero
 800a700:	003fec06 	br	800a6b4 <__hi0bits+0x10>
 800a704:	10800044 	addi	r2,r2,1
 800a708:	f800283a 	ret

0800a70c <__lo0bits>:
 800a70c:	20c00017 	ldw	r3,0(r4)
 800a710:	188001cc 	andi	r2,r3,7
 800a714:	10000826 	beq	r2,zero,800a738 <__lo0bits+0x2c>
 800a718:	1880004c 	andi	r2,r3,1
 800a71c:	1000211e 	bne	r2,zero,800a7a4 <__lo0bits+0x98>
 800a720:	1880008c 	andi	r2,r3,2
 800a724:	1000211e 	bne	r2,zero,800a7ac <__lo0bits+0xa0>
 800a728:	1806d0ba 	srli	r3,r3,2
 800a72c:	00800084 	movi	r2,2
 800a730:	20c00015 	stw	r3,0(r4)
 800a734:	f800283a 	ret
 800a738:	18bfffcc 	andi	r2,r3,65535
 800a73c:	10001326 	beq	r2,zero,800a78c <__lo0bits+0x80>
 800a740:	0005883a 	mov	r2,zero
 800a744:	19403fcc 	andi	r5,r3,255
 800a748:	2800021e 	bne	r5,zero,800a754 <__lo0bits+0x48>
 800a74c:	1806d23a 	srli	r3,r3,8
 800a750:	10800204 	addi	r2,r2,8
 800a754:	194003cc 	andi	r5,r3,15
 800a758:	2800021e 	bne	r5,zero,800a764 <__lo0bits+0x58>
 800a75c:	1806d13a 	srli	r3,r3,4
 800a760:	10800104 	addi	r2,r2,4
 800a764:	194000cc 	andi	r5,r3,3
 800a768:	2800021e 	bne	r5,zero,800a774 <__lo0bits+0x68>
 800a76c:	1806d0ba 	srli	r3,r3,2
 800a770:	10800084 	addi	r2,r2,2
 800a774:	1940004c 	andi	r5,r3,1
 800a778:	2800081e 	bne	r5,zero,800a79c <__lo0bits+0x90>
 800a77c:	1806d07a 	srli	r3,r3,1
 800a780:	1800051e 	bne	r3,zero,800a798 <__lo0bits+0x8c>
 800a784:	00800804 	movi	r2,32
 800a788:	f800283a 	ret
 800a78c:	1806d43a 	srli	r3,r3,16
 800a790:	00800404 	movi	r2,16
 800a794:	003feb06 	br	800a744 <__lo0bits+0x38>
 800a798:	10800044 	addi	r2,r2,1
 800a79c:	20c00015 	stw	r3,0(r4)
 800a7a0:	f800283a 	ret
 800a7a4:	0005883a 	mov	r2,zero
 800a7a8:	f800283a 	ret
 800a7ac:	1806d07a 	srli	r3,r3,1
 800a7b0:	00800044 	movi	r2,1
 800a7b4:	20c00015 	stw	r3,0(r4)
 800a7b8:	f800283a 	ret

0800a7bc <__i2b>:
 800a7bc:	defffd04 	addi	sp,sp,-12
 800a7c0:	dc000015 	stw	r16,0(sp)
 800a7c4:	04000044 	movi	r16,1
 800a7c8:	dc400115 	stw	r17,4(sp)
 800a7cc:	2823883a 	mov	r17,r5
 800a7d0:	800b883a 	mov	r5,r16
 800a7d4:	dfc00215 	stw	ra,8(sp)
 800a7d8:	800a38c0 	call	800a38c <_Balloc>
 800a7dc:	14400515 	stw	r17,20(r2)
 800a7e0:	14000415 	stw	r16,16(r2)
 800a7e4:	dfc00217 	ldw	ra,8(sp)
 800a7e8:	dc400117 	ldw	r17,4(sp)
 800a7ec:	dc000017 	ldw	r16,0(sp)
 800a7f0:	dec00304 	addi	sp,sp,12
 800a7f4:	f800283a 	ret

0800a7f8 <__multiply>:
 800a7f8:	defff004 	addi	sp,sp,-64
 800a7fc:	dc800815 	stw	r18,32(sp)
 800a800:	dc400715 	stw	r17,28(sp)
 800a804:	34800417 	ldw	r18,16(r6)
 800a808:	2c400417 	ldw	r17,16(r5)
 800a80c:	ddc00d15 	stw	r23,52(sp)
 800a810:	dc000615 	stw	r16,24(sp)
 800a814:	dfc00f15 	stw	ra,60(sp)
 800a818:	df000e15 	stw	fp,56(sp)
 800a81c:	dd800c15 	stw	r22,48(sp)
 800a820:	dd400b15 	stw	r21,44(sp)
 800a824:	dd000a15 	stw	r20,40(sp)
 800a828:	dcc00915 	stw	r19,36(sp)
 800a82c:	2821883a 	mov	r16,r5
 800a830:	302f883a 	mov	r23,r6
 800a834:	8c80050e 	bge	r17,r18,800a84c <__multiply+0x54>
 800a838:	8807883a 	mov	r3,r17
 800a83c:	3021883a 	mov	r16,r6
 800a840:	9023883a 	mov	r17,r18
 800a844:	282f883a 	mov	r23,r5
 800a848:	1825883a 	mov	r18,r3
 800a84c:	80800217 	ldw	r2,8(r16)
 800a850:	8c87883a 	add	r3,r17,r18
 800a854:	d8c00115 	stw	r3,4(sp)
 800a858:	81400117 	ldw	r5,4(r16)
 800a85c:	10c0010e 	bge	r2,r3,800a864 <__multiply+0x6c>
 800a860:	29400044 	addi	r5,r5,1
 800a864:	800a38c0 	call	800a38c <_Balloc>
 800a868:	d8c00117 	ldw	r3,4(sp)
 800a86c:	d8800515 	stw	r2,20(sp)
 800a870:	14c00504 	addi	r19,r2,20
 800a874:	1d400144 	addi	r21,r3,5
 800a878:	ad6b883a 	add	r21,r21,r21
 800a87c:	ad6b883a 	add	r21,r21,r21
 800a880:	156b883a 	add	r21,r2,r21
 800a884:	dd400215 	stw	r21,8(sp)
 800a888:	9805883a 	mov	r2,r19
 800a88c:	9d40042e 	bgeu	r19,r21,800a8a0 <__multiply+0xa8>
 800a890:	d8c00217 	ldw	r3,8(sp)
 800a894:	10000015 	stw	zero,0(r2)
 800a898:	10800104 	addi	r2,r2,4
 800a89c:	10fffc36 	bltu	r2,r3,800a890 <__multiply+0x98>
 800a8a0:	94800144 	addi	r18,r18,5
 800a8a4:	94a5883a 	add	r18,r18,r18
 800a8a8:	94ad883a 	add	r22,r18,r18
 800a8ac:	8c400144 	addi	r17,r17,5
 800a8b0:	8c63883a 	add	r17,r17,r17
 800a8b4:	bdad883a 	add	r22,r23,r22
 800a8b8:	80c00504 	addi	r3,r16,20
 800a8bc:	8c63883a 	add	r17,r17,r17
 800a8c0:	bc800504 	addi	r18,r23,20
 800a8c4:	dd800315 	stw	r22,12(sp)
 800a8c8:	d8c00415 	stw	r3,16(sp)
 800a8cc:	dcc00015 	stw	r19,0(sp)
 800a8d0:	8463883a 	add	r17,r16,r17
 800a8d4:	9580412e 	bgeu	r18,r22,800a9dc <__multiply+0x1e4>
 800a8d8:	90800017 	ldw	r2,0(r18)
 800a8dc:	173fffcc 	andi	fp,r2,65535
 800a8e0:	e0001a26 	beq	fp,zero,800a94c <__multiply+0x154>
 800a8e4:	dd000017 	ldw	r20,0(sp)
 800a8e8:	dd800417 	ldw	r22,16(sp)
 800a8ec:	002b883a 	mov	r21,zero
 800a8f0:	b4c00017 	ldw	r19,0(r22)
 800a8f4:	a4000017 	ldw	r16,0(r20)
 800a8f8:	e00b883a 	mov	r5,fp
 800a8fc:	993fffcc 	andi	r4,r19,65535
 800a900:	8001a6c0 	call	8001a6c <__mulsi3>
 800a904:	9808d43a 	srli	r4,r19,16
 800a908:	817fffcc 	andi	r5,r16,65535
 800a90c:	1145883a 	add	r2,r2,r5
 800a910:	e00b883a 	mov	r5,fp
 800a914:	1567883a 	add	r19,r2,r21
 800a918:	8020d43a 	srli	r16,r16,16
 800a91c:	8001a6c0 	call	8001a6c <__mulsi3>
 800a920:	9808d43a 	srli	r4,r19,16
 800a924:	1405883a 	add	r2,r2,r16
 800a928:	a4c0000d 	sth	r19,0(r20)
 800a92c:	110f883a 	add	r7,r2,r4
 800a930:	a1c0008d 	sth	r7,2(r20)
 800a934:	b5800104 	addi	r22,r22,4
 800a938:	382ad43a 	srli	r21,r7,16
 800a93c:	a5000104 	addi	r20,r20,4
 800a940:	b47feb36 	bltu	r22,r17,800a8f0 <__multiply+0xf8>
 800a944:	a5400015 	stw	r21,0(r20)
 800a948:	90800017 	ldw	r2,0(r18)
 800a94c:	1038d43a 	srli	fp,r2,16
 800a950:	e0001c26 	beq	fp,zero,800a9c4 <__multiply+0x1cc>
 800a954:	d8c00017 	ldw	r3,0(sp)
 800a958:	dd000417 	ldw	r20,16(sp)
 800a95c:	002b883a 	mov	r21,zero
 800a960:	1d800017 	ldw	r22,0(r3)
 800a964:	182f883a 	mov	r23,r3
 800a968:	b021883a 	mov	r16,r22
 800a96c:	a4c00017 	ldw	r19,0(r20)
 800a970:	8020d43a 	srli	r16,r16,16
 800a974:	e00b883a 	mov	r5,fp
 800a978:	993fffcc 	andi	r4,r19,65535
 800a97c:	8001a6c0 	call	8001a6c <__mulsi3>
 800a980:	1405883a 	add	r2,r2,r16
 800a984:	9808d43a 	srli	r4,r19,16
 800a988:	156b883a 	add	r21,r2,r21
 800a98c:	bdc00104 	addi	r23,r23,4
 800a990:	bdbfff0d 	sth	r22,-4(r23)
 800a994:	bd7fff8d 	sth	r21,-2(r23)
 800a998:	bc000017 	ldw	r16,0(r23)
 800a99c:	e00b883a 	mov	r5,fp
 800a9a0:	8001a6c0 	call	8001a6c <__mulsi3>
 800a9a4:	a80ed43a 	srli	r7,r21,16
 800a9a8:	813fffcc 	andi	r4,r16,65535
 800a9ac:	2085883a 	add	r2,r4,r2
 800a9b0:	11ed883a 	add	r22,r2,r7
 800a9b4:	a5000104 	addi	r20,r20,4
 800a9b8:	b02ad43a 	srli	r21,r22,16
 800a9bc:	a47feb36 	bltu	r20,r17,800a96c <__multiply+0x174>
 800a9c0:	bd800015 	stw	r22,0(r23)
 800a9c4:	d8c00017 	ldw	r3,0(sp)
 800a9c8:	94800104 	addi	r18,r18,4
 800a9cc:	18c00104 	addi	r3,r3,4
 800a9d0:	d8c00015 	stw	r3,0(sp)
 800a9d4:	d8c00317 	ldw	r3,12(sp)
 800a9d8:	90ffbf36 	bltu	r18,r3,800a8d8 <__multiply+0xe0>
 800a9dc:	d8c00117 	ldw	r3,4(sp)
 800a9e0:	00c00c0e 	bge	zero,r3,800aa14 <__multiply+0x21c>
 800a9e4:	d8c00217 	ldw	r3,8(sp)
 800a9e8:	18bfff17 	ldw	r2,-4(r3)
 800a9ec:	1d7fff04 	addi	r21,r3,-4
 800a9f0:	10000326 	beq	r2,zero,800aa00 <__multiply+0x208>
 800a9f4:	00000706 	br	800aa14 <__multiply+0x21c>
 800a9f8:	a8800017 	ldw	r2,0(r21)
 800a9fc:	1000051e 	bne	r2,zero,800aa14 <__multiply+0x21c>
 800aa00:	d8c00117 	ldw	r3,4(sp)
 800aa04:	ad7fff04 	addi	r21,r21,-4
 800aa08:	18ffffc4 	addi	r3,r3,-1
 800aa0c:	d8c00115 	stw	r3,4(sp)
 800aa10:	183ff91e 	bne	r3,zero,800a9f8 <__multiply+0x200>
 800aa14:	d8800517 	ldw	r2,20(sp)
 800aa18:	d8c00117 	ldw	r3,4(sp)
 800aa1c:	10c00415 	stw	r3,16(r2)
 800aa20:	dfc00f17 	ldw	ra,60(sp)
 800aa24:	df000e17 	ldw	fp,56(sp)
 800aa28:	ddc00d17 	ldw	r23,52(sp)
 800aa2c:	dd800c17 	ldw	r22,48(sp)
 800aa30:	dd400b17 	ldw	r21,44(sp)
 800aa34:	dd000a17 	ldw	r20,40(sp)
 800aa38:	dcc00917 	ldw	r19,36(sp)
 800aa3c:	dc800817 	ldw	r18,32(sp)
 800aa40:	dc400717 	ldw	r17,28(sp)
 800aa44:	dc000617 	ldw	r16,24(sp)
 800aa48:	dec01004 	addi	sp,sp,64
 800aa4c:	f800283a 	ret

0800aa50 <__pow5mult>:
 800aa50:	defffb04 	addi	sp,sp,-20
 800aa54:	dcc00315 	stw	r19,12(sp)
 800aa58:	dc800215 	stw	r18,8(sp)
 800aa5c:	dc000015 	stw	r16,0(sp)
 800aa60:	dfc00415 	stw	ra,16(sp)
 800aa64:	dc400115 	stw	r17,4(sp)
 800aa68:	308000cc 	andi	r2,r6,3
 800aa6c:	3021883a 	mov	r16,r6
 800aa70:	2027883a 	mov	r19,r4
 800aa74:	2825883a 	mov	r18,r5
 800aa78:	10002e1e 	bne	r2,zero,800ab34 <__pow5mult+0xe4>
 800aa7c:	8021d0ba 	srai	r16,r16,2
 800aa80:	80001a26 	beq	r16,zero,800aaec <__pow5mult+0x9c>
 800aa84:	9c401217 	ldw	r17,72(r19)
 800aa88:	8800061e 	bne	r17,zero,800aaa4 <__pow5mult+0x54>
 800aa8c:	00003406 	br	800ab60 <__pow5mult+0x110>
 800aa90:	8021d07a 	srai	r16,r16,1
 800aa94:	80001526 	beq	r16,zero,800aaec <__pow5mult+0x9c>
 800aa98:	88c00017 	ldw	r3,0(r17)
 800aa9c:	18001b26 	beq	r3,zero,800ab0c <__pow5mult+0xbc>
 800aaa0:	1823883a 	mov	r17,r3
 800aaa4:	80c0004c 	andi	r3,r16,1
 800aaa8:	183ff926 	beq	r3,zero,800aa90 <__pow5mult+0x40>
 800aaac:	900b883a 	mov	r5,r18
 800aab0:	880d883a 	mov	r6,r17
 800aab4:	9809883a 	mov	r4,r19
 800aab8:	800a7f80 	call	800a7f8 <__multiply>
 800aabc:	90001b26 	beq	r18,zero,800ab2c <__pow5mult+0xdc>
 800aac0:	91000117 	ldw	r4,4(r18)
 800aac4:	98c01317 	ldw	r3,76(r19)
 800aac8:	8021d07a 	srai	r16,r16,1
 800aacc:	2109883a 	add	r4,r4,r4
 800aad0:	2109883a 	add	r4,r4,r4
 800aad4:	1907883a 	add	r3,r3,r4
 800aad8:	19000017 	ldw	r4,0(r3)
 800aadc:	91000015 	stw	r4,0(r18)
 800aae0:	1c800015 	stw	r18,0(r3)
 800aae4:	1025883a 	mov	r18,r2
 800aae8:	803feb1e 	bne	r16,zero,800aa98 <__pow5mult+0x48>
 800aaec:	9005883a 	mov	r2,r18
 800aaf0:	dfc00417 	ldw	ra,16(sp)
 800aaf4:	dcc00317 	ldw	r19,12(sp)
 800aaf8:	dc800217 	ldw	r18,8(sp)
 800aafc:	dc400117 	ldw	r17,4(sp)
 800ab00:	dc000017 	ldw	r16,0(sp)
 800ab04:	dec00504 	addi	sp,sp,20
 800ab08:	f800283a 	ret
 800ab0c:	880b883a 	mov	r5,r17
 800ab10:	880d883a 	mov	r6,r17
 800ab14:	9809883a 	mov	r4,r19
 800ab18:	800a7f80 	call	800a7f8 <__multiply>
 800ab1c:	88800015 	stw	r2,0(r17)
 800ab20:	10000015 	stw	zero,0(r2)
 800ab24:	1023883a 	mov	r17,r2
 800ab28:	003fde06 	br	800aaa4 <__pow5mult+0x54>
 800ab2c:	1025883a 	mov	r18,r2
 800ab30:	003fd706 	br	800aa90 <__pow5mult+0x40>
 800ab34:	10bfffc4 	addi	r2,r2,-1
 800ab38:	1085883a 	add	r2,r2,r2
 800ab3c:	00c20074 	movhi	r3,2049
 800ab40:	18d2da04 	addi	r3,r3,19304
 800ab44:	1085883a 	add	r2,r2,r2
 800ab48:	1885883a 	add	r2,r3,r2
 800ab4c:	11800017 	ldw	r6,0(r2)
 800ab50:	000f883a 	mov	r7,zero
 800ab54:	800a45c0 	call	800a45c <__multadd>
 800ab58:	1025883a 	mov	r18,r2
 800ab5c:	003fc706 	br	800aa7c <__pow5mult+0x2c>
 800ab60:	9809883a 	mov	r4,r19
 800ab64:	01409c44 	movi	r5,625
 800ab68:	800a7bc0 	call	800a7bc <__i2b>
 800ab6c:	98801215 	stw	r2,72(r19)
 800ab70:	1023883a 	mov	r17,r2
 800ab74:	10000015 	stw	zero,0(r2)
 800ab78:	003fca06 	br	800aaa4 <__pow5mult+0x54>

0800ab7c <__lshift>:
 800ab7c:	defff904 	addi	sp,sp,-28
 800ab80:	dd400515 	stw	r21,20(sp)
 800ab84:	dc400115 	stw	r17,4(sp)
 800ab88:	2d400417 	ldw	r21,16(r5)
 800ab8c:	3023d17a 	srai	r17,r6,5
 800ab90:	28800217 	ldw	r2,8(r5)
 800ab94:	dd000415 	stw	r20,16(sp)
 800ab98:	8d6b883a 	add	r21,r17,r21
 800ab9c:	dcc00315 	stw	r19,12(sp)
 800aba0:	dc800215 	stw	r18,8(sp)
 800aba4:	dc000015 	stw	r16,0(sp)
 800aba8:	dfc00615 	stw	ra,24(sp)
 800abac:	ac000044 	addi	r16,r21,1
 800abb0:	2825883a 	mov	r18,r5
 800abb4:	3029883a 	mov	r20,r6
 800abb8:	2027883a 	mov	r19,r4
 800abbc:	29400117 	ldw	r5,4(r5)
 800abc0:	1400030e 	bge	r2,r16,800abd0 <__lshift+0x54>
 800abc4:	1085883a 	add	r2,r2,r2
 800abc8:	29400044 	addi	r5,r5,1
 800abcc:	143ffd16 	blt	r2,r16,800abc4 <__lshift+0x48>
 800abd0:	9809883a 	mov	r4,r19
 800abd4:	800a38c0 	call	800a38c <_Balloc>
 800abd8:	10c00504 	addi	r3,r2,20
 800abdc:	0440090e 	bge	zero,r17,800ac04 <__lshift+0x88>
 800abe0:	000f883a 	mov	r7,zero
 800abe4:	18000015 	stw	zero,0(r3)
 800abe8:	39c00044 	addi	r7,r7,1
 800abec:	18c00104 	addi	r3,r3,4
 800abf0:	3c7ffc1e 	bne	r7,r17,800abe4 <__lshift+0x68>
 800abf4:	38c00144 	addi	r3,r7,5
 800abf8:	18c7883a 	add	r3,r3,r3
 800abfc:	18c7883a 	add	r3,r3,r3
 800ac00:	10c7883a 	add	r3,r2,r3
 800ac04:	92000417 	ldw	r8,16(r18)
 800ac08:	a18007cc 	andi	r6,r20,31
 800ac0c:	91c00504 	addi	r7,r18,20
 800ac10:	42000144 	addi	r8,r8,5
 800ac14:	4211883a 	add	r8,r8,r8
 800ac18:	4211883a 	add	r8,r8,r8
 800ac1c:	9211883a 	add	r8,r18,r8
 800ac20:	30002226 	beq	r6,zero,800acac <__lshift+0x130>
 800ac24:	02800804 	movi	r10,32
 800ac28:	5195c83a 	sub	r10,r10,r6
 800ac2c:	000b883a 	mov	r5,zero
 800ac30:	3a400017 	ldw	r9,0(r7)
 800ac34:	18c00104 	addi	r3,r3,4
 800ac38:	39c00104 	addi	r7,r7,4
 800ac3c:	4992983a 	sll	r9,r9,r6
 800ac40:	2a4ab03a 	or	r5,r5,r9
 800ac44:	197fff15 	stw	r5,-4(r3)
 800ac48:	397fff17 	ldw	r5,-4(r7)
 800ac4c:	2a8ad83a 	srl	r5,r5,r10
 800ac50:	3a3ff736 	bltu	r7,r8,800ac30 <__lshift+0xb4>
 800ac54:	19400015 	stw	r5,0(r3)
 800ac58:	28000126 	beq	r5,zero,800ac60 <__lshift+0xe4>
 800ac5c:	ac000084 	addi	r16,r21,2
 800ac60:	91000117 	ldw	r4,4(r18)
 800ac64:	98c01317 	ldw	r3,76(r19)
 800ac68:	843fffc4 	addi	r16,r16,-1
 800ac6c:	2109883a 	add	r4,r4,r4
 800ac70:	2109883a 	add	r4,r4,r4
 800ac74:	1907883a 	add	r3,r3,r4
 800ac78:	19000017 	ldw	r4,0(r3)
 800ac7c:	14000415 	stw	r16,16(r2)
 800ac80:	91000015 	stw	r4,0(r18)
 800ac84:	1c800015 	stw	r18,0(r3)
 800ac88:	dfc00617 	ldw	ra,24(sp)
 800ac8c:	dd400517 	ldw	r21,20(sp)
 800ac90:	dd000417 	ldw	r20,16(sp)
 800ac94:	dcc00317 	ldw	r19,12(sp)
 800ac98:	dc800217 	ldw	r18,8(sp)
 800ac9c:	dc400117 	ldw	r17,4(sp)
 800aca0:	dc000017 	ldw	r16,0(sp)
 800aca4:	dec00704 	addi	sp,sp,28
 800aca8:	f800283a 	ret
 800acac:	39400017 	ldw	r5,0(r7)
 800acb0:	18c00104 	addi	r3,r3,4
 800acb4:	39c00104 	addi	r7,r7,4
 800acb8:	197fff15 	stw	r5,-4(r3)
 800acbc:	3a3fe82e 	bgeu	r7,r8,800ac60 <__lshift+0xe4>
 800acc0:	39400017 	ldw	r5,0(r7)
 800acc4:	18c00104 	addi	r3,r3,4
 800acc8:	39c00104 	addi	r7,r7,4
 800accc:	197fff15 	stw	r5,-4(r3)
 800acd0:	3a3ff636 	bltu	r7,r8,800acac <__lshift+0x130>
 800acd4:	003fe206 	br	800ac60 <__lshift+0xe4>

0800acd8 <__mcmp>:
 800acd8:	20800417 	ldw	r2,16(r4)
 800acdc:	28c00417 	ldw	r3,16(r5)
 800ace0:	10c5c83a 	sub	r2,r2,r3
 800ace4:	10000f1e 	bne	r2,zero,800ad24 <__mcmp+0x4c>
 800ace8:	18c00144 	addi	r3,r3,5
 800acec:	18c7883a 	add	r3,r3,r3
 800acf0:	18c7883a 	add	r3,r3,r3
 800acf4:	21c00504 	addi	r7,r4,20
 800acf8:	28cb883a 	add	r5,r5,r3
 800acfc:	20c9883a 	add	r4,r4,r3
 800ad00:	213fff04 	addi	r4,r4,-4
 800ad04:	297fff04 	addi	r5,r5,-4
 800ad08:	21800017 	ldw	r6,0(r4)
 800ad0c:	28c00017 	ldw	r3,0(r5)
 800ad10:	30c0021e 	bne	r6,r3,800ad1c <__mcmp+0x44>
 800ad14:	393ffa36 	bltu	r7,r4,800ad00 <__mcmp+0x28>
 800ad18:	f800283a 	ret
 800ad1c:	30c00236 	bltu	r6,r3,800ad28 <__mcmp+0x50>
 800ad20:	00800044 	movi	r2,1
 800ad24:	f800283a 	ret
 800ad28:	00bfffc4 	movi	r2,-1
 800ad2c:	f800283a 	ret

0800ad30 <__mdiff>:
 800ad30:	defffb04 	addi	sp,sp,-20
 800ad34:	dc000015 	stw	r16,0(sp)
 800ad38:	2821883a 	mov	r16,r5
 800ad3c:	dc800215 	stw	r18,8(sp)
 800ad40:	300b883a 	mov	r5,r6
 800ad44:	2025883a 	mov	r18,r4
 800ad48:	8009883a 	mov	r4,r16
 800ad4c:	dc400115 	stw	r17,4(sp)
 800ad50:	dfc00415 	stw	ra,16(sp)
 800ad54:	dcc00315 	stw	r19,12(sp)
 800ad58:	3023883a 	mov	r17,r6
 800ad5c:	800acd80 	call	800acd8 <__mcmp>
 800ad60:	10005026 	beq	r2,zero,800aea4 <__mdiff+0x174>
 800ad64:	10004a16 	blt	r2,zero,800ae90 <__mdiff+0x160>
 800ad68:	0027883a 	mov	r19,zero
 800ad6c:	81400117 	ldw	r5,4(r16)
 800ad70:	9009883a 	mov	r4,r18
 800ad74:	800a38c0 	call	800a38c <_Balloc>
 800ad78:	82400417 	ldw	r9,16(r16)
 800ad7c:	89800417 	ldw	r6,16(r17)
 800ad80:	14c00315 	stw	r19,12(r2)
 800ad84:	4b800144 	addi	r14,r9,5
 800ad88:	31800144 	addi	r6,r6,5
 800ad8c:	739d883a 	add	r14,r14,r14
 800ad90:	318d883a 	add	r6,r6,r6
 800ad94:	739d883a 	add	r14,r14,r14
 800ad98:	318d883a 	add	r6,r6,r6
 800ad9c:	81c00504 	addi	r7,r16,20
 800ada0:	839d883a 	add	r14,r16,r14
 800ada4:	8a000504 	addi	r8,r17,20
 800ada8:	898d883a 	add	r6,r17,r6
 800adac:	10c00504 	addi	r3,r2,20
 800adb0:	0009883a 	mov	r4,zero
 800adb4:	3b000017 	ldw	r12,0(r7)
 800adb8:	42c00017 	ldw	r11,0(r8)
 800adbc:	42000104 	addi	r8,r8,4
 800adc0:	62bfffcc 	andi	r10,r12,65535
 800adc4:	5b7fffcc 	andi	r13,r11,65535
 800adc8:	5109883a 	add	r4,r10,r4
 800adcc:	2355c83a 	sub	r10,r4,r13
 800add0:	5816d43a 	srli	r11,r11,16
 800add4:	6008d43a 	srli	r4,r12,16
 800add8:	501bd43a 	srai	r13,r10,16
 800addc:	1a80000d 	sth	r10,0(r3)
 800ade0:	22c9c83a 	sub	r4,r4,r11
 800ade4:	2349883a 	add	r4,r4,r13
 800ade8:	1900008d 	sth	r4,2(r3)
 800adec:	39c00104 	addi	r7,r7,4
 800adf0:	2009d43a 	srai	r4,r4,16
 800adf4:	18c00104 	addi	r3,r3,4
 800adf8:	41bfee36 	bltu	r8,r6,800adb4 <__mdiff+0x84>
 800adfc:	180b883a 	mov	r5,r3
 800ae00:	3815883a 	mov	r10,r7
 800ae04:	3b80132e 	bgeu	r7,r14,800ae54 <__mdiff+0x124>
 800ae08:	3a000017 	ldw	r8,0(r7)
 800ae0c:	18c00104 	addi	r3,r3,4
 800ae10:	39c00104 	addi	r7,r7,4
 800ae14:	41bfffcc 	andi	r6,r8,65535
 800ae18:	310d883a 	add	r6,r6,r4
 800ae1c:	3009d43a 	srai	r4,r6,16
 800ae20:	4010d43a 	srli	r8,r8,16
 800ae24:	19bfff0d 	sth	r6,-4(r3)
 800ae28:	2209883a 	add	r4,r4,r8
 800ae2c:	193fff8d 	sth	r4,-2(r3)
 800ae30:	2009d43a 	srai	r4,r4,16
 800ae34:	3bbff436 	bltu	r7,r14,800ae08 <__mdiff+0xd8>
 800ae38:	0286303a 	nor	r3,zero,r10
 800ae3c:	1b87883a 	add	r3,r3,r14
 800ae40:	1806d0ba 	srli	r3,r3,2
 800ae44:	18c00044 	addi	r3,r3,1
 800ae48:	18c7883a 	add	r3,r3,r3
 800ae4c:	18c7883a 	add	r3,r3,r3
 800ae50:	28c7883a 	add	r3,r5,r3
 800ae54:	193fff17 	ldw	r4,-4(r3)
 800ae58:	18ffff04 	addi	r3,r3,-4
 800ae5c:	2000041e 	bne	r4,zero,800ae70 <__mdiff+0x140>
 800ae60:	18ffff04 	addi	r3,r3,-4
 800ae64:	19000017 	ldw	r4,0(r3)
 800ae68:	4a7fffc4 	addi	r9,r9,-1
 800ae6c:	203ffc26 	beq	r4,zero,800ae60 <__mdiff+0x130>
 800ae70:	12400415 	stw	r9,16(r2)
 800ae74:	dfc00417 	ldw	ra,16(sp)
 800ae78:	dcc00317 	ldw	r19,12(sp)
 800ae7c:	dc800217 	ldw	r18,8(sp)
 800ae80:	dc400117 	ldw	r17,4(sp)
 800ae84:	dc000017 	ldw	r16,0(sp)
 800ae88:	dec00504 	addi	sp,sp,20
 800ae8c:	f800283a 	ret
 800ae90:	8005883a 	mov	r2,r16
 800ae94:	04c00044 	movi	r19,1
 800ae98:	8821883a 	mov	r16,r17
 800ae9c:	1023883a 	mov	r17,r2
 800aea0:	003fb206 	br	800ad6c <__mdiff+0x3c>
 800aea4:	9009883a 	mov	r4,r18
 800aea8:	000b883a 	mov	r5,zero
 800aeac:	800a38c0 	call	800a38c <_Balloc>
 800aeb0:	00c00044 	movi	r3,1
 800aeb4:	10c00415 	stw	r3,16(r2)
 800aeb8:	10000515 	stw	zero,20(r2)
 800aebc:	dfc00417 	ldw	ra,16(sp)
 800aec0:	dcc00317 	ldw	r19,12(sp)
 800aec4:	dc800217 	ldw	r18,8(sp)
 800aec8:	dc400117 	ldw	r17,4(sp)
 800aecc:	dc000017 	ldw	r16,0(sp)
 800aed0:	dec00504 	addi	sp,sp,20
 800aed4:	f800283a 	ret

0800aed8 <__ulp>:
 800aed8:	295ffc2c 	andhi	r5,r5,32752
 800aedc:	00bf3034 	movhi	r2,64704
 800aee0:	2887883a 	add	r3,r5,r2
 800aee4:	00c0020e 	bge	zero,r3,800aef0 <__ulp+0x18>
 800aee8:	0005883a 	mov	r2,zero
 800aeec:	f800283a 	ret
 800aef0:	00c7c83a 	sub	r3,zero,r3
 800aef4:	1805d53a 	srai	r2,r3,20
 800aef8:	00c004c4 	movi	r3,19
 800aefc:	18800a0e 	bge	r3,r2,800af28 <__ulp+0x50>
 800af00:	01000c84 	movi	r4,50
 800af04:	0007883a 	mov	r3,zero
 800af08:	20800516 	blt	r4,r2,800af20 <__ulp+0x48>
 800af0c:	01000cc4 	movi	r4,51
 800af10:	2085c83a 	sub	r2,r4,r2
 800af14:	01000044 	movi	r4,1
 800af18:	2084983a 	sll	r2,r4,r2
 800af1c:	f800283a 	ret
 800af20:	00800044 	movi	r2,1
 800af24:	f800283a 	ret
 800af28:	00c00234 	movhi	r3,8
 800af2c:	1887d83a 	sra	r3,r3,r2
 800af30:	0005883a 	mov	r2,zero
 800af34:	f800283a 	ret

0800af38 <__b2d>:
 800af38:	defffa04 	addi	sp,sp,-24
 800af3c:	dc000015 	stw	r16,0(sp)
 800af40:	24000417 	ldw	r16,16(r4)
 800af44:	dc400115 	stw	r17,4(sp)
 800af48:	dcc00315 	stw	r19,12(sp)
 800af4c:	84000144 	addi	r16,r16,5
 800af50:	8421883a 	add	r16,r16,r16
 800af54:	8421883a 	add	r16,r16,r16
 800af58:	2421883a 	add	r16,r4,r16
 800af5c:	847fff17 	ldw	r17,-4(r16)
 800af60:	24c00504 	addi	r19,r4,20
 800af64:	dd000415 	stw	r20,16(sp)
 800af68:	8809883a 	mov	r4,r17
 800af6c:	dc800215 	stw	r18,8(sp)
 800af70:	2829883a 	mov	r20,r5
 800af74:	dfc00515 	stw	ra,20(sp)
 800af78:	800a6a40 	call	800a6a4 <__hi0bits>
 800af7c:	00c00804 	movi	r3,32
 800af80:	1887c83a 	sub	r3,r3,r2
 800af84:	a0c00015 	stw	r3,0(r20)
 800af88:	00c00284 	movi	r3,10
 800af8c:	84bfff04 	addi	r18,r16,-4
 800af90:	18801216 	blt	r3,r2,800afdc <__b2d+0xa4>
 800af94:	010002c4 	movi	r4,11
 800af98:	2089c83a 	sub	r4,r4,r2
 800af9c:	8906d83a 	srl	r3,r17,r4
 800afa0:	18cffc34 	orhi	r3,r3,16368
 800afa4:	9c80322e 	bgeu	r19,r18,800b070 <__b2d+0x138>
 800afa8:	817ffe17 	ldw	r5,-8(r16)
 800afac:	2908d83a 	srl	r4,r5,r4
 800afb0:	10800544 	addi	r2,r2,21
 800afb4:	88a2983a 	sll	r17,r17,r2
 800afb8:	2444b03a 	or	r2,r4,r17
 800afbc:	dfc00517 	ldw	ra,20(sp)
 800afc0:	dd000417 	ldw	r20,16(sp)
 800afc4:	dcc00317 	ldw	r19,12(sp)
 800afc8:	dc800217 	ldw	r18,8(sp)
 800afcc:	dc400117 	ldw	r17,4(sp)
 800afd0:	dc000017 	ldw	r16,0(sp)
 800afd4:	dec00604 	addi	sp,sp,24
 800afd8:	f800283a 	ret
 800afdc:	9c801636 	bltu	r19,r18,800b038 <__b2d+0x100>
 800afe0:	113ffd44 	addi	r4,r2,-11
 800afe4:	000b883a 	mov	r5,zero
 800afe8:	20001726 	beq	r4,zero,800b048 <__b2d+0x110>
 800afec:	00c00ac4 	movi	r3,43
 800aff0:	1885c83a 	sub	r2,r3,r2
 800aff4:	8906983a 	sll	r3,r17,r4
 800aff8:	288cd83a 	srl	r6,r5,r2
 800affc:	18cffc34 	orhi	r3,r3,16368
 800b000:	1986b03a 	or	r3,r3,r6
 800b004:	9c801c2e 	bgeu	r19,r18,800b078 <__b2d+0x140>
 800b008:	91bfff17 	ldw	r6,-4(r18)
 800b00c:	3084d83a 	srl	r2,r6,r2
 800b010:	2908983a 	sll	r4,r5,r4
 800b014:	1104b03a 	or	r2,r2,r4
 800b018:	dfc00517 	ldw	ra,20(sp)
 800b01c:	dd000417 	ldw	r20,16(sp)
 800b020:	dcc00317 	ldw	r19,12(sp)
 800b024:	dc800217 	ldw	r18,8(sp)
 800b028:	dc400117 	ldw	r17,4(sp)
 800b02c:	dc000017 	ldw	r16,0(sp)
 800b030:	dec00604 	addi	sp,sp,24
 800b034:	f800283a 	ret
 800b038:	113ffd44 	addi	r4,r2,-11
 800b03c:	84bffe04 	addi	r18,r16,-8
 800b040:	817ffe17 	ldw	r5,-8(r16)
 800b044:	203fe91e 	bne	r4,zero,800afec <__b2d+0xb4>
 800b048:	88cffc34 	orhi	r3,r17,16368
 800b04c:	2805883a 	mov	r2,r5
 800b050:	dfc00517 	ldw	ra,20(sp)
 800b054:	dd000417 	ldw	r20,16(sp)
 800b058:	dcc00317 	ldw	r19,12(sp)
 800b05c:	dc800217 	ldw	r18,8(sp)
 800b060:	dc400117 	ldw	r17,4(sp)
 800b064:	dc000017 	ldw	r16,0(sp)
 800b068:	dec00604 	addi	sp,sp,24
 800b06c:	f800283a 	ret
 800b070:	0009883a 	mov	r4,zero
 800b074:	003fce06 	br	800afb0 <__b2d+0x78>
 800b078:	0005883a 	mov	r2,zero
 800b07c:	003fe406 	br	800b010 <__b2d+0xd8>

0800b080 <__d2b>:
 800b080:	defff804 	addi	sp,sp,-32
 800b084:	dc400315 	stw	r17,12(sp)
 800b088:	3023883a 	mov	r17,r6
 800b08c:	dc800415 	stw	r18,16(sp)
 800b090:	8824907a 	slli	r18,r17,1
 800b094:	dcc00515 	stw	r19,20(sp)
 800b098:	2827883a 	mov	r19,r5
 800b09c:	9024d57a 	srli	r18,r18,21
 800b0a0:	01400044 	movi	r5,1
 800b0a4:	dd000615 	stw	r20,24(sp)
 800b0a8:	dc000215 	stw	r16,8(sp)
 800b0ac:	dfc00715 	stw	ra,28(sp)
 800b0b0:	3829883a 	mov	r20,r7
 800b0b4:	800a38c0 	call	800a38c <_Balloc>
 800b0b8:	1021883a 	mov	r16,r2
 800b0bc:	00800434 	movhi	r2,16
 800b0c0:	10bfffc4 	addi	r2,r2,-1
 800b0c4:	88a2703a 	and	r17,r17,r2
 800b0c8:	90000126 	beq	r18,zero,800b0d0 <__d2b+0x50>
 800b0cc:	8c400434 	orhi	r17,r17,16
 800b0d0:	dc400015 	stw	r17,0(sp)
 800b0d4:	98002226 	beq	r19,zero,800b160 <__d2b+0xe0>
 800b0d8:	d9000104 	addi	r4,sp,4
 800b0dc:	dcc00115 	stw	r19,4(sp)
 800b0e0:	800a70c0 	call	800a70c <__lo0bits>
 800b0e4:	d8c00017 	ldw	r3,0(sp)
 800b0e8:	10002d1e 	bne	r2,zero,800b1a0 <__d2b+0x120>
 800b0ec:	d9000117 	ldw	r4,4(sp)
 800b0f0:	81000515 	stw	r4,20(r16)
 800b0f4:	1823003a 	cmpeq	r17,r3,zero
 800b0f8:	01000084 	movi	r4,2
 800b0fc:	2463c83a 	sub	r17,r4,r17
 800b100:	80c00615 	stw	r3,24(r16)
 800b104:	84400415 	stw	r17,16(r16)
 800b108:	90001d1e 	bne	r18,zero,800b180 <__d2b+0x100>
 800b10c:	88c00104 	addi	r3,r17,4
 800b110:	18c7883a 	add	r3,r3,r3
 800b114:	18c7883a 	add	r3,r3,r3
 800b118:	80c7883a 	add	r3,r16,r3
 800b11c:	19000017 	ldw	r4,0(r3)
 800b120:	10bef384 	addi	r2,r2,-1074
 800b124:	a0800015 	stw	r2,0(r20)
 800b128:	800a6a40 	call	800a6a4 <__hi0bits>
 800b12c:	8822917a 	slli	r17,r17,5
 800b130:	d8c00817 	ldw	r3,32(sp)
 800b134:	8885c83a 	sub	r2,r17,r2
 800b138:	18800015 	stw	r2,0(r3)
 800b13c:	8005883a 	mov	r2,r16
 800b140:	dfc00717 	ldw	ra,28(sp)
 800b144:	dd000617 	ldw	r20,24(sp)
 800b148:	dcc00517 	ldw	r19,20(sp)
 800b14c:	dc800417 	ldw	r18,16(sp)
 800b150:	dc400317 	ldw	r17,12(sp)
 800b154:	dc000217 	ldw	r16,8(sp)
 800b158:	dec00804 	addi	sp,sp,32
 800b15c:	f800283a 	ret
 800b160:	d809883a 	mov	r4,sp
 800b164:	800a70c0 	call	800a70c <__lo0bits>
 800b168:	d8c00017 	ldw	r3,0(sp)
 800b16c:	04400044 	movi	r17,1
 800b170:	84400415 	stw	r17,16(r16)
 800b174:	80c00515 	stw	r3,20(r16)
 800b178:	10800804 	addi	r2,r2,32
 800b17c:	903fe326 	beq	r18,zero,800b10c <__d2b+0x8c>
 800b180:	00c00d44 	movi	r3,53
 800b184:	94bef344 	addi	r18,r18,-1075
 800b188:	90a5883a 	add	r18,r18,r2
 800b18c:	1885c83a 	sub	r2,r3,r2
 800b190:	d8c00817 	ldw	r3,32(sp)
 800b194:	a4800015 	stw	r18,0(r20)
 800b198:	18800015 	stw	r2,0(r3)
 800b19c:	003fe706 	br	800b13c <__d2b+0xbc>
 800b1a0:	01000804 	movi	r4,32
 800b1a4:	2089c83a 	sub	r4,r4,r2
 800b1a8:	1908983a 	sll	r4,r3,r4
 800b1ac:	d9400117 	ldw	r5,4(sp)
 800b1b0:	1886d83a 	srl	r3,r3,r2
 800b1b4:	2148b03a 	or	r4,r4,r5
 800b1b8:	81000515 	stw	r4,20(r16)
 800b1bc:	d8c00015 	stw	r3,0(sp)
 800b1c0:	003fcc06 	br	800b0f4 <__d2b+0x74>

0800b1c4 <__ratio>:
 800b1c4:	defff904 	addi	sp,sp,-28
 800b1c8:	dc400315 	stw	r17,12(sp)
 800b1cc:	2823883a 	mov	r17,r5
 800b1d0:	d9400104 	addi	r5,sp,4
 800b1d4:	dfc00615 	stw	ra,24(sp)
 800b1d8:	dcc00515 	stw	r19,20(sp)
 800b1dc:	dc800415 	stw	r18,16(sp)
 800b1e0:	2027883a 	mov	r19,r4
 800b1e4:	dc000215 	stw	r16,8(sp)
 800b1e8:	800af380 	call	800af38 <__b2d>
 800b1ec:	8809883a 	mov	r4,r17
 800b1f0:	d80b883a 	mov	r5,sp
 800b1f4:	1025883a 	mov	r18,r2
 800b1f8:	1821883a 	mov	r16,r3
 800b1fc:	800af380 	call	800af38 <__b2d>
 800b200:	99400417 	ldw	r5,16(r19)
 800b204:	89000417 	ldw	r4,16(r17)
 800b208:	d9800117 	ldw	r6,4(sp)
 800b20c:	2909c83a 	sub	r4,r5,r4
 800b210:	d9400017 	ldw	r5,0(sp)
 800b214:	2008917a 	slli	r4,r4,5
 800b218:	314bc83a 	sub	r5,r6,r5
 800b21c:	290b883a 	add	r5,r5,r4
 800b220:	01400e0e 	bge	zero,r5,800b25c <__ratio+0x98>
 800b224:	280a953a 	slli	r5,r5,20
 800b228:	2c21883a 	add	r16,r5,r16
 800b22c:	9009883a 	mov	r4,r18
 800b230:	800b883a 	mov	r5,r16
 800b234:	100d883a 	mov	r6,r2
 800b238:	180f883a 	mov	r7,r3
 800b23c:	80016c80 	call	80016c8 <__divdf3>
 800b240:	dfc00617 	ldw	ra,24(sp)
 800b244:	dcc00517 	ldw	r19,20(sp)
 800b248:	dc800417 	ldw	r18,16(sp)
 800b24c:	dc400317 	ldw	r17,12(sp)
 800b250:	dc000217 	ldw	r16,8(sp)
 800b254:	dec00704 	addi	sp,sp,28
 800b258:	f800283a 	ret
 800b25c:	280a953a 	slli	r5,r5,20
 800b260:	1947c83a 	sub	r3,r3,r5
 800b264:	003ff106 	br	800b22c <__ratio+0x68>

0800b268 <_mprec_log10>:
 800b268:	defffe04 	addi	sp,sp,-8
 800b26c:	dc000015 	stw	r16,0(sp)
 800b270:	dfc00115 	stw	ra,4(sp)
 800b274:	008005c4 	movi	r2,23
 800b278:	2021883a 	mov	r16,r4
 800b27c:	11000d0e 	bge	r2,r4,800b2b4 <_mprec_log10+0x4c>
 800b280:	0005883a 	mov	r2,zero
 800b284:	00cffc34 	movhi	r3,16368
 800b288:	843fffc4 	addi	r16,r16,-1
 800b28c:	1009883a 	mov	r4,r2
 800b290:	180b883a 	mov	r5,r3
 800b294:	000d883a 	mov	r6,zero
 800b298:	01d00934 	movhi	r7,16420
 800b29c:	80104bc0 	call	80104bc <__muldf3>
 800b2a0:	803ff91e 	bne	r16,zero,800b288 <_mprec_log10+0x20>
 800b2a4:	dfc00117 	ldw	ra,4(sp)
 800b2a8:	dc000017 	ldw	r16,0(sp)
 800b2ac:	dec00204 	addi	sp,sp,8
 800b2b0:	f800283a 	ret
 800b2b4:	202090fa 	slli	r16,r4,3
 800b2b8:	00820074 	movhi	r2,2049
 800b2bc:	1092a804 	addi	r2,r2,19104
 800b2c0:	1421883a 	add	r16,r2,r16
 800b2c4:	80800017 	ldw	r2,0(r16)
 800b2c8:	80c00117 	ldw	r3,4(r16)
 800b2cc:	dfc00117 	ldw	ra,4(sp)
 800b2d0:	dc000017 	ldw	r16,0(sp)
 800b2d4:	dec00204 	addi	sp,sp,8
 800b2d8:	f800283a 	ret

0800b2dc <__copybits>:
 800b2dc:	297fffc4 	addi	r5,r5,-1
 800b2e0:	31c00417 	ldw	r7,16(r6)
 800b2e4:	2811d17a 	srai	r8,r5,5
 800b2e8:	30800504 	addi	r2,r6,20
 800b2ec:	39c00144 	addi	r7,r7,5
 800b2f0:	42000044 	addi	r8,r8,1
 800b2f4:	39cf883a 	add	r7,r7,r7
 800b2f8:	4211883a 	add	r8,r8,r8
 800b2fc:	39cf883a 	add	r7,r7,r7
 800b300:	4211883a 	add	r8,r8,r8
 800b304:	31cf883a 	add	r7,r6,r7
 800b308:	2211883a 	add	r8,r4,r8
 800b30c:	11c00d2e 	bgeu	r2,r7,800b344 <__copybits+0x68>
 800b310:	2007883a 	mov	r3,r4
 800b314:	11400017 	ldw	r5,0(r2)
 800b318:	18c00104 	addi	r3,r3,4
 800b31c:	10800104 	addi	r2,r2,4
 800b320:	197fff15 	stw	r5,-4(r3)
 800b324:	11fffb36 	bltu	r2,r7,800b314 <__copybits+0x38>
 800b328:	3985c83a 	sub	r2,r7,r6
 800b32c:	10bffac4 	addi	r2,r2,-21
 800b330:	1004d0ba 	srli	r2,r2,2
 800b334:	10800044 	addi	r2,r2,1
 800b338:	1085883a 	add	r2,r2,r2
 800b33c:	1085883a 	add	r2,r2,r2
 800b340:	2089883a 	add	r4,r4,r2
 800b344:	2200032e 	bgeu	r4,r8,800b354 <__copybits+0x78>
 800b348:	20000015 	stw	zero,0(r4)
 800b34c:	21000104 	addi	r4,r4,4
 800b350:	223ffd36 	bltu	r4,r8,800b348 <__copybits+0x6c>
 800b354:	f800283a 	ret

0800b358 <__any_on>:
 800b358:	21800417 	ldw	r6,16(r4)
 800b35c:	2805d17a 	srai	r2,r5,5
 800b360:	20c00504 	addi	r3,r4,20
 800b364:	30800f0e 	bge	r6,r2,800b3a4 <__any_on+0x4c>
 800b368:	3005883a 	mov	r2,r6
 800b36c:	10800144 	addi	r2,r2,5
 800b370:	1085883a 	add	r2,r2,r2
 800b374:	1085883a 	add	r2,r2,r2
 800b378:	2089883a 	add	r4,r4,r2
 800b37c:	1900152e 	bgeu	r3,r4,800b3d4 <__any_on+0x7c>
 800b380:	20bfff17 	ldw	r2,-4(r4)
 800b384:	213fff04 	addi	r4,r4,-4
 800b388:	1000041e 	bne	r2,zero,800b39c <__any_on+0x44>
 800b38c:	1900112e 	bgeu	r3,r4,800b3d4 <__any_on+0x7c>
 800b390:	213fff04 	addi	r4,r4,-4
 800b394:	20800017 	ldw	r2,0(r4)
 800b398:	103ffc26 	beq	r2,zero,800b38c <__any_on+0x34>
 800b39c:	00800044 	movi	r2,1
 800b3a0:	f800283a 	ret
 800b3a4:	11bff10e 	bge	r2,r6,800b36c <__any_on+0x14>
 800b3a8:	294007cc 	andi	r5,r5,31
 800b3ac:	283fef26 	beq	r5,zero,800b36c <__any_on+0x14>
 800b3b0:	11800144 	addi	r6,r2,5
 800b3b4:	318d883a 	add	r6,r6,r6
 800b3b8:	318d883a 	add	r6,r6,r6
 800b3bc:	218d883a 	add	r6,r4,r6
 800b3c0:	31800017 	ldw	r6,0(r6)
 800b3c4:	314ed83a 	srl	r7,r6,r5
 800b3c8:	394a983a 	sll	r5,r7,r5
 800b3cc:	29bff31e 	bne	r5,r6,800b39c <__any_on+0x44>
 800b3d0:	003fe606 	br	800b36c <__any_on+0x14>
 800b3d4:	0005883a 	mov	r2,zero
 800b3d8:	f800283a 	ret

0800b3dc <_putc_r>:
 800b3dc:	defffc04 	addi	sp,sp,-16
 800b3e0:	dc000215 	stw	r16,8(sp)
 800b3e4:	dfc00315 	stw	ra,12(sp)
 800b3e8:	2021883a 	mov	r16,r4
 800b3ec:	20000226 	beq	r4,zero,800b3f8 <_putc_r+0x1c>
 800b3f0:	20800e17 	ldw	r2,56(r4)
 800b3f4:	10001d26 	beq	r2,zero,800b46c <_putc_r+0x90>
 800b3f8:	30800217 	ldw	r2,8(r6)
 800b3fc:	10bfffc4 	addi	r2,r2,-1
 800b400:	30800215 	stw	r2,8(r6)
 800b404:	10000a16 	blt	r2,zero,800b430 <_putc_r+0x54>
 800b408:	30800017 	ldw	r2,0(r6)
 800b40c:	11400005 	stb	r5,0(r2)
 800b410:	30800017 	ldw	r2,0(r6)
 800b414:	10c00044 	addi	r3,r2,1
 800b418:	10800003 	ldbu	r2,0(r2)
 800b41c:	30c00015 	stw	r3,0(r6)
 800b420:	dfc00317 	ldw	ra,12(sp)
 800b424:	dc000217 	ldw	r16,8(sp)
 800b428:	dec00404 	addi	sp,sp,16
 800b42c:	f800283a 	ret
 800b430:	30c00617 	ldw	r3,24(r6)
 800b434:	10c01316 	blt	r2,r3,800b484 <_putc_r+0xa8>
 800b438:	30800017 	ldw	r2,0(r6)
 800b43c:	01000284 	movi	r4,10
 800b440:	11400005 	stb	r5,0(r2)
 800b444:	30c00017 	ldw	r3,0(r6)
 800b448:	19400003 	ldbu	r5,0(r3)
 800b44c:	29000d26 	beq	r5,r4,800b484 <_putc_r+0xa8>
 800b450:	18c00044 	addi	r3,r3,1
 800b454:	2805883a 	mov	r2,r5
 800b458:	30c00015 	stw	r3,0(r6)
 800b45c:	dfc00317 	ldw	ra,12(sp)
 800b460:	dc000217 	ldw	r16,8(sp)
 800b464:	dec00404 	addi	sp,sp,16
 800b468:	f800283a 	ret
 800b46c:	d9400015 	stw	r5,0(sp)
 800b470:	d9800115 	stw	r6,4(sp)
 800b474:	80023480 	call	8002348 <__sinit>
 800b478:	d9800117 	ldw	r6,4(sp)
 800b47c:	d9400017 	ldw	r5,0(sp)
 800b480:	003fdd06 	br	800b3f8 <_putc_r+0x1c>
 800b484:	8009883a 	mov	r4,r16
 800b488:	dfc00317 	ldw	ra,12(sp)
 800b48c:	dc000217 	ldw	r16,8(sp)
 800b490:	dec00404 	addi	sp,sp,16
 800b494:	800e3dc1 	jmpi	800e3dc <__swbuf_r>

0800b498 <putc>:
 800b498:	defffc04 	addi	sp,sp,-16
 800b49c:	dc400115 	stw	r17,4(sp)
 800b4a0:	04420074 	movhi	r17,2049
 800b4a4:	8c599c04 	addi	r17,r17,26224
 800b4a8:	88800017 	ldw	r2,0(r17)
 800b4ac:	dc800215 	stw	r18,8(sp)
 800b4b0:	dc000015 	stw	r16,0(sp)
 800b4b4:	dfc00315 	stw	ra,12(sp)
 800b4b8:	2025883a 	mov	r18,r4
 800b4bc:	2821883a 	mov	r16,r5
 800b4c0:	10000226 	beq	r2,zero,800b4cc <putc+0x34>
 800b4c4:	10c00e17 	ldw	r3,56(r2)
 800b4c8:	18002126 	beq	r3,zero,800b550 <putc+0xb8>
 800b4cc:	80800217 	ldw	r2,8(r16)
 800b4d0:	10bfffc4 	addi	r2,r2,-1
 800b4d4:	80800215 	stw	r2,8(r16)
 800b4d8:	10000c16 	blt	r2,zero,800b50c <putc+0x74>
 800b4dc:	80800017 	ldw	r2,0(r16)
 800b4e0:	14800005 	stb	r18,0(r2)
 800b4e4:	80800017 	ldw	r2,0(r16)
 800b4e8:	10c00044 	addi	r3,r2,1
 800b4ec:	10800003 	ldbu	r2,0(r2)
 800b4f0:	80c00015 	stw	r3,0(r16)
 800b4f4:	dfc00317 	ldw	ra,12(sp)
 800b4f8:	dc800217 	ldw	r18,8(sp)
 800b4fc:	dc400117 	ldw	r17,4(sp)
 800b500:	dc000017 	ldw	r16,0(sp)
 800b504:	dec00404 	addi	sp,sp,16
 800b508:	f800283a 	ret
 800b50c:	80c00617 	ldw	r3,24(r16)
 800b510:	10c01216 	blt	r2,r3,800b55c <putc+0xc4>
 800b514:	80800017 	ldw	r2,0(r16)
 800b518:	01000284 	movi	r4,10
 800b51c:	14800005 	stb	r18,0(r2)
 800b520:	80c00017 	ldw	r3,0(r16)
 800b524:	19400003 	ldbu	r5,0(r3)
 800b528:	29001526 	beq	r5,r4,800b580 <putc+0xe8>
 800b52c:	18c00044 	addi	r3,r3,1
 800b530:	2805883a 	mov	r2,r5
 800b534:	80c00015 	stw	r3,0(r16)
 800b538:	dfc00317 	ldw	ra,12(sp)
 800b53c:	dc800217 	ldw	r18,8(sp)
 800b540:	dc400117 	ldw	r17,4(sp)
 800b544:	dc000017 	ldw	r16,0(sp)
 800b548:	dec00404 	addi	sp,sp,16
 800b54c:	f800283a 	ret
 800b550:	1009883a 	mov	r4,r2
 800b554:	80023480 	call	8002348 <__sinit>
 800b558:	003fdc06 	br	800b4cc <putc+0x34>
 800b55c:	89000017 	ldw	r4,0(r17)
 800b560:	900b883a 	mov	r5,r18
 800b564:	800d883a 	mov	r6,r16
 800b568:	dfc00317 	ldw	ra,12(sp)
 800b56c:	dc800217 	ldw	r18,8(sp)
 800b570:	dc400117 	ldw	r17,4(sp)
 800b574:	dc000017 	ldw	r16,0(sp)
 800b578:	dec00404 	addi	sp,sp,16
 800b57c:	800e3dc1 	jmpi	800e3dc <__swbuf_r>
 800b580:	89000017 	ldw	r4,0(r17)
 800b584:	003ff706 	br	800b564 <putc+0xcc>

0800b588 <_read_r>:
 800b588:	defffd04 	addi	sp,sp,-12
 800b58c:	dc400115 	stw	r17,4(sp)
 800b590:	dc000015 	stw	r16,0(sp)
 800b594:	2023883a 	mov	r17,r4
 800b598:	040200b4 	movhi	r16,2050
 800b59c:	84207a04 	addi	r16,r16,-32280
 800b5a0:	2809883a 	mov	r4,r5
 800b5a4:	300b883a 	mov	r5,r6
 800b5a8:	380d883a 	mov	r6,r7
 800b5ac:	dfc00215 	stw	ra,8(sp)
 800b5b0:	80000015 	stw	zero,0(r16)
 800b5b4:	80118d40 	call	80118d4 <read>
 800b5b8:	00ffffc4 	movi	r3,-1
 800b5bc:	10c00526 	beq	r2,r3,800b5d4 <_read_r+0x4c>
 800b5c0:	dfc00217 	ldw	ra,8(sp)
 800b5c4:	dc400117 	ldw	r17,4(sp)
 800b5c8:	dc000017 	ldw	r16,0(sp)
 800b5cc:	dec00304 	addi	sp,sp,12
 800b5d0:	f800283a 	ret
 800b5d4:	80c00017 	ldw	r3,0(r16)
 800b5d8:	183ff926 	beq	r3,zero,800b5c0 <_read_r+0x38>
 800b5dc:	88c00015 	stw	r3,0(r17)
 800b5e0:	dfc00217 	ldw	ra,8(sp)
 800b5e4:	dc400117 	ldw	r17,4(sp)
 800b5e8:	dc000017 	ldw	r16,0(sp)
 800b5ec:	dec00304 	addi	sp,sp,12
 800b5f0:	f800283a 	ret

0800b5f4 <_realloc_r>:
 800b5f4:	defff504 	addi	sp,sp,-44
 800b5f8:	dd400615 	stw	r21,24(sp)
 800b5fc:	dc800315 	stw	r18,12(sp)
 800b600:	dc000115 	stw	r16,4(sp)
 800b604:	dfc00a15 	stw	ra,40(sp)
 800b608:	df000915 	stw	fp,36(sp)
 800b60c:	ddc00815 	stw	r23,32(sp)
 800b610:	dd800715 	stw	r22,28(sp)
 800b614:	dd000515 	stw	r20,20(sp)
 800b618:	dcc00415 	stw	r19,16(sp)
 800b61c:	dc400215 	stw	r17,8(sp)
 800b620:	2821883a 	mov	r16,r5
 800b624:	202b883a 	mov	r21,r4
 800b628:	3025883a 	mov	r18,r6
 800b62c:	28009626 	beq	r5,zero,800b888 <_realloc_r+0x294>
 800b630:	80115ac0 	call	80115ac <__malloc_lock>
 800b634:	80bfff17 	ldw	r2,-4(r16)
 800b638:	04ffff04 	movi	r19,-4
 800b63c:	90c002c4 	addi	r3,r18,11
 800b640:	01000584 	movi	r4,22
 800b644:	85bffe04 	addi	r22,r16,-8
 800b648:	14e6703a 	and	r19,r2,r19
 800b64c:	20c0372e 	bgeu	r4,r3,800b72c <_realloc_r+0x138>
 800b650:	047ffe04 	movi	r17,-8
 800b654:	1c62703a 	and	r17,r3,r17
 800b658:	8807883a 	mov	r3,r17
 800b65c:	88005a16 	blt	r17,zero,800b7c8 <_realloc_r+0x1d4>
 800b660:	8c805936 	bltu	r17,r18,800b7c8 <_realloc_r+0x1d4>
 800b664:	98c0340e 	bge	r19,r3,800b738 <_realloc_r+0x144>
 800b668:	07020074 	movhi	fp,2049
 800b66c:	e7140004 	addi	fp,fp,20480
 800b670:	e1400217 	ldw	r5,8(fp)
 800b674:	b4c9883a 	add	r4,r22,r19
 800b678:	29009026 	beq	r5,r4,800b8bc <_realloc_r+0x2c8>
 800b67c:	21800117 	ldw	r6,4(r4)
 800b680:	01ffff84 	movi	r7,-2
 800b684:	31ce703a 	and	r7,r6,r7
 800b688:	21cf883a 	add	r7,r4,r7
 800b68c:	39c00117 	ldw	r7,4(r7)
 800b690:	39c0004c 	andi	r7,r7,1
 800b694:	38004326 	beq	r7,zero,800b7a4 <_realloc_r+0x1b0>
 800b698:	000d883a 	mov	r6,zero
 800b69c:	0009883a 	mov	r4,zero
 800b6a0:	1080004c 	andi	r2,r2,1
 800b6a4:	10005a1e 	bne	r2,zero,800b810 <_realloc_r+0x21c>
 800b6a8:	85fffe17 	ldw	r23,-8(r16)
 800b6ac:	00bfff04 	movi	r2,-4
 800b6b0:	b5efc83a 	sub	r23,r22,r23
 800b6b4:	b9c00117 	ldw	r7,4(r23)
 800b6b8:	388e703a 	and	r7,r7,r2
 800b6bc:	3ccf883a 	add	r7,r7,r19
 800b6c0:	20005226 	beq	r4,zero,800b80c <_realloc_r+0x218>
 800b6c4:	31e9883a 	add	r20,r6,r7
 800b6c8:	2140c726 	beq	r4,r5,800b9e8 <_realloc_r+0x3f4>
 800b6cc:	a0c04f16 	blt	r20,r3,800b80c <_realloc_r+0x218>
 800b6d0:	20800317 	ldw	r2,12(r4)
 800b6d4:	20c00217 	ldw	r3,8(r4)
 800b6d8:	99bfff04 	addi	r6,r19,-4
 800b6dc:	01000904 	movi	r4,36
 800b6e0:	18800315 	stw	r2,12(r3)
 800b6e4:	10c00215 	stw	r3,8(r2)
 800b6e8:	b8c00217 	ldw	r3,8(r23)
 800b6ec:	b8800317 	ldw	r2,12(r23)
 800b6f0:	bc800204 	addi	r18,r23,8
 800b6f4:	18800315 	stw	r2,12(r3)
 800b6f8:	10c00215 	stw	r3,8(r2)
 800b6fc:	2180ed36 	bltu	r4,r6,800bab4 <_realloc_r+0x4c0>
 800b700:	008004c4 	movi	r2,19
 800b704:	11809b2e 	bgeu	r2,r6,800b974 <_realloc_r+0x380>
 800b708:	80800017 	ldw	r2,0(r16)
 800b70c:	b8800215 	stw	r2,8(r23)
 800b710:	80800117 	ldw	r2,4(r16)
 800b714:	b8800315 	stw	r2,12(r23)
 800b718:	008006c4 	movi	r2,27
 800b71c:	1180f936 	bltu	r2,r6,800bb04 <_realloc_r+0x510>
 800b720:	b8800404 	addi	r2,r23,16
 800b724:	80c00204 	addi	r3,r16,8
 800b728:	00009406 	br	800b97c <_realloc_r+0x388>
 800b72c:	00c00404 	movi	r3,16
 800b730:	1823883a 	mov	r17,r3
 800b734:	003fca06 	br	800b660 <_realloc_r+0x6c>
 800b738:	9829883a 	mov	r20,r19
 800b73c:	a447c83a 	sub	r3,r20,r17
 800b740:	010003c4 	movi	r4,15
 800b744:	1080004c 	andi	r2,r2,1
 800b748:	20c02336 	bltu	r4,r3,800b7d8 <_realloc_r+0x1e4>
 800b74c:	1504b03a 	or	r2,r2,r20
 800b750:	b0800115 	stw	r2,4(r22)
 800b754:	b52d883a 	add	r22,r22,r20
 800b758:	b0800117 	ldw	r2,4(r22)
 800b75c:	10800054 	ori	r2,r2,1
 800b760:	b0800115 	stw	r2,4(r22)
 800b764:	a809883a 	mov	r4,r21
 800b768:	80115cc0 	call	80115cc <__malloc_unlock>
 800b76c:	8025883a 	mov	r18,r16
 800b770:	9005883a 	mov	r2,r18
 800b774:	dfc00a17 	ldw	ra,40(sp)
 800b778:	df000917 	ldw	fp,36(sp)
 800b77c:	ddc00817 	ldw	r23,32(sp)
 800b780:	dd800717 	ldw	r22,28(sp)
 800b784:	dd400617 	ldw	r21,24(sp)
 800b788:	dd000517 	ldw	r20,20(sp)
 800b78c:	dcc00417 	ldw	r19,16(sp)
 800b790:	dc800317 	ldw	r18,12(sp)
 800b794:	dc400217 	ldw	r17,8(sp)
 800b798:	dc000117 	ldw	r16,4(sp)
 800b79c:	dec00b04 	addi	sp,sp,44
 800b7a0:	f800283a 	ret
 800b7a4:	01ffff04 	movi	r7,-4
 800b7a8:	31cc703a 	and	r6,r6,r7
 800b7ac:	34e9883a 	add	r20,r6,r19
 800b7b0:	a0ffbb16 	blt	r20,r3,800b6a0 <_realloc_r+0xac>
 800b7b4:	20c00317 	ldw	r3,12(r4)
 800b7b8:	21000217 	ldw	r4,8(r4)
 800b7bc:	20c00315 	stw	r3,12(r4)
 800b7c0:	19000215 	stw	r4,8(r3)
 800b7c4:	003fdd06 	br	800b73c <_realloc_r+0x148>
 800b7c8:	00800304 	movi	r2,12
 800b7cc:	a8800015 	stw	r2,0(r21)
 800b7d0:	0025883a 	mov	r18,zero
 800b7d4:	003fe606 	br	800b770 <_realloc_r+0x17c>
 800b7d8:	1444b03a 	or	r2,r2,r17
 800b7dc:	b0800115 	stw	r2,4(r22)
 800b7e0:	b44b883a 	add	r5,r22,r17
 800b7e4:	18800054 	ori	r2,r3,1
 800b7e8:	28800115 	stw	r2,4(r5)
 800b7ec:	28c7883a 	add	r3,r5,r3
 800b7f0:	18800117 	ldw	r2,4(r3)
 800b7f4:	a809883a 	mov	r4,r21
 800b7f8:	29400204 	addi	r5,r5,8
 800b7fc:	10800054 	ori	r2,r2,1
 800b800:	18800115 	stw	r2,4(r3)
 800b804:	8002ae00 	call	8002ae0 <_free_r>
 800b808:	003fd606 	br	800b764 <_realloc_r+0x170>
 800b80c:	38c0330e 	bge	r7,r3,800b8dc <_realloc_r+0x2e8>
 800b810:	900b883a 	mov	r5,r18
 800b814:	a809883a 	mov	r4,r21
 800b818:	800372c0 	call	800372c <_malloc_r>
 800b81c:	1025883a 	mov	r18,r2
 800b820:	10001626 	beq	r2,zero,800b87c <_realloc_r+0x288>
 800b824:	80bfff17 	ldw	r2,-4(r16)
 800b828:	00ffff84 	movi	r3,-2
 800b82c:	913ffe04 	addi	r4,r18,-8
 800b830:	10c6703a 	and	r3,r2,r3
 800b834:	b0c7883a 	add	r3,r22,r3
 800b838:	20c09926 	beq	r4,r3,800baa0 <_realloc_r+0x4ac>
 800b83c:	99bfff04 	addi	r6,r19,-4
 800b840:	00800904 	movi	r2,36
 800b844:	11806436 	bltu	r2,r6,800b9d8 <_realloc_r+0x3e4>
 800b848:	00c004c4 	movi	r3,19
 800b84c:	19804036 	bltu	r3,r6,800b950 <_realloc_r+0x35c>
 800b850:	9005883a 	mov	r2,r18
 800b854:	8007883a 	mov	r3,r16
 800b858:	19000017 	ldw	r4,0(r3)
 800b85c:	11000015 	stw	r4,0(r2)
 800b860:	19000117 	ldw	r4,4(r3)
 800b864:	11000115 	stw	r4,4(r2)
 800b868:	18c00217 	ldw	r3,8(r3)
 800b86c:	10c00215 	stw	r3,8(r2)
 800b870:	a809883a 	mov	r4,r21
 800b874:	800b883a 	mov	r5,r16
 800b878:	8002ae00 	call	8002ae0 <_free_r>
 800b87c:	a809883a 	mov	r4,r21
 800b880:	80115cc0 	call	80115cc <__malloc_unlock>
 800b884:	003fba06 	br	800b770 <_realloc_r+0x17c>
 800b888:	300b883a 	mov	r5,r6
 800b88c:	dfc00a17 	ldw	ra,40(sp)
 800b890:	df000917 	ldw	fp,36(sp)
 800b894:	ddc00817 	ldw	r23,32(sp)
 800b898:	dd800717 	ldw	r22,28(sp)
 800b89c:	dd400617 	ldw	r21,24(sp)
 800b8a0:	dd000517 	ldw	r20,20(sp)
 800b8a4:	dcc00417 	ldw	r19,16(sp)
 800b8a8:	dc800317 	ldw	r18,12(sp)
 800b8ac:	dc400217 	ldw	r17,8(sp)
 800b8b0:	dc000117 	ldw	r16,4(sp)
 800b8b4:	dec00b04 	addi	sp,sp,44
 800b8b8:	800372c1 	jmpi	800372c <_malloc_r>
 800b8bc:	29800117 	ldw	r6,4(r5)
 800b8c0:	013fff04 	movi	r4,-4
 800b8c4:	89c00404 	addi	r7,r17,16
 800b8c8:	310c703a 	and	r6,r6,r4
 800b8cc:	34c9883a 	add	r4,r6,r19
 800b8d0:	21c0340e 	bge	r4,r7,800b9a4 <_realloc_r+0x3b0>
 800b8d4:	2809883a 	mov	r4,r5
 800b8d8:	003f7106 	br	800b6a0 <_realloc_r+0xac>
 800b8dc:	b8800317 	ldw	r2,12(r23)
 800b8e0:	b8c00217 	ldw	r3,8(r23)
 800b8e4:	99bfff04 	addi	r6,r19,-4
 800b8e8:	01000904 	movi	r4,36
 800b8ec:	18800315 	stw	r2,12(r3)
 800b8f0:	10c00215 	stw	r3,8(r2)
 800b8f4:	bc800204 	addi	r18,r23,8
 800b8f8:	21807836 	bltu	r4,r6,800badc <_realloc_r+0x4e8>
 800b8fc:	008004c4 	movi	r2,19
 800b900:	1180732e 	bgeu	r2,r6,800bad0 <_realloc_r+0x4dc>
 800b904:	80800017 	ldw	r2,0(r16)
 800b908:	b8800215 	stw	r2,8(r23)
 800b90c:	80800117 	ldw	r2,4(r16)
 800b910:	b8800315 	stw	r2,12(r23)
 800b914:	008006c4 	movi	r2,27
 800b918:	11808936 	bltu	r2,r6,800bb40 <_realloc_r+0x54c>
 800b91c:	b8800404 	addi	r2,r23,16
 800b920:	80c00204 	addi	r3,r16,8
 800b924:	19000017 	ldw	r4,0(r3)
 800b928:	9021883a 	mov	r16,r18
 800b92c:	3829883a 	mov	r20,r7
 800b930:	11000015 	stw	r4,0(r2)
 800b934:	19000117 	ldw	r4,4(r3)
 800b938:	b82d883a 	mov	r22,r23
 800b93c:	11000115 	stw	r4,4(r2)
 800b940:	18c00217 	ldw	r3,8(r3)
 800b944:	10c00215 	stw	r3,8(r2)
 800b948:	b8800117 	ldw	r2,4(r23)
 800b94c:	003f7b06 	br	800b73c <_realloc_r+0x148>
 800b950:	80c00017 	ldw	r3,0(r16)
 800b954:	90c00015 	stw	r3,0(r18)
 800b958:	80c00117 	ldw	r3,4(r16)
 800b95c:	90c00115 	stw	r3,4(r18)
 800b960:	00c006c4 	movi	r3,27
 800b964:	19804636 	bltu	r3,r6,800ba80 <_realloc_r+0x48c>
 800b968:	90800204 	addi	r2,r18,8
 800b96c:	80c00204 	addi	r3,r16,8
 800b970:	003fb906 	br	800b858 <_realloc_r+0x264>
 800b974:	9005883a 	mov	r2,r18
 800b978:	8007883a 	mov	r3,r16
 800b97c:	19000017 	ldw	r4,0(r3)
 800b980:	9021883a 	mov	r16,r18
 800b984:	b82d883a 	mov	r22,r23
 800b988:	11000015 	stw	r4,0(r2)
 800b98c:	19000117 	ldw	r4,4(r3)
 800b990:	11000115 	stw	r4,4(r2)
 800b994:	18c00217 	ldw	r3,8(r3)
 800b998:	10c00215 	stw	r3,8(r2)
 800b99c:	b8800117 	ldw	r2,4(r23)
 800b9a0:	003f6606 	br	800b73c <_realloc_r+0x148>
 800b9a4:	2445c83a 	sub	r2,r4,r17
 800b9a8:	b46d883a 	add	r22,r22,r17
 800b9ac:	10800054 	ori	r2,r2,1
 800b9b0:	b0800115 	stw	r2,4(r22)
 800b9b4:	80bfff17 	ldw	r2,-4(r16)
 800b9b8:	a809883a 	mov	r4,r21
 800b9bc:	e5800215 	stw	r22,8(fp)
 800b9c0:	1080004c 	andi	r2,r2,1
 800b9c4:	88a2b03a 	or	r17,r17,r2
 800b9c8:	847fff15 	stw	r17,-4(r16)
 800b9cc:	80115cc0 	call	80115cc <__malloc_unlock>
 800b9d0:	8025883a 	mov	r18,r16
 800b9d4:	003f6606 	br	800b770 <_realloc_r+0x17c>
 800b9d8:	9009883a 	mov	r4,r18
 800b9dc:	800b883a 	mov	r5,r16
 800b9e0:	800a2000 	call	800a200 <memmove>
 800b9e4:	003fa206 	br	800b870 <_realloc_r+0x27c>
 800b9e8:	88800404 	addi	r2,r17,16
 800b9ec:	a0bf8716 	blt	r20,r2,800b80c <_realloc_r+0x218>
 800b9f0:	b8800317 	ldw	r2,12(r23)
 800b9f4:	b8c00217 	ldw	r3,8(r23)
 800b9f8:	99bfff04 	addi	r6,r19,-4
 800b9fc:	01000904 	movi	r4,36
 800ba00:	18800315 	stw	r2,12(r3)
 800ba04:	10c00215 	stw	r3,8(r2)
 800ba08:	bc800204 	addi	r18,r23,8
 800ba0c:	21806536 	bltu	r4,r6,800bba4 <_realloc_r+0x5b0>
 800ba10:	008004c4 	movi	r2,19
 800ba14:	1180592e 	bgeu	r2,r6,800bb7c <_realloc_r+0x588>
 800ba18:	80800017 	ldw	r2,0(r16)
 800ba1c:	b8800215 	stw	r2,8(r23)
 800ba20:	80800117 	ldw	r2,4(r16)
 800ba24:	b8800315 	stw	r2,12(r23)
 800ba28:	008006c4 	movi	r2,27
 800ba2c:	11806136 	bltu	r2,r6,800bbb4 <_realloc_r+0x5c0>
 800ba30:	b8800404 	addi	r2,r23,16
 800ba34:	80c00204 	addi	r3,r16,8
 800ba38:	19000017 	ldw	r4,0(r3)
 800ba3c:	11000015 	stw	r4,0(r2)
 800ba40:	19000117 	ldw	r4,4(r3)
 800ba44:	11000115 	stw	r4,4(r2)
 800ba48:	18c00217 	ldw	r3,8(r3)
 800ba4c:	10c00215 	stw	r3,8(r2)
 800ba50:	a447c83a 	sub	r3,r20,r17
 800ba54:	bc45883a 	add	r2,r23,r17
 800ba58:	18c00054 	ori	r3,r3,1
 800ba5c:	10c00115 	stw	r3,4(r2)
 800ba60:	b8c00117 	ldw	r3,4(r23)
 800ba64:	e0800215 	stw	r2,8(fp)
 800ba68:	a809883a 	mov	r4,r21
 800ba6c:	1880004c 	andi	r2,r3,1
 800ba70:	88a2b03a 	or	r17,r17,r2
 800ba74:	bc400115 	stw	r17,4(r23)
 800ba78:	80115cc0 	call	80115cc <__malloc_unlock>
 800ba7c:	003f3c06 	br	800b770 <_realloc_r+0x17c>
 800ba80:	80c00217 	ldw	r3,8(r16)
 800ba84:	90c00215 	stw	r3,8(r18)
 800ba88:	80c00317 	ldw	r3,12(r16)
 800ba8c:	90c00315 	stw	r3,12(r18)
 800ba90:	30802426 	beq	r6,r2,800bb24 <_realloc_r+0x530>
 800ba94:	90800404 	addi	r2,r18,16
 800ba98:	80c00404 	addi	r3,r16,16
 800ba9c:	003f6e06 	br	800b858 <_realloc_r+0x264>
 800baa0:	953fff17 	ldw	r20,-4(r18)
 800baa4:	00ffff04 	movi	r3,-4
 800baa8:	a0e8703a 	and	r20,r20,r3
 800baac:	a4e9883a 	add	r20,r20,r19
 800bab0:	003f2206 	br	800b73c <_realloc_r+0x148>
 800bab4:	800b883a 	mov	r5,r16
 800bab8:	9009883a 	mov	r4,r18
 800babc:	800a2000 	call	800a200 <memmove>
 800bac0:	9021883a 	mov	r16,r18
 800bac4:	b8800117 	ldw	r2,4(r23)
 800bac8:	b82d883a 	mov	r22,r23
 800bacc:	003f1b06 	br	800b73c <_realloc_r+0x148>
 800bad0:	9005883a 	mov	r2,r18
 800bad4:	8007883a 	mov	r3,r16
 800bad8:	003f9206 	br	800b924 <_realloc_r+0x330>
 800badc:	800b883a 	mov	r5,r16
 800bae0:	9009883a 	mov	r4,r18
 800bae4:	d9c00015 	stw	r7,0(sp)
 800bae8:	800a2000 	call	800a200 <memmove>
 800baec:	d9c00017 	ldw	r7,0(sp)
 800baf0:	9021883a 	mov	r16,r18
 800baf4:	b8800117 	ldw	r2,4(r23)
 800baf8:	3829883a 	mov	r20,r7
 800bafc:	b82d883a 	mov	r22,r23
 800bb00:	003f0e06 	br	800b73c <_realloc_r+0x148>
 800bb04:	80800217 	ldw	r2,8(r16)
 800bb08:	b8800415 	stw	r2,16(r23)
 800bb0c:	80800317 	ldw	r2,12(r16)
 800bb10:	b8800515 	stw	r2,20(r23)
 800bb14:	31001226 	beq	r6,r4,800bb60 <_realloc_r+0x56c>
 800bb18:	b8800604 	addi	r2,r23,24
 800bb1c:	80c00404 	addi	r3,r16,16
 800bb20:	003f9606 	br	800b97c <_realloc_r+0x388>
 800bb24:	81000417 	ldw	r4,16(r16)
 800bb28:	90800604 	addi	r2,r18,24
 800bb2c:	80c00604 	addi	r3,r16,24
 800bb30:	91000415 	stw	r4,16(r18)
 800bb34:	81000517 	ldw	r4,20(r16)
 800bb38:	91000515 	stw	r4,20(r18)
 800bb3c:	003f4606 	br	800b858 <_realloc_r+0x264>
 800bb40:	80800217 	ldw	r2,8(r16)
 800bb44:	b8800415 	stw	r2,16(r23)
 800bb48:	80800317 	ldw	r2,12(r16)
 800bb4c:	b8800515 	stw	r2,20(r23)
 800bb50:	31000d26 	beq	r6,r4,800bb88 <_realloc_r+0x594>
 800bb54:	b8800604 	addi	r2,r23,24
 800bb58:	80c00404 	addi	r3,r16,16
 800bb5c:	003f7106 	br	800b924 <_realloc_r+0x330>
 800bb60:	81000417 	ldw	r4,16(r16)
 800bb64:	b8800804 	addi	r2,r23,32
 800bb68:	80c00604 	addi	r3,r16,24
 800bb6c:	b9000615 	stw	r4,24(r23)
 800bb70:	81000517 	ldw	r4,20(r16)
 800bb74:	b9000715 	stw	r4,28(r23)
 800bb78:	003f8006 	br	800b97c <_realloc_r+0x388>
 800bb7c:	9005883a 	mov	r2,r18
 800bb80:	8007883a 	mov	r3,r16
 800bb84:	003fac06 	br	800ba38 <_realloc_r+0x444>
 800bb88:	81000417 	ldw	r4,16(r16)
 800bb8c:	b8800804 	addi	r2,r23,32
 800bb90:	80c00604 	addi	r3,r16,24
 800bb94:	b9000615 	stw	r4,24(r23)
 800bb98:	81000517 	ldw	r4,20(r16)
 800bb9c:	b9000715 	stw	r4,28(r23)
 800bba0:	003f6006 	br	800b924 <_realloc_r+0x330>
 800bba4:	9009883a 	mov	r4,r18
 800bba8:	800b883a 	mov	r5,r16
 800bbac:	800a2000 	call	800a200 <memmove>
 800bbb0:	003fa706 	br	800ba50 <_realloc_r+0x45c>
 800bbb4:	80800217 	ldw	r2,8(r16)
 800bbb8:	b8800415 	stw	r2,16(r23)
 800bbbc:	80800317 	ldw	r2,12(r16)
 800bbc0:	b8800515 	stw	r2,20(r23)
 800bbc4:	31000326 	beq	r6,r4,800bbd4 <_realloc_r+0x5e0>
 800bbc8:	b8800604 	addi	r2,r23,24
 800bbcc:	80c00404 	addi	r3,r16,16
 800bbd0:	003f9906 	br	800ba38 <_realloc_r+0x444>
 800bbd4:	81000417 	ldw	r4,16(r16)
 800bbd8:	b8800804 	addi	r2,r23,32
 800bbdc:	80c00604 	addi	r3,r16,24
 800bbe0:	b9000615 	stw	r4,24(r23)
 800bbe4:	81000517 	ldw	r4,20(r16)
 800bbe8:	b9000715 	stw	r4,28(r23)
 800bbec:	003f9206 	br	800ba38 <_realloc_r+0x444>

0800bbf0 <__isinfd>:
 800bbf0:	0105c83a 	sub	r2,zero,r4
 800bbf4:	1108b03a 	or	r4,r2,r4
 800bbf8:	2004d7fa 	srli	r2,r4,31
 800bbfc:	00e00034 	movhi	r3,32768
 800bc00:	18ffffc4 	addi	r3,r3,-1
 800bc04:	28ca703a 	and	r5,r5,r3
 800bc08:	1144b03a 	or	r2,r2,r5
 800bc0c:	00dffc34 	movhi	r3,32752
 800bc10:	1885c83a 	sub	r2,r3,r2
 800bc14:	0087c83a 	sub	r3,zero,r2
 800bc18:	1884b03a 	or	r2,r3,r2
 800bc1c:	1005d7fa 	srai	r2,r2,31
 800bc20:	10800044 	addi	r2,r2,1
 800bc24:	f800283a 	ret

0800bc28 <__isnand>:
 800bc28:	0105c83a 	sub	r2,zero,r4
 800bc2c:	1108b03a 	or	r4,r2,r4
 800bc30:	2004d7fa 	srli	r2,r4,31
 800bc34:	00e00034 	movhi	r3,32768
 800bc38:	18ffffc4 	addi	r3,r3,-1
 800bc3c:	28ca703a 	and	r5,r5,r3
 800bc40:	1144b03a 	or	r2,r2,r5
 800bc44:	00dffc34 	movhi	r3,32752
 800bc48:	1885c83a 	sub	r2,r3,r2
 800bc4c:	1004d7fa 	srli	r2,r2,31
 800bc50:	f800283a 	ret

0800bc54 <__sccl>:
 800bc54:	2a400003 	ldbu	r9,0(r5)
 800bc58:	00801784 	movi	r2,94
 800bc5c:	48802626 	beq	r9,r2,800bcf8 <__sccl+0xa4>
 800bc60:	28800044 	addi	r2,r5,1
 800bc64:	0011883a 	mov	r8,zero
 800bc68:	000b883a 	mov	r5,zero
 800bc6c:	0007883a 	mov	r3,zero
 800bc70:	01c04004 	movi	r7,256
 800bc74:	20cd883a 	add	r6,r4,r3
 800bc78:	32000005 	stb	r8,0(r6)
 800bc7c:	18c00044 	addi	r3,r3,1
 800bc80:	19fffc1e 	bne	r3,r7,800bc74 <__sccl+0x20>
 800bc84:	48000f26 	beq	r9,zero,800bcc4 <__sccl+0x70>
 800bc88:	01800044 	movi	r6,1
 800bc8c:	314dc83a 	sub	r6,r6,r5
 800bc90:	02001744 	movi	r8,93
 800bc94:	01400b44 	movi	r5,45
 800bc98:	2247883a 	add	r3,r4,r9
 800bc9c:	19800005 	stb	r6,0(r3)
 800bca0:	10c00003 	ldbu	r3,0(r2)
 800bca4:	11c00044 	addi	r7,r2,1
 800bca8:	19400a26 	beq	r3,r5,800bcd4 <__sccl+0x80>
 800bcac:	1a000726 	beq	r3,r8,800bccc <__sccl+0x78>
 800bcb0:	1800011e 	bne	r3,zero,800bcb8 <__sccl+0x64>
 800bcb4:	f800283a 	ret
 800bcb8:	1813883a 	mov	r9,r3
 800bcbc:	3805883a 	mov	r2,r7
 800bcc0:	003ff506 	br	800bc98 <__sccl+0x44>
 800bcc4:	10bfffc4 	addi	r2,r2,-1
 800bcc8:	f800283a 	ret
 800bccc:	3805883a 	mov	r2,r7
 800bcd0:	f800283a 	ret
 800bcd4:	10c00043 	ldbu	r3,1(r2)
 800bcd8:	1a000c26 	beq	r3,r8,800bd0c <__sccl+0xb8>
 800bcdc:	1a400b16 	blt	r3,r9,800bd0c <__sccl+0xb8>
 800bce0:	10800084 	addi	r2,r2,2
 800bce4:	4a400044 	addi	r9,r9,1
 800bce8:	224f883a 	add	r7,r4,r9
 800bcec:	39800005 	stb	r6,0(r7)
 800bcf0:	48fffc16 	blt	r9,r3,800bce4 <__sccl+0x90>
 800bcf4:	003fea06 	br	800bca0 <__sccl+0x4c>
 800bcf8:	2a400043 	ldbu	r9,1(r5)
 800bcfc:	28800084 	addi	r2,r5,2
 800bd00:	02000044 	movi	r8,1
 800bd04:	01400044 	movi	r5,1
 800bd08:	003fd806 	br	800bc6c <__sccl+0x18>
 800bd0c:	2813883a 	mov	r9,r5
 800bd10:	3805883a 	mov	r2,r7
 800bd14:	003fe006 	br	800bc98 <__sccl+0x44>

0800bd18 <nanf>:
 800bd18:	009ff034 	movhi	r2,32704
 800bd1c:	f800283a 	ret

0800bd20 <_sprintf_r>:
 800bd20:	deffe704 	addi	sp,sp,-100
 800bd24:	2807883a 	mov	r3,r5
 800bd28:	dfc01715 	stw	ra,92(sp)
 800bd2c:	d9c01815 	stw	r7,96(sp)
 800bd30:	00a00034 	movhi	r2,32768
 800bd34:	10bfffc4 	addi	r2,r2,-1
 800bd38:	02008204 	movi	r8,520
 800bd3c:	d8800215 	stw	r2,8(sp)
 800bd40:	d8800515 	stw	r2,20(sp)
 800bd44:	d80b883a 	mov	r5,sp
 800bd48:	d9c01804 	addi	r7,sp,96
 800bd4c:	00bfffc4 	movi	r2,-1
 800bd50:	d8c00015 	stw	r3,0(sp)
 800bd54:	d8c00415 	stw	r3,16(sp)
 800bd58:	da00030d 	sth	r8,12(sp)
 800bd5c:	d880038d 	sth	r2,14(sp)
 800bd60:	80047fc0 	call	80047fc <___vfprintf_internal_r>
 800bd64:	d8c00017 	ldw	r3,0(sp)
 800bd68:	18000005 	stb	zero,0(r3)
 800bd6c:	dfc01717 	ldw	ra,92(sp)
 800bd70:	dec01904 	addi	sp,sp,100
 800bd74:	f800283a 	ret

0800bd78 <sprintf>:
 800bd78:	deffe604 	addi	sp,sp,-104
 800bd7c:	2007883a 	mov	r3,r4
 800bd80:	dfc01715 	stw	ra,92(sp)
 800bd84:	d9801815 	stw	r6,96(sp)
 800bd88:	d9c01915 	stw	r7,100(sp)
 800bd8c:	00820074 	movhi	r2,2049
 800bd90:	10999c04 	addi	r2,r2,26224
 800bd94:	11000017 	ldw	r4,0(r2)
 800bd98:	00a00034 	movhi	r2,32768
 800bd9c:	10bfffc4 	addi	r2,r2,-1
 800bda0:	280d883a 	mov	r6,r5
 800bda4:	02008204 	movi	r8,520
 800bda8:	d8800215 	stw	r2,8(sp)
 800bdac:	d8800515 	stw	r2,20(sp)
 800bdb0:	d80b883a 	mov	r5,sp
 800bdb4:	d9c01804 	addi	r7,sp,96
 800bdb8:	00bfffc4 	movi	r2,-1
 800bdbc:	d8c00015 	stw	r3,0(sp)
 800bdc0:	d8c00415 	stw	r3,16(sp)
 800bdc4:	da00030d 	sth	r8,12(sp)
 800bdc8:	d880038d 	sth	r2,14(sp)
 800bdcc:	80047fc0 	call	80047fc <___vfprintf_internal_r>
 800bdd0:	d8c00017 	ldw	r3,0(sp)
 800bdd4:	18000005 	stb	zero,0(r3)
 800bdd8:	dfc01717 	ldw	ra,92(sp)
 800bddc:	dec01a04 	addi	sp,sp,104
 800bde0:	f800283a 	ret

0800bde4 <strcmp>:
 800bde4:	2904b03a 	or	r2,r5,r4
 800bde8:	108000cc 	andi	r2,r2,3
 800bdec:	1000171e 	bne	r2,zero,800be4c <strcmp+0x68>
 800bdf0:	20800017 	ldw	r2,0(r4)
 800bdf4:	28c00017 	ldw	r3,0(r5)
 800bdf8:	10c0141e 	bne	r2,r3,800be4c <strcmp+0x68>
 800bdfc:	027fbff4 	movhi	r9,65279
 800be00:	4a7fbfc4 	addi	r9,r9,-257
 800be04:	1247883a 	add	r3,r2,r9
 800be08:	0084303a 	nor	r2,zero,r2
 800be0c:	1884703a 	and	r2,r3,r2
 800be10:	02202074 	movhi	r8,32897
 800be14:	42202004 	addi	r8,r8,-32640
 800be18:	1204703a 	and	r2,r2,r8
 800be1c:	10000226 	beq	r2,zero,800be28 <strcmp+0x44>
 800be20:	00001706 	br	800be80 <strcmp+0x9c>
 800be24:	3000161e 	bne	r6,zero,800be80 <strcmp+0x9c>
 800be28:	21000104 	addi	r4,r4,4
 800be2c:	20800017 	ldw	r2,0(r4)
 800be30:	29400104 	addi	r5,r5,4
 800be34:	28c00017 	ldw	r3,0(r5)
 800be38:	124f883a 	add	r7,r2,r9
 800be3c:	008c303a 	nor	r6,zero,r2
 800be40:	398c703a 	and	r6,r7,r6
 800be44:	320c703a 	and	r6,r6,r8
 800be48:	10fff626 	beq	r2,r3,800be24 <strcmp+0x40>
 800be4c:	20800007 	ldb	r2,0(r4)
 800be50:	1000051e 	bne	r2,zero,800be68 <strcmp+0x84>
 800be54:	00000606 	br	800be70 <strcmp+0x8c>
 800be58:	21000044 	addi	r4,r4,1
 800be5c:	20800007 	ldb	r2,0(r4)
 800be60:	29400044 	addi	r5,r5,1
 800be64:	10000226 	beq	r2,zero,800be70 <strcmp+0x8c>
 800be68:	28c00007 	ldb	r3,0(r5)
 800be6c:	10fffa26 	beq	r2,r3,800be58 <strcmp+0x74>
 800be70:	20c00003 	ldbu	r3,0(r4)
 800be74:	28800003 	ldbu	r2,0(r5)
 800be78:	1885c83a 	sub	r2,r3,r2
 800be7c:	f800283a 	ret
 800be80:	0005883a 	mov	r2,zero
 800be84:	f800283a 	ret

0800be88 <_strtod_r>:
 800be88:	deffdc04 	addi	sp,sp,-144
 800be8c:	dc001a15 	stw	r16,104(sp)
 800be90:	d9400e15 	stw	r5,56(sp)
 800be94:	d9801115 	stw	r6,68(sp)
 800be98:	d9400c15 	stw	r5,48(sp)
 800be9c:	2805883a 	mov	r2,r5
 800bea0:	dfc02315 	stw	ra,140(sp)
 800bea4:	df002215 	stw	fp,136(sp)
 800bea8:	ddc02115 	stw	r23,132(sp)
 800beac:	dd802015 	stw	r22,128(sp)
 800beb0:	dd401f15 	stw	r21,124(sp)
 800beb4:	dd001e15 	stw	r20,120(sp)
 800beb8:	dcc01d15 	stw	r19,116(sp)
 800bebc:	dc801c15 	stw	r18,112(sp)
 800bec0:	dc401b15 	stw	r17,108(sp)
 800bec4:	2021883a 	mov	r16,r4
 800bec8:	d8000615 	stw	zero,24(sp)
 800becc:	d8000715 	stw	zero,28(sp)
 800bed0:	01400b44 	movi	r5,45
 800bed4:	01820074 	movhi	r6,2049
 800bed8:	31b00b04 	addi	r6,r6,-16340
 800bedc:	10c00003 	ldbu	r3,0(r2)
 800bee0:	19003fcc 	andi	r4,r3,255
 800bee4:	29004c2e 	bgeu	r5,r4,800c018 <_strtod_r+0x190>
 800bee8:	1c803fcc 	andi	r18,r3,255
 800beec:	9480201c 	xori	r18,r18,128
 800bef0:	102d883a 	mov	r22,r2
 800bef4:	d8001215 	stw	zero,72(sp)
 800bef8:	94bfe004 	addi	r18,r18,-128
 800befc:	00800c04 	movi	r2,48
 800bf00:	9080f526 	beq	r18,r2,800c2d8 <_strtod_r+0x450>
 800bf04:	d8001315 	stw	zero,76(sp)
 800bf08:	04c00bc4 	movi	r19,47
 800bf0c:	900f883a 	mov	r7,r18
 800bf10:	9c84770e 	bge	r19,r18,800d0f0 <_strtod_r+0x1268>
 800bf14:	05c00e44 	movi	r23,57
 800bf18:	bc847a16 	blt	r23,r18,800d104 <_strtod_r+0x127c>
 800bf1c:	0039883a 	mov	fp,zero
 800bf20:	b4400044 	addi	r17,r22,1
 800bf24:	dd801015 	stw	r22,64(sp)
 800bf28:	d8000f15 	stw	zero,60(sp)
 800bf2c:	e02d883a 	mov	r22,fp
 800bf30:	002b883a 	mov	r21,zero
 800bf34:	8039883a 	mov	fp,r16
 800bf38:	05000204 	movi	r20,8
 800bf3c:	0021883a 	mov	r16,zero
 800bf40:	a5408c16 	blt	r20,r21,800c174 <_strtod_r+0x2ec>
 800bf44:	b009883a 	mov	r4,r22
 800bf48:	01400284 	movi	r5,10
 800bf4c:	8001a6c0 	call	8001a6c <__mulsi3>
 800bf50:	1485883a 	add	r2,r2,r18
 800bf54:	15bff404 	addi	r22,r2,-48
 800bf58:	dc400c15 	stw	r17,48(sp)
 800bf5c:	8c800007 	ldb	r18,0(r17)
 800bf60:	ad400044 	addi	r21,r21,1
 800bf64:	880b883a 	mov	r5,r17
 800bf68:	900f883a 	mov	r7,r18
 800bf6c:	9c808e0e 	bge	r19,r18,800c1a8 <_strtod_r+0x320>
 800bf70:	8c400044 	addi	r17,r17,1
 800bf74:	bcbff20e 	bge	r23,r18,800bf40 <_strtod_r+0xb8>
 800bf78:	dc000f15 	stw	r16,60(sp)
 800bf7c:	e021883a 	mov	r16,fp
 800bf80:	b039883a 	mov	fp,r22
 800bf84:	dd801017 	ldw	r22,64(sp)
 800bf88:	a827883a 	mov	r19,r21
 800bf8c:	dd801415 	stw	r22,80(sp)
 800bf90:	000d883a 	mov	r6,zero
 800bf94:	0029883a 	mov	r20,zero
 800bf98:	d8001015 	stw	zero,64(sp)
 800bf9c:	00801944 	movi	r2,101
 800bfa0:	3880dd26 	beq	r7,r2,800c318 <_strtod_r+0x490>
 800bfa4:	00801144 	movi	r2,69
 800bfa8:	3880db26 	beq	r7,r2,800c318 <_strtod_r+0x490>
 800bfac:	0009883a 	mov	r4,zero
 800bfb0:	a8011d1e 	bne	r21,zero,800c428 <_strtod_r+0x5a0>
 800bfb4:	3001591e 	bne	r6,zero,800c51c <_strtod_r+0x694>
 800bfb8:	d8c01317 	ldw	r3,76(sp)
 800bfbc:	1801571e 	bne	r3,zero,800c51c <_strtod_r+0x694>
 800bfc0:	d8c01017 	ldw	r3,64(sp)
 800bfc4:	1803081e 	bne	r3,zero,800cbe8 <_strtod_r+0xd60>
 800bfc8:	00801384 	movi	r2,78
 800bfcc:	38847e26 	beq	r7,r2,800d1c8 <_strtod_r+0x1340>
 800bfd0:	11c47916 	blt	r2,r7,800d1b8 <_strtod_r+0x1330>
 800bfd4:	00801244 	movi	r2,73
 800bfd8:	3883031e 	bne	r7,r2,800cbe8 <_strtod_r+0xd60>
 800bfdc:	d8800c17 	ldw	r2,48(sp)
 800bfe0:	01020074 	movhi	r4,2049
 800bfe4:	2112dd04 	addi	r4,r4,19316
 800bfe8:	01801004 	movi	r6,64
 800bfec:	01c01684 	movi	r7,90
 800bff0:	21400007 	ldb	r5,0(r4)
 800bff4:	21000044 	addi	r4,r4,1
 800bff8:	2804b426 	beq	r5,zero,800d2cc <_strtod_r+0x1444>
 800bffc:	10800044 	addi	r2,r2,1
 800c000:	10c00007 	ldb	r3,0(r2)
 800c004:	30c0020e 	bge	r6,r3,800c010 <_strtod_r+0x188>
 800c008:	38c00116 	blt	r7,r3,800c010 <_strtod_r+0x188>
 800c00c:	18c00804 	addi	r3,r3,32
 800c010:	197ff726 	beq	r3,r5,800bff0 <_strtod_r+0x168>
 800c014:	0002f406 	br	800cbe8 <_strtod_r+0xd60>
 800c018:	2109883a 	add	r4,r4,r4
 800c01c:	2109883a 	add	r4,r4,r4
 800c020:	2189883a 	add	r4,r4,r6
 800c024:	21000017 	ldw	r4,0(r4)
 800c028:	2000683a 	jmp	r4
 800c02c:	0800c0f8 	rdprs	zero,at,771
 800c030:	0800bee8 	cmpgeui	zero,at,763
 800c034:	0800bee8 	cmpgeui	zero,at,763
 800c038:	0800bee8 	cmpgeui	zero,at,763
 800c03c:	0800bee8 	cmpgeui	zero,at,763
 800c040:	0800bee8 	cmpgeui	zero,at,763
 800c044:	0800bee8 	cmpgeui	zero,at,763
 800c048:	0800bee8 	cmpgeui	zero,at,763
 800c04c:	0800bee8 	cmpgeui	zero,at,763
 800c050:	0800c15c 	xori	zero,at,773
 800c054:	0800c15c 	xori	zero,at,773
 800c058:	0800c15c 	xori	zero,at,773
 800c05c:	0800c15c 	xori	zero,at,773
 800c060:	0800c15c 	xori	zero,at,773
 800c064:	0800bee8 	cmpgeui	zero,at,763
 800c068:	0800bee8 	cmpgeui	zero,at,763
 800c06c:	0800bee8 	cmpgeui	zero,at,763
 800c070:	0800bee8 	cmpgeui	zero,at,763
 800c074:	0800bee8 	cmpgeui	zero,at,763
 800c078:	0800bee8 	cmpgeui	zero,at,763
 800c07c:	0800bee8 	cmpgeui	zero,at,763
 800c080:	0800bee8 	cmpgeui	zero,at,763
 800c084:	0800bee8 	cmpgeui	zero,at,763
 800c088:	0800bee8 	cmpgeui	zero,at,763
 800c08c:	0800bee8 	cmpgeui	zero,at,763
 800c090:	0800bee8 	cmpgeui	zero,at,763
 800c094:	0800bee8 	cmpgeui	zero,at,763
 800c098:	0800bee8 	cmpgeui	zero,at,763
 800c09c:	0800bee8 	cmpgeui	zero,at,763
 800c0a0:	0800bee8 	cmpgeui	zero,at,763
 800c0a4:	0800bee8 	cmpgeui	zero,at,763
 800c0a8:	0800bee8 	cmpgeui	zero,at,763
 800c0ac:	0800c15c 	xori	zero,at,773
 800c0b0:	0800bee8 	cmpgeui	zero,at,763
 800c0b4:	0800bee8 	cmpgeui	zero,at,763
 800c0b8:	0800bee8 	cmpgeui	zero,at,763
 800c0bc:	0800bee8 	cmpgeui	zero,at,763
 800c0c0:	0800bee8 	cmpgeui	zero,at,763
 800c0c4:	0800bee8 	cmpgeui	zero,at,763
 800c0c8:	0800bee8 	cmpgeui	zero,at,763
 800c0cc:	0800bee8 	cmpgeui	zero,at,763
 800c0d0:	0800bee8 	cmpgeui	zero,at,763
 800c0d4:	0800bee8 	cmpgeui	zero,at,763
 800c0d8:	0800c0e4 	muli	zero,at,771
 800c0dc:	0800bee8 	cmpgeui	zero,at,763
 800c0e0:	0800c168 	cmpgeui	zero,at,773
 800c0e4:	d8001215 	stw	zero,72(sp)
 800c0e8:	15800044 	addi	r22,r2,1
 800c0ec:	dd800c15 	stw	r22,48(sp)
 800c0f0:	14800047 	ldb	r18,1(r2)
 800c0f4:	903f811e 	bne	r18,zero,800befc <_strtod_r+0x74>
 800c0f8:	0005883a 	mov	r2,zero
 800c0fc:	0007883a 	mov	r3,zero
 800c100:	d9400e17 	ldw	r5,56(sp)
 800c104:	d8001215 	stw	zero,72(sp)
 800c108:	d9400c15 	stw	r5,48(sp)
 800c10c:	d9001117 	ldw	r4,68(sp)
 800c110:	20000326 	beq	r4,zero,800c120 <_strtod_r+0x298>
 800c114:	d9000c17 	ldw	r4,48(sp)
 800c118:	d9401117 	ldw	r5,68(sp)
 800c11c:	29000015 	stw	r4,0(r5)
 800c120:	d9001217 	ldw	r4,72(sp)
 800c124:	20000126 	beq	r4,zero,800c12c <_strtod_r+0x2a4>
 800c128:	18e0003c 	xorhi	r3,r3,32768
 800c12c:	dfc02317 	ldw	ra,140(sp)
 800c130:	df002217 	ldw	fp,136(sp)
 800c134:	ddc02117 	ldw	r23,132(sp)
 800c138:	dd802017 	ldw	r22,128(sp)
 800c13c:	dd401f17 	ldw	r21,124(sp)
 800c140:	dd001e17 	ldw	r20,120(sp)
 800c144:	dcc01d17 	ldw	r19,116(sp)
 800c148:	dc801c17 	ldw	r18,112(sp)
 800c14c:	dc401b17 	ldw	r17,108(sp)
 800c150:	dc001a17 	ldw	r16,104(sp)
 800c154:	dec02404 	addi	sp,sp,144
 800c158:	f800283a 	ret
 800c15c:	10800044 	addi	r2,r2,1
 800c160:	d8800c15 	stw	r2,48(sp)
 800c164:	003f5d06 	br	800bedc <_strtod_r+0x54>
 800c168:	00c00044 	movi	r3,1
 800c16c:	d8c01215 	stw	r3,72(sp)
 800c170:	003fdd06 	br	800c0e8 <_strtod_r+0x260>
 800c174:	010003c4 	movi	r4,15
 800c178:	257f7716 	blt	r4,r21,800bf58 <_strtod_r+0xd0>
 800c17c:	8009883a 	mov	r4,r16
 800c180:	01400284 	movi	r5,10
 800c184:	8001a6c0 	call	8001a6c <__mulsi3>
 800c188:	dc400c15 	stw	r17,48(sp)
 800c18c:	1485883a 	add	r2,r2,r18
 800c190:	8c800007 	ldb	r18,0(r17)
 800c194:	143ff404 	addi	r16,r2,-48
 800c198:	ad400044 	addi	r21,r21,1
 800c19c:	880b883a 	mov	r5,r17
 800c1a0:	900f883a 	mov	r7,r18
 800c1a4:	9cbf7216 	blt	r19,r18,800bf70 <_strtod_r+0xe8>
 800c1a8:	dc000f15 	stw	r16,60(sp)
 800c1ac:	e021883a 	mov	r16,fp
 800c1b0:	b039883a 	mov	fp,r22
 800c1b4:	dd801017 	ldw	r22,64(sp)
 800c1b8:	00800b84 	movi	r2,46
 800c1bc:	9082561e 	bne	r18,r2,800cb18 <_strtod_r+0xc90>
 800c1c0:	28800044 	addi	r2,r5,1
 800c1c4:	d8800c15 	stw	r2,48(sp)
 800c1c8:	29c00047 	ldb	r7,1(r5)
 800c1cc:	a802611e 	bne	r21,zero,800cb54 <_strtod_r+0xccc>
 800c1d0:	00800c04 	movi	r2,48
 800c1d4:	3884161e 	bne	r7,r2,800d230 <_strtod_r+0x13a8>
 800c1d8:	00800044 	movi	r2,1
 800c1dc:	3809883a 	mov	r4,r7
 800c1e0:	100d883a 	mov	r6,r2
 800c1e4:	10800044 	addi	r2,r2,1
 800c1e8:	2887883a 	add	r3,r5,r2
 800c1ec:	d8c00c15 	stw	r3,48(sp)
 800c1f0:	2987883a 	add	r3,r5,r6
 800c1f4:	19c00047 	ldb	r7,1(r3)
 800c1f8:	393ff926 	beq	r7,r4,800c1e0 <_strtod_r+0x358>
 800c1fc:	38bff3c4 	addi	r2,r7,-49
 800c200:	00c00204 	movi	r3,8
 800c204:	1882ad36 	bltu	r3,r2,800ccbc <_strtod_r+0xe34>
 800c208:	d9400c17 	ldw	r5,48(sp)
 800c20c:	3029883a 	mov	r20,r6
 800c210:	002f883a 	mov	r23,zero
 800c214:	d9401415 	stw	r5,80(sp)
 800c218:	2823883a 	mov	r17,r5
 800c21c:	01800044 	movi	r6,1
 800c220:	3dbff404 	addi	r22,r7,-48
 800c224:	b0002826 	beq	r22,zero,800c2c8 <_strtod_r+0x440>
 800c228:	00800044 	movi	r2,1
 800c22c:	a1a9883a 	add	r20,r20,r6
 800c230:	30844826 	beq	r6,r2,800d354 <_strtod_r+0x14cc>
 800c234:	b9a7883a 	add	r19,r23,r6
 800c238:	dc401015 	stw	r17,64(sp)
 800c23c:	e023883a 	mov	r17,fp
 800c240:	b039883a 	mov	fp,r22
 800c244:	802d883a 	mov	r22,r16
 800c248:	dc000f17 	ldw	r16,60(sp)
 800c24c:	98ffffc4 	addi	r3,r19,-1
 800c250:	dd001615 	stw	r20,88(sp)
 800c254:	04800204 	movi	r18,8
 800c258:	d9801515 	stw	r6,84(sp)
 800c25c:	b829883a 	mov	r20,r23
 800c260:	1827883a 	mov	r19,r3
 800c264:	a5000044 	addi	r20,r20,1
 800c268:	a17fffc4 	addi	r5,r20,-1
 800c26c:	9142b916 	blt	r18,r5,800cd54 <_strtod_r+0xecc>
 800c270:	8809883a 	mov	r4,r17
 800c274:	01400284 	movi	r5,10
 800c278:	8001a6c0 	call	8001a6c <__mulsi3>
 800c27c:	1023883a 	mov	r17,r2
 800c280:	a4fff81e 	bne	r20,r19,800c264 <_strtod_r+0x3dc>
 800c284:	d9801517 	ldw	r6,84(sp)
 800c288:	dc000f15 	stw	r16,60(sp)
 800c28c:	dd001617 	ldw	r20,88(sp)
 800c290:	b021883a 	mov	r16,r22
 800c294:	e02d883a 	mov	r22,fp
 800c298:	8839883a 	mov	fp,r17
 800c29c:	dc401017 	ldw	r17,64(sp)
 800c2a0:	b985883a 	add	r2,r23,r6
 800c2a4:	10bfffc4 	addi	r2,r2,-1
 800c2a8:	00c00204 	movi	r3,8
 800c2ac:	15c00044 	addi	r23,r2,1
 800c2b0:	1883d616 	blt	r3,r2,800d20c <_strtod_r+0x1384>
 800c2b4:	e009883a 	mov	r4,fp
 800c2b8:	01400284 	movi	r5,10
 800c2bc:	8001a6c0 	call	8001a6c <__mulsi3>
 800c2c0:	15b9883a 	add	fp,r2,r22
 800c2c4:	000d883a 	mov	r6,zero
 800c2c8:	88800044 	addi	r2,r17,1
 800c2cc:	d8800c15 	stw	r2,48(sp)
 800c2d0:	89c00047 	ldb	r7,1(r17)
 800c2d4:	00022306 	br	800cb64 <_strtod_r+0xcdc>
 800c2d8:	b0800047 	ldb	r2,1(r22)
 800c2dc:	01001604 	movi	r4,88
 800c2e0:	1102a326 	beq	r2,r4,800cd70 <_strtod_r+0xee8>
 800c2e4:	01001e04 	movi	r4,120
 800c2e8:	1102a126 	beq	r2,r4,800cd70 <_strtod_r+0xee8>
 800c2ec:	b0800044 	addi	r2,r22,1
 800c2f0:	9009883a 	mov	r4,r18
 800c2f4:	d8800c15 	stw	r2,48(sp)
 800c2f8:	14800007 	ldb	r18,0(r2)
 800c2fc:	102d883a 	mov	r22,r2
 800c300:	10800044 	addi	r2,r2,1
 800c304:	913ffb26 	beq	r18,r4,800c2f4 <_strtod_r+0x46c>
 800c308:	90022526 	beq	r18,zero,800cba0 <_strtod_r+0xd18>
 800c30c:	00c00044 	movi	r3,1
 800c310:	d8c01315 	stw	r3,76(sp)
 800c314:	003efc06 	br	800bf08 <_strtod_r+0x80>
 800c318:	a800011e 	bne	r21,zero,800c320 <_strtod_r+0x498>
 800c31c:	30023026 	beq	r6,zero,800cbe0 <_strtod_r+0xd58>
 800c320:	d9400c17 	ldw	r5,48(sp)
 800c324:	28800044 	addi	r2,r5,1
 800c328:	d8800c15 	stw	r2,48(sp)
 800c32c:	29c00047 	ldb	r7,1(r5)
 800c330:	d9400e15 	stw	r5,56(sp)
 800c334:	00800ac4 	movi	r2,43
 800c338:	38821026 	beq	r7,r2,800cb7c <_strtod_r+0xcf4>
 800c33c:	00800b44 	movi	r2,45
 800c340:	38821426 	beq	r7,r2,800cb94 <_strtod_r+0xd0c>
 800c344:	d8001515 	stw	zero,84(sp)
 800c348:	38bff404 	addi	r2,r7,-48
 800c34c:	00c00244 	movi	r3,9
 800c350:	1881fc36 	bltu	r3,r2,800cb44 <_strtod_r+0xcbc>
 800c354:	00800c04 	movi	r2,48
 800c358:	3880071e 	bne	r7,r2,800c378 <_strtod_r+0x4f0>
 800c35c:	d8800c17 	ldw	r2,48(sp)
 800c360:	3807883a 	mov	r3,r7
 800c364:	10800044 	addi	r2,r2,1
 800c368:	d8800c15 	stw	r2,48(sp)
 800c36c:	11c00007 	ldb	r7,0(r2)
 800c370:	10800044 	addi	r2,r2,1
 800c374:	38fffc26 	beq	r7,r3,800c368 <_strtod_r+0x4e0>
 800c378:	38bff3c4 	addi	r2,r7,-49
 800c37c:	00c00204 	movi	r3,8
 800c380:	18bf0a36 	bltu	r3,r2,800bfac <_strtod_r+0x124>
 800c384:	d8c00c17 	ldw	r3,48(sp)
 800c388:	393ff404 	addi	r4,r7,-48
 800c38c:	05c00bc4 	movi	r23,47
 800c390:	18800044 	addi	r2,r3,1
 800c394:	d8800c15 	stw	r2,48(sp)
 800c398:	19c00047 	ldb	r7,1(r3)
 800c39c:	d8c01615 	stw	r3,88(sp)
 800c3a0:	b9c0160e 	bge	r23,r7,800c3fc <_strtod_r+0x574>
 800c3a4:	00c00e44 	movi	r3,57
 800c3a8:	19c01416 	blt	r3,r7,800c3fc <_strtod_r+0x574>
 800c3ac:	d9401617 	ldw	r5,88(sp)
 800c3b0:	dc001715 	stw	r16,92(sp)
 800c3b4:	1823883a 	mov	r17,r3
 800c3b8:	2d800084 	addi	r22,r5,2
 800c3bc:	3025883a 	mov	r18,r6
 800c3c0:	3821883a 	mov	r16,r7
 800c3c4:	00000206 	br	800c3d0 <_strtod_r+0x548>
 800c3c8:	b5800044 	addi	r22,r22,1
 800c3cc:	8c000816 	blt	r17,r16,800c3f0 <_strtod_r+0x568>
 800c3d0:	01400284 	movi	r5,10
 800c3d4:	8001a6c0 	call	8001a6c <__mulsi3>
 800c3d8:	dd800c15 	stw	r22,48(sp)
 800c3dc:	1405883a 	add	r2,r2,r16
 800c3e0:	b4000007 	ldb	r16,0(r22)
 800c3e4:	113ff404 	addi	r4,r2,-48
 800c3e8:	b005883a 	mov	r2,r22
 800c3ec:	bc3ff616 	blt	r23,r16,800c3c8 <_strtod_r+0x540>
 800c3f0:	800f883a 	mov	r7,r16
 800c3f4:	dc001717 	ldw	r16,92(sp)
 800c3f8:	900d883a 	mov	r6,r18
 800c3fc:	d8c01617 	ldw	r3,88(sp)
 800c400:	10c5c83a 	sub	r2,r2,r3
 800c404:	00c00204 	movi	r3,8
 800c408:	18833716 	blt	r3,r2,800d0e8 <_strtod_r+0x1260>
 800c40c:	009387c4 	movi	r2,19999
 800c410:	1100010e 	bge	r2,r4,800c418 <_strtod_r+0x590>
 800c414:	1009883a 	mov	r4,r2
 800c418:	d8c01517 	ldw	r3,84(sp)
 800c41c:	183ee426 	beq	r3,zero,800bfb0 <_strtod_r+0x128>
 800c420:	0109c83a 	sub	r4,zero,r4
 800c424:	a83ee326 	beq	r21,zero,800bfb4 <_strtod_r+0x12c>
 800c428:	2529c83a 	sub	r20,r4,r20
 800c42c:	dd001015 	stw	r20,64(sp)
 800c430:	9800011e 	bne	r19,zero,800c438 <_strtod_r+0x5b0>
 800c434:	a827883a 	mov	r19,r21
 800c438:	00800404 	movi	r2,16
 800c43c:	a823883a 	mov	r17,r21
 800c440:	1540010e 	bge	r2,r21,800c448 <_strtod_r+0x5c0>
 800c444:	1023883a 	mov	r17,r2
 800c448:	e009883a 	mov	r4,fp
 800c44c:	80019500 	call	8001950 <__floatunsidf>
 800c450:	d8800615 	stw	r2,24(sp)
 800c454:	d8c00715 	stw	r3,28(sp)
 800c458:	01000244 	movi	r4,9
 800c45c:	2440150e 	bge	r4,r17,800c4b4 <_strtod_r+0x62c>
 800c460:	893ffdc4 	addi	r4,r17,-9
 800c464:	200890fa 	slli	r4,r4,3
 800c468:	180b883a 	mov	r5,r3
 800c46c:	00c20074 	movhi	r3,2049
 800c470:	18d2a804 	addi	r3,r3,19104
 800c474:	1907883a 	add	r3,r3,r4
 800c478:	19800017 	ldw	r6,0(r3)
 800c47c:	19c00117 	ldw	r7,4(r3)
 800c480:	1009883a 	mov	r4,r2
 800c484:	80104bc0 	call	80104bc <__muldf3>
 800c488:	d9000f17 	ldw	r4,60(sp)
 800c48c:	1025883a 	mov	r18,r2
 800c490:	1829883a 	mov	r20,r3
 800c494:	80019500 	call	8001950 <__floatunsidf>
 800c498:	9009883a 	mov	r4,r18
 800c49c:	a00b883a 	mov	r5,r20
 800c4a0:	100d883a 	mov	r6,r2
 800c4a4:	180f883a 	mov	r7,r3
 800c4a8:	80104080 	call	8010408 <__adddf3>
 800c4ac:	d8800615 	stw	r2,24(sp)
 800c4b0:	d8c00715 	stw	r3,28(sp)
 800c4b4:	008003c4 	movi	r2,15
 800c4b8:	15401b16 	blt	r2,r21,800c528 <_strtod_r+0x6a0>
 800c4bc:	d8c01017 	ldw	r3,64(sp)
 800c4c0:	18001626 	beq	r3,zero,800c51c <_strtod_r+0x694>
 800c4c4:	d9001017 	ldw	r4,64(sp)
 800c4c8:	01032e0e 	bge	zero,r4,800d184 <_strtod_r+0x12fc>
 800c4cc:	00c00584 	movi	r3,22
 800c4d0:	19031016 	blt	r3,r4,800d114 <_strtod_r+0x128c>
 800c4d4:	200490fa 	slli	r2,r4,3
 800c4d8:	00c20074 	movhi	r3,2049
 800c4dc:	18d2a804 	addi	r3,r3,19104
 800c4e0:	d9000617 	ldw	r4,24(sp)
 800c4e4:	1885883a 	add	r2,r3,r2
 800c4e8:	d9400717 	ldw	r5,28(sp)
 800c4ec:	11800017 	ldw	r6,0(r2)
 800c4f0:	11c00117 	ldw	r7,4(r2)
 800c4f4:	80104bc0 	call	80104bc <__muldf3>
 800c4f8:	003f0406 	br	800c10c <_strtod_r+0x284>
 800c4fc:	00dffc34 	movhi	r3,32752
 800c500:	d8c00715 	stw	r3,28(sp)
 800c504:	d8000615 	stw	zero,24(sp)
 800c508:	1080020c 	andi	r2,r2,8
 800c50c:	10000326 	beq	r2,zero,800c51c <_strtod_r+0x694>
 800c510:	d8800717 	ldw	r2,28(sp)
 800c514:	10a00034 	orhi	r2,r2,32768
 800c518:	d8800715 	stw	r2,28(sp)
 800c51c:	d8800617 	ldw	r2,24(sp)
 800c520:	d8c00717 	ldw	r3,28(sp)
 800c524:	003ef906 	br	800c10c <_strtod_r+0x284>
 800c528:	d8801017 	ldw	r2,64(sp)
 800c52c:	ac63c83a 	sub	r17,r21,r17
 800c530:	1463883a 	add	r17,r2,r17
 800c534:	0442a70e 	bge	zero,r17,800cfd4 <_strtod_r+0x114c>
 800c538:	888003cc 	andi	r2,r17,15
 800c53c:	10000b26 	beq	r2,zero,800c56c <_strtod_r+0x6e4>
 800c540:	100490fa 	slli	r2,r2,3
 800c544:	00c20074 	movhi	r3,2049
 800c548:	18d2a804 	addi	r3,r3,19104
 800c54c:	d9000617 	ldw	r4,24(sp)
 800c550:	1885883a 	add	r2,r3,r2
 800c554:	d9400717 	ldw	r5,28(sp)
 800c558:	11800017 	ldw	r6,0(r2)
 800c55c:	11c00117 	ldw	r7,4(r2)
 800c560:	80104bc0 	call	80104bc <__muldf3>
 800c564:	d8800615 	stw	r2,24(sp)
 800c568:	d8c00715 	stw	r3,28(sp)
 800c56c:	00bffc04 	movi	r2,-16
 800c570:	88a2703a 	and	r17,r17,r2
 800c574:	8801a41e 	bne	r17,zero,800cc08 <_strtod_r+0xd80>
 800c578:	0029883a 	mov	r20,zero
 800c57c:	d9401417 	ldw	r5,80(sp)
 800c580:	df000015 	stw	fp,0(sp)
 800c584:	8009883a 	mov	r4,r16
 800c588:	980d883a 	mov	r6,r19
 800c58c:	a80f883a 	mov	r7,r21
 800c590:	800a5a00 	call	800a5a0 <__s2b>
 800c594:	d8c01017 	ldw	r3,64(sp)
 800c598:	102d883a 	mov	r22,r2
 800c59c:	b1000304 	addi	r4,r22,12
 800c5a0:	1805d7fa 	srai	r2,r3,31
 800c5a4:	00f9c83a 	sub	fp,zero,r3
 800c5a8:	d9001315 	stw	r4,76(sp)
 800c5ac:	e0b8703a 	and	fp,fp,r2
 800c5b0:	df000e15 	stw	fp,56(sp)
 800c5b4:	b1400117 	ldw	r5,4(r22)
 800c5b8:	8009883a 	mov	r4,r16
 800c5bc:	0027883a 	mov	r19,zero
 800c5c0:	800a38c0 	call	800a38c <_Balloc>
 800c5c4:	b1800417 	ldw	r6,16(r22)
 800c5c8:	d9401317 	ldw	r5,76(sp)
 800c5cc:	11000304 	addi	r4,r2,12
 800c5d0:	31800084 	addi	r6,r6,2
 800c5d4:	318d883a 	add	r6,r6,r6
 800c5d8:	318d883a 	add	r6,r6,r6
 800c5dc:	1025883a 	mov	r18,r2
 800c5e0:	8003eb00 	call	8003eb0 <memcpy>
 800c5e4:	d9400617 	ldw	r5,24(sp)
 800c5e8:	d9800717 	ldw	r6,28(sp)
 800c5ec:	d8800a04 	addi	r2,sp,40
 800c5f0:	8009883a 	mov	r4,r16
 800c5f4:	d9c00d04 	addi	r7,sp,52
 800c5f8:	d8800015 	stw	r2,0(sp)
 800c5fc:	800b0800 	call	800b080 <__d2b>
 800c600:	8009883a 	mov	r4,r16
 800c604:	01400044 	movi	r5,1
 800c608:	d8800b15 	stw	r2,44(sp)
 800c60c:	800a7bc0 	call	800a7bc <__i2b>
 800c610:	d8c01017 	ldw	r3,64(sp)
 800c614:	1023883a 	mov	r17,r2
 800c618:	00c0010e 	bge	zero,r3,800c620 <_strtod_r+0x798>
 800c61c:	1827883a 	mov	r19,r3
 800c620:	d8800d17 	ldw	r2,52(sp)
 800c624:	1000de16 	blt	r2,zero,800c9a0 <_strtod_r+0xb18>
 800c628:	d9000e17 	ldw	r4,56(sp)
 800c62c:	9807883a 	mov	r3,r19
 800c630:	20af883a 	add	r23,r4,r2
 800c634:	d9000a17 	ldw	r4,40(sp)
 800c638:	1505c83a 	sub	r2,r2,r20
 800c63c:	017f00c4 	movi	r5,-1021
 800c640:	110d883a 	add	r6,r2,r4
 800c644:	31409a0e 	bge	r6,r5,800c8b0 <_strtod_r+0xa28>
 800c648:	10810cc4 	addi	r2,r2,1075
 800c64c:	b8b9883a 	add	fp,r23,r2
 800c650:	1885883a 	add	r2,r3,r2
 800c654:	152b883a 	add	r21,r2,r20
 800c658:	e005883a 	mov	r2,fp
 800c65c:	bf00010e 	bge	r23,fp,800c664 <_strtod_r+0x7dc>
 800c660:	b805883a 	mov	r2,r23
 800c664:	a880010e 	bge	r21,r2,800c66c <_strtod_r+0x7e4>
 800c668:	a805883a 	mov	r2,r21
 800c66c:	0080030e 	bge	zero,r2,800c67c <_strtod_r+0x7f4>
 800c670:	e0b9c83a 	sub	fp,fp,r2
 800c674:	a8abc83a 	sub	r21,r21,r2
 800c678:	b8afc83a 	sub	r23,r23,r2
 800c67c:	d9400e17 	ldw	r5,56(sp)
 800c680:	28000f26 	beq	r5,zero,800c6c0 <_strtod_r+0x838>
 800c684:	280d883a 	mov	r6,r5
 800c688:	8009883a 	mov	r4,r16
 800c68c:	880b883a 	mov	r5,r17
 800c690:	800aa500 	call	800aa50 <__pow5mult>
 800c694:	d9800b17 	ldw	r6,44(sp)
 800c698:	8009883a 	mov	r4,r16
 800c69c:	100b883a 	mov	r5,r2
 800c6a0:	1023883a 	mov	r17,r2
 800c6a4:	800a7f80 	call	800a7f8 <__multiply>
 800c6a8:	d9400b17 	ldw	r5,44(sp)
 800c6ac:	8009883a 	mov	r4,r16
 800c6b0:	d8801815 	stw	r2,96(sp)
 800c6b4:	800a4340 	call	800a434 <_Bfree>
 800c6b8:	d8801817 	ldw	r2,96(sp)
 800c6bc:	d8800b15 	stw	r2,44(sp)
 800c6c0:	0700050e 	bge	zero,fp,800c6d8 <_strtod_r+0x850>
 800c6c4:	d9400b17 	ldw	r5,44(sp)
 800c6c8:	8009883a 	mov	r4,r16
 800c6cc:	e00d883a 	mov	r6,fp
 800c6d0:	800ab7c0 	call	800ab7c <__lshift>
 800c6d4:	d8800b15 	stw	r2,44(sp)
 800c6d8:	98000526 	beq	r19,zero,800c6f0 <_strtod_r+0x868>
 800c6dc:	900b883a 	mov	r5,r18
 800c6e0:	8009883a 	mov	r4,r16
 800c6e4:	980d883a 	mov	r6,r19
 800c6e8:	800aa500 	call	800aa50 <__pow5mult>
 800c6ec:	1025883a 	mov	r18,r2
 800c6f0:	0540050e 	bge	zero,r21,800c708 <_strtod_r+0x880>
 800c6f4:	900b883a 	mov	r5,r18
 800c6f8:	8009883a 	mov	r4,r16
 800c6fc:	a80d883a 	mov	r6,r21
 800c700:	800ab7c0 	call	800ab7c <__lshift>
 800c704:	1025883a 	mov	r18,r2
 800c708:	05c0050e 	bge	zero,r23,800c720 <_strtod_r+0x898>
 800c70c:	880b883a 	mov	r5,r17
 800c710:	8009883a 	mov	r4,r16
 800c714:	b80d883a 	mov	r6,r23
 800c718:	800ab7c0 	call	800ab7c <__lshift>
 800c71c:	1023883a 	mov	r17,r2
 800c720:	d9400b17 	ldw	r5,44(sp)
 800c724:	8009883a 	mov	r4,r16
 800c728:	900d883a 	mov	r6,r18
 800c72c:	800ad300 	call	800ad30 <__mdiff>
 800c730:	1027883a 	mov	r19,r2
 800c734:	10800317 	ldw	r2,12(r2)
 800c738:	9809883a 	mov	r4,r19
 800c73c:	98000315 	stw	zero,12(r19)
 800c740:	880b883a 	mov	r5,r17
 800c744:	d8800f15 	stw	r2,60(sp)
 800c748:	800acd80 	call	800acd8 <__mcmp>
 800c74c:	1001cb16 	blt	r2,zero,800ce7c <_strtod_r+0xff4>
 800c750:	1001fa26 	beq	r2,zero,800cf3c <_strtod_r+0x10b4>
 800c754:	9809883a 	mov	r4,r19
 800c758:	880b883a 	mov	r5,r17
 800c75c:	800b1c40 	call	800b1c4 <__ratio>
 800c760:	1009883a 	mov	r4,r2
 800c764:	180b883a 	mov	r5,r3
 800c768:	000d883a 	mov	r6,zero
 800c76c:	01d00034 	movhi	r7,16384
 800c770:	102f883a 	mov	r23,r2
 800c774:	1839883a 	mov	fp,r3
 800c778:	801097c0 	call	801097c <__ledf2>
 800c77c:	00804f16 	blt	zero,r2,800c8bc <_strtod_r+0xa34>
 800c780:	d9400f17 	ldw	r5,60(sp)
 800c784:	28008926 	beq	r5,zero,800c9ac <_strtod_r+0xb24>
 800c788:	da400717 	ldw	r9,28(sp)
 800c78c:	05cffc34 	movhi	r23,16368
 800c790:	d8000815 	stw	zero,32(sp)
 800c794:	ddc00915 	stw	r23,36(sp)
 800c798:	002b883a 	mov	r21,zero
 800c79c:	4f1ffc2c 	andhi	fp,r9,32752
 800c7a0:	009ff834 	movhi	r2,32736
 800c7a4:	e0805526 	beq	fp,r2,800c8fc <_strtod_r+0xa74>
 800c7a8:	a0001b26 	beq	r20,zero,800c818 <_strtod_r+0x990>
 800c7ac:	0081a834 	movhi	r2,1696
 800c7b0:	17001936 	bltu	r2,fp,800c818 <_strtod_r+0x990>
 800c7b4:	a809883a 	mov	r4,r21
 800c7b8:	b80b883a 	mov	r5,r23
 800c7bc:	01bff034 	movhi	r6,65472
 800c7c0:	01d07834 	movhi	r7,16864
 800c7c4:	39ffffc4 	addi	r7,r7,-1
 800c7c8:	801097c0 	call	801097c <__ledf2>
 800c7cc:	00800d16 	blt	zero,r2,800c804 <_strtod_r+0x97c>
 800c7d0:	a809883a 	mov	r4,r21
 800c7d4:	b80b883a 	mov	r5,r23
 800c7d8:	800f2b40 	call	800f2b4 <__fixunsdfsi>
 800c7dc:	1000d626 	beq	r2,zero,800cb38 <_strtod_r+0xcb0>
 800c7e0:	1009883a 	mov	r4,r2
 800c7e4:	80019500 	call	8001950 <__floatunsidf>
 800c7e8:	102b883a 	mov	r21,r2
 800c7ec:	182f883a 	mov	r23,r3
 800c7f0:	d9400f17 	ldw	r5,60(sp)
 800c7f4:	2800ce1e 	bne	r5,zero,800cb30 <_strtod_r+0xca8>
 800c7f8:	b8a0003c 	xorhi	r2,r23,32768
 800c7fc:	dd400815 	stw	r21,32(sp)
 800c800:	d8800915 	stw	r2,36(sp)
 800c804:	d8c00917 	ldw	r3,36(sp)
 800c808:	0081ac34 	movhi	r2,1712
 800c80c:	1885883a 	add	r2,r3,r2
 800c810:	1705c83a 	sub	r2,r2,fp
 800c814:	d8800915 	stw	r2,36(sp)
 800c818:	d9000617 	ldw	r4,24(sp)
 800c81c:	d9400717 	ldw	r5,28(sp)
 800c820:	800aed80 	call	800aed8 <__ulp>
 800c824:	da800617 	ldw	r10,24(sp)
 800c828:	da400717 	ldw	r9,28(sp)
 800c82c:	d9800817 	ldw	r6,32(sp)
 800c830:	d9c00917 	ldw	r7,36(sp)
 800c834:	1009883a 	mov	r4,r2
 800c838:	180b883a 	mov	r5,r3
 800c83c:	da401915 	stw	r9,100(sp)
 800c840:	da801815 	stw	r10,96(sp)
 800c844:	80104bc0 	call	80104bc <__muldf3>
 800c848:	da401917 	ldw	r9,100(sp)
 800c84c:	da801817 	ldw	r10,96(sp)
 800c850:	100d883a 	mov	r6,r2
 800c854:	480b883a 	mov	r5,r9
 800c858:	5009883a 	mov	r4,r10
 800c85c:	180f883a 	mov	r7,r3
 800c860:	80104080 	call	8010408 <__adddf3>
 800c864:	d8800615 	stw	r2,24(sp)
 800c868:	d8c00715 	stw	r3,28(sp)
 800c86c:	1813883a 	mov	r9,r3
 800c870:	a000021e 	bne	r20,zero,800c87c <_strtod_r+0x9f4>
 800c874:	489ffc2c 	andhi	r2,r9,32752
 800c878:	e0807226 	beq	fp,r2,800ca44 <_strtod_r+0xbbc>
 800c87c:	d9400b17 	ldw	r5,44(sp)
 800c880:	8009883a 	mov	r4,r16
 800c884:	800a4340 	call	800a434 <_Bfree>
 800c888:	8009883a 	mov	r4,r16
 800c88c:	900b883a 	mov	r5,r18
 800c890:	800a4340 	call	800a434 <_Bfree>
 800c894:	8009883a 	mov	r4,r16
 800c898:	880b883a 	mov	r5,r17
 800c89c:	800a4340 	call	800a434 <_Bfree>
 800c8a0:	8009883a 	mov	r4,r16
 800c8a4:	980b883a 	mov	r5,r19
 800c8a8:	800a4340 	call	800a434 <_Bfree>
 800c8ac:	003f4106 	br	800c5b4 <_strtod_r+0x72c>
 800c8b0:	00800d84 	movi	r2,54
 800c8b4:	1105c83a 	sub	r2,r2,r4
 800c8b8:	003f6406 	br	800c64c <_strtod_r+0x7c4>
 800c8bc:	b809883a 	mov	r4,r23
 800c8c0:	e00b883a 	mov	r5,fp
 800c8c4:	000d883a 	mov	r6,zero
 800c8c8:	01cff834 	movhi	r7,16352
 800c8cc:	80104bc0 	call	80104bc <__muldf3>
 800c8d0:	d9000f17 	ldw	r4,60(sp)
 800c8d4:	102b883a 	mov	r21,r2
 800c8d8:	182f883a 	mov	r23,r3
 800c8dc:	2000011e 	bne	r4,zero,800c8e4 <_strtod_r+0xa5c>
 800c8e0:	18e0003c 	xorhi	r3,r3,32768
 800c8e4:	da400717 	ldw	r9,28(sp)
 800c8e8:	d8800815 	stw	r2,32(sp)
 800c8ec:	d8c00915 	stw	r3,36(sp)
 800c8f0:	4f1ffc2c 	andhi	fp,r9,32752
 800c8f4:	009ff834 	movhi	r2,32736
 800c8f8:	e0bfab1e 	bne	fp,r2,800c7a8 <_strtod_r+0x920>
 800c8fc:	d8800617 	ldw	r2,24(sp)
 800c900:	00ff2c34 	movhi	r3,64688
 800c904:	48d3883a 	add	r9,r9,r3
 800c908:	1009883a 	mov	r4,r2
 800c90c:	d8800415 	stw	r2,16(sp)
 800c910:	d8800717 	ldw	r2,28(sp)
 800c914:	480b883a 	mov	r5,r9
 800c918:	da400715 	stw	r9,28(sp)
 800c91c:	d8800515 	stw	r2,20(sp)
 800c920:	800aed80 	call	800aed8 <__ulp>
 800c924:	da800617 	ldw	r10,24(sp)
 800c928:	da400717 	ldw	r9,28(sp)
 800c92c:	d9800817 	ldw	r6,32(sp)
 800c930:	d9c00917 	ldw	r7,36(sp)
 800c934:	1009883a 	mov	r4,r2
 800c938:	180b883a 	mov	r5,r3
 800c93c:	da401915 	stw	r9,100(sp)
 800c940:	da801815 	stw	r10,96(sp)
 800c944:	80104bc0 	call	80104bc <__muldf3>
 800c948:	da801817 	ldw	r10,96(sp)
 800c94c:	da401917 	ldw	r9,100(sp)
 800c950:	100d883a 	mov	r6,r2
 800c954:	5009883a 	mov	r4,r10
 800c958:	480b883a 	mov	r5,r9
 800c95c:	180f883a 	mov	r7,r3
 800c960:	80104080 	call	8010408 <__adddf3>
 800c964:	d8800615 	stw	r2,24(sp)
 800c968:	015f2834 	movhi	r5,31904
 800c96c:	297fffc4 	addi	r5,r5,-1
 800c970:	189ffc2c 	andhi	r2,r3,32752
 800c974:	2880642e 	bgeu	r5,r2,800cb08 <_strtod_r+0xc80>
 800c978:	d8800517 	ldw	r2,20(sp)
 800c97c:	00dffc34 	movhi	r3,32752
 800c980:	18ffffc4 	addi	r3,r3,-1
 800c984:	10c18526 	beq	r2,r3,800cf9c <_strtod_r+0x1114>
 800c988:	011ffc34 	movhi	r4,32752
 800c98c:	213fffc4 	addi	r4,r4,-1
 800c990:	00bfffc4 	movi	r2,-1
 800c994:	d9000715 	stw	r4,28(sp)
 800c998:	d8800615 	stw	r2,24(sp)
 800c99c:	003fb706 	br	800c87c <_strtod_r+0x9f4>
 800c9a0:	9887c83a 	sub	r3,r19,r2
 800c9a4:	ddc00e17 	ldw	r23,56(sp)
 800c9a8:	003f2206 	br	800c634 <_strtod_r+0x7ac>
 800c9ac:	d8800617 	ldw	r2,24(sp)
 800c9b0:	10001a1e 	bne	r2,zero,800ca1c <_strtod_r+0xb94>
 800c9b4:	da400717 	ldw	r9,28(sp)
 800c9b8:	00c00434 	movhi	r3,16
 800c9bc:	18ffffc4 	addi	r3,r3,-1
 800c9c0:	48c4703a 	and	r2,r9,r3
 800c9c4:	1000191e 	bne	r2,zero,800ca2c <_strtod_r+0xba4>
 800c9c8:	b809883a 	mov	r4,r23
 800c9cc:	e00b883a 	mov	r5,fp
 800c9d0:	000d883a 	mov	r6,zero
 800c9d4:	01cffc34 	movhi	r7,16368
 800c9d8:	da401915 	stw	r9,100(sp)
 800c9dc:	80109200 	call	8010920 <__ltdf2>
 800c9e0:	da401917 	ldw	r9,100(sp)
 800c9e4:	1001bb16 	blt	r2,zero,800d0d4 <_strtod_r+0x124c>
 800c9e8:	b809883a 	mov	r4,r23
 800c9ec:	e00b883a 	mov	r5,fp
 800c9f0:	000d883a 	mov	r6,zero
 800c9f4:	01cff834 	movhi	r7,16352
 800c9f8:	80104bc0 	call	80104bc <__muldf3>
 800c9fc:	da401917 	ldw	r9,100(sp)
 800ca00:	182f883a 	mov	r23,r3
 800ca04:	102b883a 	mov	r21,r2
 800ca08:	1007883a 	mov	r3,r2
 800ca0c:	b8a0003c 	xorhi	r2,r23,32768
 800ca10:	d8c00815 	stw	r3,32(sp)
 800ca14:	d8800915 	stw	r2,36(sp)
 800ca18:	003f6006 	br	800c79c <_strtod_r+0x914>
 800ca1c:	00c00044 	movi	r3,1
 800ca20:	da400717 	ldw	r9,28(sp)
 800ca24:	10c0011e 	bne	r2,r3,800ca2c <_strtod_r+0xba4>
 800ca28:	4800c526 	beq	r9,zero,800cd40 <_strtod_r+0xeb8>
 800ca2c:	00affc34 	movhi	r2,49136
 800ca30:	d8000815 	stw	zero,32(sp)
 800ca34:	d8800915 	stw	r2,36(sp)
 800ca38:	002b883a 	mov	r21,zero
 800ca3c:	05cffc34 	movhi	r23,16368
 800ca40:	003f5606 	br	800c79c <_strtod_r+0x914>
 800ca44:	b80b883a 	mov	r5,r23
 800ca48:	a809883a 	mov	r4,r21
 800ca4c:	da401915 	stw	r9,100(sp)
 800ca50:	80109d80 	call	80109d8 <__fixdfsi>
 800ca54:	1009883a 	mov	r4,r2
 800ca58:	800187c0 	call	800187c <__floatsidf>
 800ca5c:	b80b883a 	mov	r5,r23
 800ca60:	a809883a 	mov	r4,r21
 800ca64:	100d883a 	mov	r6,r2
 800ca68:	180f883a 	mov	r7,r3
 800ca6c:	801045c0 	call	801045c <__subdf3>
 800ca70:	102f883a 	mov	r23,r2
 800ca74:	d8800f17 	ldw	r2,60(sp)
 800ca78:	1839883a 	mov	fp,r3
 800ca7c:	da401917 	ldw	r9,100(sp)
 800ca80:	1000021e 	bne	r2,zero,800ca8c <_strtod_r+0xc04>
 800ca84:	d8800617 	ldw	r2,24(sp)
 800ca88:	10004826 	beq	r2,zero,800cbac <_strtod_r+0xd24>
 800ca8c:	b809883a 	mov	r4,r23
 800ca90:	e00b883a 	mov	r5,fp
 800ca94:	01a52834 	movhi	r6,38048
 800ca98:	318d6544 	addi	r6,r6,13717
 800ca9c:	01cff834 	movhi	r7,16352
 800caa0:	39ffffc4 	addi	r7,r7,-1
 800caa4:	80109200 	call	8010920 <__ltdf2>
 800caa8:	10000716 	blt	r2,zero,800cac8 <_strtod_r+0xc40>
 800caac:	b809883a 	mov	r4,r23
 800cab0:	e00b883a 	mov	r5,fp
 800cab4:	018d6c34 	movhi	r6,13744
 800cab8:	31b94d44 	addi	r6,r6,-6859
 800cabc:	01cff834 	movhi	r7,16352
 800cac0:	80108580 	call	8010858 <__gtdf2>
 800cac4:	00bf6d0e 	bge	zero,r2,800c87c <_strtod_r+0x9f4>
 800cac8:	d9400b17 	ldw	r5,44(sp)
 800cacc:	8009883a 	mov	r4,r16
 800cad0:	800a4340 	call	800a434 <_Bfree>
 800cad4:	8009883a 	mov	r4,r16
 800cad8:	900b883a 	mov	r5,r18
 800cadc:	800a4340 	call	800a434 <_Bfree>
 800cae0:	8009883a 	mov	r4,r16
 800cae4:	880b883a 	mov	r5,r17
 800cae8:	800a4340 	call	800a434 <_Bfree>
 800caec:	8009883a 	mov	r4,r16
 800caf0:	b00b883a 	mov	r5,r22
 800caf4:	800a4340 	call	800a434 <_Bfree>
 800caf8:	8009883a 	mov	r4,r16
 800cafc:	980b883a 	mov	r5,r19
 800cb00:	800a4340 	call	800a434 <_Bfree>
 800cb04:	003e8506 	br	800c51c <_strtod_r+0x694>
 800cb08:	0240d434 	movhi	r9,848
 800cb0c:	1a53883a 	add	r9,r3,r9
 800cb10:	da400715 	stw	r9,28(sp)
 800cb14:	003f5606 	br	800c870 <_strtod_r+0x9e8>
 800cb18:	a827883a 	mov	r19,r21
 800cb1c:	dd801415 	stw	r22,80(sp)
 800cb20:	000d883a 	mov	r6,zero
 800cb24:	0029883a 	mov	r20,zero
 800cb28:	d8001015 	stw	zero,64(sp)
 800cb2c:	003d1d06 	br	800bfa4 <_strtod_r+0x11c>
 800cb30:	b805883a 	mov	r2,r23
 800cb34:	003f3106 	br	800c7fc <_strtod_r+0x974>
 800cb38:	002b883a 	mov	r21,zero
 800cb3c:	05cffc34 	movhi	r23,16368
 800cb40:	003f2b06 	br	800c7f0 <_strtod_r+0x968>
 800cb44:	d9400e17 	ldw	r5,56(sp)
 800cb48:	0009883a 	mov	r4,zero
 800cb4c:	d9400c15 	stw	r5,48(sp)
 800cb50:	003d1706 	br	800bfb0 <_strtod_r+0x128>
 800cb54:	dd801415 	stw	r22,80(sp)
 800cb58:	a82f883a 	mov	r23,r21
 800cb5c:	000d883a 	mov	r6,zero
 800cb60:	0029883a 	mov	r20,zero
 800cb64:	3dbff404 	addi	r22,r7,-48
 800cb68:	00800244 	movi	r2,9
 800cb6c:	15802136 	bltu	r2,r22,800cbf4 <_strtod_r+0xd6c>
 800cb70:	31800044 	addi	r6,r6,1
 800cb74:	dc400c17 	ldw	r17,48(sp)
 800cb78:	003daa06 	br	800c224 <_strtod_r+0x39c>
 800cb7c:	d8001515 	stw	zero,84(sp)
 800cb80:	d9400e17 	ldw	r5,56(sp)
 800cb84:	28800084 	addi	r2,r5,2
 800cb88:	d8800c15 	stw	r2,48(sp)
 800cb8c:	29c00087 	ldb	r7,2(r5)
 800cb90:	003ded06 	br	800c348 <_strtod_r+0x4c0>
 800cb94:	00c00044 	movi	r3,1
 800cb98:	d8c01515 	stw	r3,84(sp)
 800cb9c:	003ff806 	br	800cb80 <_strtod_r+0xcf8>
 800cba0:	0005883a 	mov	r2,zero
 800cba4:	0007883a 	mov	r3,zero
 800cba8:	003d5806 	br	800c10c <_strtod_r+0x284>
 800cbac:	00c00434 	movhi	r3,16
 800cbb0:	18ffffc4 	addi	r3,r3,-1
 800cbb4:	48d2703a 	and	r9,r9,r3
 800cbb8:	483fb41e 	bne	r9,zero,800ca8c <_strtod_r+0xc04>
 800cbbc:	b809883a 	mov	r4,r23
 800cbc0:	e00b883a 	mov	r5,fp
 800cbc4:	01a52834 	movhi	r6,38048
 800cbc8:	318d6544 	addi	r6,r6,13717
 800cbcc:	01cff434 	movhi	r7,16336
 800cbd0:	39ffffc4 	addi	r7,r7,-1
 800cbd4:	80109200 	call	8010920 <__ltdf2>
 800cbd8:	103f280e 	bge	r2,zero,800c87c <_strtod_r+0x9f4>
 800cbdc:	003fba06 	br	800cac8 <_strtod_r+0xc40>
 800cbe0:	d8c01317 	ldw	r3,76(sp)
 800cbe4:	183dce1e 	bne	r3,zero,800c320 <_strtod_r+0x498>
 800cbe8:	d8800617 	ldw	r2,24(sp)
 800cbec:	d8c00717 	ldw	r3,28(sp)
 800cbf0:	003d4306 	br	800c100 <_strtod_r+0x278>
 800cbf4:	00c00044 	movi	r3,1
 800cbf8:	a827883a 	mov	r19,r21
 800cbfc:	d8c01015 	stw	r3,64(sp)
 800cc00:	b82b883a 	mov	r21,r23
 800cc04:	003ce506 	br	800bf9c <_strtod_r+0x114>
 800cc08:	00804d04 	movi	r2,308
 800cc0c:	1440ec16 	blt	r2,r17,800cfc0 <_strtod_r+0x1138>
 800cc10:	8825d13a 	srai	r18,r17,4
 800cc14:	05c00044 	movi	r23,1
 800cc18:	bc81ca0e 	bge	r23,r18,800d344 <_strtod_r+0x14bc>
 800cc1c:	d8800617 	ldw	r2,24(sp)
 800cc20:	d8c00717 	ldw	r3,28(sp)
 800cc24:	05820074 	movhi	r22,2049
 800cc28:	b5929e04 	addi	r22,r22,19064
 800cc2c:	b029883a 	mov	r20,r22
 800cc30:	0023883a 	mov	r17,zero
 800cc34:	9180004c 	andi	r6,r18,1
 800cc38:	30000526 	beq	r6,zero,800cc50 <_strtod_r+0xdc8>
 800cc3c:	a1800017 	ldw	r6,0(r20)
 800cc40:	a1c00117 	ldw	r7,4(r20)
 800cc44:	1009883a 	mov	r4,r2
 800cc48:	180b883a 	mov	r5,r3
 800cc4c:	80104bc0 	call	80104bc <__muldf3>
 800cc50:	9025d07a 	srai	r18,r18,1
 800cc54:	8c400044 	addi	r17,r17,1
 800cc58:	a5000204 	addi	r20,r20,8
 800cc5c:	bcbff516 	blt	r23,r18,800cc34 <_strtod_r+0xdac>
 800cc60:	d8800615 	stw	r2,24(sp)
 800cc64:	d8c00715 	stw	r3,28(sp)
 800cc68:	880490fa 	slli	r2,r17,3
 800cc6c:	d9400717 	ldw	r5,28(sp)
 800cc70:	d9000617 	ldw	r4,24(sp)
 800cc74:	b0a3883a 	add	r17,r22,r2
 800cc78:	89800017 	ldw	r6,0(r17)
 800cc7c:	89c00117 	ldw	r7,4(r17)
 800cc80:	00bf2c34 	movhi	r2,64688
 800cc84:	288b883a 	add	r5,r5,r2
 800cc88:	80104bc0 	call	80104bc <__muldf3>
 800cc8c:	d8800615 	stw	r2,24(sp)
 800cc90:	011f2834 	movhi	r4,31904
 800cc94:	189ffc2c 	andhi	r2,r3,32752
 800cc98:	2080c936 	bltu	r4,r2,800cfc0 <_strtod_r+0x1138>
 800cc9c:	011f2434 	movhi	r4,31888
 800cca0:	2081652e 	bgeu	r4,r2,800d238 <_strtod_r+0x13b0>
 800cca4:	009ffc34 	movhi	r2,32752
 800cca8:	10bfffc4 	addi	r2,r2,-1
 800ccac:	d8800715 	stw	r2,28(sp)
 800ccb0:	00bfffc4 	movi	r2,-1
 800ccb4:	d8800615 	stw	r2,24(sp)
 800ccb8:	003e2f06 	br	800c578 <_strtod_r+0x6f0>
 800ccbc:	00c00044 	movi	r3,1
 800ccc0:	0027883a 	mov	r19,zero
 800ccc4:	dd801415 	stw	r22,80(sp)
 800ccc8:	0029883a 	mov	r20,zero
 800cccc:	d8c01015 	stw	r3,64(sp)
 800ccd0:	003cb206 	br	800bf9c <_strtod_r+0x114>
 800ccd4:	d8800717 	ldw	r2,28(sp)
 800ccd8:	00c00434 	movhi	r3,16
 800ccdc:	18ffffc4 	addi	r3,r3,-1
 800cce0:	10c6703a 	and	r3,r2,r3
 800cce4:	1801471e 	bne	r3,zero,800d204 <_strtod_r+0x137c>
 800cce8:	d8c00617 	ldw	r3,24(sp)
 800ccec:	18007e26 	beq	r3,zero,800cee8 <_strtod_r+0x1060>
 800ccf0:	18c0004c 	andi	r3,r3,1
 800ccf4:	1800a726 	beq	r3,zero,800cf94 <_strtod_r+0x110c>
 800ccf8:	ddc00617 	ldw	r23,24(sp)
 800ccfc:	dd400717 	ldw	r21,28(sp)
 800cd00:	b809883a 	mov	r4,r23
 800cd04:	a80b883a 	mov	r5,r21
 800cd08:	800aed80 	call	800aed8 <__ulp>
 800cd0c:	b809883a 	mov	r4,r23
 800cd10:	a80b883a 	mov	r5,r21
 800cd14:	100d883a 	mov	r6,r2
 800cd18:	180f883a 	mov	r7,r3
 800cd1c:	801045c0 	call	801045c <__subdf3>
 800cd20:	1009883a 	mov	r4,r2
 800cd24:	180b883a 	mov	r5,r3
 800cd28:	000d883a 	mov	r6,zero
 800cd2c:	000f883a 	mov	r7,zero
 800cd30:	d8800615 	stw	r2,24(sp)
 800cd34:	d8c00715 	stw	r3,28(sp)
 800cd38:	80107a00 	call	80107a0 <__eqdf2>
 800cd3c:	1000951e 	bne	r2,zero,800cf94 <_strtod_r+0x110c>
 800cd40:	d8000615 	stw	zero,24(sp)
 800cd44:	d8000715 	stw	zero,28(sp)
 800cd48:	00800884 	movi	r2,34
 800cd4c:	80800015 	stw	r2,0(r16)
 800cd50:	003f5d06 	br	800cac8 <_strtod_r+0xc40>
 800cd54:	00800404 	movi	r2,16
 800cd58:	153d4916 	blt	r2,r20,800c280 <_strtod_r+0x3f8>
 800cd5c:	8009883a 	mov	r4,r16
 800cd60:	01400284 	movi	r5,10
 800cd64:	8001a6c0 	call	8001a6c <__mulsi3>
 800cd68:	1021883a 	mov	r16,r2
 800cd6c:	003d4406 	br	800c280 <_strtod_r+0x3f8>
 800cd70:	d9001217 	ldw	r4,72(sp)
 800cd74:	d8800b04 	addi	r2,sp,44
 800cd78:	04c20074 	movhi	r19,2049
 800cd7c:	9cd50504 	addi	r19,r19,21524
 800cd80:	d9000115 	stw	r4,4(sp)
 800cd84:	d8800015 	stw	r2,0(sp)
 800cd88:	8009883a 	mov	r4,r16
 800cd8c:	d9400c04 	addi	r5,sp,48
 800cd90:	980d883a 	mov	r6,r19
 800cd94:	d9c00a04 	addi	r7,sp,40
 800cd98:	800e7a00 	call	800e7a0 <__gethex>
 800cd9c:	148001cc 	andi	r18,r2,7
 800cda0:	903dde26 	beq	r18,zero,800c51c <_strtod_r+0x694>
 800cda4:	00c00184 	movi	r3,6
 800cda8:	90c0f226 	beq	r18,r3,800d174 <_strtod_r+0x12ec>
 800cdac:	d9800b17 	ldw	r6,44(sp)
 800cdb0:	30000826 	beq	r6,zero,800cdd4 <_strtod_r+0xf4c>
 800cdb4:	99400017 	ldw	r5,0(r19)
 800cdb8:	d9000204 	addi	r4,sp,8
 800cdbc:	d8801815 	stw	r2,96(sp)
 800cdc0:	800b2dc0 	call	800b2dc <__copybits>
 800cdc4:	d9400b17 	ldw	r5,44(sp)
 800cdc8:	8009883a 	mov	r4,r16
 800cdcc:	800a4340 	call	800a434 <_Bfree>
 800cdd0:	d8801817 	ldw	r2,96(sp)
 800cdd4:	00c00184 	movi	r3,6
 800cdd8:	d9000a17 	ldw	r4,40(sp)
 800cddc:	1cbdca36 	bltu	r3,r18,800c508 <_strtod_r+0x680>
 800cde0:	94a5883a 	add	r18,r18,r18
 800cde4:	94a5883a 	add	r18,r18,r18
 800cde8:	00c20074 	movhi	r3,2049
 800cdec:	18f37f04 	addi	r3,r3,-12804
 800cdf0:	90c7883a 	add	r3,r18,r3
 800cdf4:	18c00017 	ldw	r3,0(r3)
 800cdf8:	1800683a 	jmp	r3
 800cdfc:	0800ce70 	cmpltui	zero,at,825
 800ce00:	0800ce2c 	andhi	zero,at,824
 800ce04:	0800ce18 	cmpnei	zero,at,824
 800ce08:	0800c4fc 	xorhi	zero,at,787
 800ce0c:	0800ce58 	cmpnei	zero,at,825
 800ce10:	0800ce2c 	andhi	zero,at,824
 800ce14:	0800ce70 	cmpltui	zero,at,825
 800ce18:	d8c00217 	ldw	r3,8(sp)
 800ce1c:	d8c00615 	stw	r3,24(sp)
 800ce20:	d8c00317 	ldw	r3,12(sp)
 800ce24:	d8c00715 	stw	r3,28(sp)
 800ce28:	003db706 	br	800c508 <_strtod_r+0x680>
 800ce2c:	21010cc4 	addi	r4,r4,1075
 800ce30:	d9400317 	ldw	r5,12(sp)
 800ce34:	2008953a 	slli	r4,r4,20
 800ce38:	00fffc34 	movhi	r3,65520
 800ce3c:	18ffffc4 	addi	r3,r3,-1
 800ce40:	28c6703a 	and	r3,r5,r3
 800ce44:	20c6b03a 	or	r3,r4,r3
 800ce48:	d9000217 	ldw	r4,8(sp)
 800ce4c:	d8c00715 	stw	r3,28(sp)
 800ce50:	d9000615 	stw	r4,24(sp)
 800ce54:	003dac06 	br	800c508 <_strtod_r+0x680>
 800ce58:	00e00034 	movhi	r3,32768
 800ce5c:	18ffffc4 	addi	r3,r3,-1
 800ce60:	d8c00715 	stw	r3,28(sp)
 800ce64:	00ffffc4 	movi	r3,-1
 800ce68:	d8c00615 	stw	r3,24(sp)
 800ce6c:	003da606 	br	800c508 <_strtod_r+0x680>
 800ce70:	d8000715 	stw	zero,28(sp)
 800ce74:	d8000615 	stw	zero,24(sp)
 800ce78:	003da306 	br	800c508 <_strtod_r+0x680>
 800ce7c:	d8c00f17 	ldw	r3,60(sp)
 800ce80:	1800441e 	bne	r3,zero,800cf94 <_strtod_r+0x110c>
 800ce84:	d8800617 	ldw	r2,24(sp)
 800ce88:	1000421e 	bne	r2,zero,800cf94 <_strtod_r+0x110c>
 800ce8c:	d8800717 	ldw	r2,28(sp)
 800ce90:	00c00434 	movhi	r3,16
 800ce94:	18ffffc4 	addi	r3,r3,-1
 800ce98:	10c6703a 	and	r3,r2,r3
 800ce9c:	18003d1e 	bne	r3,zero,800cf94 <_strtod_r+0x110c>
 800cea0:	109ffc2c 	andhi	r2,r2,32752
 800cea4:	00c1ac34 	movhi	r3,1712
 800cea8:	18803a2e 	bgeu	r3,r2,800cf94 <_strtod_r+0x110c>
 800ceac:	98800517 	ldw	r2,20(r19)
 800ceb0:	1000031e 	bne	r2,zero,800cec0 <_strtod_r+0x1038>
 800ceb4:	98800417 	ldw	r2,16(r19)
 800ceb8:	00c00044 	movi	r3,1
 800cebc:	1880350e 	bge	r3,r2,800cf94 <_strtod_r+0x110c>
 800cec0:	980b883a 	mov	r5,r19
 800cec4:	8009883a 	mov	r4,r16
 800cec8:	01800044 	movi	r6,1
 800cecc:	800ab7c0 	call	800ab7c <__lshift>
 800ced0:	1009883a 	mov	r4,r2
 800ced4:	880b883a 	mov	r5,r17
 800ced8:	1027883a 	mov	r19,r2
 800cedc:	800acd80 	call	800acd8 <__mcmp>
 800cee0:	00802c0e 	bge	zero,r2,800cf94 <_strtod_r+0x110c>
 800cee4:	d8800717 	ldw	r2,28(sp)
 800cee8:	109ffc2c 	andhi	r2,r2,32752
 800ceec:	a000ed26 	beq	r20,zero,800d2a4 <_strtod_r+0x141c>
 800cef0:	00c1ac34 	movhi	r3,1712
 800cef4:	1880eb36 	bltu	r3,r2,800d2a4 <_strtod_r+0x141c>
 800cef8:	00c0dc34 	movhi	r3,880
 800cefc:	18bf902e 	bgeu	r3,r2,800cd40 <_strtod_r+0xeb8>
 800cf00:	d9000617 	ldw	r4,24(sp)
 800cf04:	d9400717 	ldw	r5,28(sp)
 800cf08:	008e5434 	movhi	r2,14672
 800cf0c:	000d883a 	mov	r6,zero
 800cf10:	100f883a 	mov	r7,r2
 800cf14:	d8800515 	stw	r2,20(sp)
 800cf18:	d8000415 	stw	zero,16(sp)
 800cf1c:	80104bc0 	call	80104bc <__muldf3>
 800cf20:	d8800615 	stw	r2,24(sp)
 800cf24:	d8c00715 	stw	r3,28(sp)
 800cf28:	183ee71e 	bne	r3,zero,800cac8 <_strtod_r+0xc40>
 800cf2c:	103ee61e 	bne	r2,zero,800cac8 <_strtod_r+0xc40>
 800cf30:	00800884 	movi	r2,34
 800cf34:	80800015 	stw	r2,0(r16)
 800cf38:	003ee306 	br	800cac8 <_strtod_r+0xc40>
 800cf3c:	d9000f17 	ldw	r4,60(sp)
 800cf40:	203f6426 	beq	r4,zero,800ccd4 <_strtod_r+0xe4c>
 800cf44:	d8c00717 	ldw	r3,28(sp)
 800cf48:	00800434 	movhi	r2,16
 800cf4c:	10bfffc4 	addi	r2,r2,-1
 800cf50:	1888703a 	and	r4,r3,r2
 800cf54:	2080bd26 	beq	r4,r2,800d24c <_strtod_r+0x13c4>
 800cf58:	d8800617 	ldw	r2,24(sp)
 800cf5c:	1080004c 	andi	r2,r2,1
 800cf60:	10000c26 	beq	r2,zero,800cf94 <_strtod_r+0x110c>
 800cf64:	ddc00617 	ldw	r23,24(sp)
 800cf68:	dd400717 	ldw	r21,28(sp)
 800cf6c:	b809883a 	mov	r4,r23
 800cf70:	a80b883a 	mov	r5,r21
 800cf74:	800aed80 	call	800aed8 <__ulp>
 800cf78:	b809883a 	mov	r4,r23
 800cf7c:	a80b883a 	mov	r5,r21
 800cf80:	100d883a 	mov	r6,r2
 800cf84:	180f883a 	mov	r7,r3
 800cf88:	80104080 	call	8010408 <__adddf3>
 800cf8c:	d8800615 	stw	r2,24(sp)
 800cf90:	d8c00715 	stw	r3,28(sp)
 800cf94:	a03fda1e 	bne	r20,zero,800cf00 <_strtod_r+0x1078>
 800cf98:	003ecb06 	br	800cac8 <_strtod_r+0xc40>
 800cf9c:	d8c00417 	ldw	r3,16(sp)
 800cfa0:	00bfffc4 	movi	r2,-1
 800cfa4:	18be781e 	bne	r3,r2,800c988 <_strtod_r+0xb00>
 800cfa8:	00800884 	movi	r2,34
 800cfac:	80800015 	stw	r2,0(r16)
 800cfb0:	009ffc34 	movhi	r2,32752
 800cfb4:	d8800715 	stw	r2,28(sp)
 800cfb8:	d8000615 	stw	zero,24(sp)
 800cfbc:	003ec206 	br	800cac8 <_strtod_r+0xc40>
 800cfc0:	00800884 	movi	r2,34
 800cfc4:	80800015 	stw	r2,0(r16)
 800cfc8:	00dffc34 	movhi	r3,32752
 800cfcc:	0005883a 	mov	r2,zero
 800cfd0:	003c4e06 	br	800c10c <_strtod_r+0x284>
 800cfd4:	883d6826 	beq	r17,zero,800c578 <_strtod_r+0x6f0>
 800cfd8:	0463c83a 	sub	r17,zero,r17
 800cfdc:	888003cc 	andi	r2,r17,15
 800cfe0:	10000b26 	beq	r2,zero,800d010 <_strtod_r+0x1188>
 800cfe4:	100490fa 	slli	r2,r2,3
 800cfe8:	00c20074 	movhi	r3,2049
 800cfec:	18d2a804 	addi	r3,r3,19104
 800cff0:	d9000617 	ldw	r4,24(sp)
 800cff4:	1885883a 	add	r2,r3,r2
 800cff8:	d9400717 	ldw	r5,28(sp)
 800cffc:	11800017 	ldw	r6,0(r2)
 800d000:	11c00117 	ldw	r7,4(r2)
 800d004:	80016c80 	call	80016c8 <__divdf3>
 800d008:	d8800615 	stw	r2,24(sp)
 800d00c:	d8c00715 	stw	r3,28(sp)
 800d010:	8823d13a 	srai	r17,r17,4
 800d014:	883d5826 	beq	r17,zero,800c578 <_strtod_r+0x6f0>
 800d018:	008007c4 	movi	r2,31
 800d01c:	14402816 	blt	r2,r17,800d0c0 <_strtod_r+0x1238>
 800d020:	8880040c 	andi	r2,r17,16
 800d024:	1000cf1e 	bne	r2,zero,800d364 <_strtod_r+0x14dc>
 800d028:	0029883a 	mov	r20,zero
 800d02c:	0440100e 	bge	zero,r17,800d070 <_strtod_r+0x11e8>
 800d030:	d8800617 	ldw	r2,24(sp)
 800d034:	d8c00717 	ldw	r3,28(sp)
 800d038:	04820074 	movhi	r18,2049
 800d03c:	9492e104 	addi	r18,r18,19332
 800d040:	8980004c 	andi	r6,r17,1
 800d044:	30000526 	beq	r6,zero,800d05c <_strtod_r+0x11d4>
 800d048:	91800017 	ldw	r6,0(r18)
 800d04c:	91c00117 	ldw	r7,4(r18)
 800d050:	1009883a 	mov	r4,r2
 800d054:	180b883a 	mov	r5,r3
 800d058:	80104bc0 	call	80104bc <__muldf3>
 800d05c:	8823d07a 	srai	r17,r17,1
 800d060:	94800204 	addi	r18,r18,8
 800d064:	883ff61e 	bne	r17,zero,800d040 <_strtod_r+0x11b8>
 800d068:	d8800615 	stw	r2,24(sp)
 800d06c:	d8c00715 	stw	r3,28(sp)
 800d070:	a0000d26 	beq	r20,zero,800d0a8 <_strtod_r+0x1220>
 800d074:	d8c00717 	ldw	r3,28(sp)
 800d078:	01001ac4 	movi	r4,107
 800d07c:	189ffc2c 	andhi	r2,r3,32752
 800d080:	1004d53a 	srli	r2,r2,20
 800d084:	2085c83a 	sub	r2,r4,r2
 800d088:	0080070e 	bge	zero,r2,800d0a8 <_strtod_r+0x1220>
 800d08c:	010007c4 	movi	r4,31
 800d090:	2080c30e 	bge	r4,r2,800d3a0 <_strtod_r+0x1518>
 800d094:	d8000615 	stw	zero,24(sp)
 800d098:	01000d04 	movi	r4,52
 800d09c:	2080c60e 	bge	r4,r2,800d3b8 <_strtod_r+0x1530>
 800d0a0:	0080dc34 	movhi	r2,880
 800d0a4:	d8800715 	stw	r2,28(sp)
 800d0a8:	d9000617 	ldw	r4,24(sp)
 800d0ac:	d9400717 	ldw	r5,28(sp)
 800d0b0:	000d883a 	mov	r6,zero
 800d0b4:	000f883a 	mov	r7,zero
 800d0b8:	80107a00 	call	80107a0 <__eqdf2>
 800d0bc:	103d2f1e 	bne	r2,zero,800c57c <_strtod_r+0x6f4>
 800d0c0:	00800884 	movi	r2,34
 800d0c4:	80800015 	stw	r2,0(r16)
 800d0c8:	0007883a 	mov	r3,zero
 800d0cc:	0005883a 	mov	r2,zero
 800d0d0:	003c0e06 	br	800c10c <_strtod_r+0x284>
 800d0d4:	0007883a 	mov	r3,zero
 800d0d8:	00aff834 	movhi	r2,49120
 800d0dc:	002b883a 	mov	r21,zero
 800d0e0:	05cff834 	movhi	r23,16352
 800d0e4:	003e4a06 	br	800ca10 <_strtod_r+0xb88>
 800d0e8:	011387c4 	movi	r4,19999
 800d0ec:	003cca06 	br	800c418 <_strtod_r+0x590>
 800d0f0:	b00b883a 	mov	r5,r22
 800d0f4:	d8000f15 	stw	zero,60(sp)
 800d0f8:	0039883a 	mov	fp,zero
 800d0fc:	002b883a 	mov	r21,zero
 800d100:	003c2d06 	br	800c1b8 <_strtod_r+0x330>
 800d104:	d8000f15 	stw	zero,60(sp)
 800d108:	0039883a 	mov	fp,zero
 800d10c:	002b883a 	mov	r21,zero
 800d110:	003b9d06 	br	800bf88 <_strtod_r+0x100>
 800d114:	d9401017 	ldw	r5,64(sp)
 800d118:	00c00944 	movi	r3,37
 800d11c:	1d47c83a 	sub	r3,r3,r21
 800d120:	197d0116 	blt	r3,r5,800c528 <_strtod_r+0x6a0>
 800d124:	1563c83a 	sub	r17,r2,r21
 800d128:	880490fa 	slli	r2,r17,3
 800d12c:	04020074 	movhi	r16,2049
 800d130:	8412a804 	addi	r16,r16,19104
 800d134:	d9000617 	ldw	r4,24(sp)
 800d138:	8085883a 	add	r2,r16,r2
 800d13c:	d9400717 	ldw	r5,28(sp)
 800d140:	11800017 	ldw	r6,0(r2)
 800d144:	11c00117 	ldw	r7,4(r2)
 800d148:	80104bc0 	call	80104bc <__muldf3>
 800d14c:	d9001017 	ldw	r4,64(sp)
 800d150:	180b883a 	mov	r5,r3
 800d154:	244dc83a 	sub	r6,r4,r17
 800d158:	300c90fa 	slli	r6,r6,3
 800d15c:	1009883a 	mov	r4,r2
 800d160:	81a1883a 	add	r16,r16,r6
 800d164:	81800017 	ldw	r6,0(r16)
 800d168:	81c00117 	ldw	r7,4(r16)
 800d16c:	80104bc0 	call	80104bc <__muldf3>
 800d170:	003be606 	br	800c10c <_strtod_r+0x284>
 800d174:	d9400e17 	ldw	r5,56(sp)
 800d178:	d8001215 	stw	zero,72(sp)
 800d17c:	d9400c15 	stw	r5,48(sp)
 800d180:	003ce606 	br	800c51c <_strtod_r+0x694>
 800d184:	d9401017 	ldw	r5,64(sp)
 800d188:	00bffa84 	movi	r2,-22
 800d18c:	28bce616 	blt	r5,r2,800c528 <_strtod_r+0x6a0>
 800d190:	280490fa 	slli	r2,r5,3
 800d194:	00c20074 	movhi	r3,2049
 800d198:	18d2a804 	addi	r3,r3,19104
 800d19c:	d9000617 	ldw	r4,24(sp)
 800d1a0:	1885c83a 	sub	r2,r3,r2
 800d1a4:	d9400717 	ldw	r5,28(sp)
 800d1a8:	11800017 	ldw	r6,0(r2)
 800d1ac:	11c00117 	ldw	r7,4(r2)
 800d1b0:	80016c80 	call	80016c8 <__divdf3>
 800d1b4:	003bd506 	br	800c10c <_strtod_r+0x284>
 800d1b8:	00801a44 	movi	r2,105
 800d1bc:	38bb8726 	beq	r7,r2,800bfdc <_strtod_r+0x154>
 800d1c0:	00801b84 	movi	r2,110
 800d1c4:	38be881e 	bne	r7,r2,800cbe8 <_strtod_r+0xd60>
 800d1c8:	d8c00c17 	ldw	r3,48(sp)
 800d1cc:	01020074 	movhi	r4,2049
 800d1d0:	2112e004 	addi	r4,r4,19328
 800d1d4:	01801004 	movi	r6,64
 800d1d8:	01c01684 	movi	r7,90
 800d1dc:	21400007 	ldb	r5,0(r4)
 800d1e0:	21000044 	addi	r4,r4,1
 800d1e4:	28004e26 	beq	r5,zero,800d320 <_strtod_r+0x1498>
 800d1e8:	18c00044 	addi	r3,r3,1
 800d1ec:	18800007 	ldb	r2,0(r3)
 800d1f0:	3080020e 	bge	r6,r2,800d1fc <_strtod_r+0x1374>
 800d1f4:	38800116 	blt	r7,r2,800d1fc <_strtod_r+0x1374>
 800d1f8:	10800804 	addi	r2,r2,32
 800d1fc:	117ff726 	beq	r2,r5,800d1dc <_strtod_r+0x1354>
 800d200:	003e7906 	br	800cbe8 <_strtod_r+0xd60>
 800d204:	d8c00617 	ldw	r3,24(sp)
 800d208:	003eb906 	br	800ccf0 <_strtod_r+0xe68>
 800d20c:	00800404 	movi	r2,16
 800d210:	15c02216 	blt	r2,r23,800d29c <_strtod_r+0x1414>
 800d214:	d9000f17 	ldw	r4,60(sp)
 800d218:	01400284 	movi	r5,10
 800d21c:	8001a6c0 	call	8001a6c <__mulsi3>
 800d220:	15ad883a 	add	r22,r2,r22
 800d224:	dd800f15 	stw	r22,60(sp)
 800d228:	000d883a 	mov	r6,zero
 800d22c:	003c2606 	br	800c2c8 <_strtod_r+0x440>
 800d230:	000d883a 	mov	r6,zero
 800d234:	003bf106 	br	800c1fc <_strtod_r+0x374>
 800d238:	0080d434 	movhi	r2,848
 800d23c:	1887883a 	add	r3,r3,r2
 800d240:	d8c00715 	stw	r3,28(sp)
 800d244:	0029883a 	mov	r20,zero
 800d248:	003ccc06 	br	800c57c <_strtod_r+0x6f4>
 800d24c:	d8800617 	ldw	r2,24(sp)
 800d250:	a0001026 	beq	r20,zero,800d294 <_strtod_r+0x140c>
 800d254:	191ffc2c 	andhi	r4,r3,32752
 800d258:	0141a834 	movhi	r5,1696
 800d25c:	29000d36 	bltu	r5,r4,800d294 <_strtod_r+0x140c>
 800d260:	2008d53a 	srli	r4,r4,20
 800d264:	01401ac4 	movi	r5,107
 800d268:	2909c83a 	sub	r4,r5,r4
 800d26c:	017fffc4 	movi	r5,-1
 800d270:	2908983a 	sll	r4,r5,r4
 800d274:	113f391e 	bne	r2,r4,800cf5c <_strtod_r+0x10d4>
 800d278:	18dffc2c 	andhi	r3,r3,32752
 800d27c:	00800434 	movhi	r2,16
 800d280:	1885883a 	add	r2,r3,r2
 800d284:	d8800715 	stw	r2,28(sp)
 800d288:	d8000615 	stw	zero,24(sp)
 800d28c:	a03f1c1e 	bne	r20,zero,800cf00 <_strtod_r+0x1078>
 800d290:	003e0d06 	br	800cac8 <_strtod_r+0xc40>
 800d294:	013fffc4 	movi	r4,-1
 800d298:	003ff606 	br	800d274 <_strtod_r+0x13ec>
 800d29c:	000d883a 	mov	r6,zero
 800d2a0:	003c0906 	br	800c2c8 <_strtod_r+0x440>
 800d2a4:	00fffc34 	movhi	r3,65520
 800d2a8:	10c5883a 	add	r2,r2,r3
 800d2ac:	00c00434 	movhi	r3,16
 800d2b0:	18ffffc4 	addi	r3,r3,-1
 800d2b4:	10c4b03a 	or	r2,r2,r3
 800d2b8:	d8800715 	stw	r2,28(sp)
 800d2bc:	00bfffc4 	movi	r2,-1
 800d2c0:	d8800615 	stw	r2,24(sp)
 800d2c4:	a03f0e1e 	bne	r20,zero,800cf00 <_strtod_r+0x1078>
 800d2c8:	003dff06 	br	800cac8 <_strtod_r+0xc40>
 800d2cc:	1011883a 	mov	r8,r2
 800d2d0:	d8800c15 	stw	r2,48(sp)
 800d2d4:	01020074 	movhi	r4,2049
 800d2d8:	2112de04 	addi	r4,r4,19320
 800d2dc:	01801004 	movi	r6,64
 800d2e0:	01c01684 	movi	r7,90
 800d2e4:	21400007 	ldb	r5,0(r4)
 800d2e8:	10800044 	addi	r2,r2,1
 800d2ec:	21000044 	addi	r4,r4,1
 800d2f0:	28001a26 	beq	r5,zero,800d35c <_strtod_r+0x14d4>
 800d2f4:	10c00007 	ldb	r3,0(r2)
 800d2f8:	30c0020e 	bge	r6,r3,800d304 <_strtod_r+0x147c>
 800d2fc:	38c00116 	blt	r7,r3,800d304 <_strtod_r+0x147c>
 800d300:	18c00804 	addi	r3,r3,32
 800d304:	197ff726 	beq	r3,r5,800d2e4 <_strtod_r+0x145c>
 800d308:	40800044 	addi	r2,r8,1
 800d30c:	d8800c15 	stw	r2,48(sp)
 800d310:	009ffc34 	movhi	r2,32752
 800d314:	d8800715 	stw	r2,28(sp)
 800d318:	d8000615 	stw	zero,24(sp)
 800d31c:	003c7f06 	br	800c51c <_strtod_r+0x694>
 800d320:	18800044 	addi	r2,r3,1
 800d324:	d8800c15 	stw	r2,48(sp)
 800d328:	18c00047 	ldb	r3,1(r3)
 800d32c:	00800a04 	movi	r2,40
 800d330:	18800e26 	beq	r3,r2,800d36c <_strtod_r+0x14e4>
 800d334:	00bffe34 	movhi	r2,65528
 800d338:	d8800715 	stw	r2,28(sp)
 800d33c:	d8000615 	stw	zero,24(sp)
 800d340:	003c7606 	br	800c51c <_strtod_r+0x694>
 800d344:	0023883a 	mov	r17,zero
 800d348:	05820074 	movhi	r22,2049
 800d34c:	b5929e04 	addi	r22,r22,19064
 800d350:	003e4506 	br	800cc68 <_strtod_r+0xde0>
 800d354:	b805883a 	mov	r2,r23
 800d358:	003bd306 	br	800c2a8 <_strtod_r+0x420>
 800d35c:	d8800c15 	stw	r2,48(sp)
 800d360:	003feb06 	br	800d310 <_strtod_r+0x1488>
 800d364:	05001a84 	movi	r20,106
 800d368:	003f3006 	br	800d02c <_strtod_r+0x11a4>
 800d36c:	d9000c04 	addi	r4,sp,48
 800d370:	01420074 	movhi	r5,2049
 800d374:	29550a04 	addi	r5,r5,21544
 800d378:	d9800204 	addi	r6,sp,8
 800d37c:	800ef180 	call	800ef18 <__hexnan>
 800d380:	00c00144 	movi	r3,5
 800d384:	10ffeb1e 	bne	r2,r3,800d334 <_strtod_r+0x14ac>
 800d388:	d8800317 	ldw	r2,12(sp)
 800d38c:	109ffc34 	orhi	r2,r2,32752
 800d390:	d8800715 	stw	r2,28(sp)
 800d394:	d8800217 	ldw	r2,8(sp)
 800d398:	d8800615 	stw	r2,24(sp)
 800d39c:	003c5f06 	br	800c51c <_strtod_r+0x694>
 800d3a0:	00ffffc4 	movi	r3,-1
 800d3a4:	1884983a 	sll	r2,r3,r2
 800d3a8:	d8c00617 	ldw	r3,24(sp)
 800d3ac:	1884703a 	and	r2,r3,r2
 800d3b0:	d8800615 	stw	r2,24(sp)
 800d3b4:	003f3c06 	br	800d0a8 <_strtod_r+0x1220>
 800d3b8:	10bff804 	addi	r2,r2,-32
 800d3bc:	013fffc4 	movi	r4,-1
 800d3c0:	2084983a 	sll	r2,r4,r2
 800d3c4:	10c6703a 	and	r3,r2,r3
 800d3c8:	d8c00715 	stw	r3,28(sp)
 800d3cc:	003f3606 	br	800d0a8 <_strtod_r+0x1220>

0800d3d0 <strtod>:
 800d3d0:	00c20074 	movhi	r3,2049
 800d3d4:	18d99c04 	addi	r3,r3,26224
 800d3d8:	2005883a 	mov	r2,r4
 800d3dc:	19000017 	ldw	r4,0(r3)
 800d3e0:	280d883a 	mov	r6,r5
 800d3e4:	100b883a 	mov	r5,r2
 800d3e8:	800be881 	jmpi	800be88 <_strtod_r>

0800d3ec <strtof>:
 800d3ec:	defffb04 	addi	sp,sp,-20
 800d3f0:	dcc00315 	stw	r19,12(sp)
 800d3f4:	04c20074 	movhi	r19,2049
 800d3f8:	9cd99c04 	addi	r19,r19,26224
 800d3fc:	2005883a 	mov	r2,r4
 800d400:	99000017 	ldw	r4,0(r19)
 800d404:	280d883a 	mov	r6,r5
 800d408:	100b883a 	mov	r5,r2
 800d40c:	dfc00415 	stw	ra,16(sp)
 800d410:	dc800215 	stw	r18,8(sp)
 800d414:	dc400115 	stw	r17,4(sp)
 800d418:	dc000015 	stw	r16,0(sp)
 800d41c:	800be880 	call	800be88 <_strtod_r>
 800d420:	1009883a 	mov	r4,r2
 800d424:	180b883a 	mov	r5,r3
 800d428:	1025883a 	mov	r18,r2
 800d42c:	1823883a 	mov	r17,r3
 800d430:	8010aac0 	call	8010aac <__truncdfsf2>
 800d434:	1009883a 	mov	r4,r2
 800d438:	000b883a 	mov	r5,zero
 800d43c:	1021883a 	mov	r16,r2
 800d440:	800ffb00 	call	800ffb0 <__eqsf2>
 800d444:	1000111e 	bne	r2,zero,800d48c <strtof+0xa0>
 800d448:	9009883a 	mov	r4,r18
 800d44c:	880b883a 	mov	r5,r17
 800d450:	000d883a 	mov	r6,zero
 800d454:	000f883a 	mov	r7,zero
 800d458:	80107fc0 	call	80107fc <__nedf2>
 800d45c:	10000b26 	beq	r2,zero,800d48c <strtof+0xa0>
 800d460:	98800017 	ldw	r2,0(r19)
 800d464:	00c00884 	movi	r3,34
 800d468:	10c00015 	stw	r3,0(r2)
 800d46c:	8005883a 	mov	r2,r16
 800d470:	dfc00417 	ldw	ra,16(sp)
 800d474:	dcc00317 	ldw	r19,12(sp)
 800d478:	dc800217 	ldw	r18,8(sp)
 800d47c:	dc400117 	ldw	r17,4(sp)
 800d480:	dc000017 	ldw	r16,0(sp)
 800d484:	dec00504 	addi	sp,sp,20
 800d488:	f800283a 	ret
 800d48c:	8009883a 	mov	r4,r16
 800d490:	015fe034 	movhi	r5,32640
 800d494:	297fffc4 	addi	r5,r5,-1
 800d498:	80100040 	call	8010004 <__gtsf2>
 800d49c:	0080070e 	bge	zero,r2,800d4bc <strtof+0xd0>
 800d4a0:	9009883a 	mov	r4,r18
 800d4a4:	880b883a 	mov	r5,r17
 800d4a8:	01bfffc4 	movi	r6,-1
 800d4ac:	01dffc34 	movhi	r7,32752
 800d4b0:	39ffffc4 	addi	r7,r7,-1
 800d4b4:	80108580 	call	8010858 <__gtdf2>
 800d4b8:	00bfe90e 	bge	zero,r2,800d460 <strtof+0x74>
 800d4bc:	8009883a 	mov	r4,r16
 800d4c0:	017fe034 	movhi	r5,65408
 800d4c4:	297fffc4 	addi	r5,r5,-1
 800d4c8:	80100600 	call	8010060 <__ltsf2>
 800d4cc:	103fe70e 	bge	r2,zero,800d46c <strtof+0x80>
 800d4d0:	9009883a 	mov	r4,r18
 800d4d4:	880b883a 	mov	r5,r17
 800d4d8:	01bfffc4 	movi	r6,-1
 800d4dc:	01fffc34 	movhi	r7,65520
 800d4e0:	39ffffc4 	addi	r7,r7,-1
 800d4e4:	80109200 	call	8010920 <__ltdf2>
 800d4e8:	103fdd0e 	bge	r2,zero,800d460 <strtof+0x74>
 800d4ec:	8005883a 	mov	r2,r16
 800d4f0:	dfc00417 	ldw	ra,16(sp)
 800d4f4:	dcc00317 	ldw	r19,12(sp)
 800d4f8:	dc800217 	ldw	r18,8(sp)
 800d4fc:	dc400117 	ldw	r17,4(sp)
 800d500:	dc000017 	ldw	r16,0(sp)
 800d504:	dec00504 	addi	sp,sp,20
 800d508:	f800283a 	ret

0800d50c <_strtol_r>:
 800d50c:	defff304 	addi	sp,sp,-52
 800d510:	00820074 	movhi	r2,2049
 800d514:	10999f04 	addi	r2,r2,26236
 800d518:	df000b15 	stw	fp,44(sp)
 800d51c:	17000017 	ldw	fp,0(r2)
 800d520:	ddc00a15 	stw	r23,40(sp)
 800d524:	dd000715 	stw	r20,28(sp)
 800d528:	dcc00615 	stw	r19,24(sp)
 800d52c:	dc000315 	stw	r16,12(sp)
 800d530:	dfc00c15 	stw	ra,48(sp)
 800d534:	dd800915 	stw	r22,36(sp)
 800d538:	dd400815 	stw	r21,32(sp)
 800d53c:	dc800515 	stw	r18,20(sp)
 800d540:	dc400415 	stw	r17,16(sp)
 800d544:	2827883a 	mov	r19,r5
 800d548:	d9000215 	stw	r4,8(sp)
 800d54c:	3029883a 	mov	r20,r6
 800d550:	382f883a 	mov	r23,r7
 800d554:	2821883a 	mov	r16,r5
 800d558:	84400007 	ldb	r17,0(r16)
 800d55c:	84000044 	addi	r16,r16,1
 800d560:	e445883a 	add	r2,fp,r17
 800d564:	10800003 	ldbu	r2,0(r2)
 800d568:	1080020c 	andi	r2,r2,8
 800d56c:	10803fcc 	andi	r2,r2,255
 800d570:	1080201c 	xori	r2,r2,128
 800d574:	10bfe004 	addi	r2,r2,-128
 800d578:	103ff71e 	bne	r2,zero,800d558 <_strtol_r+0x4c>
 800d57c:	00800b44 	movi	r2,45
 800d580:	88806d26 	beq	r17,r2,800d738 <_strtol_r+0x22c>
 800d584:	00800ac4 	movi	r2,43
 800d588:	88807026 	beq	r17,r2,800d74c <_strtol_r+0x240>
 800d58c:	d8000015 	stw	zero,0(sp)
 800d590:	b800471e 	bne	r23,zero,800d6b0 <_strtol_r+0x1a4>
 800d594:	00800c04 	movi	r2,48
 800d598:	88804926 	beq	r17,r2,800d6c0 <_strtol_r+0x1b4>
 800d59c:	05c00284 	movi	r23,10
 800d5a0:	b825883a 	mov	r18,r23
 800d5a4:	d9000017 	ldw	r4,0(sp)
 800d5a8:	20006026 	beq	r4,zero,800d72c <_strtol_r+0x220>
 800d5ac:	05600034 	movhi	r21,32768
 800d5b0:	a809883a 	mov	r4,r21
 800d5b4:	900b883a 	mov	r5,r18
 800d5b8:	8010c340 	call	8010c34 <__umodsi3>
 800d5bc:	a809883a 	mov	r4,r21
 800d5c0:	900b883a 	mov	r5,r18
 800d5c4:	d8800115 	stw	r2,4(sp)
 800d5c8:	8010c2c0 	call	8010c2c <__udivsi3>
 800d5cc:	e447883a 	add	r3,fp,r17
 800d5d0:	18c00003 	ldbu	r3,0(r3)
 800d5d4:	102b883a 	mov	r21,r2
 800d5d8:	000d883a 	mov	r6,zero
 800d5dc:	1940010c 	andi	r5,r3,4
 800d5e0:	29403fcc 	andi	r5,r5,255
 800d5e4:	2940201c 	xori	r5,r5,128
 800d5e8:	297fe004 	addi	r5,r5,-128
 800d5ec:	0009883a 	mov	r4,zero
 800d5f0:	05bfffc4 	movi	r22,-1
 800d5f4:	28001226 	beq	r5,zero,800d640 <_strtol_r+0x134>
 800d5f8:	8c7ff404 	addi	r17,r17,-48
 800d5fc:	8dc0170e 	bge	r17,r23,800d65c <_strtol_r+0x150>
 800d600:	35800626 	beq	r6,r22,800d61c <_strtol_r+0x110>
 800d604:	a9003a36 	bltu	r21,r4,800d6f0 <_strtol_r+0x1e4>
 800d608:	25403726 	beq	r4,r21,800d6e8 <_strtol_r+0x1dc>
 800d60c:	900b883a 	mov	r5,r18
 800d610:	8001a6c0 	call	8001a6c <__mulsi3>
 800d614:	8889883a 	add	r4,r17,r2
 800d618:	01800044 	movi	r6,1
 800d61c:	84400007 	ldb	r17,0(r16)
 800d620:	84000044 	addi	r16,r16,1
 800d624:	e447883a 	add	r3,fp,r17
 800d628:	18c00003 	ldbu	r3,0(r3)
 800d62c:	1940010c 	andi	r5,r3,4
 800d630:	29403fcc 	andi	r5,r5,255
 800d634:	2940201c 	xori	r5,r5,128
 800d638:	297fe004 	addi	r5,r5,-128
 800d63c:	283fee1e 	bne	r5,zero,800d5f8 <_strtol_r+0xec>
 800d640:	188000cc 	andi	r2,r3,3
 800d644:	10000526 	beq	r2,zero,800d65c <_strtol_r+0x150>
 800d648:	18c0004c 	andi	r3,r3,1
 800d64c:	18002a26 	beq	r3,zero,800d6f8 <_strtol_r+0x1ec>
 800d650:	00800dc4 	movi	r2,55
 800d654:	88a3c83a 	sub	r17,r17,r2
 800d658:	8dffe916 	blt	r17,r23,800d600 <_strtol_r+0xf4>
 800d65c:	00bfffc4 	movi	r2,-1
 800d660:	30802826 	beq	r6,r2,800d704 <_strtol_r+0x1f8>
 800d664:	d8800017 	ldw	r2,0(sp)
 800d668:	10000126 	beq	r2,zero,800d670 <_strtol_r+0x164>
 800d66c:	0109c83a 	sub	r4,zero,r4
 800d670:	2005883a 	mov	r2,r4
 800d674:	a0000226 	beq	r20,zero,800d680 <_strtol_r+0x174>
 800d678:	30002a1e 	bne	r6,zero,800d724 <_strtol_r+0x218>
 800d67c:	a4c00015 	stw	r19,0(r20)
 800d680:	dfc00c17 	ldw	ra,48(sp)
 800d684:	df000b17 	ldw	fp,44(sp)
 800d688:	ddc00a17 	ldw	r23,40(sp)
 800d68c:	dd800917 	ldw	r22,36(sp)
 800d690:	dd400817 	ldw	r21,32(sp)
 800d694:	dd000717 	ldw	r20,28(sp)
 800d698:	dcc00617 	ldw	r19,24(sp)
 800d69c:	dc800517 	ldw	r18,20(sp)
 800d6a0:	dc400417 	ldw	r17,16(sp)
 800d6a4:	dc000317 	ldw	r16,12(sp)
 800d6a8:	dec00d04 	addi	sp,sp,52
 800d6ac:	f800283a 	ret
 800d6b0:	00800404 	movi	r2,16
 800d6b4:	b8bfba1e 	bne	r23,r2,800d5a0 <_strtol_r+0x94>
 800d6b8:	00800c04 	movi	r2,48
 800d6bc:	88bfb81e 	bne	r17,r2,800d5a0 <_strtol_r+0x94>
 800d6c0:	80800007 	ldb	r2,0(r16)
 800d6c4:	00c01e04 	movi	r3,120
 800d6c8:	10c02626 	beq	r2,r3,800d764 <_strtol_r+0x258>
 800d6cc:	00c01604 	movi	r3,88
 800d6d0:	10c02426 	beq	r2,r3,800d764 <_strtol_r+0x258>
 800d6d4:	b800281e 	bne	r23,zero,800d778 <_strtol_r+0x26c>
 800d6d8:	04800204 	movi	r18,8
 800d6dc:	04400c04 	movi	r17,48
 800d6e0:	902f883a 	mov	r23,r18
 800d6e4:	003faf06 	br	800d5a4 <_strtol_r+0x98>
 800d6e8:	d8800117 	ldw	r2,4(sp)
 800d6ec:	147fc70e 	bge	r2,r17,800d60c <_strtol_r+0x100>
 800d6f0:	01bfffc4 	movi	r6,-1
 800d6f4:	003fc906 	br	800d61c <_strtol_r+0x110>
 800d6f8:	008015c4 	movi	r2,87
 800d6fc:	88a3c83a 	sub	r17,r17,r2
 800d700:	003fd506 	br	800d658 <_strtol_r+0x14c>
 800d704:	d9000017 	ldw	r4,0(sp)
 800d708:	2000141e 	bne	r4,zero,800d75c <_strtol_r+0x250>
 800d70c:	00a00034 	movhi	r2,32768
 800d710:	10bfffc4 	addi	r2,r2,-1
 800d714:	d9000217 	ldw	r4,8(sp)
 800d718:	00c00884 	movi	r3,34
 800d71c:	20c00015 	stw	r3,0(r4)
 800d720:	a03fd726 	beq	r20,zero,800d680 <_strtol_r+0x174>
 800d724:	84ffffc4 	addi	r19,r16,-1
 800d728:	003fd406 	br	800d67c <_strtol_r+0x170>
 800d72c:	05600034 	movhi	r21,32768
 800d730:	ad7fffc4 	addi	r21,r21,-1
 800d734:	003f9e06 	br	800d5b0 <_strtol_r+0xa4>
 800d738:	00800044 	movi	r2,1
 800d73c:	84400007 	ldb	r17,0(r16)
 800d740:	d8800015 	stw	r2,0(sp)
 800d744:	80a1883a 	add	r16,r16,r2
 800d748:	003f9106 	br	800d590 <_strtol_r+0x84>
 800d74c:	84400007 	ldb	r17,0(r16)
 800d750:	d8000015 	stw	zero,0(sp)
 800d754:	84000044 	addi	r16,r16,1
 800d758:	003f8d06 	br	800d590 <_strtol_r+0x84>
 800d75c:	00a00034 	movhi	r2,32768
 800d760:	003fec06 	br	800d714 <_strtol_r+0x208>
 800d764:	04800404 	movi	r18,16
 800d768:	84400047 	ldb	r17,1(r16)
 800d76c:	902f883a 	mov	r23,r18
 800d770:	84000084 	addi	r16,r16,2
 800d774:	003f8b06 	br	800d5a4 <_strtol_r+0x98>
 800d778:	b825883a 	mov	r18,r23
 800d77c:	04400c04 	movi	r17,48
 800d780:	003f8806 	br	800d5a4 <_strtol_r+0x98>

0800d784 <strtol>:
 800d784:	00820074 	movhi	r2,2049
 800d788:	10999c04 	addi	r2,r2,26224
 800d78c:	2007883a 	mov	r3,r4
 800d790:	11000017 	ldw	r4,0(r2)
 800d794:	2805883a 	mov	r2,r5
 800d798:	300f883a 	mov	r7,r6
 800d79c:	180b883a 	mov	r5,r3
 800d7a0:	100d883a 	mov	r6,r2
 800d7a4:	800d50c1 	jmpi	800d50c <_strtol_r>

0800d7a8 <_strtoll_r>:
 800d7a8:	defff004 	addi	sp,sp,-64
 800d7ac:	00820074 	movhi	r2,2049
 800d7b0:	10999f04 	addi	r2,r2,26236
 800d7b4:	ddc00d15 	stw	r23,52(sp)
 800d7b8:	15c00017 	ldw	r23,0(r2)
 800d7bc:	df000e15 	stw	fp,56(sp)
 800d7c0:	dc000615 	stw	r16,24(sp)
 800d7c4:	dfc00f15 	stw	ra,60(sp)
 800d7c8:	dd800c15 	stw	r22,48(sp)
 800d7cc:	dd400b15 	stw	r21,44(sp)
 800d7d0:	dd000a15 	stw	r20,40(sp)
 800d7d4:	dcc00915 	stw	r19,36(sp)
 800d7d8:	dc800815 	stw	r18,32(sp)
 800d7dc:	dc400715 	stw	r17,28(sp)
 800d7e0:	d9400015 	stw	r5,0(sp)
 800d7e4:	d9000415 	stw	r4,16(sp)
 800d7e8:	d9800115 	stw	r6,4(sp)
 800d7ec:	3839883a 	mov	fp,r7
 800d7f0:	2821883a 	mov	r16,r5
 800d7f4:	82000007 	ldb	r8,0(r16)
 800d7f8:	84000044 	addi	r16,r16,1
 800d7fc:	ba05883a 	add	r2,r23,r8
 800d800:	10800003 	ldbu	r2,0(r2)
 800d804:	1080020c 	andi	r2,r2,8
 800d808:	10803fcc 	andi	r2,r2,255
 800d80c:	1080201c 	xori	r2,r2,128
 800d810:	10bfe004 	addi	r2,r2,-128
 800d814:	103ff71e 	bne	r2,zero,800d7f4 <_strtoll_r+0x4c>
 800d818:	00800b44 	movi	r2,45
 800d81c:	40807a26 	beq	r8,r2,800da08 <_strtoll_r+0x260>
 800d820:	00800ac4 	movi	r2,43
 800d824:	40808826 	beq	r8,r2,800da48 <_strtoll_r+0x2a0>
 800d828:	d8000215 	stw	zero,8(sp)
 800d82c:	e000061e 	bne	fp,zero,800d848 <_strtoll_r+0xa0>
 800d830:	00800c04 	movi	r2,48
 800d834:	40808b26 	beq	r8,r2,800da64 <_strtoll_r+0x2bc>
 800d838:	04800284 	movi	r18,10
 800d83c:	0027883a 	mov	r19,zero
 800d840:	9039883a 	mov	fp,r18
 800d844:	00000406 	br	800d858 <_strtoll_r+0xb0>
 800d848:	00800404 	movi	r2,16
 800d84c:	e0809926 	beq	fp,r2,800dab4 <_strtoll_r+0x30c>
 800d850:	e027d7fa 	srai	r19,fp,31
 800d854:	e025883a 	mov	r18,fp
 800d858:	d9000217 	ldw	r4,8(sp)
 800d85c:	20006226 	beq	r4,zero,800d9e8 <_strtoll_r+0x240>
 800d860:	002b883a 	mov	r21,zero
 800d864:	04600034 	movhi	r17,32768
 800d868:	a809883a 	mov	r4,r21
 800d86c:	880b883a 	mov	r5,r17
 800d870:	900d883a 	mov	r6,r18
 800d874:	980f883a 	mov	r7,r19
 800d878:	da000515 	stw	r8,20(sp)
 800d87c:	800f9880 	call	800f988 <__umoddi3>
 800d880:	a809883a 	mov	r4,r21
 800d884:	880b883a 	mov	r5,r17
 800d888:	900d883a 	mov	r6,r18
 800d88c:	980f883a 	mov	r7,r19
 800d890:	d8800315 	stw	r2,12(sp)
 800d894:	800f3380 	call	800f338 <__udivdi3>
 800d898:	da000517 	ldw	r8,20(sp)
 800d89c:	182b883a 	mov	r21,r3
 800d8a0:	1023883a 	mov	r17,r2
 800d8a4:	ba0d883a 	add	r6,r23,r8
 800d8a8:	31800003 	ldbu	r6,0(r6)
 800d8ac:	0007883a 	mov	r3,zero
 800d8b0:	0009883a 	mov	r4,zero
 800d8b4:	3240010c 	andi	r9,r6,4
 800d8b8:	4a403fcc 	andi	r9,r9,255
 800d8bc:	4a40201c 	xori	r9,r9,128
 800d8c0:	4a7fe004 	addi	r9,r9,-128
 800d8c4:	000b883a 	mov	r5,zero
 800d8c8:	05bfffc4 	movi	r22,-1
 800d8cc:	48001026 	beq	r9,zero,800d910 <_strtoll_r+0x168>
 800d8d0:	453ff404 	addi	r20,r8,-48
 800d8d4:	a700150e 	bge	r20,fp,800d92c <_strtoll_r+0x184>
 800d8d8:	1d800426 	beq	r3,r22,800d8ec <_strtoll_r+0x144>
 800d8dc:	a9400236 	bltu	r21,r5,800d8e8 <_strtoll_r+0x140>
 800d8e0:	2d402e1e 	bne	r5,r21,800d99c <_strtoll_r+0x1f4>
 800d8e4:	89002d2e 	bgeu	r17,r4,800d99c <_strtoll_r+0x1f4>
 800d8e8:	00ffffc4 	movi	r3,-1
 800d8ec:	82000007 	ldb	r8,0(r16)
 800d8f0:	84000044 	addi	r16,r16,1
 800d8f4:	ba0d883a 	add	r6,r23,r8
 800d8f8:	31800003 	ldbu	r6,0(r6)
 800d8fc:	3240010c 	andi	r9,r6,4
 800d900:	4a403fcc 	andi	r9,r9,255
 800d904:	4a40201c 	xori	r9,r9,128
 800d908:	4a7fe004 	addi	r9,r9,-128
 800d90c:	483ff01e 	bne	r9,zero,800d8d0 <_strtoll_r+0x128>
 800d910:	308000cc 	andi	r2,r6,3
 800d914:	10000526 	beq	r2,zero,800d92c <_strtoll_r+0x184>
 800d918:	3180004c 	andi	r6,r6,1
 800d91c:	30002b26 	beq	r6,zero,800d9cc <_strtoll_r+0x224>
 800d920:	00800dc4 	movi	r2,55
 800d924:	40a9c83a 	sub	r20,r8,r2
 800d928:	a73feb16 	blt	r20,fp,800d8d8 <_strtoll_r+0x130>
 800d92c:	00bfffc4 	movi	r2,-1
 800d930:	18803a26 	beq	r3,r2,800da1c <_strtoll_r+0x274>
 800d934:	d8800217 	ldw	r2,8(sp)
 800d938:	10000426 	beq	r2,zero,800d94c <_strtoll_r+0x1a4>
 800d93c:	0109c83a 	sub	r4,zero,r4
 800d940:	2004c03a 	cmpne	r2,r4,zero
 800d944:	014bc83a 	sub	r5,zero,r5
 800d948:	288bc83a 	sub	r5,r5,r2
 800d94c:	d8800117 	ldw	r2,4(sp)
 800d950:	10004f26 	beq	r2,zero,800da90 <_strtoll_r+0x2e8>
 800d954:	2005883a 	mov	r2,r4
 800d958:	1800271e 	bne	r3,zero,800d9f8 <_strtoll_r+0x250>
 800d95c:	2807883a 	mov	r3,r5
 800d960:	d9400017 	ldw	r5,0(sp)
 800d964:	d9000117 	ldw	r4,4(sp)
 800d968:	21400015 	stw	r5,0(r4)
 800d96c:	dfc00f17 	ldw	ra,60(sp)
 800d970:	df000e17 	ldw	fp,56(sp)
 800d974:	ddc00d17 	ldw	r23,52(sp)
 800d978:	dd800c17 	ldw	r22,48(sp)
 800d97c:	dd400b17 	ldw	r21,44(sp)
 800d980:	dd000a17 	ldw	r20,40(sp)
 800d984:	dcc00917 	ldw	r19,36(sp)
 800d988:	dc800817 	ldw	r18,32(sp)
 800d98c:	dc400717 	ldw	r17,28(sp)
 800d990:	dc000617 	ldw	r16,24(sp)
 800d994:	dec01004 	addi	sp,sp,64
 800d998:	f800283a 	ret
 800d99c:	24400e26 	beq	r4,r17,800d9d8 <_strtoll_r+0x230>
 800d9a0:	900d883a 	mov	r6,r18
 800d9a4:	980f883a 	mov	r7,r19
 800d9a8:	800f1a40 	call	800f1a4 <__muldi3>
 800d9ac:	a00dd7fa 	srai	r6,r20,31
 800d9b0:	a085883a 	add	r2,r20,r2
 800d9b4:	1511803a 	cmpltu	r8,r2,r20
 800d9b8:	30c7883a 	add	r3,r6,r3
 800d9bc:	40cb883a 	add	r5,r8,r3
 800d9c0:	1009883a 	mov	r4,r2
 800d9c4:	00c00044 	movi	r3,1
 800d9c8:	003fc806 	br	800d8ec <_strtoll_r+0x144>
 800d9cc:	008015c4 	movi	r2,87
 800d9d0:	40a9c83a 	sub	r20,r8,r2
 800d9d4:	003fd406 	br	800d928 <_strtoll_r+0x180>
 800d9d8:	2d7ff11e 	bne	r5,r21,800d9a0 <_strtoll_r+0x1f8>
 800d9dc:	d8800317 	ldw	r2,12(sp)
 800d9e0:	153fc116 	blt	r2,r20,800d8e8 <_strtoll_r+0x140>
 800d9e4:	003fee06 	br	800d9a0 <_strtoll_r+0x1f8>
 800d9e8:	057fffc4 	movi	r21,-1
 800d9ec:	04600034 	movhi	r17,32768
 800d9f0:	8c7fffc4 	addi	r17,r17,-1
 800d9f4:	003f9c06 	br	800d868 <_strtoll_r+0xc0>
 800d9f8:	2807883a 	mov	r3,r5
 800d9fc:	843fffc4 	addi	r16,r16,-1
 800da00:	dc000015 	stw	r16,0(sp)
 800da04:	003fd606 	br	800d960 <_strtoll_r+0x1b8>
 800da08:	00800044 	movi	r2,1
 800da0c:	82000007 	ldb	r8,0(r16)
 800da10:	d8800215 	stw	r2,8(sp)
 800da14:	80a1883a 	add	r16,r16,r2
 800da18:	003f8406 	br	800d82c <_strtoll_r+0x84>
 800da1c:	d9000217 	ldw	r4,8(sp)
 800da20:	20000d1e 	bne	r4,zero,800da58 <_strtoll_r+0x2b0>
 800da24:	1805883a 	mov	r2,r3
 800da28:	00e00034 	movhi	r3,32768
 800da2c:	18ffffc4 	addi	r3,r3,-1
 800da30:	d9400417 	ldw	r5,16(sp)
 800da34:	01000884 	movi	r4,34
 800da38:	29000015 	stw	r4,0(r5)
 800da3c:	d9000117 	ldw	r4,4(sp)
 800da40:	203fee1e 	bne	r4,zero,800d9fc <_strtoll_r+0x254>
 800da44:	003fc906 	br	800d96c <_strtoll_r+0x1c4>
 800da48:	82000007 	ldb	r8,0(r16)
 800da4c:	d8000215 	stw	zero,8(sp)
 800da50:	84000044 	addi	r16,r16,1
 800da54:	003f7506 	br	800d82c <_strtoll_r+0x84>
 800da58:	0005883a 	mov	r2,zero
 800da5c:	00e00034 	movhi	r3,32768
 800da60:	003ff306 	br	800da30 <_strtoll_r+0x288>
 800da64:	80800007 	ldb	r2,0(r16)
 800da68:	00c01e04 	movi	r3,120
 800da6c:	10c00b26 	beq	r2,r3,800da9c <_strtoll_r+0x2f4>
 800da70:	00c01604 	movi	r3,88
 800da74:	10c00926 	beq	r2,r3,800da9c <_strtoll_r+0x2f4>
 800da78:	e000131e 	bne	fp,zero,800dac8 <_strtoll_r+0x320>
 800da7c:	04800204 	movi	r18,8
 800da80:	0027883a 	mov	r19,zero
 800da84:	02000c04 	movi	r8,48
 800da88:	9039883a 	mov	fp,r18
 800da8c:	003f7206 	br	800d858 <_strtoll_r+0xb0>
 800da90:	2005883a 	mov	r2,r4
 800da94:	2807883a 	mov	r3,r5
 800da98:	003fb406 	br	800d96c <_strtoll_r+0x1c4>
 800da9c:	04800404 	movi	r18,16
 800daa0:	82000047 	ldb	r8,1(r16)
 800daa4:	0027883a 	mov	r19,zero
 800daa8:	84000084 	addi	r16,r16,2
 800daac:	9039883a 	mov	fp,r18
 800dab0:	003f6906 	br	800d858 <_strtoll_r+0xb0>
 800dab4:	00800c04 	movi	r2,48
 800dab8:	40bfea26 	beq	r8,r2,800da64 <_strtoll_r+0x2bc>
 800dabc:	e025883a 	mov	r18,fp
 800dac0:	0027883a 	mov	r19,zero
 800dac4:	003f6406 	br	800d858 <_strtoll_r+0xb0>
 800dac8:	e025883a 	mov	r18,fp
 800dacc:	e027d7fa 	srai	r19,fp,31
 800dad0:	02000c04 	movi	r8,48
 800dad4:	003f6006 	br	800d858 <_strtoll_r+0xb0>

0800dad8 <_strtoul_r>:
 800dad8:	defff304 	addi	sp,sp,-52
 800dadc:	00820074 	movhi	r2,2049
 800dae0:	10999f04 	addi	r2,r2,26236
 800dae4:	df000b15 	stw	fp,44(sp)
 800dae8:	17000017 	ldw	fp,0(r2)
 800daec:	ddc00a15 	stw	r23,40(sp)
 800daf0:	dd000715 	stw	r20,28(sp)
 800daf4:	dcc00615 	stw	r19,24(sp)
 800daf8:	dc000315 	stw	r16,12(sp)
 800dafc:	dfc00c15 	stw	ra,48(sp)
 800db00:	dd800915 	stw	r22,36(sp)
 800db04:	dd400815 	stw	r21,32(sp)
 800db08:	dc800515 	stw	r18,20(sp)
 800db0c:	dc400415 	stw	r17,16(sp)
 800db10:	2827883a 	mov	r19,r5
 800db14:	d9000215 	stw	r4,8(sp)
 800db18:	3029883a 	mov	r20,r6
 800db1c:	382f883a 	mov	r23,r7
 800db20:	2821883a 	mov	r16,r5
 800db24:	84400007 	ldb	r17,0(r16)
 800db28:	84000044 	addi	r16,r16,1
 800db2c:	e445883a 	add	r2,fp,r17
 800db30:	10800003 	ldbu	r2,0(r2)
 800db34:	1080020c 	andi	r2,r2,8
 800db38:	10803fcc 	andi	r2,r2,255
 800db3c:	1080201c 	xori	r2,r2,128
 800db40:	10bfe004 	addi	r2,r2,-128
 800db44:	103ff71e 	bne	r2,zero,800db24 <_strtoul_r+0x4c>
 800db48:	00800b44 	movi	r2,45
 800db4c:	88805e26 	beq	r17,r2,800dcc8 <_strtoul_r+0x1f0>
 800db50:	00800ac4 	movi	r2,43
 800db54:	88806126 	beq	r17,r2,800dcdc <_strtoul_r+0x204>
 800db58:	d8000115 	stw	zero,4(sp)
 800db5c:	b800091e 	bne	r23,zero,800db84 <_strtoul_r+0xac>
 800db60:	00800c04 	movi	r2,48
 800db64:	88806326 	beq	r17,r2,800dcf4 <_strtoul_r+0x21c>
 800db68:	05c00284 	movi	r23,10
 800db6c:	00800144 	movi	r2,5
 800db70:	d8800015 	stw	r2,0(sp)
 800db74:	058666b4 	movhi	r22,6554
 800db78:	b5a66644 	addi	r22,r22,-26215
 800db7c:	b825883a 	mov	r18,r23
 800db80:	00000b06 	br	800dbb0 <_strtoul_r+0xd8>
 800db84:	00800404 	movi	r2,16
 800db88:	b8805826 	beq	r23,r2,800dcec <_strtoul_r+0x214>
 800db8c:	013fffc4 	movi	r4,-1
 800db90:	b80b883a 	mov	r5,r23
 800db94:	8010c2c0 	call	8010c2c <__udivsi3>
 800db98:	013fffc4 	movi	r4,-1
 800db9c:	b80b883a 	mov	r5,r23
 800dba0:	102d883a 	mov	r22,r2
 800dba4:	8010c340 	call	8010c34 <__umodsi3>
 800dba8:	d8800015 	stw	r2,0(sp)
 800dbac:	b825883a 	mov	r18,r23
 800dbb0:	e447883a 	add	r3,fp,r17
 800dbb4:	18c00003 	ldbu	r3,0(r3)
 800dbb8:	0011883a 	mov	r8,zero
 800dbbc:	0009883a 	mov	r4,zero
 800dbc0:	1980010c 	andi	r6,r3,4
 800dbc4:	31803fcc 	andi	r6,r6,255
 800dbc8:	3180201c 	xori	r6,r6,128
 800dbcc:	31bfe004 	addi	r6,r6,-128
 800dbd0:	057fffc4 	movi	r21,-1
 800dbd4:	30001226 	beq	r6,zero,800dc20 <_strtoul_r+0x148>
 800dbd8:	8c7ff404 	addi	r17,r17,-48
 800dbdc:	8dc0170e 	bge	r17,r23,800dc3c <_strtoul_r+0x164>
 800dbe0:	45400626 	beq	r8,r21,800dbfc <_strtoul_r+0x124>
 800dbe4:	b1002c36 	bltu	r22,r4,800dc98 <_strtoul_r+0x1c0>
 800dbe8:	25802926 	beq	r4,r22,800dc90 <_strtoul_r+0x1b8>
 800dbec:	900b883a 	mov	r5,r18
 800dbf0:	8001a6c0 	call	8001a6c <__mulsi3>
 800dbf4:	8889883a 	add	r4,r17,r2
 800dbf8:	02000044 	movi	r8,1
 800dbfc:	84400007 	ldb	r17,0(r16)
 800dc00:	84000044 	addi	r16,r16,1
 800dc04:	e447883a 	add	r3,fp,r17
 800dc08:	18c00003 	ldbu	r3,0(r3)
 800dc0c:	1980010c 	andi	r6,r3,4
 800dc10:	31803fcc 	andi	r6,r6,255
 800dc14:	3180201c 	xori	r6,r6,128
 800dc18:	31bfe004 	addi	r6,r6,-128
 800dc1c:	303fee1e 	bne	r6,zero,800dbd8 <_strtoul_r+0x100>
 800dc20:	188000cc 	andi	r2,r3,3
 800dc24:	10000526 	beq	r2,zero,800dc3c <_strtoul_r+0x164>
 800dc28:	18c0004c 	andi	r3,r3,1
 800dc2c:	18001c26 	beq	r3,zero,800dca0 <_strtoul_r+0x1c8>
 800dc30:	00800dc4 	movi	r2,55
 800dc34:	88a3c83a 	sub	r17,r17,r2
 800dc38:	8dffe916 	blt	r17,r23,800dbe0 <_strtoul_r+0x108>
 800dc3c:	00bfffc4 	movi	r2,-1
 800dc40:	40801a26 	beq	r8,r2,800dcac <_strtoul_r+0x1d4>
 800dc44:	d8c00117 	ldw	r3,4(sp)
 800dc48:	18000126 	beq	r3,zero,800dc50 <_strtoul_r+0x178>
 800dc4c:	0109c83a 	sub	r4,zero,r4
 800dc50:	a0000226 	beq	r20,zero,800dc5c <_strtoul_r+0x184>
 800dc54:	40001a1e 	bne	r8,zero,800dcc0 <_strtoul_r+0x1e8>
 800dc58:	a4c00015 	stw	r19,0(r20)
 800dc5c:	2005883a 	mov	r2,r4
 800dc60:	dfc00c17 	ldw	ra,48(sp)
 800dc64:	df000b17 	ldw	fp,44(sp)
 800dc68:	ddc00a17 	ldw	r23,40(sp)
 800dc6c:	dd800917 	ldw	r22,36(sp)
 800dc70:	dd400817 	ldw	r21,32(sp)
 800dc74:	dd000717 	ldw	r20,28(sp)
 800dc78:	dcc00617 	ldw	r19,24(sp)
 800dc7c:	dc800517 	ldw	r18,20(sp)
 800dc80:	dc400417 	ldw	r17,16(sp)
 800dc84:	dc000317 	ldw	r16,12(sp)
 800dc88:	dec00d04 	addi	sp,sp,52
 800dc8c:	f800283a 	ret
 800dc90:	d8800017 	ldw	r2,0(sp)
 800dc94:	147fd50e 	bge	r2,r17,800dbec <_strtoul_r+0x114>
 800dc98:	023fffc4 	movi	r8,-1
 800dc9c:	003fd706 	br	800dbfc <_strtoul_r+0x124>
 800dca0:	008015c4 	movi	r2,87
 800dca4:	88a3c83a 	sub	r17,r17,r2
 800dca8:	003fe306 	br	800dc38 <_strtoul_r+0x160>
 800dcac:	d8c00217 	ldw	r3,8(sp)
 800dcb0:	00800884 	movi	r2,34
 800dcb4:	4009883a 	mov	r4,r8
 800dcb8:	18800015 	stw	r2,0(r3)
 800dcbc:	a03fe726 	beq	r20,zero,800dc5c <_strtoul_r+0x184>
 800dcc0:	84ffffc4 	addi	r19,r16,-1
 800dcc4:	003fe406 	br	800dc58 <_strtoul_r+0x180>
 800dcc8:	00c00044 	movi	r3,1
 800dccc:	84400007 	ldb	r17,0(r16)
 800dcd0:	d8c00115 	stw	r3,4(sp)
 800dcd4:	80e1883a 	add	r16,r16,r3
 800dcd8:	003fa006 	br	800db5c <_strtoul_r+0x84>
 800dcdc:	84400007 	ldb	r17,0(r16)
 800dce0:	d8000115 	stw	zero,4(sp)
 800dce4:	84000044 	addi	r16,r16,1
 800dce8:	003f9c06 	br	800db5c <_strtoul_r+0x84>
 800dcec:	00800c04 	movi	r2,48
 800dcf0:	88bfa61e 	bne	r17,r2,800db8c <_strtoul_r+0xb4>
 800dcf4:	80800007 	ldb	r2,0(r16)
 800dcf8:	00c01e04 	movi	r3,120
 800dcfc:	10c00b26 	beq	r2,r3,800dd2c <_strtoul_r+0x254>
 800dd00:	00c01604 	movi	r3,88
 800dd04:	10c00926 	beq	r2,r3,800dd2c <_strtoul_r+0x254>
 800dd08:	b800111e 	bne	r23,zero,800dd50 <_strtoul_r+0x278>
 800dd0c:	04800204 	movi	r18,8
 800dd10:	008001c4 	movi	r2,7
 800dd14:	d8800015 	stw	r2,0(sp)
 800dd18:	05880034 	movhi	r22,8192
 800dd1c:	b5bfffc4 	addi	r22,r22,-1
 800dd20:	04400c04 	movi	r17,48
 800dd24:	902f883a 	mov	r23,r18
 800dd28:	003fa106 	br	800dbb0 <_strtoul_r+0xd8>
 800dd2c:	04800404 	movi	r18,16
 800dd30:	008003c4 	movi	r2,15
 800dd34:	84400047 	ldb	r17,1(r16)
 800dd38:	d8800015 	stw	r2,0(sp)
 800dd3c:	84000084 	addi	r16,r16,2
 800dd40:	05840034 	movhi	r22,4096
 800dd44:	b5bfffc4 	addi	r22,r22,-1
 800dd48:	902f883a 	mov	r23,r18
 800dd4c:	003f9806 	br	800dbb0 <_strtoul_r+0xd8>
 800dd50:	013fffc4 	movi	r4,-1
 800dd54:	b80b883a 	mov	r5,r23
 800dd58:	8010c2c0 	call	8010c2c <__udivsi3>
 800dd5c:	013fffc4 	movi	r4,-1
 800dd60:	b80b883a 	mov	r5,r23
 800dd64:	102d883a 	mov	r22,r2
 800dd68:	8010c340 	call	8010c34 <__umodsi3>
 800dd6c:	d8800015 	stw	r2,0(sp)
 800dd70:	b825883a 	mov	r18,r23
 800dd74:	04400c04 	movi	r17,48
 800dd78:	003f8d06 	br	800dbb0 <_strtoul_r+0xd8>

0800dd7c <strtoul>:
 800dd7c:	00820074 	movhi	r2,2049
 800dd80:	10999c04 	addi	r2,r2,26224
 800dd84:	2007883a 	mov	r3,r4
 800dd88:	11000017 	ldw	r4,0(r2)
 800dd8c:	2805883a 	mov	r2,r5
 800dd90:	300f883a 	mov	r7,r6
 800dd94:	180b883a 	mov	r5,r3
 800dd98:	100d883a 	mov	r6,r2
 800dd9c:	800dad81 	jmpi	800dad8 <_strtoul_r>

0800dda0 <_strtoull_r>:
 800dda0:	defff004 	addi	sp,sp,-64
 800dda4:	00820074 	movhi	r2,2049
 800dda8:	10999f04 	addi	r2,r2,26236
 800ddac:	dd800c15 	stw	r22,48(sp)
 800ddb0:	15800017 	ldw	r22,0(r2)
 800ddb4:	df000e15 	stw	fp,56(sp)
 800ddb8:	dc000615 	stw	r16,24(sp)
 800ddbc:	dfc00f15 	stw	ra,60(sp)
 800ddc0:	ddc00d15 	stw	r23,52(sp)
 800ddc4:	dd400b15 	stw	r21,44(sp)
 800ddc8:	dd000a15 	stw	r20,40(sp)
 800ddcc:	dcc00915 	stw	r19,36(sp)
 800ddd0:	dc800815 	stw	r18,32(sp)
 800ddd4:	dc400715 	stw	r17,28(sp)
 800ddd8:	d9400015 	stw	r5,0(sp)
 800dddc:	d9000415 	stw	r4,16(sp)
 800dde0:	d9800115 	stw	r6,4(sp)
 800dde4:	3839883a 	mov	fp,r7
 800dde8:	2821883a 	mov	r16,r5
 800ddec:	82000007 	ldb	r8,0(r16)
 800ddf0:	84000044 	addi	r16,r16,1
 800ddf4:	b205883a 	add	r2,r22,r8
 800ddf8:	10800003 	ldbu	r2,0(r2)
 800ddfc:	1080020c 	andi	r2,r2,8
 800de00:	10803fcc 	andi	r2,r2,255
 800de04:	1080201c 	xori	r2,r2,128
 800de08:	10bfe004 	addi	r2,r2,-128
 800de0c:	103ff71e 	bne	r2,zero,800ddec <_strtoull_r+0x4c>
 800de10:	00800b44 	movi	r2,45
 800de14:	40807e26 	beq	r8,r2,800e010 <_strtoull_r+0x270>
 800de18:	00800ac4 	movi	r2,43
 800de1c:	40808126 	beq	r8,r2,800e024 <_strtoull_r+0x284>
 800de20:	d8000315 	stw	zero,12(sp)
 800de24:	e0000c1e 	bne	fp,zero,800de58 <_strtoull_r+0xb8>
 800de28:	00800c04 	movi	r2,48
 800de2c:	40808126 	beq	r8,r2,800e034 <_strtoull_r+0x294>
 800de30:	04c00284 	movi	r19,10
 800de34:	00800144 	movi	r2,5
 800de38:	d8800215 	stw	r2,8(sp)
 800de3c:	046666b4 	movhi	r17,39322
 800de40:	8c666644 	addi	r17,r17,-26215
 800de44:	05c666b4 	movhi	r23,6554
 800de48:	bde66644 	addi	r23,r23,-26215
 800de4c:	0025883a 	mov	r18,zero
 800de50:	9839883a 	mov	fp,r19
 800de54:	00001306 	br	800dea4 <_strtoull_r+0x104>
 800de58:	00800404 	movi	r2,16
 800de5c:	e0809026 	beq	fp,r2,800e0a0 <_strtoull_r+0x300>
 800de60:	e025d7fa 	srai	r18,fp,31
 800de64:	013fffc4 	movi	r4,-1
 800de68:	200b883a 	mov	r5,r4
 800de6c:	e00d883a 	mov	r6,fp
 800de70:	900f883a 	mov	r7,r18
 800de74:	da000515 	stw	r8,20(sp)
 800de78:	800f3380 	call	800f338 <__udivdi3>
 800de7c:	013fffc4 	movi	r4,-1
 800de80:	200b883a 	mov	r5,r4
 800de84:	e00d883a 	mov	r6,fp
 800de88:	900f883a 	mov	r7,r18
 800de8c:	1023883a 	mov	r17,r2
 800de90:	182f883a 	mov	r23,r3
 800de94:	800f9880 	call	800f988 <__umoddi3>
 800de98:	da000517 	ldw	r8,20(sp)
 800de9c:	d8800215 	stw	r2,8(sp)
 800dea0:	e027883a 	mov	r19,fp
 800dea4:	b20d883a 	add	r6,r22,r8
 800dea8:	32400003 	ldbu	r9,0(r6)
 800deac:	0007883a 	mov	r3,zero
 800deb0:	0009883a 	mov	r4,zero
 800deb4:	4a80010c 	andi	r10,r9,4
 800deb8:	52803fcc 	andi	r10,r10,255
 800debc:	5280201c 	xori	r10,r10,128
 800dec0:	52bfe004 	addi	r10,r10,-128
 800dec4:	000b883a 	mov	r5,zero
 800dec8:	057fffc4 	movi	r21,-1
 800decc:	50001026 	beq	r10,zero,800df10 <_strtoull_r+0x170>
 800ded0:	453ff404 	addi	r20,r8,-48
 800ded4:	a700150e 	bge	r20,fp,800df2c <_strtoull_r+0x18c>
 800ded8:	1d400426 	beq	r3,r21,800deec <_strtoull_r+0x14c>
 800dedc:	b9400236 	bltu	r23,r5,800dee8 <_strtoull_r+0x148>
 800dee0:	2dc0301e 	bne	r5,r23,800dfa4 <_strtoull_r+0x204>
 800dee4:	89002f2e 	bgeu	r17,r4,800dfa4 <_strtoull_r+0x204>
 800dee8:	00ffffc4 	movi	r3,-1
 800deec:	82000007 	ldb	r8,0(r16)
 800def0:	84000044 	addi	r16,r16,1
 800def4:	b20d883a 	add	r6,r22,r8
 800def8:	32400003 	ldbu	r9,0(r6)
 800defc:	4a80010c 	andi	r10,r9,4
 800df00:	52803fcc 	andi	r10,r10,255
 800df04:	5280201c 	xori	r10,r10,128
 800df08:	52bfe004 	addi	r10,r10,-128
 800df0c:	503ff01e 	bne	r10,zero,800ded0 <_strtoull_r+0x130>
 800df10:	488000cc 	andi	r2,r9,3
 800df14:	10000526 	beq	r2,zero,800df2c <_strtoull_r+0x18c>
 800df18:	4a40004c 	andi	r9,r9,1
 800df1c:	48002d26 	beq	r9,zero,800dfd4 <_strtoull_r+0x234>
 800df20:	00800dc4 	movi	r2,55
 800df24:	40a9c83a 	sub	r20,r8,r2
 800df28:	a73feb16 	blt	r20,fp,800ded8 <_strtoull_r+0x138>
 800df2c:	00bfffc4 	movi	r2,-1
 800df30:	18802f26 	beq	r3,r2,800dff0 <_strtoull_r+0x250>
 800df34:	d8800317 	ldw	r2,12(sp)
 800df38:	10000426 	beq	r2,zero,800df4c <_strtoull_r+0x1ac>
 800df3c:	0109c83a 	sub	r4,zero,r4
 800df40:	2004c03a 	cmpne	r2,r4,zero
 800df44:	014bc83a 	sub	r5,zero,r5
 800df48:	288bc83a 	sub	r5,r5,r2
 800df4c:	d8800117 	ldw	r2,4(sp)
 800df50:	10000626 	beq	r2,zero,800df6c <_strtoull_r+0x1cc>
 800df54:	18000226 	beq	r3,zero,800df60 <_strtoull_r+0x1c0>
 800df58:	843fffc4 	addi	r16,r16,-1
 800df5c:	dc000015 	stw	r16,0(sp)
 800df60:	d8800017 	ldw	r2,0(sp)
 800df64:	d8c00117 	ldw	r3,4(sp)
 800df68:	18800015 	stw	r2,0(r3)
 800df6c:	2005883a 	mov	r2,r4
 800df70:	2807883a 	mov	r3,r5
 800df74:	dfc00f17 	ldw	ra,60(sp)
 800df78:	df000e17 	ldw	fp,56(sp)
 800df7c:	ddc00d17 	ldw	r23,52(sp)
 800df80:	dd800c17 	ldw	r22,48(sp)
 800df84:	dd400b17 	ldw	r21,44(sp)
 800df88:	dd000a17 	ldw	r20,40(sp)
 800df8c:	dcc00917 	ldw	r19,36(sp)
 800df90:	dc800817 	ldw	r18,32(sp)
 800df94:	dc400717 	ldw	r17,28(sp)
 800df98:	dc000617 	ldw	r16,24(sp)
 800df9c:	dec01004 	addi	sp,sp,64
 800dfa0:	f800283a 	ret
 800dfa4:	24400e26 	beq	r4,r17,800dfe0 <_strtoull_r+0x240>
 800dfa8:	980d883a 	mov	r6,r19
 800dfac:	900f883a 	mov	r7,r18
 800dfb0:	800f1a40 	call	800f1a4 <__muldi3>
 800dfb4:	a00dd7fa 	srai	r6,r20,31
 800dfb8:	a085883a 	add	r2,r20,r2
 800dfbc:	1511803a 	cmpltu	r8,r2,r20
 800dfc0:	30c7883a 	add	r3,r6,r3
 800dfc4:	40cb883a 	add	r5,r8,r3
 800dfc8:	1009883a 	mov	r4,r2
 800dfcc:	00c00044 	movi	r3,1
 800dfd0:	003fc606 	br	800deec <_strtoull_r+0x14c>
 800dfd4:	008015c4 	movi	r2,87
 800dfd8:	40a9c83a 	sub	r20,r8,r2
 800dfdc:	003fd206 	br	800df28 <_strtoull_r+0x188>
 800dfe0:	2dfff11e 	bne	r5,r23,800dfa8 <_strtoull_r+0x208>
 800dfe4:	d8800217 	ldw	r2,8(sp)
 800dfe8:	153fbf16 	blt	r2,r20,800dee8 <_strtoull_r+0x148>
 800dfec:	003fee06 	br	800dfa8 <_strtoull_r+0x208>
 800dff0:	d9000417 	ldw	r4,16(sp)
 800dff4:	00800884 	movi	r2,34
 800dff8:	180b883a 	mov	r5,r3
 800dffc:	20800015 	stw	r2,0(r4)
 800e000:	d8800117 	ldw	r2,4(sp)
 800e004:	1809883a 	mov	r4,r3
 800e008:	103fd31e 	bne	r2,zero,800df58 <_strtoull_r+0x1b8>
 800e00c:	003fd706 	br	800df6c <_strtoull_r+0x1cc>
 800e010:	00800044 	movi	r2,1
 800e014:	82000007 	ldb	r8,0(r16)
 800e018:	d8800315 	stw	r2,12(sp)
 800e01c:	80a1883a 	add	r16,r16,r2
 800e020:	003f8006 	br	800de24 <_strtoull_r+0x84>
 800e024:	82000007 	ldb	r8,0(r16)
 800e028:	d8000315 	stw	zero,12(sp)
 800e02c:	84000044 	addi	r16,r16,1
 800e030:	003f7c06 	br	800de24 <_strtoull_r+0x84>
 800e034:	80800007 	ldb	r2,0(r16)
 800e038:	00c01e04 	movi	r3,120
 800e03c:	10c00d26 	beq	r2,r3,800e074 <_strtoull_r+0x2d4>
 800e040:	00c01604 	movi	r3,88
 800e044:	10c00b26 	beq	r2,r3,800e074 <_strtoull_r+0x2d4>
 800e048:	e000291e 	bne	fp,zero,800e0f0 <_strtoull_r+0x350>
 800e04c:	04c00204 	movi	r19,8
 800e050:	008001c4 	movi	r2,7
 800e054:	d8800215 	stw	r2,8(sp)
 800e058:	047fffc4 	movi	r17,-1
 800e05c:	05c80034 	movhi	r23,8192
 800e060:	bdffffc4 	addi	r23,r23,-1
 800e064:	0025883a 	mov	r18,zero
 800e068:	02000c04 	movi	r8,48
 800e06c:	9839883a 	mov	fp,r19
 800e070:	003f8c06 	br	800dea4 <_strtoull_r+0x104>
 800e074:	04c00404 	movi	r19,16
 800e078:	008003c4 	movi	r2,15
 800e07c:	82000047 	ldb	r8,1(r16)
 800e080:	d8800215 	stw	r2,8(sp)
 800e084:	84000084 	addi	r16,r16,2
 800e088:	047fffc4 	movi	r17,-1
 800e08c:	05c40034 	movhi	r23,4096
 800e090:	bdffffc4 	addi	r23,r23,-1
 800e094:	0025883a 	mov	r18,zero
 800e098:	9839883a 	mov	fp,r19
 800e09c:	003f8106 	br	800dea4 <_strtoull_r+0x104>
 800e0a0:	00800c04 	movi	r2,48
 800e0a4:	40bfe326 	beq	r8,r2,800e034 <_strtoull_r+0x294>
 800e0a8:	013fffc4 	movi	r4,-1
 800e0ac:	200b883a 	mov	r5,r4
 800e0b0:	e00d883a 	mov	r6,fp
 800e0b4:	000f883a 	mov	r7,zero
 800e0b8:	da000515 	stw	r8,20(sp)
 800e0bc:	800f3380 	call	800f338 <__udivdi3>
 800e0c0:	013fffc4 	movi	r4,-1
 800e0c4:	200b883a 	mov	r5,r4
 800e0c8:	e00d883a 	mov	r6,fp
 800e0cc:	000f883a 	mov	r7,zero
 800e0d0:	1023883a 	mov	r17,r2
 800e0d4:	182f883a 	mov	r23,r3
 800e0d8:	800f9880 	call	800f988 <__umoddi3>
 800e0dc:	d8800215 	stw	r2,8(sp)
 800e0e0:	e027883a 	mov	r19,fp
 800e0e4:	0025883a 	mov	r18,zero
 800e0e8:	da000517 	ldw	r8,20(sp)
 800e0ec:	003f6d06 	br	800dea4 <_strtoull_r+0x104>
 800e0f0:	e025d7fa 	srai	r18,fp,31
 800e0f4:	013fffc4 	movi	r4,-1
 800e0f8:	200b883a 	mov	r5,r4
 800e0fc:	e00d883a 	mov	r6,fp
 800e100:	900f883a 	mov	r7,r18
 800e104:	800f3380 	call	800f338 <__udivdi3>
 800e108:	013fffc4 	movi	r4,-1
 800e10c:	200b883a 	mov	r5,r4
 800e110:	e00d883a 	mov	r6,fp
 800e114:	900f883a 	mov	r7,r18
 800e118:	1023883a 	mov	r17,r2
 800e11c:	182f883a 	mov	r23,r3
 800e120:	800f9880 	call	800f988 <__umoddi3>
 800e124:	d8800215 	stw	r2,8(sp)
 800e128:	e027883a 	mov	r19,fp
 800e12c:	02000c04 	movi	r8,48
 800e130:	003f5c06 	br	800dea4 <_strtoull_r+0x104>

0800e134 <__submore>:
 800e134:	defffa04 	addi	sp,sp,-24
 800e138:	dc000015 	stw	r16,0(sp)
 800e13c:	2821883a 	mov	r16,r5
 800e140:	29400c17 	ldw	r5,48(r5)
 800e144:	dfc00515 	stw	ra,20(sp)
 800e148:	dd000415 	stw	r20,16(sp)
 800e14c:	dcc00315 	stw	r19,12(sp)
 800e150:	dc800215 	stw	r18,8(sp)
 800e154:	dc400115 	stw	r17,4(sp)
 800e158:	80801004 	addi	r2,r16,64
 800e15c:	28801726 	beq	r5,r2,800e1bc <__submore+0x88>
 800e160:	84400d17 	ldw	r17,52(r16)
 800e164:	8c67883a 	add	r19,r17,r17
 800e168:	980d883a 	mov	r6,r19
 800e16c:	800b5f40 	call	800b5f4 <_realloc_r>
 800e170:	1025883a 	mov	r18,r2
 800e174:	10002926 	beq	r2,zero,800e21c <__submore+0xe8>
 800e178:	1469883a 	add	r20,r2,r17
 800e17c:	a009883a 	mov	r4,r20
 800e180:	100b883a 	mov	r5,r2
 800e184:	880d883a 	mov	r6,r17
 800e188:	8003eb00 	call	8003eb0 <memcpy>
 800e18c:	0005883a 	mov	r2,zero
 800e190:	85000015 	stw	r20,0(r16)
 800e194:	84800c15 	stw	r18,48(r16)
 800e198:	84c00d15 	stw	r19,52(r16)
 800e19c:	dfc00517 	ldw	ra,20(sp)
 800e1a0:	dd000417 	ldw	r20,16(sp)
 800e1a4:	dcc00317 	ldw	r19,12(sp)
 800e1a8:	dc800217 	ldw	r18,8(sp)
 800e1ac:	dc400117 	ldw	r17,4(sp)
 800e1b0:	dc000017 	ldw	r16,0(sp)
 800e1b4:	dec00604 	addi	sp,sp,24
 800e1b8:	f800283a 	ret
 800e1bc:	04410004 	movi	r17,1024
 800e1c0:	880b883a 	mov	r5,r17
 800e1c4:	800372c0 	call	800372c <_malloc_r>
 800e1c8:	1007883a 	mov	r3,r2
 800e1cc:	10001326 	beq	r2,zero,800e21c <__submore+0xe8>
 800e1d0:	80801083 	ldbu	r2,66(r16)
 800e1d4:	80c00c15 	stw	r3,48(r16)
 800e1d8:	84400d15 	stw	r17,52(r16)
 800e1dc:	1880ffc5 	stb	r2,1023(r3)
 800e1e0:	81401043 	ldbu	r5,65(r16)
 800e1e4:	1900ff44 	addi	r4,r3,1021
 800e1e8:	0005883a 	mov	r2,zero
 800e1ec:	1940ff85 	stb	r5,1022(r3)
 800e1f0:	81401003 	ldbu	r5,64(r16)
 800e1f4:	1940ff45 	stb	r5,1021(r3)
 800e1f8:	81000015 	stw	r4,0(r16)
 800e1fc:	dfc00517 	ldw	ra,20(sp)
 800e200:	dd000417 	ldw	r20,16(sp)
 800e204:	dcc00317 	ldw	r19,12(sp)
 800e208:	dc800217 	ldw	r18,8(sp)
 800e20c:	dc400117 	ldw	r17,4(sp)
 800e210:	dc000017 	ldw	r16,0(sp)
 800e214:	dec00604 	addi	sp,sp,24
 800e218:	f800283a 	ret
 800e21c:	00bfffc4 	movi	r2,-1
 800e220:	003fde06 	br	800e19c <__submore+0x68>

0800e224 <_ungetc_r>:
 800e224:	defffc04 	addi	sp,sp,-16
 800e228:	dc800215 	stw	r18,8(sp)
 800e22c:	dc400115 	stw	r17,4(sp)
 800e230:	dc000015 	stw	r16,0(sp)
 800e234:	dfc00315 	stw	ra,12(sp)
 800e238:	00bfffc4 	movi	r2,-1
 800e23c:	2825883a 	mov	r18,r5
 800e240:	2023883a 	mov	r17,r4
 800e244:	3021883a 	mov	r16,r6
 800e248:	28803026 	beq	r5,r2,800e30c <_ungetc_r+0xe8>
 800e24c:	20000226 	beq	r4,zero,800e258 <_ungetc_r+0x34>
 800e250:	20800e17 	ldw	r2,56(r4)
 800e254:	10002f26 	beq	r2,zero,800e314 <_ungetc_r+0xf0>
 800e258:	80c0030b 	ldhu	r3,12(r16)
 800e25c:	00bff7c4 	movi	r2,-33
 800e260:	1900010c 	andi	r4,r3,4
 800e264:	213fffcc 	andi	r4,r4,65535
 800e268:	1884703a 	and	r2,r3,r2
 800e26c:	2120001c 	xori	r4,r4,32768
 800e270:	8080030d 	sth	r2,12(r16)
 800e274:	21200004 	addi	r4,r4,-32768
 800e278:	20000c1e 	bne	r4,zero,800e2ac <_ungetc_r+0x88>
 800e27c:	1900040c 	andi	r4,r3,16
 800e280:	213fffcc 	andi	r4,r4,65535
 800e284:	2120001c 	xori	r4,r4,32768
 800e288:	21200004 	addi	r4,r4,-32768
 800e28c:	20001f26 	beq	r4,zero,800e30c <_ungetc_r+0xe8>
 800e290:	18c0020c 	andi	r3,r3,8
 800e294:	18ffffcc 	andi	r3,r3,65535
 800e298:	18e0001c 	xori	r3,r3,32768
 800e29c:	18e00004 	addi	r3,r3,-32768
 800e2a0:	1800371e 	bne	r3,zero,800e380 <_ungetc_r+0x15c>
 800e2a4:	10800114 	ori	r2,r2,4
 800e2a8:	8080030d 	sth	r2,12(r16)
 800e2ac:	80800c17 	ldw	r2,48(r16)
 800e2b0:	94803fcc 	andi	r18,r18,255
 800e2b4:	10001926 	beq	r2,zero,800e31c <_ungetc_r+0xf8>
 800e2b8:	80c00117 	ldw	r3,4(r16)
 800e2bc:	80800d17 	ldw	r2,52(r16)
 800e2c0:	18800e0e 	bge	r3,r2,800e2fc <_ungetc_r+0xd8>
 800e2c4:	80800017 	ldw	r2,0(r16)
 800e2c8:	10ffffc4 	addi	r3,r2,-1
 800e2cc:	80c00015 	stw	r3,0(r16)
 800e2d0:	14bfffc5 	stb	r18,-1(r2)
 800e2d4:	80800117 	ldw	r2,4(r16)
 800e2d8:	10800044 	addi	r2,r2,1
 800e2dc:	80800115 	stw	r2,4(r16)
 800e2e0:	9005883a 	mov	r2,r18
 800e2e4:	dfc00317 	ldw	ra,12(sp)
 800e2e8:	dc800217 	ldw	r18,8(sp)
 800e2ec:	dc400117 	ldw	r17,4(sp)
 800e2f0:	dc000017 	ldw	r16,0(sp)
 800e2f4:	dec00404 	addi	sp,sp,16
 800e2f8:	f800283a 	ret
 800e2fc:	8809883a 	mov	r4,r17
 800e300:	800b883a 	mov	r5,r16
 800e304:	800e1340 	call	800e134 <__submore>
 800e308:	103fee26 	beq	r2,zero,800e2c4 <_ungetc_r+0xa0>
 800e30c:	04bfffc4 	movi	r18,-1
 800e310:	003ff306 	br	800e2e0 <_ungetc_r+0xbc>
 800e314:	80023480 	call	8002348 <__sinit>
 800e318:	003fcf06 	br	800e258 <_ungetc_r+0x34>
 800e31c:	80c00417 	ldw	r3,16(r16)
 800e320:	80800017 	ldw	r2,0(r16)
 800e324:	18000326 	beq	r3,zero,800e334 <_ungetc_r+0x110>
 800e328:	1880022e 	bgeu	r3,r2,800e334 <_ungetc_r+0x110>
 800e32c:	10ffffc3 	ldbu	r3,-1(r2)
 800e330:	1c801d26 	beq	r3,r18,800e3a8 <_ungetc_r+0x184>
 800e334:	81400117 	ldw	r5,4(r16)
 800e338:	80800e15 	stw	r2,56(r16)
 800e33c:	008000c4 	movi	r2,3
 800e340:	80800d15 	stw	r2,52(r16)
 800e344:	00800044 	movi	r2,1
 800e348:	81001004 	addi	r4,r16,64
 800e34c:	80c01084 	addi	r3,r16,66
 800e350:	80800115 	stw	r2,4(r16)
 800e354:	9005883a 	mov	r2,r18
 800e358:	81400f15 	stw	r5,60(r16)
 800e35c:	81000c15 	stw	r4,48(r16)
 800e360:	84801085 	stb	r18,66(r16)
 800e364:	80c00015 	stw	r3,0(r16)
 800e368:	dfc00317 	ldw	ra,12(sp)
 800e36c:	dc800217 	ldw	r18,8(sp)
 800e370:	dc400117 	ldw	r17,4(sp)
 800e374:	dc000017 	ldw	r16,0(sp)
 800e378:	dec00404 	addi	sp,sp,16
 800e37c:	f800283a 	ret
 800e380:	8809883a 	mov	r4,r17
 800e384:	800b883a 	mov	r5,r16
 800e388:	800208c0 	call	800208c <_fflush_r>
 800e38c:	103fdf1e 	bne	r2,zero,800e30c <_ungetc_r+0xe8>
 800e390:	8080030b 	ldhu	r2,12(r16)
 800e394:	00fffdc4 	movi	r3,-9
 800e398:	80000215 	stw	zero,8(r16)
 800e39c:	1884703a 	and	r2,r3,r2
 800e3a0:	80000615 	stw	zero,24(r16)
 800e3a4:	003fbf06 	br	800e2a4 <_ungetc_r+0x80>
 800e3a8:	80c00117 	ldw	r3,4(r16)
 800e3ac:	10bfffc4 	addi	r2,r2,-1
 800e3b0:	80800015 	stw	r2,0(r16)
 800e3b4:	18800044 	addi	r2,r3,1
 800e3b8:	80800115 	stw	r2,4(r16)
 800e3bc:	003fc806 	br	800e2e0 <_ungetc_r+0xbc>

0800e3c0 <ungetc>:
 800e3c0:	00c20074 	movhi	r3,2049
 800e3c4:	18d99c04 	addi	r3,r3,26224
 800e3c8:	2005883a 	mov	r2,r4
 800e3cc:	19000017 	ldw	r4,0(r3)
 800e3d0:	280d883a 	mov	r6,r5
 800e3d4:	100b883a 	mov	r5,r2
 800e3d8:	800e2241 	jmpi	800e224 <_ungetc_r>

0800e3dc <__swbuf_r>:
 800e3dc:	defffc04 	addi	sp,sp,-16
 800e3e0:	dc800215 	stw	r18,8(sp)
 800e3e4:	dc400115 	stw	r17,4(sp)
 800e3e8:	dc000015 	stw	r16,0(sp)
 800e3ec:	dfc00315 	stw	ra,12(sp)
 800e3f0:	2023883a 	mov	r17,r4
 800e3f4:	2825883a 	mov	r18,r5
 800e3f8:	3021883a 	mov	r16,r6
 800e3fc:	20000226 	beq	r4,zero,800e408 <__swbuf_r+0x2c>
 800e400:	20800e17 	ldw	r2,56(r4)
 800e404:	10003b26 	beq	r2,zero,800e4f4 <__swbuf_r+0x118>
 800e408:	8080030b 	ldhu	r2,12(r16)
 800e40c:	80c00617 	ldw	r3,24(r16)
 800e410:	1080020c 	andi	r2,r2,8
 800e414:	10bfffcc 	andi	r2,r2,65535
 800e418:	10a0001c 	xori	r2,r2,32768
 800e41c:	80c00215 	stw	r3,8(r16)
 800e420:	10a00004 	addi	r2,r2,-32768
 800e424:	10002226 	beq	r2,zero,800e4b0 <__swbuf_r+0xd4>
 800e428:	80800417 	ldw	r2,16(r16)
 800e42c:	10002026 	beq	r2,zero,800e4b0 <__swbuf_r+0xd4>
 800e430:	80c00017 	ldw	r3,0(r16)
 800e434:	81000517 	ldw	r4,20(r16)
 800e438:	94803fcc 	andi	r18,r18,255
 800e43c:	1885c83a 	sub	r2,r3,r2
 800e440:	1100250e 	bge	r2,r4,800e4d8 <__swbuf_r+0xfc>
 800e444:	10800044 	addi	r2,r2,1
 800e448:	81400217 	ldw	r5,8(r16)
 800e44c:	19000044 	addi	r4,r3,1
 800e450:	297fffc4 	addi	r5,r5,-1
 800e454:	81400215 	stw	r5,8(r16)
 800e458:	1c800005 	stb	r18,0(r3)
 800e45c:	80c00517 	ldw	r3,20(r16)
 800e460:	81000015 	stw	r4,0(r16)
 800e464:	18800c26 	beq	r3,r2,800e498 <__swbuf_r+0xbc>
 800e468:	8080030b 	ldhu	r2,12(r16)
 800e46c:	1080004c 	andi	r2,r2,1
 800e470:	10000226 	beq	r2,zero,800e47c <__swbuf_r+0xa0>
 800e474:	00800284 	movi	r2,10
 800e478:	90800726 	beq	r18,r2,800e498 <__swbuf_r+0xbc>
 800e47c:	9005883a 	mov	r2,r18
 800e480:	dfc00317 	ldw	ra,12(sp)
 800e484:	dc800217 	ldw	r18,8(sp)
 800e488:	dc400117 	ldw	r17,4(sp)
 800e48c:	dc000017 	ldw	r16,0(sp)
 800e490:	dec00404 	addi	sp,sp,16
 800e494:	f800283a 	ret
 800e498:	8809883a 	mov	r4,r17
 800e49c:	800b883a 	mov	r5,r16
 800e4a0:	800208c0 	call	800208c <_fflush_r>
 800e4a4:	103ff526 	beq	r2,zero,800e47c <__swbuf_r+0xa0>
 800e4a8:	04bfffc4 	movi	r18,-1
 800e4ac:	003ff306 	br	800e47c <__swbuf_r+0xa0>
 800e4b0:	8809883a 	mov	r4,r17
 800e4b4:	800b883a 	mov	r5,r16
 800e4b8:	8007e900 	call	8007e90 <__swsetup_r>
 800e4bc:	10000f1e 	bne	r2,zero,800e4fc <__swbuf_r+0x120>
 800e4c0:	80800417 	ldw	r2,16(r16)
 800e4c4:	80c00017 	ldw	r3,0(r16)
 800e4c8:	81000517 	ldw	r4,20(r16)
 800e4cc:	94803fcc 	andi	r18,r18,255
 800e4d0:	1885c83a 	sub	r2,r3,r2
 800e4d4:	113fdb16 	blt	r2,r4,800e444 <__swbuf_r+0x68>
 800e4d8:	8809883a 	mov	r4,r17
 800e4dc:	800b883a 	mov	r5,r16
 800e4e0:	800208c0 	call	800208c <_fflush_r>
 800e4e4:	103ff01e 	bne	r2,zero,800e4a8 <__swbuf_r+0xcc>
 800e4e8:	80c00017 	ldw	r3,0(r16)
 800e4ec:	00800044 	movi	r2,1
 800e4f0:	003fd506 	br	800e448 <__swbuf_r+0x6c>
 800e4f4:	80023480 	call	8002348 <__sinit>
 800e4f8:	003fc306 	br	800e408 <__swbuf_r+0x2c>
 800e4fc:	8080030b 	ldhu	r2,12(r16)
 800e500:	04bfffc4 	movi	r18,-1
 800e504:	10801014 	ori	r2,r2,64
 800e508:	8080030d 	sth	r2,12(r16)
 800e50c:	00800244 	movi	r2,9
 800e510:	88800015 	stw	r2,0(r17)
 800e514:	003fd906 	br	800e47c <__swbuf_r+0xa0>

0800e518 <__swbuf>:
 800e518:	00c20074 	movhi	r3,2049
 800e51c:	18d99c04 	addi	r3,r3,26224
 800e520:	2005883a 	mov	r2,r4
 800e524:	19000017 	ldw	r4,0(r3)
 800e528:	280d883a 	mov	r6,r5
 800e52c:	100b883a 	mov	r5,r2
 800e530:	800e3dc1 	jmpi	800e3dc <__swbuf_r>

0800e534 <_calloc_r>:
 800e534:	defffe04 	addi	sp,sp,-8
 800e538:	dc000015 	stw	r16,0(sp)
 800e53c:	2021883a 	mov	r16,r4
 800e540:	3009883a 	mov	r4,r6
 800e544:	dfc00115 	stw	ra,4(sp)
 800e548:	8001a6c0 	call	8001a6c <__mulsi3>
 800e54c:	8009883a 	mov	r4,r16
 800e550:	100b883a 	mov	r5,r2
 800e554:	800372c0 	call	800372c <_malloc_r>
 800e558:	1021883a 	mov	r16,r2
 800e55c:	10000c26 	beq	r2,zero,800e590 <_calloc_r+0x5c>
 800e560:	11bfff17 	ldw	r6,-4(r2)
 800e564:	00ffff04 	movi	r3,-4
 800e568:	00800904 	movi	r2,36
 800e56c:	30cc703a 	and	r6,r6,r3
 800e570:	30cd883a 	add	r6,r6,r3
 800e574:	11801436 	bltu	r2,r6,800e5c8 <_calloc_r+0x94>
 800e578:	00c004c4 	movi	r3,19
 800e57c:	19800936 	bltu	r3,r6,800e5a4 <_calloc_r+0x70>
 800e580:	8005883a 	mov	r2,r16
 800e584:	10000015 	stw	zero,0(r2)
 800e588:	10000115 	stw	zero,4(r2)
 800e58c:	10000215 	stw	zero,8(r2)
 800e590:	8005883a 	mov	r2,r16
 800e594:	dfc00117 	ldw	ra,4(sp)
 800e598:	dc000017 	ldw	r16,0(sp)
 800e59c:	dec00204 	addi	sp,sp,8
 800e5a0:	f800283a 	ret
 800e5a4:	80000015 	stw	zero,0(r16)
 800e5a8:	80000115 	stw	zero,4(r16)
 800e5ac:	00c006c4 	movi	r3,27
 800e5b0:	19800d2e 	bgeu	r3,r6,800e5e8 <_calloc_r+0xb4>
 800e5b4:	80000215 	stw	zero,8(r16)
 800e5b8:	80000315 	stw	zero,12(r16)
 800e5bc:	30800c26 	beq	r6,r2,800e5f0 <_calloc_r+0xbc>
 800e5c0:	80800404 	addi	r2,r16,16
 800e5c4:	003fef06 	br	800e584 <_calloc_r+0x50>
 800e5c8:	8009883a 	mov	r4,r16
 800e5cc:	000b883a 	mov	r5,zero
 800e5d0:	8003ff00 	call	8003ff0 <memset>
 800e5d4:	8005883a 	mov	r2,r16
 800e5d8:	dfc00117 	ldw	ra,4(sp)
 800e5dc:	dc000017 	ldw	r16,0(sp)
 800e5e0:	dec00204 	addi	sp,sp,8
 800e5e4:	f800283a 	ret
 800e5e8:	80800204 	addi	r2,r16,8
 800e5ec:	003fe506 	br	800e584 <_calloc_r+0x50>
 800e5f0:	80000415 	stw	zero,16(r16)
 800e5f4:	80000515 	stw	zero,20(r16)
 800e5f8:	80800604 	addi	r2,r16,24
 800e5fc:	003fe106 	br	800e584 <_calloc_r+0x50>

0800e600 <rshift>:
 800e600:	2805d17a 	srai	r2,r5,5
 800e604:	20c00417 	ldw	r3,16(r4)
 800e608:	22800504 	addi	r10,r4,20
 800e60c:	10c0270e 	bge	r2,r3,800e6ac <rshift+0xac>
 800e610:	19800144 	addi	r6,r3,5
 800e614:	12c00144 	addi	r11,r2,5
 800e618:	318d883a 	add	r6,r6,r6
 800e61c:	5ad7883a 	add	r11,r11,r11
 800e620:	318d883a 	add	r6,r6,r6
 800e624:	5ad7883a 	add	r11,r11,r11
 800e628:	294007cc 	andi	r5,r5,31
 800e62c:	218d883a 	add	r6,r4,r6
 800e630:	22d7883a 	add	r11,r4,r11
 800e634:	28002026 	beq	r5,zero,800e6b8 <rshift+0xb8>
 800e638:	59c00017 	ldw	r7,0(r11)
 800e63c:	02400804 	movi	r9,32
 800e640:	58800104 	addi	r2,r11,4
 800e644:	4953c83a 	sub	r9,r9,r5
 800e648:	394ed83a 	srl	r7,r7,r5
 800e64c:	11802e2e 	bgeu	r2,r6,800e708 <rshift+0x108>
 800e650:	5007883a 	mov	r3,r10
 800e654:	12000017 	ldw	r8,0(r2)
 800e658:	18c00104 	addi	r3,r3,4
 800e65c:	10800104 	addi	r2,r2,4
 800e660:	4250983a 	sll	r8,r8,r9
 800e664:	3a0eb03a 	or	r7,r7,r8
 800e668:	19ffff15 	stw	r7,-4(r3)
 800e66c:	11ffff17 	ldw	r7,-4(r2)
 800e670:	394ed83a 	srl	r7,r7,r5
 800e674:	11bff736 	bltu	r2,r6,800e654 <rshift+0x54>
 800e678:	32c5c83a 	sub	r2,r6,r11
 800e67c:	10bffec4 	addi	r2,r2,-5
 800e680:	1004d0ba 	srli	r2,r2,2
 800e684:	10800184 	addi	r2,r2,6
 800e688:	1085883a 	add	r2,r2,r2
 800e68c:	1085883a 	add	r2,r2,r2
 800e690:	2085883a 	add	r2,r4,r2
 800e694:	11c00015 	stw	r7,0(r2)
 800e698:	38001626 	beq	r7,zero,800e6f4 <rshift+0xf4>
 800e69c:	10800104 	addi	r2,r2,4
 800e6a0:	1295c83a 	sub	r10,r2,r10
 800e6a4:	5015d0ba 	srai	r10,r10,2
 800e6a8:	00001406 	br	800e6fc <rshift+0xfc>
 800e6ac:	20000415 	stw	zero,16(r4)
 800e6b0:	20000515 	stw	zero,20(r4)
 800e6b4:	f800283a 	ret
 800e6b8:	59bffc2e 	bgeu	r11,r6,800e6ac <rshift+0xac>
 800e6bc:	5007883a 	mov	r3,r10
 800e6c0:	5805883a 	mov	r2,r11
 800e6c4:	11400017 	ldw	r5,0(r2)
 800e6c8:	18c00104 	addi	r3,r3,4
 800e6cc:	10800104 	addi	r2,r2,4
 800e6d0:	197fff15 	stw	r5,-4(r3)
 800e6d4:	11bffb36 	bltu	r2,r6,800e6c4 <rshift+0xc4>
 800e6d8:	02c4303a 	nor	r2,zero,r11
 800e6dc:	1185883a 	add	r2,r2,r6
 800e6e0:	1004d0ba 	srli	r2,r2,2
 800e6e4:	10800184 	addi	r2,r2,6
 800e6e8:	1085883a 	add	r2,r2,r2
 800e6ec:	1085883a 	add	r2,r2,r2
 800e6f0:	2085883a 	add	r2,r4,r2
 800e6f4:	1295c83a 	sub	r10,r2,r10
 800e6f8:	5015d0ba 	srai	r10,r10,2
 800e6fc:	22800415 	stw	r10,16(r4)
 800e700:	503feb26 	beq	r10,zero,800e6b0 <rshift+0xb0>
 800e704:	f800283a 	ret
 800e708:	5005883a 	mov	r2,r10
 800e70c:	003fe106 	br	800e694 <rshift+0x94>

0800e710 <__hexdig_init>:
 800e710:	01420074 	movhi	r5,2049
 800e714:	2952ef44 	addi	r5,r5,19389
 800e718:	01000404 	movi	r4,16
 800e71c:	00c00c04 	movi	r3,48
 800e720:	008200b4 	movhi	r2,2050
 800e724:	10a09104 	addi	r2,r2,-32188
 800e728:	29800003 	ldbu	r6,0(r5)
 800e72c:	10c7883a 	add	r3,r2,r3
 800e730:	19000005 	stb	r4,0(r3)
 800e734:	29400044 	addi	r5,r5,1
 800e738:	3007883a 	mov	r3,r6
 800e73c:	21000044 	addi	r4,r4,1
 800e740:	303ff91e 	bne	r6,zero,800e728 <__hexdig_init+0x18>
 800e744:	01420074 	movhi	r5,2049
 800e748:	2952ed44 	addi	r5,r5,19381
 800e74c:	01000684 	movi	r4,26
 800e750:	00c01844 	movi	r3,97
 800e754:	29800003 	ldbu	r6,0(r5)
 800e758:	10c7883a 	add	r3,r2,r3
 800e75c:	19000005 	stb	r4,0(r3)
 800e760:	29400044 	addi	r5,r5,1
 800e764:	3007883a 	mov	r3,r6
 800e768:	21000044 	addi	r4,r4,1
 800e76c:	303ff91e 	bne	r6,zero,800e754 <__hexdig_init+0x44>
 800e770:	01420074 	movhi	r5,2049
 800e774:	2952eb44 	addi	r5,r5,19373
 800e778:	01000684 	movi	r4,26
 800e77c:	00c01044 	movi	r3,65
 800e780:	29800003 	ldbu	r6,0(r5)
 800e784:	10c7883a 	add	r3,r2,r3
 800e788:	19000005 	stb	r4,0(r3)
 800e78c:	29400044 	addi	r5,r5,1
 800e790:	3007883a 	mov	r3,r6
 800e794:	21000044 	addi	r4,r4,1
 800e798:	303ff91e 	bne	r6,zero,800e780 <__hexdig_init+0x70>
 800e79c:	f800283a 	ret

0800e7a0 <__gethex>:
 800e7a0:	defff204 	addi	sp,sp,-56
 800e7a4:	dc800615 	stw	r18,24(sp)
 800e7a8:	048200b4 	movhi	r18,2050
 800e7ac:	94a09104 	addi	r18,r18,-32188
 800e7b0:	90800c03 	ldbu	r2,48(r18)
 800e7b4:	dd400915 	stw	r21,36(sp)
 800e7b8:	dc400515 	stw	r17,20(sp)
 800e7bc:	dfc00d15 	stw	ra,52(sp)
 800e7c0:	df000c15 	stw	fp,48(sp)
 800e7c4:	ddc00b15 	stw	r23,44(sp)
 800e7c8:	dd800a15 	stw	r22,40(sp)
 800e7cc:	dd000815 	stw	r20,32(sp)
 800e7d0:	dcc00715 	stw	r19,28(sp)
 800e7d4:	dc000415 	stw	r16,16(sp)
 800e7d8:	d9000115 	stw	r4,4(sp)
 800e7dc:	d9c00215 	stw	r7,8(sp)
 800e7e0:	282b883a 	mov	r21,r5
 800e7e4:	3023883a 	mov	r17,r6
 800e7e8:	1000b926 	beq	r2,zero,800ead0 <__gethex+0x330>
 800e7ec:	a9000017 	ldw	r4,0(r21)
 800e7f0:	00800c04 	movi	r2,48
 800e7f4:	20c00083 	ldbu	r3,2(r4)
 800e7f8:	24c00084 	addi	r19,r4,2
 800e7fc:	1881601e 	bne	r3,r2,800ed80 <__gethex+0x5e0>
 800e800:	017fff84 	movi	r5,-2
 800e804:	208000c4 	addi	r2,r4,3
 800e808:	290bc83a 	sub	r5,r5,r4
 800e80c:	1809883a 	mov	r4,r3
 800e810:	28b9883a 	add	fp,r5,r2
 800e814:	1027883a 	mov	r19,r2
 800e818:	10800044 	addi	r2,r2,1
 800e81c:	10ffffc3 	ldbu	r3,-1(r2)
 800e820:	193ffb26 	beq	r3,r4,800e810 <__gethex+0x70>
 800e824:	90c5883a 	add	r2,r18,r3
 800e828:	10800003 	ldbu	r2,0(r2)
 800e82c:	014200b4 	movhi	r5,2050
 800e830:	29609104 	addi	r5,r5,-32188
 800e834:	10002b26 	beq	r2,zero,800e8e4 <__gethex+0x144>
 800e838:	98800003 	ldbu	r2,0(r19)
 800e83c:	0009883a 	mov	r4,zero
 800e840:	288b883a 	add	r5,r5,r2
 800e844:	28c00003 	ldbu	r3,0(r5)
 800e848:	18016826 	beq	r3,zero,800edec <__gethex+0x64c>
 800e84c:	9821883a 	mov	r16,r19
 800e850:	84000044 	addi	r16,r16,1
 800e854:	80800003 	ldbu	r2,0(r16)
 800e858:	9087883a 	add	r3,r18,r2
 800e85c:	18c00003 	ldbu	r3,0(r3)
 800e860:	183ffb1e 	bne	r3,zero,800e850 <__gethex+0xb0>
 800e864:	d8000015 	stw	zero,0(sp)
 800e868:	00c00b84 	movi	r3,46
 800e86c:	10c0f226 	beq	r2,r3,800ec38 <__gethex+0x498>
 800e870:	80800003 	ldbu	r2,0(r16)
 800e874:	20014426 	beq	r4,zero,800ed88 <__gethex+0x5e8>
 800e878:	8109c83a 	sub	r4,r16,r4
 800e87c:	2109883a 	add	r4,r4,r4
 800e880:	2109883a 	add	r4,r4,r4
 800e884:	0129c83a 	sub	r20,zero,r4
 800e888:	00c01404 	movi	r3,80
 800e88c:	10c01e26 	beq	r2,r3,800e908 <__gethex+0x168>
 800e890:	00c01c04 	movi	r3,112
 800e894:	10c01c26 	beq	r2,r3,800e908 <__gethex+0x168>
 800e898:	d8c00017 	ldw	r3,0(sp)
 800e89c:	802d883a 	mov	r22,r16
 800e8a0:	ad800015 	stw	r22,0(r21)
 800e8a4:	18004026 	beq	r3,zero,800e9a8 <__gethex+0x208>
 800e8a8:	e001061e 	bne	fp,zero,800ecc4 <__gethex+0x524>
 800e8ac:	04000184 	movi	r16,6
 800e8b0:	8005883a 	mov	r2,r16
 800e8b4:	dfc00d17 	ldw	ra,52(sp)
 800e8b8:	df000c17 	ldw	fp,48(sp)
 800e8bc:	ddc00b17 	ldw	r23,44(sp)
 800e8c0:	dd800a17 	ldw	r22,40(sp)
 800e8c4:	dd400917 	ldw	r21,36(sp)
 800e8c8:	dd000817 	ldw	r20,32(sp)
 800e8cc:	dcc00717 	ldw	r19,28(sp)
 800e8d0:	dc800617 	ldw	r18,24(sp)
 800e8d4:	dc400517 	ldw	r17,20(sp)
 800e8d8:	dc000417 	ldw	r16,16(sp)
 800e8dc:	dec00e04 	addi	sp,sp,56
 800e8e0:	f800283a 	ret
 800e8e4:	00800b84 	movi	r2,46
 800e8e8:	1880d626 	beq	r3,r2,800ec44 <__gethex+0x4a4>
 800e8ec:	98800003 	ldbu	r2,0(r19)
 800e8f0:	00c00044 	movi	r3,1
 800e8f4:	d8c00015 	stw	r3,0(sp)
 800e8f8:	00c01404 	movi	r3,80
 800e8fc:	9821883a 	mov	r16,r19
 800e900:	0029883a 	mov	r20,zero
 800e904:	10ffe21e 	bne	r2,r3,800e890 <__gethex+0xf0>
 800e908:	80800043 	ldbu	r2,1(r16)
 800e90c:	00c00ac4 	movi	r3,43
 800e910:	10c0f326 	beq	r2,r3,800ece0 <__gethex+0x540>
 800e914:	00c00b44 	movi	r3,45
 800e918:	10c0ec26 	beq	r2,r3,800eccc <__gethex+0x52c>
 800e91c:	80c00044 	addi	r3,r16,1
 800e920:	d8000315 	stw	zero,12(sp)
 800e924:	9085883a 	add	r2,r18,r2
 800e928:	11000003 	ldbu	r4,0(r2)
 800e92c:	203fda26 	beq	r4,zero,800e898 <__gethex+0xf8>
 800e930:	01800644 	movi	r6,25
 800e934:	313fd816 	blt	r6,r4,800e898 <__gethex+0xf8>
 800e938:	18800043 	ldbu	r2,1(r3)
 800e93c:	014200b4 	movhi	r5,2050
 800e940:	29609104 	addi	r5,r5,-32188
 800e944:	213ffc04 	addi	r4,r4,-16
 800e948:	2885883a 	add	r2,r5,r2
 800e94c:	15c00003 	ldbu	r23,0(r2)
 800e950:	1d800044 	addi	r22,r3,1
 800e954:	b8000d26 	beq	r23,zero,800e98c <__gethex+0x1ec>
 800e958:	35c0030e 	bge	r6,r23,800e968 <__gethex+0x1c8>
 800e95c:	00000b06 	br	800e98c <__gethex+0x1ec>
 800e960:	00800644 	movi	r2,25
 800e964:	15c00916 	blt	r2,r23,800e98c <__gethex+0x1ec>
 800e968:	01400284 	movi	r5,10
 800e96c:	8001a6c0 	call	8001a6c <__mulsi3>
 800e970:	b5800044 	addi	r22,r22,1
 800e974:	b1400003 	ldbu	r5,0(r22)
 800e978:	15c5883a 	add	r2,r2,r23
 800e97c:	113ffc04 	addi	r4,r2,-16
 800e980:	914b883a 	add	r5,r18,r5
 800e984:	2dc00003 	ldbu	r23,0(r5)
 800e988:	b83ff51e 	bne	r23,zero,800e960 <__gethex+0x1c0>
 800e98c:	d8c00317 	ldw	r3,12(sp)
 800e990:	18000126 	beq	r3,zero,800e998 <__gethex+0x1f8>
 800e994:	0109c83a 	sub	r4,zero,r4
 800e998:	d8c00017 	ldw	r3,0(sp)
 800e99c:	ad800015 	stw	r22,0(r21)
 800e9a0:	a129883a 	add	r20,r20,r4
 800e9a4:	183fc01e 	bne	r3,zero,800e8a8 <__gethex+0x108>
 800e9a8:	84c5c83a 	sub	r2,r16,r19
 800e9ac:	10bfffc4 	addi	r2,r2,-1
 800e9b0:	00c001c4 	movi	r3,7
 800e9b4:	000b883a 	mov	r5,zero
 800e9b8:	1880030e 	bge	r3,r2,800e9c8 <__gethex+0x228>
 800e9bc:	1005d07a 	srai	r2,r2,1
 800e9c0:	29400044 	addi	r5,r5,1
 800e9c4:	18bffd16 	blt	r3,r2,800e9bc <__gethex+0x21c>
 800e9c8:	d9000117 	ldw	r4,4(sp)
 800e9cc:	800a38c0 	call	800a38c <_Balloc>
 800e9d0:	102d883a 	mov	r22,r2
 800e9d4:	15400504 	addi	r21,r2,20
 800e9d8:	9c001b2e 	bgeu	r19,r16,800ea48 <__gethex+0x2a8>
 800e9dc:	843fffc4 	addi	r16,r16,-1
 800e9e0:	98bfffc4 	addi	r2,r19,-1
 800e9e4:	a80b883a 	mov	r5,r21
 800e9e8:	0009883a 	mov	r4,zero
 800e9ec:	0007883a 	mov	r3,zero
 800e9f0:	02800b84 	movi	r10,46
 800e9f4:	02c00804 	movi	r11,32
 800e9f8:	00000806 	br	800ea1c <__gethex+0x27c>
 800e9fc:	18c00104 	addi	r3,r3,4
 800ea00:	918d883a 	add	r6,r18,r6
 800ea04:	32400003 	ldbu	r9,0(r6)
 800ea08:	4a4003cc 	andi	r9,r9,15
 800ea0c:	49ce983a 	sll	r7,r9,r7
 800ea10:	21c8b03a 	or	r4,r4,r7
 800ea14:	843fffc4 	addi	r16,r16,-1
 800ea18:	80800d26 	beq	r16,r2,800ea50 <__gethex+0x2b0>
 800ea1c:	81800003 	ldbu	r6,0(r16)
 800ea20:	180f883a 	mov	r7,r3
 800ea24:	32bffb26 	beq	r6,r10,800ea14 <__gethex+0x274>
 800ea28:	1afff41e 	bne	r3,r11,800e9fc <__gethex+0x25c>
 800ea2c:	29000015 	stw	r4,0(r5)
 800ea30:	81800003 	ldbu	r6,0(r16)
 800ea34:	0009883a 	mov	r4,zero
 800ea38:	000f883a 	mov	r7,zero
 800ea3c:	29400104 	addi	r5,r5,4
 800ea40:	00c00104 	movi	r3,4
 800ea44:	003fee06 	br	800ea00 <__gethex+0x260>
 800ea48:	a80b883a 	mov	r5,r21
 800ea4c:	0009883a 	mov	r4,zero
 800ea50:	28c00104 	addi	r3,r5,4
 800ea54:	1d47c83a 	sub	r3,r3,r21
 800ea58:	1807d0ba 	srai	r3,r3,2
 800ea5c:	29000015 	stw	r4,0(r5)
 800ea60:	1820917a 	slli	r16,r3,5
 800ea64:	b0c00415 	stw	r3,16(r22)
 800ea68:	800a6a40 	call	800a6a4 <__hi0bits>
 800ea6c:	8dc00017 	ldw	r23,0(r17)
 800ea70:	8085c83a 	sub	r2,r16,r2
 800ea74:	b8809c16 	blt	r23,r2,800ece8 <__gethex+0x548>
 800ea78:	15c0b716 	blt	r2,r23,800ed58 <__gethex+0x5b8>
 800ea7c:	0039883a 	mov	fp,zero
 800ea80:	88c00217 	ldw	r3,8(r17)
 800ea84:	1d006516 	blt	r3,r20,800ec1c <__gethex+0x47c>
 800ea88:	88800117 	ldw	r2,4(r17)
 800ea8c:	a080830e 	bge	r20,r2,800ec9c <__gethex+0x4fc>
 800ea90:	1529c83a 	sub	r20,r2,r20
 800ea94:	a5c01016 	blt	r20,r23,800ead8 <__gethex+0x338>
 800ea98:	88c00317 	ldw	r3,12(r17)
 800ea9c:	01000084 	movi	r4,2
 800eaa0:	1900c726 	beq	r3,r4,800edc0 <__gethex+0x620>
 800eaa4:	010000c4 	movi	r4,3
 800eaa8:	1900f026 	beq	r3,r4,800ee6c <__gethex+0x6cc>
 800eaac:	01000044 	movi	r4,1
 800eab0:	1900e626 	beq	r3,r4,800ee4c <__gethex+0x6ac>
 800eab4:	d9000117 	ldw	r4,4(sp)
 800eab8:	b00b883a 	mov	r5,r22
 800eabc:	04001404 	movi	r16,80
 800eac0:	800a4340 	call	800a434 <_Bfree>
 800eac4:	d8c00e17 	ldw	r3,56(sp)
 800eac8:	18000015 	stw	zero,0(r3)
 800eacc:	003f7806 	br	800e8b0 <__gethex+0x110>
 800ead0:	800e7100 	call	800e710 <__hexdig_init>
 800ead4:	003f4506 	br	800e7ec <__gethex+0x4c>
 800ead8:	a43fffc4 	addi	r16,r20,-1
 800eadc:	e000b21e 	bne	fp,zero,800eda8 <__gethex+0x608>
 800eae0:	0400040e 	bge	zero,r16,800eaf4 <__gethex+0x354>
 800eae4:	b009883a 	mov	r4,r22
 800eae8:	800b883a 	mov	r5,r16
 800eaec:	800b3580 	call	800b358 <__any_on>
 800eaf0:	1039883a 	mov	fp,r2
 800eaf4:	8005d17a 	srai	r2,r16,5
 800eaf8:	00c00044 	movi	r3,1
 800eafc:	840007cc 	andi	r16,r16,31
 800eb00:	1085883a 	add	r2,r2,r2
 800eb04:	1085883a 	add	r2,r2,r2
 800eb08:	a885883a 	add	r2,r21,r2
 800eb0c:	1c06983a 	sll	r3,r3,r16
 800eb10:	10800017 	ldw	r2,0(r2)
 800eb14:	1884703a 	and	r2,r3,r2
 800eb18:	10000126 	beq	r2,zero,800eb20 <__gethex+0x380>
 800eb1c:	e7000094 	ori	fp,fp,2
 800eb20:	a00b883a 	mov	r5,r20
 800eb24:	b009883a 	mov	r4,r22
 800eb28:	800e6000 	call	800e600 <rshift>
 800eb2c:	bd2fc83a 	sub	r23,r23,r20
 800eb30:	8d000117 	ldw	r20,4(r17)
 800eb34:	04000084 	movi	r16,2
 800eb38:	e0005d26 	beq	fp,zero,800ecb0 <__gethex+0x510>
 800eb3c:	88800317 	ldw	r2,12(r17)
 800eb40:	00c00084 	movi	r3,2
 800eb44:	10c0b026 	beq	r2,r3,800ee08 <__gethex+0x668>
 800eb48:	00c000c4 	movi	r3,3
 800eb4c:	10c05526 	beq	r2,r3,800eca4 <__gethex+0x504>
 800eb50:	00c00044 	movi	r3,1
 800eb54:	10c0551e 	bne	r2,r3,800ecac <__gethex+0x50c>
 800eb58:	e080008c 	andi	r2,fp,2
 800eb5c:	10005326 	beq	r2,zero,800ecac <__gethex+0x50c>
 800eb60:	a8800017 	ldw	r2,0(r21)
 800eb64:	e084b03a 	or	r2,fp,r2
 800eb68:	10c4703a 	and	r2,r2,r3
 800eb6c:	10004f26 	beq	r2,zero,800ecac <__gethex+0x50c>
 800eb70:	b7000417 	ldw	fp,16(r22)
 800eb74:	00ffffc4 	movi	r3,-1
 800eb78:	e1000144 	addi	r4,fp,5
 800eb7c:	2109883a 	add	r4,r4,r4
 800eb80:	2109883a 	add	r4,r4,r4
 800eb84:	b109883a 	add	r4,r22,r4
 800eb88:	a8800017 	ldw	r2,0(r21)
 800eb8c:	10c0ba1e 	bne	r2,r3,800ee78 <__gethex+0x6d8>
 800eb90:	a8000015 	stw	zero,0(r21)
 800eb94:	ad400104 	addi	r21,r21,4
 800eb98:	a93ffb36 	bltu	r21,r4,800eb88 <__gethex+0x3e8>
 800eb9c:	b0800217 	ldw	r2,8(r22)
 800eba0:	e080bd0e 	bge	fp,r2,800ee98 <__gethex+0x6f8>
 800eba4:	e005883a 	mov	r2,fp
 800eba8:	10c00144 	addi	r3,r2,5
 800ebac:	18c7883a 	add	r3,r3,r3
 800ebb0:	18c7883a 	add	r3,r3,r3
 800ebb4:	b0c7883a 	add	r3,r22,r3
 800ebb8:	10800044 	addi	r2,r2,1
 800ebbc:	01000044 	movi	r4,1
 800ebc0:	19000015 	stw	r4,0(r3)
 800ebc4:	b0800415 	stw	r2,16(r22)
 800ebc8:	00800084 	movi	r2,2
 800ebcc:	8080ad26 	beq	r16,r2,800ee84 <__gethex+0x6e4>
 800ebd0:	b0800417 	ldw	r2,16(r22)
 800ebd4:	e0800b16 	blt	fp,r2,800ec04 <__gethex+0x464>
 800ebd8:	bdc007cc 	andi	r23,r23,31
 800ebdc:	b8008626 	beq	r23,zero,800edf8 <__gethex+0x658>
 800ebe0:	e7000104 	addi	fp,fp,4
 800ebe4:	e739883a 	add	fp,fp,fp
 800ebe8:	e739883a 	add	fp,fp,fp
 800ebec:	b705883a 	add	r2,r22,fp
 800ebf0:	11000017 	ldw	r4,0(r2)
 800ebf4:	800a6a40 	call	800a6a4 <__hi0bits>
 800ebf8:	00c00804 	movi	r3,32
 800ebfc:	1defc83a 	sub	r23,r3,r23
 800ec00:	15c07d0e 	bge	r2,r23,800edf8 <__gethex+0x658>
 800ec04:	b009883a 	mov	r4,r22
 800ec08:	01400044 	movi	r5,1
 800ec0c:	800e6000 	call	800e600 <rshift>
 800ec10:	88800217 	ldw	r2,8(r17)
 800ec14:	a5000044 	addi	r20,r20,1
 800ec18:	1500770e 	bge	r2,r20,800edf8 <__gethex+0x658>
 800ec1c:	d9000117 	ldw	r4,4(sp)
 800ec20:	b00b883a 	mov	r5,r22
 800ec24:	040028c4 	movi	r16,163
 800ec28:	800a4340 	call	800a434 <_Bfree>
 800ec2c:	d8800e17 	ldw	r2,56(sp)
 800ec30:	10000015 	stw	zero,0(r2)
 800ec34:	003f1e06 	br	800e8b0 <__gethex+0x110>
 800ec38:	20007826 	beq	r4,zero,800ee1c <__gethex+0x67c>
 800ec3c:	80800003 	ldbu	r2,0(r16)
 800ec40:	003f0d06 	br	800e878 <__gethex+0xd8>
 800ec44:	98800043 	ldbu	r2,1(r19)
 800ec48:	9c000044 	addi	r16,r19,1
 800ec4c:	288b883a 	add	r5,r5,r2
 800ec50:	28c00003 	ldbu	r3,0(r5)
 800ec54:	18005026 	beq	r3,zero,800ed98 <__gethex+0x5f8>
 800ec58:	00c00c04 	movi	r3,48
 800ec5c:	10c0541e 	bne	r2,r3,800edb0 <__gethex+0x610>
 800ec60:	800d883a 	mov	r6,r16
 800ec64:	1007883a 	mov	r3,r2
 800ec68:	31800044 	addi	r6,r6,1
 800ec6c:	30800003 	ldbu	r2,0(r6)
 800ec70:	10fffd26 	beq	r2,r3,800ec68 <__gethex+0x4c8>
 800ec74:	9087883a 	add	r3,r18,r2
 800ec78:	18c00003 	ldbu	r3,0(r3)
 800ec7c:	3027883a 	mov	r19,r6
 800ec80:	18004c1e 	bne	r3,zero,800edb4 <__gethex+0x614>
 800ec84:	00c00044 	movi	r3,1
 800ec88:	8009883a 	mov	r4,r16
 800ec8c:	d8c00015 	stw	r3,0(sp)
 800ec90:	1839883a 	mov	fp,r3
 800ec94:	3021883a 	mov	r16,r6
 800ec98:	003ef306 	br	800e868 <__gethex+0xc8>
 800ec9c:	04000044 	movi	r16,1
 800eca0:	003fa506 	br	800eb38 <__gethex+0x398>
 800eca4:	d8800f17 	ldw	r2,60(sp)
 800eca8:	103fb11e 	bne	r2,zero,800eb70 <__gethex+0x3d0>
 800ecac:	84000414 	ori	r16,r16,16
 800ecb0:	d8800e17 	ldw	r2,56(sp)
 800ecb4:	d8c00217 	ldw	r3,8(sp)
 800ecb8:	15800015 	stw	r22,0(r2)
 800ecbc:	1d000015 	stw	r20,0(r3)
 800ecc0:	003efb06 	br	800e8b0 <__gethex+0x110>
 800ecc4:	0021883a 	mov	r16,zero
 800ecc8:	003ef906 	br	800e8b0 <__gethex+0x110>
 800eccc:	00c00044 	movi	r3,1
 800ecd0:	d8c00315 	stw	r3,12(sp)
 800ecd4:	80800083 	ldbu	r2,2(r16)
 800ecd8:	80c00084 	addi	r3,r16,2
 800ecdc:	003f1106 	br	800e924 <__gethex+0x184>
 800ece0:	d8000315 	stw	zero,12(sp)
 800ece4:	003ffb06 	br	800ecd4 <__gethex+0x534>
 800ece8:	15e1c83a 	sub	r16,r2,r23
 800ecec:	b009883a 	mov	r4,r22
 800ecf0:	800b883a 	mov	r5,r16
 800ecf4:	800b3580 	call	800b358 <__any_on>
 800ecf8:	10002526 	beq	r2,zero,800ed90 <__gethex+0x5f0>
 800ecfc:	80bfffc4 	addi	r2,r16,-1
 800ed00:	1007d17a 	srai	r3,r2,5
 800ed04:	110007cc 	andi	r4,r2,31
 800ed08:	07000044 	movi	fp,1
 800ed0c:	18c00144 	addi	r3,r3,5
 800ed10:	18c7883a 	add	r3,r3,r3
 800ed14:	18c7883a 	add	r3,r3,r3
 800ed18:	b0c7883a 	add	r3,r22,r3
 800ed1c:	e108983a 	sll	r4,fp,r4
 800ed20:	18c00017 	ldw	r3,0(r3)
 800ed24:	20c6703a 	and	r3,r4,r3
 800ed28:	18000626 	beq	r3,zero,800ed44 <__gethex+0x5a4>
 800ed2c:	e080340e 	bge	fp,r2,800ee00 <__gethex+0x660>
 800ed30:	b009883a 	mov	r4,r22
 800ed34:	817fff84 	addi	r5,r16,-2
 800ed38:	800b3580 	call	800b358 <__any_on>
 800ed3c:	10003026 	beq	r2,zero,800ee00 <__gethex+0x660>
 800ed40:	070000c4 	movi	fp,3
 800ed44:	b009883a 	mov	r4,r22
 800ed48:	800b883a 	mov	r5,r16
 800ed4c:	800e6000 	call	800e600 <rshift>
 800ed50:	a429883a 	add	r20,r20,r16
 800ed54:	003f4a06 	br	800ea80 <__gethex+0x2e0>
 800ed58:	d9000117 	ldw	r4,4(sp)
 800ed5c:	b8a1c83a 	sub	r16,r23,r2
 800ed60:	b00b883a 	mov	r5,r22
 800ed64:	800d883a 	mov	r6,r16
 800ed68:	800ab7c0 	call	800ab7c <__lshift>
 800ed6c:	102d883a 	mov	r22,r2
 800ed70:	a429c83a 	sub	r20,r20,r16
 800ed74:	15400504 	addi	r21,r2,20
 800ed78:	0039883a 	mov	fp,zero
 800ed7c:	003f4006 	br	800ea80 <__gethex+0x2e0>
 800ed80:	0039883a 	mov	fp,zero
 800ed84:	003ea706 	br	800e824 <__gethex+0x84>
 800ed88:	0029883a 	mov	r20,zero
 800ed8c:	003ebe06 	br	800e888 <__gethex+0xe8>
 800ed90:	0039883a 	mov	fp,zero
 800ed94:	003feb06 	br	800ed44 <__gethex+0x5a4>
 800ed98:	00c00044 	movi	r3,1
 800ed9c:	0029883a 	mov	r20,zero
 800eda0:	d8c00015 	stw	r3,0(sp)
 800eda4:	003eb806 	br	800e888 <__gethex+0xe8>
 800eda8:	07000044 	movi	fp,1
 800edac:	003f5106 	br	800eaf4 <__gethex+0x354>
 800edb0:	8027883a 	mov	r19,r16
 800edb4:	8009883a 	mov	r4,r16
 800edb8:	07000044 	movi	fp,1
 800edbc:	003ea306 	br	800e84c <__gethex+0xac>
 800edc0:	d8c00f17 	ldw	r3,60(sp)
 800edc4:	183f3b1e 	bne	r3,zero,800eab4 <__gethex+0x314>
 800edc8:	d8c00217 	ldw	r3,8(sp)
 800edcc:	04001884 	movi	r16,98
 800edd0:	18800015 	stw	r2,0(r3)
 800edd4:	00800044 	movi	r2,1
 800edd8:	b0800415 	stw	r2,16(r22)
 800eddc:	a8800015 	stw	r2,0(r21)
 800ede0:	d8800e17 	ldw	r2,56(sp)
 800ede4:	15800015 	stw	r22,0(r2)
 800ede8:	003eb106 	br	800e8b0 <__gethex+0x110>
 800edec:	9821883a 	mov	r16,r19
 800edf0:	d8000015 	stw	zero,0(sp)
 800edf4:	003e9c06 	br	800e868 <__gethex+0xc8>
 800edf8:	04000844 	movi	r16,33
 800edfc:	003fac06 	br	800ecb0 <__gethex+0x510>
 800ee00:	07000084 	movi	fp,2
 800ee04:	003fcf06 	br	800ed44 <__gethex+0x5a4>
 800ee08:	d8c00f17 	ldw	r3,60(sp)
 800ee0c:	00800044 	movi	r2,1
 800ee10:	10c5c83a 	sub	r2,r2,r3
 800ee14:	103fa526 	beq	r2,zero,800ecac <__gethex+0x50c>
 800ee18:	003f5506 	br	800eb70 <__gethex+0x3d0>
 800ee1c:	80800043 	ldbu	r2,1(r16)
 800ee20:	81000044 	addi	r4,r16,1
 800ee24:	2021883a 	mov	r16,r4
 800ee28:	9087883a 	add	r3,r18,r2
 800ee2c:	18c00003 	ldbu	r3,0(r3)
 800ee30:	183e9026 	beq	r3,zero,800e874 <__gethex+0xd4>
 800ee34:	84000044 	addi	r16,r16,1
 800ee38:	80800003 	ldbu	r2,0(r16)
 800ee3c:	9087883a 	add	r3,r18,r2
 800ee40:	18c00003 	ldbu	r3,0(r3)
 800ee44:	183ffb1e 	bne	r3,zero,800ee34 <__gethex+0x694>
 800ee48:	003e8a06 	br	800e874 <__gethex+0xd4>
 800ee4c:	a5ff191e 	bne	r20,r23,800eab4 <__gethex+0x314>
 800ee50:	1dffdd0e 	bge	r3,r23,800edc8 <__gethex+0x628>
 800ee54:	b009883a 	mov	r4,r22
 800ee58:	b97fffc4 	addi	r5,r23,-1
 800ee5c:	800b3580 	call	800b358 <__any_on>
 800ee60:	103f1426 	beq	r2,zero,800eab4 <__gethex+0x314>
 800ee64:	88800117 	ldw	r2,4(r17)
 800ee68:	003fd706 	br	800edc8 <__gethex+0x628>
 800ee6c:	d8c00f17 	ldw	r3,60(sp)
 800ee70:	183f1026 	beq	r3,zero,800eab4 <__gethex+0x314>
 800ee74:	003fd406 	br	800edc8 <__gethex+0x628>
 800ee78:	10800044 	addi	r2,r2,1
 800ee7c:	a8800015 	stw	r2,0(r21)
 800ee80:	003f5106 	br	800ebc8 <__gethex+0x428>
 800ee84:	88800017 	ldw	r2,0(r17)
 800ee88:	10bfffc4 	addi	r2,r2,-1
 800ee8c:	15c01426 	beq	r2,r23,800eee0 <__gethex+0x740>
 800ee90:	04000884 	movi	r16,34
 800ee94:	003f8606 	br	800ecb0 <__gethex+0x510>
 800ee98:	b1400117 	ldw	r5,4(r22)
 800ee9c:	d9000117 	ldw	r4,4(sp)
 800eea0:	29400044 	addi	r5,r5,1
 800eea4:	800a38c0 	call	800a38c <_Balloc>
 800eea8:	b1800417 	ldw	r6,16(r22)
 800eeac:	b1400304 	addi	r5,r22,12
 800eeb0:	11000304 	addi	r4,r2,12
 800eeb4:	31800084 	addi	r6,r6,2
 800eeb8:	318d883a 	add	r6,r6,r6
 800eebc:	318d883a 	add	r6,r6,r6
 800eec0:	102b883a 	mov	r21,r2
 800eec4:	8003eb00 	call	8003eb0 <memcpy>
 800eec8:	d9000117 	ldw	r4,4(sp)
 800eecc:	b00b883a 	mov	r5,r22
 800eed0:	a82d883a 	mov	r22,r21
 800eed4:	800a4340 	call	800a434 <_Bfree>
 800eed8:	a8800417 	ldw	r2,16(r21)
 800eedc:	003f3206 	br	800eba8 <__gethex+0x408>
 800eee0:	b805d17a 	srai	r2,r23,5
 800eee4:	04000044 	movi	r16,1
 800eee8:	bdc007cc 	andi	r23,r23,31
 800eeec:	10800144 	addi	r2,r2,5
 800eef0:	1085883a 	add	r2,r2,r2
 800eef4:	1085883a 	add	r2,r2,r2
 800eef8:	b085883a 	add	r2,r22,r2
 800eefc:	10800017 	ldw	r2,0(r2)
 800ef00:	85e0983a 	sll	r16,r16,r23
 800ef04:	80a0703a 	and	r16,r16,r2
 800ef08:	8020c03a 	cmpne	r16,r16,zero
 800ef0c:	00800884 	movi	r2,34
 800ef10:	1421c83a 	sub	r16,r2,r16
 800ef14:	003f6606 	br	800ecb0 <__gethex+0x510>

0800ef18 <__hexnan>:
 800ef18:	defff604 	addi	sp,sp,-40
 800ef1c:	dc000315 	stw	r16,12(sp)
 800ef20:	040200b4 	movhi	r16,2050
 800ef24:	84209104 	addi	r16,r16,-32188
 800ef28:	80800c03 	ldbu	r2,48(r16)
 800ef2c:	dfc00915 	stw	ra,36(sp)
 800ef30:	dd400815 	stw	r21,32(sp)
 800ef34:	dd000715 	stw	r20,28(sp)
 800ef38:	dcc00615 	stw	r19,24(sp)
 800ef3c:	dc800515 	stw	r18,20(sp)
 800ef40:	dc400415 	stw	r17,16(sp)
 800ef44:	10006c26 	beq	r2,zero,800f0f8 <__hexnan+0x1e0>
 800ef48:	2d000017 	ldw	r20,0(r5)
 800ef4c:	a025d17a 	srai	r18,r20,5
 800ef50:	a50007cc 	andi	r20,r20,31
 800ef54:	94a5883a 	add	r18,r18,r18
 800ef58:	94a5883a 	add	r18,r18,r18
 800ef5c:	34a5883a 	add	r18,r6,r18
 800ef60:	a0000126 	beq	r20,zero,800ef68 <__hexnan+0x50>
 800ef64:	94800104 	addi	r18,r18,4
 800ef68:	20c00017 	ldw	r3,0(r4)
 800ef6c:	903fff15 	stw	zero,-4(r18)
 800ef70:	947fff04 	addi	r17,r18,-4
 800ef74:	18800043 	ldbu	r2,1(r3)
 800ef78:	8817883a 	mov	r11,r17
 800ef7c:	880b883a 	mov	r5,r17
 800ef80:	0011883a 	mov	r8,zero
 800ef84:	001b883a 	mov	r13,zero
 800ef88:	0015883a 	mov	r10,zero
 800ef8c:	03c00204 	movi	r15,8
 800ef90:	03800804 	movi	r14,32
 800ef94:	04c001c4 	movi	r19,7
 800ef98:	10001b26 	beq	r2,zero,800f008 <__hexnan+0xf0>
 800ef9c:	808f883a 	add	r7,r16,r2
 800efa0:	39c00003 	ldbu	r7,0(r7)
 800efa4:	3a403fcc 	andi	r9,r7,255
 800efa8:	4800301e 	bne	r9,zero,800f06c <__hexnan+0x154>
 800efac:	70804636 	bltu	r14,r2,800f0c8 <__hexnan+0x1b0>
 800efb0:	6a80120e 	bge	r13,r10,800effc <__hexnan+0xe4>
 800efb4:	2ac00f2e 	bgeu	r5,r11,800eff4 <__hexnan+0xdc>
 800efb8:	9a000e16 	blt	r19,r8,800eff4 <__hexnan+0xdc>
 800efbc:	7a11c83a 	sub	r8,r15,r8
 800efc0:	4211883a 	add	r8,r8,r8
 800efc4:	29c00017 	ldw	r7,0(r5)
 800efc8:	4211883a 	add	r8,r8,r8
 800efcc:	722bc83a 	sub	r21,r14,r8
 800efd0:	2805883a 	mov	r2,r5
 800efd4:	12400117 	ldw	r9,4(r2)
 800efd8:	10800104 	addi	r2,r2,4
 800efdc:	4d58983a 	sll	r12,r9,r21
 800efe0:	3b18b03a 	or	r12,r7,r12
 800efe4:	4a0ed83a 	srl	r7,r9,r8
 800efe8:	133fff15 	stw	r12,-4(r2)
 800efec:	11c00015 	stw	r7,0(r2)
 800eff0:	12fff836 	bltu	r2,r11,800efd4 <__hexnan+0xbc>
 800eff4:	31402d36 	bltu	r6,r5,800f0ac <__hexnan+0x194>
 800eff8:	02000204 	movi	r8,8
 800effc:	18c00044 	addi	r3,r3,1
 800f000:	18800043 	ldbu	r2,1(r3)
 800f004:	103fe51e 	bne	r2,zero,800ef9c <__hexnan+0x84>
 800f008:	50003126 	beq	r10,zero,800f0d0 <__hexnan+0x1b8>
 800f00c:	2ac0022e 	bgeu	r5,r11,800f018 <__hexnan+0x100>
 800f010:	008001c4 	movi	r2,7
 800f014:	1200520e 	bge	r2,r8,800f160 <__hexnan+0x248>
 800f018:	31403f2e 	bgeu	r6,r5,800f118 <__hexnan+0x200>
 800f01c:	3005883a 	mov	r2,r6
 800f020:	28c00017 	ldw	r3,0(r5)
 800f024:	10800104 	addi	r2,r2,4
 800f028:	29400104 	addi	r5,r5,4
 800f02c:	10ffff15 	stw	r3,-4(r2)
 800f030:	897ffb2e 	bgeu	r17,r5,800f020 <__hexnan+0x108>
 800f034:	10000015 	stw	zero,0(r2)
 800f038:	10800104 	addi	r2,r2,4
 800f03c:	88bffd2e 	bgeu	r17,r2,800f034 <__hexnan+0x11c>
 800f040:	90bfff17 	ldw	r2,-4(r18)
 800f044:	1000071e 	bne	r2,zero,800f064 <__hexnan+0x14c>
 800f048:	34403c26 	beq	r6,r17,800f13c <__hexnan+0x224>
 800f04c:	8805883a 	mov	r2,r17
 800f050:	00000106 	br	800f058 <__hexnan+0x140>
 800f054:	30803a26 	beq	r6,r2,800f140 <__hexnan+0x228>
 800f058:	10bfff04 	addi	r2,r2,-4
 800f05c:	10c00017 	ldw	r3,0(r2)
 800f060:	183ffc26 	beq	r3,zero,800f054 <__hexnan+0x13c>
 800f064:	00800144 	movi	r2,5
 800f068:	00001a06 	br	800f0d4 <__hexnan+0x1bc>
 800f06c:	42000044 	addi	r8,r8,1
 800f070:	52800044 	addi	r10,r10,1
 800f074:	7a000716 	blt	r15,r8,800f094 <__hexnan+0x17c>
 800f078:	28800017 	ldw	r2,0(r5)
 800f07c:	1004913a 	slli	r2,r2,4
 800f080:	39c003cc 	andi	r7,r7,15
 800f084:	11ceb03a 	or	r7,r2,r7
 800f088:	29c00015 	stw	r7,0(r5)
 800f08c:	18c00044 	addi	r3,r3,1
 800f090:	003fdb06 	br	800f000 <__hexnan+0xe8>
 800f094:	317fd92e 	bgeu	r6,r5,800effc <__hexnan+0xe4>
 800f098:	283fff15 	stw	zero,-4(r5)
 800f09c:	0005883a 	mov	r2,zero
 800f0a0:	297fff04 	addi	r5,r5,-4
 800f0a4:	02000044 	movi	r8,1
 800f0a8:	003ff506 	br	800f080 <__hexnan+0x168>
 800f0ac:	283fff15 	stw	zero,-4(r5)
 800f0b0:	297fff04 	addi	r5,r5,-4
 800f0b4:	501b883a 	mov	r13,r10
 800f0b8:	2817883a 	mov	r11,r5
 800f0bc:	0011883a 	mov	r8,zero
 800f0c0:	18c00044 	addi	r3,r3,1
 800f0c4:	003fce06 	br	800f000 <__hexnan+0xe8>
 800f0c8:	01c00a44 	movi	r7,41
 800f0cc:	11c02026 	beq	r2,r7,800f150 <__hexnan+0x238>
 800f0d0:	00800104 	movi	r2,4
 800f0d4:	dfc00917 	ldw	ra,36(sp)
 800f0d8:	dd400817 	ldw	r21,32(sp)
 800f0dc:	dd000717 	ldw	r20,28(sp)
 800f0e0:	dcc00617 	ldw	r19,24(sp)
 800f0e4:	dc800517 	ldw	r18,20(sp)
 800f0e8:	dc400417 	ldw	r17,16(sp)
 800f0ec:	dc000317 	ldw	r16,12(sp)
 800f0f0:	dec00a04 	addi	sp,sp,40
 800f0f4:	f800283a 	ret
 800f0f8:	d9000015 	stw	r4,0(sp)
 800f0fc:	d9400115 	stw	r5,4(sp)
 800f100:	d9800215 	stw	r6,8(sp)
 800f104:	800e7100 	call	800e710 <__hexdig_init>
 800f108:	d9800217 	ldw	r6,8(sp)
 800f10c:	d9400117 	ldw	r5,4(sp)
 800f110:	d9000017 	ldw	r4,0(sp)
 800f114:	003f8c06 	br	800ef48 <__hexnan+0x30>
 800f118:	a03fc926 	beq	r20,zero,800f040 <__hexnan+0x128>
 800f11c:	00800804 	movi	r2,32
 800f120:	1529c83a 	sub	r20,r2,r20
 800f124:	00ffffc4 	movi	r3,-1
 800f128:	90bfff17 	ldw	r2,-4(r18)
 800f12c:	1d06d83a 	srl	r3,r3,r20
 800f130:	1884703a 	and	r2,r3,r2
 800f134:	90bfff15 	stw	r2,-4(r18)
 800f138:	003fc206 	br	800f044 <__hexnan+0x12c>
 800f13c:	3005883a 	mov	r2,r6
 800f140:	00c00044 	movi	r3,1
 800f144:	10c00015 	stw	r3,0(r2)
 800f148:	00800144 	movi	r2,5
 800f14c:	003fe106 	br	800f0d4 <__hexnan+0x1bc>
 800f150:	503fdf26 	beq	r10,zero,800f0d0 <__hexnan+0x1b8>
 800f154:	18c00084 	addi	r3,r3,2
 800f158:	20c00015 	stw	r3,0(r4)
 800f15c:	003fab06 	br	800f00c <__hexnan+0xf4>
 800f160:	00800204 	movi	r2,8
 800f164:	1211c83a 	sub	r8,r2,r8
 800f168:	4211883a 	add	r8,r8,r8
 800f16c:	28c00017 	ldw	r3,0(r5)
 800f170:	4211883a 	add	r8,r8,r8
 800f174:	02400804 	movi	r9,32
 800f178:	4a13c83a 	sub	r9,r9,r8
 800f17c:	2805883a 	mov	r2,r5
 800f180:	11000117 	ldw	r4,4(r2)
 800f184:	10800104 	addi	r2,r2,4
 800f188:	224e983a 	sll	r7,r4,r9
 800f18c:	19ceb03a 	or	r7,r3,r7
 800f190:	2206d83a 	srl	r3,r4,r8
 800f194:	11ffff15 	stw	r7,-4(r2)
 800f198:	10c00015 	stw	r3,0(r2)
 800f19c:	12fff836 	bltu	r2,r11,800f180 <__hexnan+0x268>
 800f1a0:	003f9d06 	br	800f018 <__hexnan+0x100>

0800f1a4 <__muldi3>:
 800f1a4:	defff604 	addi	sp,sp,-40
 800f1a8:	dd400515 	stw	r21,20(sp)
 800f1ac:	dd000415 	stw	r20,16(sp)
 800f1b0:	257fffcc 	andi	r21,r4,65535
 800f1b4:	353fffcc 	andi	r20,r6,65535
 800f1b8:	dcc00315 	stw	r19,12(sp)
 800f1bc:	3026d43a 	srli	r19,r6,16
 800f1c0:	dd800615 	stw	r22,24(sp)
 800f1c4:	dc800215 	stw	r18,8(sp)
 800f1c8:	dc400115 	stw	r17,4(sp)
 800f1cc:	2024d43a 	srli	r18,r4,16
 800f1d0:	2023883a 	mov	r17,r4
 800f1d4:	282d883a 	mov	r22,r5
 800f1d8:	a009883a 	mov	r4,r20
 800f1dc:	a80b883a 	mov	r5,r21
 800f1e0:	dfc00915 	stw	ra,36(sp)
 800f1e4:	df000815 	stw	fp,32(sp)
 800f1e8:	ddc00715 	stw	r23,28(sp)
 800f1ec:	3839883a 	mov	fp,r7
 800f1f0:	dc000015 	stw	r16,0(sp)
 800f1f4:	3021883a 	mov	r16,r6
 800f1f8:	8001a6c0 	call	8001a6c <__mulsi3>
 800f1fc:	a80b883a 	mov	r5,r21
 800f200:	9809883a 	mov	r4,r19
 800f204:	102f883a 	mov	r23,r2
 800f208:	8001a6c0 	call	8001a6c <__mulsi3>
 800f20c:	a009883a 	mov	r4,r20
 800f210:	900b883a 	mov	r5,r18
 800f214:	102b883a 	mov	r21,r2
 800f218:	8001a6c0 	call	8001a6c <__mulsi3>
 800f21c:	9809883a 	mov	r4,r19
 800f220:	900b883a 	mov	r5,r18
 800f224:	1029883a 	mov	r20,r2
 800f228:	8001a6c0 	call	8001a6c <__mulsi3>
 800f22c:	1007883a 	mov	r3,r2
 800f230:	b804d43a 	srli	r2,r23,16
 800f234:	a549883a 	add	r4,r20,r21
 800f238:	2089883a 	add	r4,r4,r2
 800f23c:	2500022e 	bgeu	r4,r20,800f248 <__muldi3+0xa4>
 800f240:	00800074 	movhi	r2,1
 800f244:	1887883a 	add	r3,r3,r2
 800f248:	200cd43a 	srli	r6,r4,16
 800f24c:	2004943a 	slli	r2,r4,16
 800f250:	e00b883a 	mov	r5,fp
 800f254:	8809883a 	mov	r4,r17
 800f258:	bdffffcc 	andi	r23,r23,65535
 800f25c:	19a3883a 	add	r17,r3,r6
 800f260:	15ef883a 	add	r23,r2,r23
 800f264:	8001a6c0 	call	8001a6c <__mulsi3>
 800f268:	8009883a 	mov	r4,r16
 800f26c:	b00b883a 	mov	r5,r22
 800f270:	1025883a 	mov	r18,r2
 800f274:	8001a6c0 	call	8001a6c <__mulsi3>
 800f278:	9085883a 	add	r2,r18,r2
 800f27c:	1447883a 	add	r3,r2,r17
 800f280:	b805883a 	mov	r2,r23
 800f284:	dfc00917 	ldw	ra,36(sp)
 800f288:	df000817 	ldw	fp,32(sp)
 800f28c:	ddc00717 	ldw	r23,28(sp)
 800f290:	dd800617 	ldw	r22,24(sp)
 800f294:	dd400517 	ldw	r21,20(sp)
 800f298:	dd000417 	ldw	r20,16(sp)
 800f29c:	dcc00317 	ldw	r19,12(sp)
 800f2a0:	dc800217 	ldw	r18,8(sp)
 800f2a4:	dc400117 	ldw	r17,4(sp)
 800f2a8:	dc000017 	ldw	r16,0(sp)
 800f2ac:	dec00a04 	addi	sp,sp,40
 800f2b0:	f800283a 	ret

0800f2b4 <__fixunsdfsi>:
 800f2b4:	defffd04 	addi	sp,sp,-12
 800f2b8:	000d883a 	mov	r6,zero
 800f2bc:	01d07834 	movhi	r7,16864
 800f2c0:	dc400115 	stw	r17,4(sp)
 800f2c4:	dc000015 	stw	r16,0(sp)
 800f2c8:	dfc00215 	stw	ra,8(sp)
 800f2cc:	2023883a 	mov	r17,r4
 800f2d0:	2821883a 	mov	r16,r5
 800f2d4:	80108bc0 	call	80108bc <__gedf2>
 800f2d8:	1000080e 	bge	r2,zero,800f2fc <__fixunsdfsi+0x48>
 800f2dc:	8809883a 	mov	r4,r17
 800f2e0:	800b883a 	mov	r5,r16
 800f2e4:	80109d80 	call	80109d8 <__fixdfsi>
 800f2e8:	dfc00217 	ldw	ra,8(sp)
 800f2ec:	dc400117 	ldw	r17,4(sp)
 800f2f0:	dc000017 	ldw	r16,0(sp)
 800f2f4:	dec00304 	addi	sp,sp,12
 800f2f8:	f800283a 	ret
 800f2fc:	000d883a 	mov	r6,zero
 800f300:	01d07834 	movhi	r7,16864
 800f304:	8809883a 	mov	r4,r17
 800f308:	800b883a 	mov	r5,r16
 800f30c:	801045c0 	call	801045c <__subdf3>
 800f310:	180b883a 	mov	r5,r3
 800f314:	1009883a 	mov	r4,r2
 800f318:	80109d80 	call	80109d8 <__fixdfsi>
 800f31c:	00e00034 	movhi	r3,32768
 800f320:	10c5883a 	add	r2,r2,r3
 800f324:	dfc00217 	ldw	ra,8(sp)
 800f328:	dc400117 	ldw	r17,4(sp)
 800f32c:	dc000017 	ldw	r16,0(sp)
 800f330:	dec00304 	addi	sp,sp,12
 800f334:	f800283a 	ret

0800f338 <__udivdi3>:
 800f338:	defff504 	addi	sp,sp,-44
 800f33c:	dd000515 	stw	r20,20(sp)
 800f340:	dcc00415 	stw	r19,16(sp)
 800f344:	dc800315 	stw	r18,12(sp)
 800f348:	dc400215 	stw	r17,8(sp)
 800f34c:	dc000115 	stw	r16,4(sp)
 800f350:	dfc00a15 	stw	ra,40(sp)
 800f354:	df000915 	stw	fp,36(sp)
 800f358:	ddc00815 	stw	r23,32(sp)
 800f35c:	dd800715 	stw	r22,28(sp)
 800f360:	dd400615 	stw	r21,24(sp)
 800f364:	2025883a 	mov	r18,r4
 800f368:	2823883a 	mov	r17,r5
 800f36c:	3021883a 	mov	r16,r6
 800f370:	2027883a 	mov	r19,r4
 800f374:	2829883a 	mov	r20,r5
 800f378:	3800451e 	bne	r7,zero,800f490 <__udivdi3+0x158>
 800f37c:	2980652e 	bgeu	r5,r6,800f514 <__udivdi3+0x1dc>
 800f380:	00bfffd4 	movui	r2,65535
 800f384:	1180b436 	bltu	r2,r6,800f658 <__udivdi3+0x320>
 800f388:	00803fc4 	movi	r2,255
 800f38c:	11816636 	bltu	r2,r6,800f928 <__udivdi3+0x5f0>
 800f390:	0005883a 	mov	r2,zero
 800f394:	0007883a 	mov	r3,zero
 800f398:	3084d83a 	srl	r2,r6,r2
 800f39c:	01020074 	movhi	r4,2049
 800f3a0:	21117a04 	addi	r4,r4,17896
 800f3a4:	2085883a 	add	r2,r4,r2
 800f3a8:	10800003 	ldbu	r2,0(r2)
 800f3ac:	10c7883a 	add	r3,r2,r3
 800f3b0:	00800804 	movi	r2,32
 800f3b4:	10c5c83a 	sub	r2,r2,r3
 800f3b8:	10000526 	beq	r2,zero,800f3d0 <__udivdi3+0x98>
 800f3bc:	88a2983a 	sll	r17,r17,r2
 800f3c0:	90c6d83a 	srl	r3,r18,r3
 800f3c4:	30a0983a 	sll	r16,r6,r2
 800f3c8:	90a6983a 	sll	r19,r18,r2
 800f3cc:	88e8b03a 	or	r20,r17,r3
 800f3d0:	8022d43a 	srli	r17,r16,16
 800f3d4:	a009883a 	mov	r4,r20
 800f3d8:	857fffcc 	andi	r21,r16,65535
 800f3dc:	880b883a 	mov	r5,r17
 800f3e0:	8010c340 	call	8010c34 <__umodsi3>
 800f3e4:	a009883a 	mov	r4,r20
 800f3e8:	880b883a 	mov	r5,r17
 800f3ec:	102d883a 	mov	r22,r2
 800f3f0:	8010c2c0 	call	8010c2c <__udivsi3>
 800f3f4:	1009883a 	mov	r4,r2
 800f3f8:	a80b883a 	mov	r5,r21
 800f3fc:	1025883a 	mov	r18,r2
 800f400:	8001a6c0 	call	8001a6c <__mulsi3>
 800f404:	1009883a 	mov	r4,r2
 800f408:	b006943a 	slli	r3,r22,16
 800f40c:	9804d43a 	srli	r2,r19,16
 800f410:	1886b03a 	or	r3,r3,r2
 800f414:	1900052e 	bgeu	r3,r4,800f42c <__udivdi3+0xf4>
 800f418:	1c07883a 	add	r3,r3,r16
 800f41c:	90bfffc4 	addi	r2,r18,-1
 800f420:	1c000136 	bltu	r3,r16,800f428 <__udivdi3+0xf0>
 800f424:	19015536 	bltu	r3,r4,800f97c <__udivdi3+0x644>
 800f428:	1025883a 	mov	r18,r2
 800f42c:	1929c83a 	sub	r20,r3,r4
 800f430:	880b883a 	mov	r5,r17
 800f434:	a009883a 	mov	r4,r20
 800f438:	8010c340 	call	8010c34 <__umodsi3>
 800f43c:	102d883a 	mov	r22,r2
 800f440:	880b883a 	mov	r5,r17
 800f444:	a009883a 	mov	r4,r20
 800f448:	b02c943a 	slli	r22,r22,16
 800f44c:	8010c2c0 	call	8010c2c <__udivsi3>
 800f450:	1009883a 	mov	r4,r2
 800f454:	a80b883a 	mov	r5,r21
 800f458:	9cffffcc 	andi	r19,r19,65535
 800f45c:	1023883a 	mov	r17,r2
 800f460:	b4e6b03a 	or	r19,r22,r19
 800f464:	8001a6c0 	call	8001a6c <__mulsi3>
 800f468:	9880052e 	bgeu	r19,r2,800f480 <__udivdi3+0x148>
 800f46c:	9c27883a 	add	r19,r19,r16
 800f470:	88ffffc4 	addi	r3,r17,-1
 800f474:	9c011436 	bltu	r19,r16,800f8c8 <__udivdi3+0x590>
 800f478:	9881132e 	bgeu	r19,r2,800f8c8 <__udivdi3+0x590>
 800f47c:	8c7fff84 	addi	r17,r17,-2
 800f480:	9004943a 	slli	r2,r18,16
 800f484:	0007883a 	mov	r3,zero
 800f488:	8884b03a 	or	r2,r17,r2
 800f48c:	00001506 	br	800f4e4 <__udivdi3+0x1ac>
 800f490:	29c06a36 	bltu	r5,r7,800f63c <__udivdi3+0x304>
 800f494:	00bfffd4 	movui	r2,65535
 800f498:	11c06a2e 	bgeu	r2,r7,800f644 <__udivdi3+0x30c>
 800f49c:	00804034 	movhi	r2,256
 800f4a0:	10bfffc4 	addi	r2,r2,-1
 800f4a4:	11c11436 	bltu	r2,r7,800f8f8 <__udivdi3+0x5c0>
 800f4a8:	00c00404 	movi	r3,16
 800f4ac:	180b883a 	mov	r5,r3
 800f4b0:	38c6d83a 	srl	r3,r7,r3
 800f4b4:	01020074 	movhi	r4,2049
 800f4b8:	21117a04 	addi	r4,r4,17896
 800f4bc:	04000804 	movi	r16,32
 800f4c0:	20c7883a 	add	r3,r4,r3
 800f4c4:	18800003 	ldbu	r2,0(r3)
 800f4c8:	1145883a 	add	r2,r2,r5
 800f4cc:	80a1c83a 	sub	r16,r16,r2
 800f4d0:	80006e1e 	bne	r16,zero,800f68c <__udivdi3+0x354>
 800f4d4:	0007883a 	mov	r3,zero
 800f4d8:	3c406a36 	bltu	r7,r17,800f684 <__udivdi3+0x34c>
 800f4dc:	9180692e 	bgeu	r18,r6,800f684 <__udivdi3+0x34c>
 800f4e0:	0005883a 	mov	r2,zero
 800f4e4:	dfc00a17 	ldw	ra,40(sp)
 800f4e8:	df000917 	ldw	fp,36(sp)
 800f4ec:	ddc00817 	ldw	r23,32(sp)
 800f4f0:	dd800717 	ldw	r22,28(sp)
 800f4f4:	dd400617 	ldw	r21,24(sp)
 800f4f8:	dd000517 	ldw	r20,20(sp)
 800f4fc:	dcc00417 	ldw	r19,16(sp)
 800f500:	dc800317 	ldw	r18,12(sp)
 800f504:	dc400217 	ldw	r17,8(sp)
 800f508:	dc000117 	ldw	r16,4(sp)
 800f50c:	dec00b04 	addi	sp,sp,44
 800f510:	f800283a 	ret
 800f514:	3000041e 	bne	r6,zero,800f528 <__udivdi3+0x1f0>
 800f518:	01000044 	movi	r4,1
 800f51c:	000b883a 	mov	r5,zero
 800f520:	8010c2c0 	call	8010c2c <__udivsi3>
 800f524:	1021883a 	mov	r16,r2
 800f528:	00bfffd4 	movui	r2,65535
 800f52c:	1400502e 	bgeu	r2,r16,800f670 <__udivdi3+0x338>
 800f530:	00804034 	movhi	r2,256
 800f534:	10bfffc4 	addi	r2,r2,-1
 800f538:	1400f536 	bltu	r2,r16,800f910 <__udivdi3+0x5d8>
 800f53c:	00800404 	movi	r2,16
 800f540:	1007883a 	mov	r3,r2
 800f544:	8084d83a 	srl	r2,r16,r2
 800f548:	01020074 	movhi	r4,2049
 800f54c:	21117a04 	addi	r4,r4,17896
 800f550:	2085883a 	add	r2,r4,r2
 800f554:	10800003 	ldbu	r2,0(r2)
 800f558:	10c7883a 	add	r3,r2,r3
 800f55c:	00800804 	movi	r2,32
 800f560:	10c5c83a 	sub	r2,r2,r3
 800f564:	1000a01e 	bne	r2,zero,800f7e8 <__udivdi3+0x4b0>
 800f568:	8028d43a 	srli	r20,r16,16
 800f56c:	8c23c83a 	sub	r17,r17,r16
 800f570:	857fffcc 	andi	r21,r16,65535
 800f574:	00c00044 	movi	r3,1
 800f578:	8809883a 	mov	r4,r17
 800f57c:	a00b883a 	mov	r5,r20
 800f580:	d8c00015 	stw	r3,0(sp)
 800f584:	8010c340 	call	8010c34 <__umodsi3>
 800f588:	8809883a 	mov	r4,r17
 800f58c:	a00b883a 	mov	r5,r20
 800f590:	102d883a 	mov	r22,r2
 800f594:	8010c2c0 	call	8010c2c <__udivsi3>
 800f598:	1009883a 	mov	r4,r2
 800f59c:	a80b883a 	mov	r5,r21
 800f5a0:	1025883a 	mov	r18,r2
 800f5a4:	8001a6c0 	call	8001a6c <__mulsi3>
 800f5a8:	1009883a 	mov	r4,r2
 800f5ac:	b00c943a 	slli	r6,r22,16
 800f5b0:	9804d43a 	srli	r2,r19,16
 800f5b4:	d8c00017 	ldw	r3,0(sp)
 800f5b8:	308cb03a 	or	r6,r6,r2
 800f5bc:	3100052e 	bgeu	r6,r4,800f5d4 <__udivdi3+0x29c>
 800f5c0:	340d883a 	add	r6,r6,r16
 800f5c4:	90bfffc4 	addi	r2,r18,-1
 800f5c8:	34000136 	bltu	r6,r16,800f5d0 <__udivdi3+0x298>
 800f5cc:	3100e836 	bltu	r6,r4,800f970 <__udivdi3+0x638>
 800f5d0:	1025883a 	mov	r18,r2
 800f5d4:	3123c83a 	sub	r17,r6,r4
 800f5d8:	8809883a 	mov	r4,r17
 800f5dc:	a00b883a 	mov	r5,r20
 800f5e0:	d8c00015 	stw	r3,0(sp)
 800f5e4:	8010c340 	call	8010c34 <__umodsi3>
 800f5e8:	102d883a 	mov	r22,r2
 800f5ec:	8809883a 	mov	r4,r17
 800f5f0:	a00b883a 	mov	r5,r20
 800f5f4:	b02c943a 	slli	r22,r22,16
 800f5f8:	8010c2c0 	call	8010c2c <__udivsi3>
 800f5fc:	1009883a 	mov	r4,r2
 800f600:	a80b883a 	mov	r5,r21
 800f604:	9cffffcc 	andi	r19,r19,65535
 800f608:	1023883a 	mov	r17,r2
 800f60c:	b4e6b03a 	or	r19,r22,r19
 800f610:	8001a6c0 	call	8001a6c <__mulsi3>
 800f614:	d8c00017 	ldw	r3,0(sp)
 800f618:	9880052e 	bgeu	r19,r2,800f630 <__udivdi3+0x2f8>
 800f61c:	9c27883a 	add	r19,r19,r16
 800f620:	893fffc4 	addi	r4,r17,-1
 800f624:	9c00aa36 	bltu	r19,r16,800f8d0 <__udivdi3+0x598>
 800f628:	9880a92e 	bgeu	r19,r2,800f8d0 <__udivdi3+0x598>
 800f62c:	8c7fff84 	addi	r17,r17,-2
 800f630:	9004943a 	slli	r2,r18,16
 800f634:	8884b03a 	or	r2,r17,r2
 800f638:	003faa06 	br	800f4e4 <__udivdi3+0x1ac>
 800f63c:	0007883a 	mov	r3,zero
 800f640:	003fa706 	br	800f4e0 <__udivdi3+0x1a8>
 800f644:	00803fc4 	movi	r2,255
 800f648:	11c0ae36 	bltu	r2,r7,800f904 <__udivdi3+0x5cc>
 800f64c:	0007883a 	mov	r3,zero
 800f650:	000b883a 	mov	r5,zero
 800f654:	003f9606 	br	800f4b0 <__udivdi3+0x178>
 800f658:	00804034 	movhi	r2,256
 800f65c:	10bfffc4 	addi	r2,r2,-1
 800f660:	1180ae36 	bltu	r2,r6,800f91c <__udivdi3+0x5e4>
 800f664:	00800404 	movi	r2,16
 800f668:	1007883a 	mov	r3,r2
 800f66c:	003f4a06 	br	800f398 <__udivdi3+0x60>
 800f670:	00803fc4 	movi	r2,255
 800f674:	1400af36 	bltu	r2,r16,800f934 <__udivdi3+0x5fc>
 800f678:	0005883a 	mov	r2,zero
 800f67c:	0007883a 	mov	r3,zero
 800f680:	003fb006 	br	800f544 <__udivdi3+0x20c>
 800f684:	00800044 	movi	r2,1
 800f688:	003f9606 	br	800f4e4 <__udivdi3+0x1ac>
 800f68c:	3c0e983a 	sll	r7,r7,r16
 800f690:	3086d83a 	srl	r3,r6,r2
 800f694:	88aed83a 	srl	r23,r17,r2
 800f698:	9084d83a 	srl	r2,r18,r2
 800f69c:	38e6b03a 	or	r19,r7,r3
 800f6a0:	9828d43a 	srli	r20,r19,16
 800f6a4:	8c22983a 	sll	r17,r17,r16
 800f6a8:	b809883a 	mov	r4,r23
 800f6ac:	a00b883a 	mov	r5,r20
 800f6b0:	342a983a 	sll	r21,r6,r16
 800f6b4:	88a2b03a 	or	r17,r17,r2
 800f6b8:	8010c340 	call	8010c34 <__umodsi3>
 800f6bc:	b809883a 	mov	r4,r23
 800f6c0:	a00b883a 	mov	r5,r20
 800f6c4:	1039883a 	mov	fp,r2
 800f6c8:	9dbfffcc 	andi	r22,r19,65535
 800f6cc:	8010c2c0 	call	8010c2c <__udivsi3>
 800f6d0:	1009883a 	mov	r4,r2
 800f6d4:	b00b883a 	mov	r5,r22
 800f6d8:	102f883a 	mov	r23,r2
 800f6dc:	8001a6c0 	call	8001a6c <__mulsi3>
 800f6e0:	1009883a 	mov	r4,r2
 800f6e4:	e00e943a 	slli	r7,fp,16
 800f6e8:	8804d43a 	srli	r2,r17,16
 800f6ec:	388eb03a 	or	r7,r7,r2
 800f6f0:	3900042e 	bgeu	r7,r4,800f704 <__udivdi3+0x3cc>
 800f6f4:	3ccf883a 	add	r7,r7,r19
 800f6f8:	b8bfffc4 	addi	r2,r23,-1
 800f6fc:	3cc0942e 	bgeu	r7,r19,800f950 <__udivdi3+0x618>
 800f700:	102f883a 	mov	r23,r2
 800f704:	3939c83a 	sub	fp,r7,r4
 800f708:	a00b883a 	mov	r5,r20
 800f70c:	e009883a 	mov	r4,fp
 800f710:	8010c340 	call	8010c34 <__umodsi3>
 800f714:	a00b883a 	mov	r5,r20
 800f718:	e009883a 	mov	r4,fp
 800f71c:	d8800015 	stw	r2,0(sp)
 800f720:	8010c2c0 	call	8010c2c <__udivsi3>
 800f724:	1009883a 	mov	r4,r2
 800f728:	b00b883a 	mov	r5,r22
 800f72c:	1029883a 	mov	r20,r2
 800f730:	8001a6c0 	call	8001a6c <__mulsi3>
 800f734:	d8c00017 	ldw	r3,0(sp)
 800f738:	8c7fffcc 	andi	r17,r17,65535
 800f73c:	1806943a 	slli	r3,r3,16
 800f740:	1c46b03a 	or	r3,r3,r17
 800f744:	1880042e 	bgeu	r3,r2,800f758 <__udivdi3+0x420>
 800f748:	1cc7883a 	add	r3,r3,r19
 800f74c:	a13fffc4 	addi	r4,r20,-1
 800f750:	1cc07b2e 	bgeu	r3,r19,800f940 <__udivdi3+0x608>
 800f754:	2029883a 	mov	r20,r4
 800f758:	b82e943a 	slli	r23,r23,16
 800f75c:	a822d43a 	srli	r17,r21,16
 800f760:	ad7fffcc 	andi	r21,r21,65535
 800f764:	a5e8b03a 	or	r20,r20,r23
 800f768:	a5bfffcc 	andi	r22,r20,65535
 800f76c:	b009883a 	mov	r4,r22
 800f770:	a80b883a 	mov	r5,r21
 800f774:	18afc83a 	sub	r23,r3,r2
 800f778:	a026d43a 	srli	r19,r20,16
 800f77c:	8001a6c0 	call	8001a6c <__mulsi3>
 800f780:	b009883a 	mov	r4,r22
 800f784:	880b883a 	mov	r5,r17
 800f788:	1039883a 	mov	fp,r2
 800f78c:	8001a6c0 	call	8001a6c <__mulsi3>
 800f790:	a80b883a 	mov	r5,r21
 800f794:	9809883a 	mov	r4,r19
 800f798:	102d883a 	mov	r22,r2
 800f79c:	8001a6c0 	call	8001a6c <__mulsi3>
 800f7a0:	9809883a 	mov	r4,r19
 800f7a4:	880b883a 	mov	r5,r17
 800f7a8:	102b883a 	mov	r21,r2
 800f7ac:	8001a6c0 	call	8001a6c <__mulsi3>
 800f7b0:	100b883a 	mov	r5,r2
 800f7b4:	e004d43a 	srli	r2,fp,16
 800f7b8:	ad89883a 	add	r4,r21,r22
 800f7bc:	2089883a 	add	r4,r4,r2
 800f7c0:	2540022e 	bgeu	r4,r21,800f7cc <__udivdi3+0x494>
 800f7c4:	00800074 	movhi	r2,1
 800f7c8:	288b883a 	add	r5,r5,r2
 800f7cc:	2004d43a 	srli	r2,r4,16
 800f7d0:	288b883a 	add	r5,r5,r2
 800f7d4:	b9404536 	bltu	r23,r5,800f8ec <__udivdi3+0x5b4>
 800f7d8:	b9403f26 	beq	r23,r5,800f8d8 <__udivdi3+0x5a0>
 800f7dc:	a005883a 	mov	r2,r20
 800f7e0:	0007883a 	mov	r3,zero
 800f7e4:	003f3f06 	br	800f4e4 <__udivdi3+0x1ac>
 800f7e8:	80a0983a 	sll	r16,r16,r2
 800f7ec:	88eed83a 	srl	r23,r17,r3
 800f7f0:	90c6d83a 	srl	r3,r18,r3
 800f7f4:	8028d43a 	srli	r20,r16,16
 800f7f8:	88a2983a 	sll	r17,r17,r2
 800f7fc:	b809883a 	mov	r4,r23
 800f800:	a00b883a 	mov	r5,r20
 800f804:	88ecb03a 	or	r22,r17,r3
 800f808:	90a6983a 	sll	r19,r18,r2
 800f80c:	8010c340 	call	8010c34 <__umodsi3>
 800f810:	b809883a 	mov	r4,r23
 800f814:	a00b883a 	mov	r5,r20
 800f818:	1023883a 	mov	r17,r2
 800f81c:	857fffcc 	andi	r21,r16,65535
 800f820:	8010c2c0 	call	8010c2c <__udivsi3>
 800f824:	1009883a 	mov	r4,r2
 800f828:	a80b883a 	mov	r5,r21
 800f82c:	102f883a 	mov	r23,r2
 800f830:	8001a6c0 	call	8001a6c <__mulsi3>
 800f834:	1009883a 	mov	r4,r2
 800f838:	880a943a 	slli	r5,r17,16
 800f83c:	b004d43a 	srli	r2,r22,16
 800f840:	288ab03a 	or	r5,r5,r2
 800f844:	2900062e 	bgeu	r5,r4,800f860 <__udivdi3+0x528>
 800f848:	2c0b883a 	add	r5,r5,r16
 800f84c:	b8bfffc4 	addi	r2,r23,-1
 800f850:	2c004536 	bltu	r5,r16,800f968 <__udivdi3+0x630>
 800f854:	2900442e 	bgeu	r5,r4,800f968 <__udivdi3+0x630>
 800f858:	bdffff84 	addi	r23,r23,-2
 800f85c:	2c0b883a 	add	r5,r5,r16
 800f860:	2925c83a 	sub	r18,r5,r4
 800f864:	9009883a 	mov	r4,r18
 800f868:	a00b883a 	mov	r5,r20
 800f86c:	8010c340 	call	8010c34 <__umodsi3>
 800f870:	1023883a 	mov	r17,r2
 800f874:	9009883a 	mov	r4,r18
 800f878:	a00b883a 	mov	r5,r20
 800f87c:	8822943a 	slli	r17,r17,16
 800f880:	8010c2c0 	call	8010c2c <__udivsi3>
 800f884:	1009883a 	mov	r4,r2
 800f888:	a80b883a 	mov	r5,r21
 800f88c:	b5bfffcc 	andi	r22,r22,65535
 800f890:	1025883a 	mov	r18,r2
 800f894:	8da2b03a 	or	r17,r17,r22
 800f898:	8001a6c0 	call	8001a6c <__mulsi3>
 800f89c:	8880062e 	bgeu	r17,r2,800f8b8 <__udivdi3+0x580>
 800f8a0:	8c23883a 	add	r17,r17,r16
 800f8a4:	90ffffc4 	addi	r3,r18,-1
 800f8a8:	8c002d36 	bltu	r17,r16,800f960 <__udivdi3+0x628>
 800f8ac:	88802c2e 	bgeu	r17,r2,800f960 <__udivdi3+0x628>
 800f8b0:	94bfff84 	addi	r18,r18,-2
 800f8b4:	8c23883a 	add	r17,r17,r16
 800f8b8:	b806943a 	slli	r3,r23,16
 800f8bc:	88a3c83a 	sub	r17,r17,r2
 800f8c0:	90c6b03a 	or	r3,r18,r3
 800f8c4:	003f2c06 	br	800f578 <__udivdi3+0x240>
 800f8c8:	1823883a 	mov	r17,r3
 800f8cc:	003eec06 	br	800f480 <__udivdi3+0x148>
 800f8d0:	2023883a 	mov	r17,r4
 800f8d4:	003f5606 	br	800f630 <__udivdi3+0x2f8>
 800f8d8:	2008943a 	slli	r4,r4,16
 800f8dc:	9420983a 	sll	r16,r18,r16
 800f8e0:	e73fffcc 	andi	fp,fp,65535
 800f8e4:	2709883a 	add	r4,r4,fp
 800f8e8:	813fbc2e 	bgeu	r16,r4,800f7dc <__udivdi3+0x4a4>
 800f8ec:	a0bfffc4 	addi	r2,r20,-1
 800f8f0:	0007883a 	mov	r3,zero
 800f8f4:	003efb06 	br	800f4e4 <__udivdi3+0x1ac>
 800f8f8:	00c00604 	movi	r3,24
 800f8fc:	180b883a 	mov	r5,r3
 800f900:	003eeb06 	br	800f4b0 <__udivdi3+0x178>
 800f904:	00c00204 	movi	r3,8
 800f908:	180b883a 	mov	r5,r3
 800f90c:	003ee806 	br	800f4b0 <__udivdi3+0x178>
 800f910:	00800604 	movi	r2,24
 800f914:	1007883a 	mov	r3,r2
 800f918:	003f0a06 	br	800f544 <__udivdi3+0x20c>
 800f91c:	00800604 	movi	r2,24
 800f920:	1007883a 	mov	r3,r2
 800f924:	003e9c06 	br	800f398 <__udivdi3+0x60>
 800f928:	00800204 	movi	r2,8
 800f92c:	1007883a 	mov	r3,r2
 800f930:	003e9906 	br	800f398 <__udivdi3+0x60>
 800f934:	00800204 	movi	r2,8
 800f938:	1007883a 	mov	r3,r2
 800f93c:	003f0106 	br	800f544 <__udivdi3+0x20c>
 800f940:	18bf842e 	bgeu	r3,r2,800f754 <__udivdi3+0x41c>
 800f944:	a53fff84 	addi	r20,r20,-2
 800f948:	1cc7883a 	add	r3,r3,r19
 800f94c:	003f8206 	br	800f758 <__udivdi3+0x420>
 800f950:	393f6b2e 	bgeu	r7,r4,800f700 <__udivdi3+0x3c8>
 800f954:	bdffff84 	addi	r23,r23,-2
 800f958:	3ccf883a 	add	r7,r7,r19
 800f95c:	003f6906 	br	800f704 <__udivdi3+0x3cc>
 800f960:	1825883a 	mov	r18,r3
 800f964:	003fd406 	br	800f8b8 <__udivdi3+0x580>
 800f968:	102f883a 	mov	r23,r2
 800f96c:	003fbc06 	br	800f860 <__udivdi3+0x528>
 800f970:	94bfff84 	addi	r18,r18,-2
 800f974:	340d883a 	add	r6,r6,r16
 800f978:	003f1606 	br	800f5d4 <__udivdi3+0x29c>
 800f97c:	94bfff84 	addi	r18,r18,-2
 800f980:	1c07883a 	add	r3,r3,r16
 800f984:	003ea906 	br	800f42c <__udivdi3+0xf4>

0800f988 <__umoddi3>:
 800f988:	defff304 	addi	sp,sp,-52
 800f98c:	dd000715 	stw	r20,28(sp)
 800f990:	dcc00615 	stw	r19,24(sp)
 800f994:	dc800515 	stw	r18,20(sp)
 800f998:	dc400415 	stw	r17,16(sp)
 800f99c:	dc000315 	stw	r16,12(sp)
 800f9a0:	dfc00c15 	stw	ra,48(sp)
 800f9a4:	df000b15 	stw	fp,44(sp)
 800f9a8:	ddc00a15 	stw	r23,40(sp)
 800f9ac:	dd800915 	stw	r22,36(sp)
 800f9b0:	dd400815 	stw	r21,32(sp)
 800f9b4:	2025883a 	mov	r18,r4
 800f9b8:	2823883a 	mov	r17,r5
 800f9bc:	3021883a 	mov	r16,r6
 800f9c0:	2027883a 	mov	r19,r4
 800f9c4:	2829883a 	mov	r20,r5
 800f9c8:	38003a1e 	bne	r7,zero,800fab4 <__umoddi3+0x12c>
 800f9cc:	2980522e 	bgeu	r5,r6,800fb18 <__umoddi3+0x190>
 800f9d0:	00bfffd4 	movui	r2,65535
 800f9d4:	1180a436 	bltu	r2,r6,800fc68 <__umoddi3+0x2e0>
 800f9d8:	00803fc4 	movi	r2,255
 800f9dc:	11816036 	bltu	r2,r6,800ff60 <__umoddi3+0x5d8>
 800f9e0:	0005883a 	mov	r2,zero
 800f9e4:	0009883a 	mov	r4,zero
 800f9e8:	3084d83a 	srl	r2,r6,r2
 800f9ec:	00c20074 	movhi	r3,2049
 800f9f0:	18d17a04 	addi	r3,r3,17896
 800f9f4:	05400804 	movi	r21,32
 800f9f8:	1885883a 	add	r2,r3,r2
 800f9fc:	10800003 	ldbu	r2,0(r2)
 800fa00:	1109883a 	add	r4,r2,r4
 800fa04:	a92bc83a 	sub	r21,r21,r4
 800fa08:	a8010e26 	beq	r21,zero,800fe44 <__umoddi3+0x4bc>
 800fa0c:	8d62983a 	sll	r17,r17,r21
 800fa10:	9108d83a 	srl	r4,r18,r4
 800fa14:	3560983a 	sll	r16,r6,r21
 800fa18:	9566983a 	sll	r19,r18,r21
 800fa1c:	8928b03a 	or	r20,r17,r4
 800fa20:	8022d43a 	srli	r17,r16,16
 800fa24:	a009883a 	mov	r4,r20
 800fa28:	84bfffcc 	andi	r18,r16,65535
 800fa2c:	880b883a 	mov	r5,r17
 800fa30:	8010c340 	call	8010c34 <__umodsi3>
 800fa34:	a009883a 	mov	r4,r20
 800fa38:	880b883a 	mov	r5,r17
 800fa3c:	102d883a 	mov	r22,r2
 800fa40:	8010c2c0 	call	8010c2c <__udivsi3>
 800fa44:	1009883a 	mov	r4,r2
 800fa48:	900b883a 	mov	r5,r18
 800fa4c:	8001a6c0 	call	8001a6c <__mulsi3>
 800fa50:	1009883a 	mov	r4,r2
 800fa54:	b006943a 	slli	r3,r22,16
 800fa58:	9804d43a 	srli	r2,r19,16
 800fa5c:	1886b03a 	or	r3,r3,r2
 800fa60:	1900042e 	bgeu	r3,r4,800fa74 <__umoddi3+0xec>
 800fa64:	1c07883a 	add	r3,r3,r16
 800fa68:	1c000236 	bltu	r3,r16,800fa74 <__umoddi3+0xec>
 800fa6c:	1900012e 	bgeu	r3,r4,800fa74 <__umoddi3+0xec>
 800fa70:	1c07883a 	add	r3,r3,r16
 800fa74:	1929c83a 	sub	r20,r3,r4
 800fa78:	a009883a 	mov	r4,r20
 800fa7c:	880b883a 	mov	r5,r17
 800fa80:	8010c340 	call	8010c34 <__umodsi3>
 800fa84:	102d883a 	mov	r22,r2
 800fa88:	a009883a 	mov	r4,r20
 800fa8c:	880b883a 	mov	r5,r17
 800fa90:	b02c943a 	slli	r22,r22,16
 800fa94:	8010c2c0 	call	8010c2c <__udivsi3>
 800fa98:	1009883a 	mov	r4,r2
 800fa9c:	900b883a 	mov	r5,r18
 800faa0:	9cffffcc 	andi	r19,r19,65535
 800faa4:	8001a6c0 	call	8001a6c <__mulsi3>
 800faa8:	b4e6b03a 	or	r19,r22,r19
 800faac:	9880572e 	bgeu	r19,r2,800fc0c <__umoddi3+0x284>
 800fab0:	00005206 	br	800fbfc <__umoddi3+0x274>
 800fab4:	29c05936 	bltu	r5,r7,800fc1c <__umoddi3+0x294>
 800fab8:	00bfffd4 	movui	r2,65535
 800fabc:	11c0652e 	bgeu	r2,r7,800fc54 <__umoddi3+0x2cc>
 800fac0:	00804034 	movhi	r2,256
 800fac4:	10bfffc4 	addi	r2,r2,-1
 800fac8:	11c11936 	bltu	r2,r7,800ff30 <__umoddi3+0x5a8>
 800facc:	00c00404 	movi	r3,16
 800fad0:	1827883a 	mov	r19,r3
 800fad4:	38c6d83a 	srl	r3,r7,r3
 800fad8:	01020074 	movhi	r4,2049
 800fadc:	21117a04 	addi	r4,r4,17896
 800fae0:	04000804 	movi	r16,32
 800fae4:	20c7883a 	add	r3,r4,r3
 800fae8:	18800003 	ldbu	r2,0(r3)
 800faec:	14e7883a 	add	r19,r2,r19
 800faf0:	84e1c83a 	sub	r16,r16,r19
 800faf4:	8000671e 	bne	r16,zero,800fc94 <__umoddi3+0x30c>
 800faf8:	3c400136 	bltu	r7,r17,800fb00 <__umoddi3+0x178>
 800fafc:	91812536 	bltu	r18,r6,800ff94 <__umoddi3+0x60c>
 800fb00:	9185c83a 	sub	r2,r18,r6
 800fb04:	89e3c83a 	sub	r17,r17,r7
 800fb08:	90a5803a 	cmpltu	r18,r18,r2
 800fb0c:	8ca9c83a 	sub	r20,r17,r18
 800fb10:	a007883a 	mov	r3,r20
 800fb14:	00004306 	br	800fc24 <__umoddi3+0x29c>
 800fb18:	3000041e 	bne	r6,zero,800fb2c <__umoddi3+0x1a4>
 800fb1c:	01000044 	movi	r4,1
 800fb20:	000b883a 	mov	r5,zero
 800fb24:	8010c2c0 	call	8010c2c <__udivsi3>
 800fb28:	1021883a 	mov	r16,r2
 800fb2c:	00bfffd4 	movui	r2,65535
 800fb30:	1400532e 	bgeu	r2,r16,800fc80 <__umoddi3+0x2f8>
 800fb34:	00804034 	movhi	r2,256
 800fb38:	10bfffc4 	addi	r2,r2,-1
 800fb3c:	14010536 	bltu	r2,r16,800ff54 <__umoddi3+0x5cc>
 800fb40:	00800404 	movi	r2,16
 800fb44:	1007883a 	mov	r3,r2
 800fb48:	8084d83a 	srl	r2,r16,r2
 800fb4c:	01020074 	movhi	r4,2049
 800fb50:	21117a04 	addi	r4,r4,17896
 800fb54:	05400804 	movi	r21,32
 800fb58:	2085883a 	add	r2,r4,r2
 800fb5c:	10800003 	ldbu	r2,0(r2)
 800fb60:	10c7883a 	add	r3,r2,r3
 800fb64:	a8ebc83a 	sub	r21,r21,r3
 800fb68:	a800b81e 	bne	r21,zero,800fe4c <__umoddi3+0x4c4>
 800fb6c:	8028d43a 	srli	r20,r16,16
 800fb70:	8c23c83a 	sub	r17,r17,r16
 800fb74:	85bfffcc 	andi	r22,r16,65535
 800fb78:	8809883a 	mov	r4,r17
 800fb7c:	a00b883a 	mov	r5,r20
 800fb80:	8010c340 	call	8010c34 <__umodsi3>
 800fb84:	8809883a 	mov	r4,r17
 800fb88:	a00b883a 	mov	r5,r20
 800fb8c:	1025883a 	mov	r18,r2
 800fb90:	8010c2c0 	call	8010c2c <__udivsi3>
 800fb94:	1009883a 	mov	r4,r2
 800fb98:	b00b883a 	mov	r5,r22
 800fb9c:	8001a6c0 	call	8001a6c <__mulsi3>
 800fba0:	1009883a 	mov	r4,r2
 800fba4:	9006943a 	slli	r3,r18,16
 800fba8:	9804d43a 	srli	r2,r19,16
 800fbac:	1886b03a 	or	r3,r3,r2
 800fbb0:	1900032e 	bgeu	r3,r4,800fbc0 <__umoddi3+0x238>
 800fbb4:	1c07883a 	add	r3,r3,r16
 800fbb8:	1c000136 	bltu	r3,r16,800fbc0 <__umoddi3+0x238>
 800fbbc:	1900f336 	bltu	r3,r4,800ff8c <__umoddi3+0x604>
 800fbc0:	1923c83a 	sub	r17,r3,r4
 800fbc4:	8809883a 	mov	r4,r17
 800fbc8:	a00b883a 	mov	r5,r20
 800fbcc:	8010c340 	call	8010c34 <__umodsi3>
 800fbd0:	102f883a 	mov	r23,r2
 800fbd4:	8809883a 	mov	r4,r17
 800fbd8:	a00b883a 	mov	r5,r20
 800fbdc:	b82e943a 	slli	r23,r23,16
 800fbe0:	8010c2c0 	call	8010c2c <__udivsi3>
 800fbe4:	1009883a 	mov	r4,r2
 800fbe8:	b00b883a 	mov	r5,r22
 800fbec:	9cffffcc 	andi	r19,r19,65535
 800fbf0:	8001a6c0 	call	8001a6c <__mulsi3>
 800fbf4:	bce6b03a 	or	r19,r23,r19
 800fbf8:	9880042e 	bgeu	r19,r2,800fc0c <__umoddi3+0x284>
 800fbfc:	9c27883a 	add	r19,r19,r16
 800fc00:	9c000236 	bltu	r19,r16,800fc0c <__umoddi3+0x284>
 800fc04:	9880012e 	bgeu	r19,r2,800fc0c <__umoddi3+0x284>
 800fc08:	9c27883a 	add	r19,r19,r16
 800fc0c:	9885c83a 	sub	r2,r19,r2
 800fc10:	1544d83a 	srl	r2,r2,r21
 800fc14:	0007883a 	mov	r3,zero
 800fc18:	00000206 	br	800fc24 <__umoddi3+0x29c>
 800fc1c:	2005883a 	mov	r2,r4
 800fc20:	2807883a 	mov	r3,r5
 800fc24:	dfc00c17 	ldw	ra,48(sp)
 800fc28:	df000b17 	ldw	fp,44(sp)
 800fc2c:	ddc00a17 	ldw	r23,40(sp)
 800fc30:	dd800917 	ldw	r22,36(sp)
 800fc34:	dd400817 	ldw	r21,32(sp)
 800fc38:	dd000717 	ldw	r20,28(sp)
 800fc3c:	dcc00617 	ldw	r19,24(sp)
 800fc40:	dc800517 	ldw	r18,20(sp)
 800fc44:	dc400417 	ldw	r17,16(sp)
 800fc48:	dc000317 	ldw	r16,12(sp)
 800fc4c:	dec00d04 	addi	sp,sp,52
 800fc50:	f800283a 	ret
 800fc54:	00803fc4 	movi	r2,255
 800fc58:	11c0b236 	bltu	r2,r7,800ff24 <__umoddi3+0x59c>
 800fc5c:	0007883a 	mov	r3,zero
 800fc60:	0027883a 	mov	r19,zero
 800fc64:	003f9b06 	br	800fad4 <__umoddi3+0x14c>
 800fc68:	00804034 	movhi	r2,256
 800fc6c:	10bfffc4 	addi	r2,r2,-1
 800fc70:	1180b236 	bltu	r2,r6,800ff3c <__umoddi3+0x5b4>
 800fc74:	00800404 	movi	r2,16
 800fc78:	1009883a 	mov	r4,r2
 800fc7c:	003f5a06 	br	800f9e8 <__umoddi3+0x60>
 800fc80:	00803fc4 	movi	r2,255
 800fc84:	1400b036 	bltu	r2,r16,800ff48 <__umoddi3+0x5c0>
 800fc88:	0005883a 	mov	r2,zero
 800fc8c:	0007883a 	mov	r3,zero
 800fc90:	003fad06 	br	800fb48 <__umoddi3+0x1c0>
 800fc94:	34c4d83a 	srl	r2,r6,r19
 800fc98:	3c0e983a 	sll	r7,r7,r16
 800fc9c:	8cf8d83a 	srl	fp,r17,r19
 800fca0:	8c22983a 	sll	r17,r17,r16
 800fca4:	38a8b03a 	or	r20,r7,r2
 800fca8:	a02ad43a 	srli	r21,r20,16
 800fcac:	94c4d83a 	srl	r2,r18,r19
 800fcb0:	e009883a 	mov	r4,fp
 800fcb4:	a80b883a 	mov	r5,r21
 800fcb8:	342c983a 	sll	r22,r6,r16
 800fcbc:	88a2b03a 	or	r17,r17,r2
 800fcc0:	8010c340 	call	8010c34 <__umodsi3>
 800fcc4:	e009883a 	mov	r4,fp
 800fcc8:	a80b883a 	mov	r5,r21
 800fccc:	a5ffffcc 	andi	r23,r20,65535
 800fcd0:	d8800215 	stw	r2,8(sp)
 800fcd4:	8010c2c0 	call	8010c2c <__udivsi3>
 800fcd8:	1009883a 	mov	r4,r2
 800fcdc:	b80b883a 	mov	r5,r23
 800fce0:	1039883a 	mov	fp,r2
 800fce4:	8001a6c0 	call	8001a6c <__mulsi3>
 800fce8:	d8c00217 	ldw	r3,8(sp)
 800fcec:	1009883a 	mov	r4,r2
 800fcf0:	8804d43a 	srli	r2,r17,16
 800fcf4:	1806943a 	slli	r3,r3,16
 800fcf8:	9424983a 	sll	r18,r18,r16
 800fcfc:	1886b03a 	or	r3,r3,r2
 800fd00:	1900042e 	bgeu	r3,r4,800fd14 <__umoddi3+0x38c>
 800fd04:	1d07883a 	add	r3,r3,r20
 800fd08:	e0bfffc4 	addi	r2,fp,-1
 800fd0c:	1d009b2e 	bgeu	r3,r20,800ff7c <__umoddi3+0x5f4>
 800fd10:	1039883a 	mov	fp,r2
 800fd14:	1907c83a 	sub	r3,r3,r4
 800fd18:	1809883a 	mov	r4,r3
 800fd1c:	a80b883a 	mov	r5,r21
 800fd20:	d8c00215 	stw	r3,8(sp)
 800fd24:	8010c340 	call	8010c34 <__umodsi3>
 800fd28:	d8c00217 	ldw	r3,8(sp)
 800fd2c:	a80b883a 	mov	r5,r21
 800fd30:	d8800015 	stw	r2,0(sp)
 800fd34:	1809883a 	mov	r4,r3
 800fd38:	8010c2c0 	call	8010c2c <__udivsi3>
 800fd3c:	1009883a 	mov	r4,r2
 800fd40:	b80b883a 	mov	r5,r23
 800fd44:	102b883a 	mov	r21,r2
 800fd48:	8001a6c0 	call	8001a6c <__mulsi3>
 800fd4c:	d9c00017 	ldw	r7,0(sp)
 800fd50:	8c7fffcc 	andi	r17,r17,65535
 800fd54:	380e943a 	slli	r7,r7,16
 800fd58:	3c4eb03a 	or	r7,r7,r17
 800fd5c:	3880042e 	bgeu	r7,r2,800fd70 <__umoddi3+0x3e8>
 800fd60:	3d0f883a 	add	r7,r7,r20
 800fd64:	a8ffffc4 	addi	r3,r21,-1
 800fd68:	3d00802e 	bgeu	r7,r20,800ff6c <__umoddi3+0x5e4>
 800fd6c:	182b883a 	mov	r21,r3
 800fd70:	e038943a 	slli	fp,fp,16
 800fd74:	b010d43a 	srli	r8,r22,16
 800fd78:	b1bfffcc 	andi	r6,r22,65535
 800fd7c:	af2ab03a 	or	r21,r21,fp
 800fd80:	a82ed43a 	srli	r23,r21,16
 800fd84:	ad7fffcc 	andi	r21,r21,65535
 800fd88:	300b883a 	mov	r5,r6
 800fd8c:	a809883a 	mov	r4,r21
 800fd90:	38a3c83a 	sub	r17,r7,r2
 800fd94:	d9800115 	stw	r6,4(sp)
 800fd98:	da000015 	stw	r8,0(sp)
 800fd9c:	8001a6c0 	call	8001a6c <__mulsi3>
 800fda0:	da000017 	ldw	r8,0(sp)
 800fda4:	a809883a 	mov	r4,r21
 800fda8:	1039883a 	mov	fp,r2
 800fdac:	400b883a 	mov	r5,r8
 800fdb0:	da000215 	stw	r8,8(sp)
 800fdb4:	8001a6c0 	call	8001a6c <__mulsi3>
 800fdb8:	d9800117 	ldw	r6,4(sp)
 800fdbc:	b809883a 	mov	r4,r23
 800fdc0:	d8800015 	stw	r2,0(sp)
 800fdc4:	300b883a 	mov	r5,r6
 800fdc8:	8001a6c0 	call	8001a6c <__mulsi3>
 800fdcc:	d8c00217 	ldw	r3,8(sp)
 800fdd0:	b809883a 	mov	r4,r23
 800fdd4:	102b883a 	mov	r21,r2
 800fdd8:	180b883a 	mov	r5,r3
 800fddc:	8001a6c0 	call	8001a6c <__mulsi3>
 800fde0:	d9c00017 	ldw	r7,0(sp)
 800fde4:	1007883a 	mov	r3,r2
 800fde8:	e004d43a 	srli	r2,fp,16
 800fdec:	a9c9883a 	add	r4,r21,r7
 800fdf0:	2089883a 	add	r4,r4,r2
 800fdf4:	2540022e 	bgeu	r4,r21,800fe00 <__umoddi3+0x478>
 800fdf8:	00800074 	movhi	r2,1
 800fdfc:	1887883a 	add	r3,r3,r2
 800fe00:	2004d43a 	srli	r2,r4,16
 800fe04:	2008943a 	slli	r4,r4,16
 800fe08:	e73fffcc 	andi	fp,fp,65535
 800fe0c:	1887883a 	add	r3,r3,r2
 800fe10:	2709883a 	add	r4,r4,fp
 800fe14:	88c03d36 	bltu	r17,r3,800ff0c <__umoddi3+0x584>
 800fe18:	88c06126 	beq	r17,r3,800ffa0 <__umoddi3+0x618>
 800fe1c:	88c7c83a 	sub	r3,r17,r3
 800fe20:	202d883a 	mov	r22,r4
 800fe24:	95adc83a 	sub	r22,r18,r22
 800fe28:	95a5803a 	cmpltu	r18,r18,r22
 800fe2c:	1c87c83a 	sub	r3,r3,r18
 800fe30:	1cc4983a 	sll	r2,r3,r19
 800fe34:	b42cd83a 	srl	r22,r22,r16
 800fe38:	1c06d83a 	srl	r3,r3,r16
 800fe3c:	1584b03a 	or	r2,r2,r22
 800fe40:	003f7806 	br	800fc24 <__umoddi3+0x29c>
 800fe44:	002b883a 	mov	r21,zero
 800fe48:	003ef506 	br	800fa20 <__umoddi3+0x98>
 800fe4c:	8560983a 	sll	r16,r16,r21
 800fe50:	88e6d83a 	srl	r19,r17,r3
 800fe54:	90c6d83a 	srl	r3,r18,r3
 800fe58:	8028d43a 	srli	r20,r16,16
 800fe5c:	8d62983a 	sll	r17,r17,r21
 800fe60:	9809883a 	mov	r4,r19
 800fe64:	a00b883a 	mov	r5,r20
 800fe68:	88eeb03a 	or	r23,r17,r3
 800fe6c:	8010c340 	call	8010c34 <__umodsi3>
 800fe70:	9809883a 	mov	r4,r19
 800fe74:	a00b883a 	mov	r5,r20
 800fe78:	1023883a 	mov	r17,r2
 800fe7c:	85bfffcc 	andi	r22,r16,65535
 800fe80:	8010c2c0 	call	8010c2c <__udivsi3>
 800fe84:	1009883a 	mov	r4,r2
 800fe88:	b00b883a 	mov	r5,r22
 800fe8c:	8001a6c0 	call	8001a6c <__mulsi3>
 800fe90:	1007883a 	mov	r3,r2
 800fe94:	8808943a 	slli	r4,r17,16
 800fe98:	b804d43a 	srli	r2,r23,16
 800fe9c:	9566983a 	sll	r19,r18,r21
 800fea0:	2088b03a 	or	r4,r4,r2
 800fea4:	20c0042e 	bgeu	r4,r3,800feb8 <__umoddi3+0x530>
 800fea8:	2409883a 	add	r4,r4,r16
 800feac:	24000236 	bltu	r4,r16,800feb8 <__umoddi3+0x530>
 800feb0:	20c0012e 	bgeu	r4,r3,800feb8 <__umoddi3+0x530>
 800feb4:	2409883a 	add	r4,r4,r16
 800feb8:	20e5c83a 	sub	r18,r4,r3
 800febc:	9009883a 	mov	r4,r18
 800fec0:	a00b883a 	mov	r5,r20
 800fec4:	8010c340 	call	8010c34 <__umodsi3>
 800fec8:	1023883a 	mov	r17,r2
 800fecc:	9009883a 	mov	r4,r18
 800fed0:	a00b883a 	mov	r5,r20
 800fed4:	8822943a 	slli	r17,r17,16
 800fed8:	8010c2c0 	call	8010c2c <__udivsi3>
 800fedc:	1009883a 	mov	r4,r2
 800fee0:	b00b883a 	mov	r5,r22
 800fee4:	bdffffcc 	andi	r23,r23,65535
 800fee8:	8001a6c0 	call	8001a6c <__mulsi3>
 800feec:	8de2b03a 	or	r17,r17,r23
 800fef0:	8880042e 	bgeu	r17,r2,800ff04 <__umoddi3+0x57c>
 800fef4:	8c23883a 	add	r17,r17,r16
 800fef8:	8c000236 	bltu	r17,r16,800ff04 <__umoddi3+0x57c>
 800fefc:	8880012e 	bgeu	r17,r2,800ff04 <__umoddi3+0x57c>
 800ff00:	8c23883a 	add	r17,r17,r16
 800ff04:	88a3c83a 	sub	r17,r17,r2
 800ff08:	003f1b06 	br	800fb78 <__umoddi3+0x1f0>
 800ff0c:	25adc83a 	sub	r22,r4,r22
 800ff10:	1d07c83a 	sub	r3,r3,r20
 800ff14:	2589803a 	cmpltu	r4,r4,r22
 800ff18:	1907c83a 	sub	r3,r3,r4
 800ff1c:	88c7c83a 	sub	r3,r17,r3
 800ff20:	003fc006 	br	800fe24 <__umoddi3+0x49c>
 800ff24:	00c00204 	movi	r3,8
 800ff28:	1827883a 	mov	r19,r3
 800ff2c:	003ee906 	br	800fad4 <__umoddi3+0x14c>
 800ff30:	00c00604 	movi	r3,24
 800ff34:	1827883a 	mov	r19,r3
 800ff38:	003ee606 	br	800fad4 <__umoddi3+0x14c>
 800ff3c:	00800604 	movi	r2,24
 800ff40:	1009883a 	mov	r4,r2
 800ff44:	003ea806 	br	800f9e8 <__umoddi3+0x60>
 800ff48:	00800204 	movi	r2,8
 800ff4c:	1007883a 	mov	r3,r2
 800ff50:	003efd06 	br	800fb48 <__umoddi3+0x1c0>
 800ff54:	00800604 	movi	r2,24
 800ff58:	1007883a 	mov	r3,r2
 800ff5c:	003efa06 	br	800fb48 <__umoddi3+0x1c0>
 800ff60:	00800204 	movi	r2,8
 800ff64:	1009883a 	mov	r4,r2
 800ff68:	003e9f06 	br	800f9e8 <__umoddi3+0x60>
 800ff6c:	38bf7f2e 	bgeu	r7,r2,800fd6c <__umoddi3+0x3e4>
 800ff70:	ad7fff84 	addi	r21,r21,-2
 800ff74:	3d0f883a 	add	r7,r7,r20
 800ff78:	003f7d06 	br	800fd70 <__umoddi3+0x3e8>
 800ff7c:	193f642e 	bgeu	r3,r4,800fd10 <__umoddi3+0x388>
 800ff80:	e73fff84 	addi	fp,fp,-2
 800ff84:	1d07883a 	add	r3,r3,r20
 800ff88:	003f6206 	br	800fd14 <__umoddi3+0x38c>
 800ff8c:	1c07883a 	add	r3,r3,r16
 800ff90:	003f0b06 	br	800fbc0 <__umoddi3+0x238>
 800ff94:	9005883a 	mov	r2,r18
 800ff98:	a007883a 	mov	r3,r20
 800ff9c:	003f2106 	br	800fc24 <__umoddi3+0x29c>
 800ffa0:	913fda36 	bltu	r18,r4,800ff0c <__umoddi3+0x584>
 800ffa4:	202d883a 	mov	r22,r4
 800ffa8:	0007883a 	mov	r3,zero
 800ffac:	003f9d06 	br	800fe24 <__umoddi3+0x49c>

0800ffb0 <__eqsf2>:
 800ffb0:	defff504 	addi	sp,sp,-44
 800ffb4:	d9000915 	stw	r4,36(sp)
 800ffb8:	d9400815 	stw	r5,32(sp)
 800ffbc:	d9000904 	addi	r4,sp,36
 800ffc0:	d9400404 	addi	r5,sp,16
 800ffc4:	dfc00a15 	stw	ra,40(sp)
 800ffc8:	8010c3c0 	call	8010c3c <__unpack_f>
 800ffcc:	d9000804 	addi	r4,sp,32
 800ffd0:	d80b883a 	mov	r5,sp
 800ffd4:	8010c3c0 	call	8010c3c <__unpack_f>
 800ffd8:	d8c00417 	ldw	r3,16(sp)
 800ffdc:	00800044 	movi	r2,1
 800ffe0:	10c0052e 	bgeu	r2,r3,800fff8 <__eqsf2+0x48>
 800ffe4:	d8c00017 	ldw	r3,0(sp)
 800ffe8:	10c0032e 	bgeu	r2,r3,800fff8 <__eqsf2+0x48>
 800ffec:	d9000404 	addi	r4,sp,16
 800fff0:	d80b883a 	mov	r5,sp
 800fff4:	8010d040 	call	8010d04 <__fpcmp_parts_f>
 800fff8:	dfc00a17 	ldw	ra,40(sp)
 800fffc:	dec00b04 	addi	sp,sp,44
 8010000:	f800283a 	ret

08010004 <__gtsf2>:
 8010004:	defff504 	addi	sp,sp,-44
 8010008:	d9000915 	stw	r4,36(sp)
 801000c:	d9400815 	stw	r5,32(sp)
 8010010:	d9000904 	addi	r4,sp,36
 8010014:	d9400404 	addi	r5,sp,16
 8010018:	dfc00a15 	stw	ra,40(sp)
 801001c:	8010c3c0 	call	8010c3c <__unpack_f>
 8010020:	d9000804 	addi	r4,sp,32
 8010024:	d80b883a 	mov	r5,sp
 8010028:	8010c3c0 	call	8010c3c <__unpack_f>
 801002c:	d8c00417 	ldw	r3,16(sp)
 8010030:	00800044 	movi	r2,1
 8010034:	10c0082e 	bgeu	r2,r3,8010058 <__gtsf2+0x54>
 8010038:	d8c00017 	ldw	r3,0(sp)
 801003c:	10c0062e 	bgeu	r2,r3,8010058 <__gtsf2+0x54>
 8010040:	d9000404 	addi	r4,sp,16
 8010044:	d80b883a 	mov	r5,sp
 8010048:	8010d040 	call	8010d04 <__fpcmp_parts_f>
 801004c:	dfc00a17 	ldw	ra,40(sp)
 8010050:	dec00b04 	addi	sp,sp,44
 8010054:	f800283a 	ret
 8010058:	00bfffc4 	movi	r2,-1
 801005c:	003ffb06 	br	801004c <__gtsf2+0x48>

08010060 <__ltsf2>:
 8010060:	defff504 	addi	sp,sp,-44
 8010064:	d9000915 	stw	r4,36(sp)
 8010068:	d9400815 	stw	r5,32(sp)
 801006c:	d9000904 	addi	r4,sp,36
 8010070:	d9400404 	addi	r5,sp,16
 8010074:	dfc00a15 	stw	ra,40(sp)
 8010078:	8010c3c0 	call	8010c3c <__unpack_f>
 801007c:	d9000804 	addi	r4,sp,32
 8010080:	d80b883a 	mov	r5,sp
 8010084:	8010c3c0 	call	8010c3c <__unpack_f>
 8010088:	d8c00417 	ldw	r3,16(sp)
 801008c:	00800044 	movi	r2,1
 8010090:	10c0052e 	bgeu	r2,r3,80100a8 <__ltsf2+0x48>
 8010094:	d8c00017 	ldw	r3,0(sp)
 8010098:	10c0032e 	bgeu	r2,r3,80100a8 <__ltsf2+0x48>
 801009c:	d9000404 	addi	r4,sp,16
 80100a0:	d80b883a 	mov	r5,sp
 80100a4:	8010d040 	call	8010d04 <__fpcmp_parts_f>
 80100a8:	dfc00a17 	ldw	ra,40(sp)
 80100ac:	dec00b04 	addi	sp,sp,44
 80100b0:	f800283a 	ret

080100b4 <_fpadd_parts>:
 80100b4:	2005883a 	mov	r2,r4
 80100b8:	21000017 	ldw	r4,0(r4)
 80100bc:	01c00044 	movi	r7,1
 80100c0:	3900622e 	bgeu	r7,r4,801024c <_fpadd_parts+0x198>
 80100c4:	28c00017 	ldw	r3,0(r5)
 80100c8:	38c05f2e 	bgeu	r7,r3,8010248 <_fpadd_parts+0x194>
 80100cc:	01c00104 	movi	r7,4
 80100d0:	21c0c626 	beq	r4,r7,80103ec <_fpadd_parts+0x338>
 80100d4:	19c05c26 	beq	r3,r7,8010248 <_fpadd_parts+0x194>
 80100d8:	01c00084 	movi	r7,2
 80100dc:	19c06b26 	beq	r3,r7,801028c <_fpadd_parts+0x1d8>
 80100e0:	21c05926 	beq	r4,r7,8010248 <_fpadd_parts+0x194>
 80100e4:	11c00217 	ldw	r7,8(r2)
 80100e8:	2ac00217 	ldw	r11,8(r5)
 80100ec:	13000317 	ldw	r12,12(r2)
 80100f0:	13400417 	ldw	r13,16(r2)
 80100f4:	3ac9c83a 	sub	r4,r7,r11
 80100f8:	2a000317 	ldw	r8,12(r5)
 80100fc:	2a400417 	ldw	r9,16(r5)
 8010100:	2015883a 	mov	r10,r4
 8010104:	20007516 	blt	r4,zero,80102dc <_fpadd_parts+0x228>
 8010108:	00c00fc4 	movi	r3,63
 801010c:	1a805016 	blt	r3,r10,8010250 <_fpadd_parts+0x19c>
 8010110:	0100870e 	bge	zero,r4,8010330 <_fpadd_parts+0x27c>
 8010114:	50fff804 	addi	r3,r10,-32
 8010118:	18009916 	blt	r3,zero,8010380 <_fpadd_parts+0x2cc>
 801011c:	48d6d83a 	srl	r11,r9,r3
 8010120:	001d883a 	mov	r14,zero
 8010124:	18009e16 	blt	r3,zero,80103a0 <_fpadd_parts+0x2ec>
 8010128:	01000044 	movi	r4,1
 801012c:	20c6983a 	sll	r3,r4,r3
 8010130:	0015883a 	mov	r10,zero
 8010134:	513fffc4 	addi	r4,r10,-1
 8010138:	2295403a 	cmpgeu	r10,r4,r10
 801013c:	1a87c83a 	sub	r3,r3,r10
 8010140:	1a52703a 	and	r9,r3,r9
 8010144:	2210703a 	and	r8,r4,r8
 8010148:	4250b03a 	or	r8,r8,r9
 801014c:	4010c03a 	cmpne	r8,r8,zero
 8010150:	42d0b03a 	or	r8,r8,r11
 8010154:	7013883a 	mov	r9,r14
 8010158:	11000117 	ldw	r4,4(r2)
 801015c:	28800117 	ldw	r2,4(r5)
 8010160:	20804126 	beq	r4,r2,8010268 <_fpadd_parts+0x1b4>
 8010164:	20006326 	beq	r4,zero,80102f4 <_fpadd_parts+0x240>
 8010168:	4305c83a 	sub	r2,r8,r12
 801016c:	4091803a 	cmpltu	r8,r8,r2
 8010170:	4b47c83a 	sub	r3,r9,r13
 8010174:	1a07c83a 	sub	r3,r3,r8
 8010178:	18006316 	blt	r3,zero,8010308 <_fpadd_parts+0x254>
 801017c:	30000115 	stw	zero,4(r6)
 8010180:	31c00215 	stw	r7,8(r6)
 8010184:	30800315 	stw	r2,12(r6)
 8010188:	30c00415 	stw	r3,16(r6)
 801018c:	11ffffc4 	addi	r7,r2,-1
 8010190:	388b403a 	cmpgeu	r5,r7,r2
 8010194:	194bc83a 	sub	r5,r3,r5
 8010198:	01040034 	movhi	r4,4096
 801019c:	213fffc4 	addi	r4,r4,-1
 80101a0:	21401736 	bltu	r4,r5,8010200 <_fpadd_parts+0x14c>
 80101a4:	29008226 	beq	r5,r4,80103b0 <_fpadd_parts+0x2fc>
 80101a8:	31400217 	ldw	r5,8(r6)
 80101ac:	02840034 	movhi	r10,4096
 80101b0:	52bfffc4 	addi	r10,r10,-1
 80101b4:	033fff84 	movi	r12,-2
 80101b8:	297fffc4 	addi	r5,r5,-1
 80101bc:	00000106 	br	80101c4 <_fpadd_parts+0x110>
 80101c0:	3a804a26 	beq	r7,r10,80102ec <_fpadd_parts+0x238>
 80101c4:	1089883a 	add	r4,r2,r2
 80101c8:	2091803a 	cmpltu	r8,r4,r2
 80101cc:	18c7883a 	add	r3,r3,r3
 80101d0:	227fffc4 	addi	r9,r4,-1
 80101d4:	40d1883a 	add	r8,r8,r3
 80101d8:	490f403a 	cmpgeu	r7,r9,r4
 80101dc:	41cfc83a 	sub	r7,r8,r7
 80101e0:	2817883a 	mov	r11,r5
 80101e4:	2005883a 	mov	r2,r4
 80101e8:	4007883a 	mov	r3,r8
 80101ec:	297fffc4 	addi	r5,r5,-1
 80101f0:	51fff32e 	bgeu	r10,r7,80101c0 <_fpadd_parts+0x10c>
 80101f4:	31000315 	stw	r4,12(r6)
 80101f8:	32000415 	stw	r8,16(r6)
 80101fc:	32c00215 	stw	r11,8(r6)
 8010200:	010000c4 	movi	r4,3
 8010204:	31000015 	stw	r4,0(r6)
 8010208:	01080034 	movhi	r4,8192
 801020c:	213fffc4 	addi	r4,r4,-1
 8010210:	20c00b2e 	bgeu	r4,r3,8010240 <_fpadd_parts+0x18c>
 8010214:	180e97fa 	slli	r7,r3,31
 8010218:	1008d07a 	srli	r4,r2,1
 801021c:	31400217 	ldw	r5,8(r6)
 8010220:	1806d07a 	srli	r3,r3,1
 8010224:	1080004c 	andi	r2,r2,1
 8010228:	3908b03a 	or	r4,r7,r4
 801022c:	1108b03a 	or	r4,r2,r4
 8010230:	29400044 	addi	r5,r5,1
 8010234:	31000315 	stw	r4,12(r6)
 8010238:	30c00415 	stw	r3,16(r6)
 801023c:	31400215 	stw	r5,8(r6)
 8010240:	3005883a 	mov	r2,r6
 8010244:	f800283a 	ret
 8010248:	2805883a 	mov	r2,r5
 801024c:	f800283a 	ret
 8010250:	59c01e0e 	bge	r11,r7,80102cc <_fpadd_parts+0x218>
 8010254:	11000117 	ldw	r4,4(r2)
 8010258:	28800117 	ldw	r2,4(r5)
 801025c:	0011883a 	mov	r8,zero
 8010260:	0013883a 	mov	r9,zero
 8010264:	20bfbf1e 	bne	r4,r2,8010164 <_fpadd_parts+0xb0>
 8010268:	4305883a 	add	r2,r8,r12
 801026c:	1207803a 	cmpltu	r3,r2,r8
 8010270:	4b53883a 	add	r9,r9,r13
 8010274:	1a47883a 	add	r3,r3,r9
 8010278:	31000115 	stw	r4,4(r6)
 801027c:	31c00215 	stw	r7,8(r6)
 8010280:	30800315 	stw	r2,12(r6)
 8010284:	30c00415 	stw	r3,16(r6)
 8010288:	003fdd06 	br	8010200 <_fpadd_parts+0x14c>
 801028c:	20ffef1e 	bne	r4,r3,801024c <_fpadd_parts+0x198>
 8010290:	31000015 	stw	r4,0(r6)
 8010294:	10c00117 	ldw	r3,4(r2)
 8010298:	30c00115 	stw	r3,4(r6)
 801029c:	10c00217 	ldw	r3,8(r2)
 80102a0:	11000117 	ldw	r4,4(r2)
 80102a4:	29400117 	ldw	r5,4(r5)
 80102a8:	30c00215 	stw	r3,8(r6)
 80102ac:	10c00317 	ldw	r3,12(r2)
 80102b0:	2908703a 	and	r4,r5,r4
 80102b4:	30c00315 	stw	r3,12(r6)
 80102b8:	10c00417 	ldw	r3,16(r2)
 80102bc:	31000115 	stw	r4,4(r6)
 80102c0:	3005883a 	mov	r2,r6
 80102c4:	30c00415 	stw	r3,16(r6)
 80102c8:	f800283a 	ret
 80102cc:	580f883a 	mov	r7,r11
 80102d0:	0019883a 	mov	r12,zero
 80102d4:	001b883a 	mov	r13,zero
 80102d8:	003f9f06 	br	8010158 <_fpadd_parts+0xa4>
 80102dc:	0115c83a 	sub	r10,zero,r4
 80102e0:	00c00fc4 	movi	r3,63
 80102e4:	1abfda16 	blt	r3,r10,8010250 <_fpadd_parts+0x19c>
 80102e8:	003f8906 	br	8010110 <_fpadd_parts+0x5c>
 80102ec:	627fb52e 	bgeu	r12,r9,80101c4 <_fpadd_parts+0x110>
 80102f0:	003fc006 	br	80101f4 <_fpadd_parts+0x140>
 80102f4:	6205c83a 	sub	r2,r12,r8
 80102f8:	6099803a 	cmpltu	r12,r12,r2
 80102fc:	6a47c83a 	sub	r3,r13,r9
 8010300:	1b07c83a 	sub	r3,r3,r12
 8010304:	183f9d0e 	bge	r3,zero,801017c <_fpadd_parts+0xc8>
 8010308:	0085c83a 	sub	r2,zero,r2
 801030c:	1008c03a 	cmpne	r4,r2,zero
 8010310:	00c7c83a 	sub	r3,zero,r3
 8010314:	1907c83a 	sub	r3,r3,r4
 8010318:	01000044 	movi	r4,1
 801031c:	31000115 	stw	r4,4(r6)
 8010320:	31c00215 	stw	r7,8(r6)
 8010324:	30800315 	stw	r2,12(r6)
 8010328:	30c00415 	stw	r3,16(r6)
 801032c:	003f9706 	br	801018c <_fpadd_parts+0xd8>
 8010330:	203f8926 	beq	r4,zero,8010158 <_fpadd_parts+0xa4>
 8010334:	50fff804 	addi	r3,r10,-32
 8010338:	3a8f883a 	add	r7,r7,r10
 801033c:	18002316 	blt	r3,zero,80103cc <_fpadd_parts+0x318>
 8010340:	68d6d83a 	srl	r11,r13,r3
 8010344:	001d883a 	mov	r14,zero
 8010348:	18001c16 	blt	r3,zero,80103bc <_fpadd_parts+0x308>
 801034c:	01000044 	movi	r4,1
 8010350:	20c6983a 	sll	r3,r4,r3
 8010354:	0015883a 	mov	r10,zero
 8010358:	513fffc4 	addi	r4,r10,-1
 801035c:	2295403a 	cmpgeu	r10,r4,r10
 8010360:	1a87c83a 	sub	r3,r3,r10
 8010364:	1b5a703a 	and	r13,r3,r13
 8010368:	2318703a 	and	r12,r4,r12
 801036c:	6358b03a 	or	r12,r12,r13
 8010370:	6018c03a 	cmpne	r12,r12,zero
 8010374:	62d8b03a 	or	r12,r12,r11
 8010378:	701b883a 	mov	r13,r14
 801037c:	003f7606 	br	8010158 <_fpadd_parts+0xa4>
 8010380:	4808907a 	slli	r4,r9,1
 8010384:	02c007c4 	movi	r11,31
 8010388:	5a97c83a 	sub	r11,r11,r10
 801038c:	22c8983a 	sll	r4,r4,r11
 8010390:	4296d83a 	srl	r11,r8,r10
 8010394:	4a9cd83a 	srl	r14,r9,r10
 8010398:	22d6b03a 	or	r11,r4,r11
 801039c:	003f6106 	br	8010124 <_fpadd_parts+0x70>
 80103a0:	00c00044 	movi	r3,1
 80103a4:	1a94983a 	sll	r10,r3,r10
 80103a8:	0007883a 	mov	r3,zero
 80103ac:	003f6106 	br	8010134 <_fpadd_parts+0x80>
 80103b0:	013fff84 	movi	r4,-2
 80103b4:	21ff7c2e 	bgeu	r4,r7,80101a8 <_fpadd_parts+0xf4>
 80103b8:	003f9106 	br	8010200 <_fpadd_parts+0x14c>
 80103bc:	00c00044 	movi	r3,1
 80103c0:	1a94983a 	sll	r10,r3,r10
 80103c4:	0007883a 	mov	r3,zero
 80103c8:	003fe306 	br	8010358 <_fpadd_parts+0x2a4>
 80103cc:	6816907a 	slli	r11,r13,1
 80103d0:	010007c4 	movi	r4,31
 80103d4:	2289c83a 	sub	r4,r4,r10
 80103d8:	5908983a 	sll	r4,r11,r4
 80103dc:	6296d83a 	srl	r11,r12,r10
 80103e0:	6a9cd83a 	srl	r14,r13,r10
 80103e4:	22d6b03a 	or	r11,r4,r11
 80103e8:	003fd706 	br	8010348 <_fpadd_parts+0x294>
 80103ec:	193f971e 	bne	r3,r4,801024c <_fpadd_parts+0x198>
 80103f0:	11000117 	ldw	r4,4(r2)
 80103f4:	28c00117 	ldw	r3,4(r5)
 80103f8:	20ff9426 	beq	r4,r3,801024c <_fpadd_parts+0x198>
 80103fc:	00820074 	movhi	r2,2049
 8010400:	10917504 	addi	r2,r2,17876
 8010404:	f800283a 	ret

08010408 <__adddf3>:
 8010408:	deffec04 	addi	sp,sp,-80
 801040c:	d9001115 	stw	r4,68(sp)
 8010410:	d9401215 	stw	r5,72(sp)
 8010414:	d9001104 	addi	r4,sp,68
 8010418:	d9400a04 	addi	r5,sp,40
 801041c:	dfc01315 	stw	ra,76(sp)
 8010420:	d9c01015 	stw	r7,64(sp)
 8010424:	d9800f15 	stw	r6,60(sp)
 8010428:	8001d640 	call	8001d64 <__unpack_d>
 801042c:	d9000f04 	addi	r4,sp,60
 8010430:	d9400504 	addi	r5,sp,20
 8010434:	8001d640 	call	8001d64 <__unpack_d>
 8010438:	d9000a04 	addi	r4,sp,40
 801043c:	d9400504 	addi	r5,sp,20
 8010440:	d80d883a 	mov	r6,sp
 8010444:	80100b40 	call	80100b4 <_fpadd_parts>
 8010448:	1009883a 	mov	r4,r2
 801044c:	8001b400 	call	8001b40 <__pack_d>
 8010450:	dfc01317 	ldw	ra,76(sp)
 8010454:	dec01404 	addi	sp,sp,80
 8010458:	f800283a 	ret

0801045c <__subdf3>:
 801045c:	deffec04 	addi	sp,sp,-80
 8010460:	d9001115 	stw	r4,68(sp)
 8010464:	d9401215 	stw	r5,72(sp)
 8010468:	d9001104 	addi	r4,sp,68
 801046c:	d9400a04 	addi	r5,sp,40
 8010470:	dfc01315 	stw	ra,76(sp)
 8010474:	d9c01015 	stw	r7,64(sp)
 8010478:	d9800f15 	stw	r6,60(sp)
 801047c:	8001d640 	call	8001d64 <__unpack_d>
 8010480:	d9000f04 	addi	r4,sp,60
 8010484:	d9400504 	addi	r5,sp,20
 8010488:	8001d640 	call	8001d64 <__unpack_d>
 801048c:	d8800617 	ldw	r2,24(sp)
 8010490:	d9000a04 	addi	r4,sp,40
 8010494:	d9400504 	addi	r5,sp,20
 8010498:	d80d883a 	mov	r6,sp
 801049c:	1080005c 	xori	r2,r2,1
 80104a0:	d8800615 	stw	r2,24(sp)
 80104a4:	80100b40 	call	80100b4 <_fpadd_parts>
 80104a8:	1009883a 	mov	r4,r2
 80104ac:	8001b400 	call	8001b40 <__pack_d>
 80104b0:	dfc01317 	ldw	ra,76(sp)
 80104b4:	dec01404 	addi	sp,sp,80
 80104b8:	f800283a 	ret

080104bc <__muldf3>:
 80104bc:	deffe404 	addi	sp,sp,-112
 80104c0:	d9001115 	stw	r4,68(sp)
 80104c4:	d9401215 	stw	r5,72(sp)
 80104c8:	d9001104 	addi	r4,sp,68
 80104cc:	d9400a04 	addi	r5,sp,40
 80104d0:	dfc01b15 	stw	ra,108(sp)
 80104d4:	d9800f15 	stw	r6,60(sp)
 80104d8:	d9c01015 	stw	r7,64(sp)
 80104dc:	ddc01a15 	stw	r23,104(sp)
 80104e0:	dd801915 	stw	r22,100(sp)
 80104e4:	dd401815 	stw	r21,96(sp)
 80104e8:	dd001715 	stw	r20,92(sp)
 80104ec:	dcc01615 	stw	r19,88(sp)
 80104f0:	dc801515 	stw	r18,84(sp)
 80104f4:	dc401415 	stw	r17,80(sp)
 80104f8:	dc001315 	stw	r16,76(sp)
 80104fc:	8001d640 	call	8001d64 <__unpack_d>
 8010500:	d9000f04 	addi	r4,sp,60
 8010504:	d9400504 	addi	r5,sp,20
 8010508:	8001d640 	call	8001d64 <__unpack_d>
 801050c:	d8c00a17 	ldw	r3,40(sp)
 8010510:	00800044 	movi	r2,1
 8010514:	10c01136 	bltu	r2,r3,801055c <__muldf3+0xa0>
 8010518:	d8c00b17 	ldw	r3,44(sp)
 801051c:	d8800617 	ldw	r2,24(sp)
 8010520:	d9000a04 	addi	r4,sp,40
 8010524:	1884c03a 	cmpne	r2,r3,r2
 8010528:	d8800b15 	stw	r2,44(sp)
 801052c:	8001b400 	call	8001b40 <__pack_d>
 8010530:	dfc01b17 	ldw	ra,108(sp)
 8010534:	ddc01a17 	ldw	r23,104(sp)
 8010538:	dd801917 	ldw	r22,100(sp)
 801053c:	dd401817 	ldw	r21,96(sp)
 8010540:	dd001717 	ldw	r20,92(sp)
 8010544:	dcc01617 	ldw	r19,88(sp)
 8010548:	dc801517 	ldw	r18,84(sp)
 801054c:	dc401417 	ldw	r17,80(sp)
 8010550:	dc001317 	ldw	r16,76(sp)
 8010554:	dec01c04 	addi	sp,sp,112
 8010558:	f800283a 	ret
 801055c:	d9000517 	ldw	r4,20(sp)
 8010560:	11000636 	bltu	r2,r4,801057c <__muldf3+0xc0>
 8010564:	d8800617 	ldw	r2,24(sp)
 8010568:	d8c00b17 	ldw	r3,44(sp)
 801056c:	d9000504 	addi	r4,sp,20
 8010570:	1884c03a 	cmpne	r2,r3,r2
 8010574:	d8800615 	stw	r2,24(sp)
 8010578:	003fec06 	br	801052c <__muldf3+0x70>
 801057c:	00800104 	movi	r2,4
 8010580:	1880051e 	bne	r3,r2,8010598 <__muldf3+0xdc>
 8010584:	00800084 	movi	r2,2
 8010588:	20bfe31e 	bne	r4,r2,8010518 <__muldf3+0x5c>
 801058c:	01020074 	movhi	r4,2049
 8010590:	21117504 	addi	r4,r4,17876
 8010594:	003fe506 	br	801052c <__muldf3+0x70>
 8010598:	2080031e 	bne	r4,r2,80105a8 <__muldf3+0xec>
 801059c:	00800084 	movi	r2,2
 80105a0:	18bffa26 	beq	r3,r2,801058c <__muldf3+0xd0>
 80105a4:	003fef06 	br	8010564 <__muldf3+0xa8>
 80105a8:	00800084 	movi	r2,2
 80105ac:	18bfda26 	beq	r3,r2,8010518 <__muldf3+0x5c>
 80105b0:	20bfec26 	beq	r4,r2,8010564 <__muldf3+0xa8>
 80105b4:	dc000d17 	ldw	r16,52(sp)
 80105b8:	dd000817 	ldw	r20,32(sp)
 80105bc:	dc800917 	ldw	r18,36(sp)
 80105c0:	8009883a 	mov	r4,r16
 80105c4:	000b883a 	mov	r5,zero
 80105c8:	a00d883a 	mov	r6,r20
 80105cc:	000f883a 	mov	r7,zero
 80105d0:	800f1a40 	call	800f1a4 <__muldi3>
 80105d4:	dc400e17 	ldw	r17,56(sp)
 80105d8:	9009883a 	mov	r4,r18
 80105dc:	800d883a 	mov	r6,r16
 80105e0:	000b883a 	mov	r5,zero
 80105e4:	000f883a 	mov	r7,zero
 80105e8:	102f883a 	mov	r23,r2
 80105ec:	1827883a 	mov	r19,r3
 80105f0:	800f1a40 	call	800f1a4 <__muldi3>
 80105f4:	900d883a 	mov	r6,r18
 80105f8:	8809883a 	mov	r4,r17
 80105fc:	000b883a 	mov	r5,zero
 8010600:	000f883a 	mov	r7,zero
 8010604:	102b883a 	mov	r21,r2
 8010608:	1821883a 	mov	r16,r3
 801060c:	800f1a40 	call	800f1a4 <__muldi3>
 8010610:	8809883a 	mov	r4,r17
 8010614:	000b883a 	mov	r5,zero
 8010618:	a00d883a 	mov	r6,r20
 801061c:	000f883a 	mov	r7,zero
 8010620:	102d883a 	mov	r22,r2
 8010624:	1825883a 	mov	r18,r3
 8010628:	800f1a40 	call	800f1a4 <__muldi3>
 801062c:	154b883a 	add	r5,r2,r21
 8010630:	2889803a 	cmpltu	r4,r5,r2
 8010634:	1c07883a 	add	r3,r3,r16
 8010638:	20c9883a 	add	r4,r4,r3
 801063c:	24004b36 	bltu	r4,r16,801076c <__muldf3+0x2b0>
 8010640:	8100011e 	bne	r16,r4,8010648 <__muldf3+0x18c>
 8010644:	2d404936 	bltu	r5,r21,801076c <__muldf3+0x2b0>
 8010648:	0011883a 	mov	r8,zero
 801064c:	0007883a 	mov	r3,zero
 8010650:	2ccb883a 	add	r5,r5,r19
 8010654:	b80d883a 	mov	r6,r23
 8010658:	2cc0012e 	bgeu	r5,r19,8010660 <__muldf3+0x1a4>
 801065c:	02000044 	movi	r8,1
 8010660:	258f883a 	add	r7,r4,r22
 8010664:	3909803a 	cmpltu	r4,r7,r4
 8010668:	da400c17 	ldw	r9,48(sp)
 801066c:	2489883a 	add	r4,r4,r18
 8010670:	d8800717 	ldw	r2,28(sp)
 8010674:	20c9883a 	add	r4,r4,r3
 8010678:	da800b17 	ldw	r10,44(sp)
 801067c:	d8c00617 	ldw	r3,24(sp)
 8010680:	3a11883a 	add	r8,r7,r8
 8010684:	4885883a 	add	r2,r9,r2
 8010688:	50c6c03a 	cmpne	r3,r10,r3
 801068c:	41cf803a 	cmpltu	r7,r8,r7
 8010690:	12400104 	addi	r9,r2,4
 8010694:	d8c00115 	stw	r3,4(sp)
 8010698:	3909883a 	add	r4,r7,r4
 801069c:	da400215 	stw	r9,8(sp)
 80106a0:	03480034 	movhi	r13,8192
 80106a4:	6b7fffc4 	addi	r13,r13,-1
 80106a8:	4007883a 	mov	r3,r8
 80106ac:	6900102e 	bgeu	r13,r4,80106f0 <__muldf3+0x234>
 80106b0:	10800144 	addi	r2,r2,5
 80106b4:	180ed07a 	srli	r7,r3,1
 80106b8:	18c0004c 	andi	r3,r3,1
 80106bc:	201097fa 	slli	r8,r4,31
 80106c0:	281697fa 	slli	r11,r5,31
 80106c4:	2008d07a 	srli	r4,r4,1
 80106c8:	3014d07a 	srli	r10,r6,1
 80106cc:	2812d07a 	srli	r9,r5,1
 80106d0:	1019883a 	mov	r12,r2
 80106d4:	18000226 	beq	r3,zero,80106e0 <__muldf3+0x224>
 80106d8:	5a8cb03a 	or	r6,r11,r10
 80106dc:	49600034 	orhi	r5,r9,32768
 80106e0:	41c6b03a 	or	r3,r8,r7
 80106e4:	10800044 	addi	r2,r2,1
 80106e8:	693ff236 	bltu	r13,r4,80106b4 <__muldf3+0x1f8>
 80106ec:	db000215 	stw	r12,8(sp)
 80106f0:	03440034 	movhi	r13,4096
 80106f4:	6b7fffc4 	addi	r13,r13,-1
 80106f8:	69001336 	bltu	r13,r4,8010748 <__muldf3+0x28c>
 80106fc:	d8800217 	ldw	r2,8(sp)
 8010700:	10bfffc4 	addi	r2,r2,-1
 8010704:	18d3883a 	add	r9,r3,r3
 8010708:	48c7803a 	cmpltu	r3,r9,r3
 801070c:	2109883a 	add	r4,r4,r4
 8010710:	190f883a 	add	r7,r3,r4
 8010714:	3191883a 	add	r8,r6,r6
 8010718:	4197803a 	cmpltu	r11,r8,r6
 801071c:	2955883a 	add	r10,r5,r5
 8010720:	1019883a 	mov	r12,r2
 8010724:	4807883a 	mov	r3,r9
 8010728:	3809883a 	mov	r4,r7
 801072c:	2800010e 	bge	r5,zero,8010734 <__muldf3+0x278>
 8010730:	48c00054 	ori	r3,r9,1
 8010734:	400d883a 	mov	r6,r8
 8010738:	5a8b883a 	add	r5,r11,r10
 801073c:	10bfffc4 	addi	r2,r2,-1
 8010740:	69fff02e 	bgeu	r13,r7,8010704 <__muldf3+0x248>
 8010744:	db000215 	stw	r12,8(sp)
 8010748:	18803fcc 	andi	r2,r3,255
 801074c:	01c02004 	movi	r7,128
 8010750:	11c00926 	beq	r2,r7,8010778 <__muldf3+0x2bc>
 8010754:	008000c4 	movi	r2,3
 8010758:	d9000415 	stw	r4,16(sp)
 801075c:	d8c00315 	stw	r3,12(sp)
 8010760:	d8800015 	stw	r2,0(sp)
 8010764:	d809883a 	mov	r4,sp
 8010768:	003f7006 	br	801052c <__muldf3+0x70>
 801076c:	0011883a 	mov	r8,zero
 8010770:	00c00044 	movi	r3,1
 8010774:	003fb606 	br	8010650 <__muldf3+0x194>
 8010778:	19c0400c 	andi	r7,r3,256
 801077c:	383ff51e 	bne	r7,zero,8010754 <__muldf3+0x298>
 8010780:	314ab03a 	or	r5,r6,r5
 8010784:	283ff326 	beq	r5,zero,8010754 <__muldf3+0x298>
 8010788:	1885883a 	add	r2,r3,r2
 801078c:	10cb803a 	cmpltu	r5,r2,r3
 8010790:	00ffc004 	movi	r3,-256
 8010794:	10c6703a 	and	r3,r2,r3
 8010798:	2909883a 	add	r4,r5,r4
 801079c:	003fed06 	br	8010754 <__muldf3+0x298>

080107a0 <__eqdf2>:
 80107a0:	defff104 	addi	sp,sp,-60
 80107a4:	d9000c15 	stw	r4,48(sp)
 80107a8:	d9400d15 	stw	r5,52(sp)
 80107ac:	d9000c04 	addi	r4,sp,48
 80107b0:	d9400504 	addi	r5,sp,20
 80107b4:	dfc00e15 	stw	ra,56(sp)
 80107b8:	d9800a15 	stw	r6,40(sp)
 80107bc:	d9c00b15 	stw	r7,44(sp)
 80107c0:	8001d640 	call	8001d64 <__unpack_d>
 80107c4:	d9000a04 	addi	r4,sp,40
 80107c8:	d80b883a 	mov	r5,sp
 80107cc:	8001d640 	call	8001d64 <__unpack_d>
 80107d0:	d8c00517 	ldw	r3,20(sp)
 80107d4:	00800044 	movi	r2,1
 80107d8:	10c0052e 	bgeu	r2,r3,80107f0 <__eqdf2+0x50>
 80107dc:	d8c00017 	ldw	r3,0(sp)
 80107e0:	10c0032e 	bgeu	r2,r3,80107f0 <__eqdf2+0x50>
 80107e4:	d9000504 	addi	r4,sp,20
 80107e8:	d80b883a 	mov	r5,sp
 80107ec:	8010dec0 	call	8010dec <__fpcmp_parts_d>
 80107f0:	dfc00e17 	ldw	ra,56(sp)
 80107f4:	dec00f04 	addi	sp,sp,60
 80107f8:	f800283a 	ret

080107fc <__nedf2>:
 80107fc:	defff104 	addi	sp,sp,-60
 8010800:	d9000c15 	stw	r4,48(sp)
 8010804:	d9400d15 	stw	r5,52(sp)
 8010808:	d9000c04 	addi	r4,sp,48
 801080c:	d9400504 	addi	r5,sp,20
 8010810:	dfc00e15 	stw	ra,56(sp)
 8010814:	d9800a15 	stw	r6,40(sp)
 8010818:	d9c00b15 	stw	r7,44(sp)
 801081c:	8001d640 	call	8001d64 <__unpack_d>
 8010820:	d9000a04 	addi	r4,sp,40
 8010824:	d80b883a 	mov	r5,sp
 8010828:	8001d640 	call	8001d64 <__unpack_d>
 801082c:	d8c00517 	ldw	r3,20(sp)
 8010830:	00800044 	movi	r2,1
 8010834:	10c0052e 	bgeu	r2,r3,801084c <__nedf2+0x50>
 8010838:	d8c00017 	ldw	r3,0(sp)
 801083c:	10c0032e 	bgeu	r2,r3,801084c <__nedf2+0x50>
 8010840:	d9000504 	addi	r4,sp,20
 8010844:	d80b883a 	mov	r5,sp
 8010848:	8010dec0 	call	8010dec <__fpcmp_parts_d>
 801084c:	dfc00e17 	ldw	ra,56(sp)
 8010850:	dec00f04 	addi	sp,sp,60
 8010854:	f800283a 	ret

08010858 <__gtdf2>:
 8010858:	defff104 	addi	sp,sp,-60
 801085c:	d9000c15 	stw	r4,48(sp)
 8010860:	d9400d15 	stw	r5,52(sp)
 8010864:	d9000c04 	addi	r4,sp,48
 8010868:	d9400504 	addi	r5,sp,20
 801086c:	dfc00e15 	stw	ra,56(sp)
 8010870:	d9800a15 	stw	r6,40(sp)
 8010874:	d9c00b15 	stw	r7,44(sp)
 8010878:	8001d640 	call	8001d64 <__unpack_d>
 801087c:	d9000a04 	addi	r4,sp,40
 8010880:	d80b883a 	mov	r5,sp
 8010884:	8001d640 	call	8001d64 <__unpack_d>
 8010888:	d8c00517 	ldw	r3,20(sp)
 801088c:	00800044 	movi	r2,1
 8010890:	10c0082e 	bgeu	r2,r3,80108b4 <__gtdf2+0x5c>
 8010894:	d8c00017 	ldw	r3,0(sp)
 8010898:	10c0062e 	bgeu	r2,r3,80108b4 <__gtdf2+0x5c>
 801089c:	d9000504 	addi	r4,sp,20
 80108a0:	d80b883a 	mov	r5,sp
 80108a4:	8010dec0 	call	8010dec <__fpcmp_parts_d>
 80108a8:	dfc00e17 	ldw	ra,56(sp)
 80108ac:	dec00f04 	addi	sp,sp,60
 80108b0:	f800283a 	ret
 80108b4:	00bfffc4 	movi	r2,-1
 80108b8:	003ffb06 	br	80108a8 <__gtdf2+0x50>

080108bc <__gedf2>:
 80108bc:	defff104 	addi	sp,sp,-60
 80108c0:	d9000c15 	stw	r4,48(sp)
 80108c4:	d9400d15 	stw	r5,52(sp)
 80108c8:	d9000c04 	addi	r4,sp,48
 80108cc:	d9400504 	addi	r5,sp,20
 80108d0:	dfc00e15 	stw	ra,56(sp)
 80108d4:	d9800a15 	stw	r6,40(sp)
 80108d8:	d9c00b15 	stw	r7,44(sp)
 80108dc:	8001d640 	call	8001d64 <__unpack_d>
 80108e0:	d9000a04 	addi	r4,sp,40
 80108e4:	d80b883a 	mov	r5,sp
 80108e8:	8001d640 	call	8001d64 <__unpack_d>
 80108ec:	d8c00517 	ldw	r3,20(sp)
 80108f0:	00800044 	movi	r2,1
 80108f4:	10c0082e 	bgeu	r2,r3,8010918 <__gedf2+0x5c>
 80108f8:	d8c00017 	ldw	r3,0(sp)
 80108fc:	10c0062e 	bgeu	r2,r3,8010918 <__gedf2+0x5c>
 8010900:	d9000504 	addi	r4,sp,20
 8010904:	d80b883a 	mov	r5,sp
 8010908:	8010dec0 	call	8010dec <__fpcmp_parts_d>
 801090c:	dfc00e17 	ldw	ra,56(sp)
 8010910:	dec00f04 	addi	sp,sp,60
 8010914:	f800283a 	ret
 8010918:	00bfffc4 	movi	r2,-1
 801091c:	003ffb06 	br	801090c <__gedf2+0x50>

08010920 <__ltdf2>:
 8010920:	defff104 	addi	sp,sp,-60
 8010924:	d9000c15 	stw	r4,48(sp)
 8010928:	d9400d15 	stw	r5,52(sp)
 801092c:	d9000c04 	addi	r4,sp,48
 8010930:	d9400504 	addi	r5,sp,20
 8010934:	dfc00e15 	stw	ra,56(sp)
 8010938:	d9800a15 	stw	r6,40(sp)
 801093c:	d9c00b15 	stw	r7,44(sp)
 8010940:	8001d640 	call	8001d64 <__unpack_d>
 8010944:	d9000a04 	addi	r4,sp,40
 8010948:	d80b883a 	mov	r5,sp
 801094c:	8001d640 	call	8001d64 <__unpack_d>
 8010950:	d8c00517 	ldw	r3,20(sp)
 8010954:	00800044 	movi	r2,1
 8010958:	10c0052e 	bgeu	r2,r3,8010970 <__ltdf2+0x50>
 801095c:	d8c00017 	ldw	r3,0(sp)
 8010960:	10c0032e 	bgeu	r2,r3,8010970 <__ltdf2+0x50>
 8010964:	d9000504 	addi	r4,sp,20
 8010968:	d80b883a 	mov	r5,sp
 801096c:	8010dec0 	call	8010dec <__fpcmp_parts_d>
 8010970:	dfc00e17 	ldw	ra,56(sp)
 8010974:	dec00f04 	addi	sp,sp,60
 8010978:	f800283a 	ret

0801097c <__ledf2>:
 801097c:	defff104 	addi	sp,sp,-60
 8010980:	d9000c15 	stw	r4,48(sp)
 8010984:	d9400d15 	stw	r5,52(sp)
 8010988:	d9000c04 	addi	r4,sp,48
 801098c:	d9400504 	addi	r5,sp,20
 8010990:	dfc00e15 	stw	ra,56(sp)
 8010994:	d9800a15 	stw	r6,40(sp)
 8010998:	d9c00b15 	stw	r7,44(sp)
 801099c:	8001d640 	call	8001d64 <__unpack_d>
 80109a0:	d9000a04 	addi	r4,sp,40
 80109a4:	d80b883a 	mov	r5,sp
 80109a8:	8001d640 	call	8001d64 <__unpack_d>
 80109ac:	d8c00517 	ldw	r3,20(sp)
 80109b0:	00800044 	movi	r2,1
 80109b4:	10c0052e 	bgeu	r2,r3,80109cc <__ledf2+0x50>
 80109b8:	d8c00017 	ldw	r3,0(sp)
 80109bc:	10c0032e 	bgeu	r2,r3,80109cc <__ledf2+0x50>
 80109c0:	d9000504 	addi	r4,sp,20
 80109c4:	d80b883a 	mov	r5,sp
 80109c8:	8010dec0 	call	8010dec <__fpcmp_parts_d>
 80109cc:	dfc00e17 	ldw	ra,56(sp)
 80109d0:	dec00f04 	addi	sp,sp,60
 80109d4:	f800283a 	ret

080109d8 <__fixdfsi>:
 80109d8:	defff804 	addi	sp,sp,-32
 80109dc:	d9000515 	stw	r4,20(sp)
 80109e0:	d9400615 	stw	r5,24(sp)
 80109e4:	d9000504 	addi	r4,sp,20
 80109e8:	d80b883a 	mov	r5,sp
 80109ec:	dfc00715 	stw	ra,28(sp)
 80109f0:	8001d640 	call	8001d64 <__unpack_d>
 80109f4:	d8800017 	ldw	r2,0(sp)
 80109f8:	00c00084 	movi	r3,2
 80109fc:	10c01c26 	beq	r2,r3,8010a70 <__fixdfsi+0x98>
 8010a00:	00c00044 	movi	r3,1
 8010a04:	18801a2e 	bgeu	r3,r2,8010a70 <__fixdfsi+0x98>
 8010a08:	00c00104 	movi	r3,4
 8010a0c:	10c01126 	beq	r2,r3,8010a54 <__fixdfsi+0x7c>
 8010a10:	d8800217 	ldw	r2,8(sp)
 8010a14:	10001616 	blt	r2,zero,8010a70 <__fixdfsi+0x98>
 8010a18:	00c00784 	movi	r3,30
 8010a1c:	18800d16 	blt	r3,r2,8010a54 <__fixdfsi+0x7c>
 8010a20:	00c00f04 	movi	r3,60
 8010a24:	1885c83a 	sub	r2,r3,r2
 8010a28:	10fff804 	addi	r3,r2,-32
 8010a2c:	d9400317 	ldw	r5,12(sp)
 8010a30:	d9000417 	ldw	r4,16(sp)
 8010a34:	18001616 	blt	r3,zero,8010a90 <__fixdfsi+0xb8>
 8010a38:	20c4d83a 	srl	r2,r4,r3
 8010a3c:	d8c00117 	ldw	r3,4(sp)
 8010a40:	18000126 	beq	r3,zero,8010a48 <__fixdfsi+0x70>
 8010a44:	0085c83a 	sub	r2,zero,r2
 8010a48:	dfc00717 	ldw	ra,28(sp)
 8010a4c:	dec00804 	addi	sp,sp,32
 8010a50:	f800283a 	ret
 8010a54:	d8800117 	ldw	r2,4(sp)
 8010a58:	1000091e 	bne	r2,zero,8010a80 <__fixdfsi+0xa8>
 8010a5c:	00a00034 	movhi	r2,32768
 8010a60:	10bfffc4 	addi	r2,r2,-1
 8010a64:	dfc00717 	ldw	ra,28(sp)
 8010a68:	dec00804 	addi	sp,sp,32
 8010a6c:	f800283a 	ret
 8010a70:	0005883a 	mov	r2,zero
 8010a74:	dfc00717 	ldw	ra,28(sp)
 8010a78:	dec00804 	addi	sp,sp,32
 8010a7c:	f800283a 	ret
 8010a80:	00a00034 	movhi	r2,32768
 8010a84:	dfc00717 	ldw	ra,28(sp)
 8010a88:	dec00804 	addi	sp,sp,32
 8010a8c:	f800283a 	ret
 8010a90:	2008907a 	slli	r4,r4,1
 8010a94:	018007c4 	movi	r6,31
 8010a98:	308dc83a 	sub	r6,r6,r2
 8010a9c:	2188983a 	sll	r4,r4,r6
 8010aa0:	2884d83a 	srl	r2,r5,r2
 8010aa4:	2084b03a 	or	r2,r4,r2
 8010aa8:	003fe406 	br	8010a3c <__fixdfsi+0x64>

08010aac <__truncdfsf2>:
 8010aac:	defff804 	addi	sp,sp,-32
 8010ab0:	d9000515 	stw	r4,20(sp)
 8010ab4:	d9400615 	stw	r5,24(sp)
 8010ab8:	d9000504 	addi	r4,sp,20
 8010abc:	d80b883a 	mov	r5,sp
 8010ac0:	dfc00715 	stw	ra,28(sp)
 8010ac4:	8001d640 	call	8001d64 <__unpack_d>
 8010ac8:	d8800317 	ldw	r2,12(sp)
 8010acc:	d8c00417 	ldw	r3,16(sp)
 8010ad0:	01100034 	movhi	r4,16384
 8010ad4:	213fffc4 	addi	r4,r4,-1
 8010ad8:	100ed7ba 	srli	r7,r2,30
 8010adc:	180690ba 	slli	r3,r3,2
 8010ae0:	1104703a 	and	r2,r2,r4
 8010ae4:	19ceb03a 	or	r7,r3,r7
 8010ae8:	10000126 	beq	r2,zero,8010af0 <__truncdfsf2+0x44>
 8010aec:	39c00054 	ori	r7,r7,1
 8010af0:	d9000017 	ldw	r4,0(sp)
 8010af4:	d9400117 	ldw	r5,4(sp)
 8010af8:	d9800217 	ldw	r6,8(sp)
 8010afc:	8010dc00 	call	8010dc0 <__make_fp>
 8010b00:	dfc00717 	ldw	ra,28(sp)
 8010b04:	dec00804 	addi	sp,sp,32
 8010b08:	f800283a 	ret

08010b0c <udivmodsi4>:
 8010b0c:	2005883a 	mov	r2,r4
 8010b10:	2900182e 	bgeu	r5,r4,8010b74 <udivmodsi4+0x68>
 8010b14:	28001716 	blt	r5,zero,8010b74 <udivmodsi4+0x68>
 8010b18:	01000804 	movi	r4,32
 8010b1c:	00c00044 	movi	r3,1
 8010b20:	00000206 	br	8010b2c <udivmodsi4+0x20>
 8010b24:	20001126 	beq	r4,zero,8010b6c <udivmodsi4+0x60>
 8010b28:	28000516 	blt	r5,zero,8010b40 <udivmodsi4+0x34>
 8010b2c:	294b883a 	add	r5,r5,r5
 8010b30:	213fffc4 	addi	r4,r4,-1
 8010b34:	18c7883a 	add	r3,r3,r3
 8010b38:	28bffa36 	bltu	r5,r2,8010b24 <udivmodsi4+0x18>
 8010b3c:	18000b26 	beq	r3,zero,8010b6c <udivmodsi4+0x60>
 8010b40:	0009883a 	mov	r4,zero
 8010b44:	11400236 	bltu	r2,r5,8010b50 <udivmodsi4+0x44>
 8010b48:	1145c83a 	sub	r2,r2,r5
 8010b4c:	20c8b03a 	or	r4,r4,r3
 8010b50:	1806d07a 	srli	r3,r3,1
 8010b54:	280ad07a 	srli	r5,r5,1
 8010b58:	183ffa1e 	bne	r3,zero,8010b44 <udivmodsi4+0x38>
 8010b5c:	3000021e 	bne	r6,zero,8010b68 <udivmodsi4+0x5c>
 8010b60:	2005883a 	mov	r2,r4
 8010b64:	f800283a 	ret
 8010b68:	f800283a 	ret
 8010b6c:	0009883a 	mov	r4,zero
 8010b70:	003ffa06 	br	8010b5c <udivmodsi4+0x50>
 8010b74:	00c00044 	movi	r3,1
 8010b78:	0009883a 	mov	r4,zero
 8010b7c:	003ff106 	br	8010b44 <udivmodsi4+0x38>

08010b80 <__divsi3>:
 8010b80:	defffe04 	addi	sp,sp,-8
 8010b84:	dfc00115 	stw	ra,4(sp)
 8010b88:	dc000015 	stw	r16,0(sp)
 8010b8c:	20000a16 	blt	r4,zero,8010bb8 <__divsi3+0x38>
 8010b90:	0021883a 	mov	r16,zero
 8010b94:	28000b16 	blt	r5,zero,8010bc4 <__divsi3+0x44>
 8010b98:	000d883a 	mov	r6,zero
 8010b9c:	8010b0c0 	call	8010b0c <udivmodsi4>
 8010ba0:	80000126 	beq	r16,zero,8010ba8 <__divsi3+0x28>
 8010ba4:	0085c83a 	sub	r2,zero,r2
 8010ba8:	dfc00117 	ldw	ra,4(sp)
 8010bac:	dc000017 	ldw	r16,0(sp)
 8010bb0:	dec00204 	addi	sp,sp,8
 8010bb4:	f800283a 	ret
 8010bb8:	0109c83a 	sub	r4,zero,r4
 8010bbc:	04000044 	movi	r16,1
 8010bc0:	283ff50e 	bge	r5,zero,8010b98 <__divsi3+0x18>
 8010bc4:	014bc83a 	sub	r5,zero,r5
 8010bc8:	8400005c 	xori	r16,r16,1
 8010bcc:	003ff206 	br	8010b98 <__divsi3+0x18>

08010bd0 <__modsi3>:
 8010bd0:	deffff04 	addi	sp,sp,-4
 8010bd4:	dfc00015 	stw	ra,0(sp)
 8010bd8:	20000516 	blt	r4,zero,8010bf0 <__modsi3+0x20>
 8010bdc:	28000c16 	blt	r5,zero,8010c10 <__modsi3+0x40>
 8010be0:	01800044 	movi	r6,1
 8010be4:	dfc00017 	ldw	ra,0(sp)
 8010be8:	dec00104 	addi	sp,sp,4
 8010bec:	8010b0c1 	jmpi	8010b0c <udivmodsi4>
 8010bf0:	0109c83a 	sub	r4,zero,r4
 8010bf4:	28000b16 	blt	r5,zero,8010c24 <__modsi3+0x54>
 8010bf8:	01800044 	movi	r6,1
 8010bfc:	8010b0c0 	call	8010b0c <udivmodsi4>
 8010c00:	0085c83a 	sub	r2,zero,r2
 8010c04:	dfc00017 	ldw	ra,0(sp)
 8010c08:	dec00104 	addi	sp,sp,4
 8010c0c:	f800283a 	ret
 8010c10:	014bc83a 	sub	r5,zero,r5
 8010c14:	01800044 	movi	r6,1
 8010c18:	dfc00017 	ldw	ra,0(sp)
 8010c1c:	dec00104 	addi	sp,sp,4
 8010c20:	8010b0c1 	jmpi	8010b0c <udivmodsi4>
 8010c24:	014bc83a 	sub	r5,zero,r5
 8010c28:	003ff306 	br	8010bf8 <__modsi3+0x28>

08010c2c <__udivsi3>:
 8010c2c:	000d883a 	mov	r6,zero
 8010c30:	8010b0c1 	jmpi	8010b0c <udivmodsi4>

08010c34 <__umodsi3>:
 8010c34:	01800044 	movi	r6,1
 8010c38:	8010b0c1 	jmpi	8010b0c <udivmodsi4>

08010c3c <__unpack_f>:
 8010c3c:	20c00017 	ldw	r3,0(r4)
 8010c40:	00802034 	movhi	r2,128
 8010c44:	10bfffc4 	addi	r2,r2,-1
 8010c48:	1808d5fa 	srli	r4,r3,23
 8010c4c:	180cd7fa 	srli	r6,r3,31
 8010c50:	1884703a 	and	r2,r3,r2
 8010c54:	21003fcc 	andi	r4,r4,255
 8010c58:	29800115 	stw	r6,4(r5)
 8010c5c:	2000111e 	bne	r4,zero,8010ca4 <__unpack_f+0x68>
 8010c60:	10001a26 	beq	r2,zero,8010ccc <__unpack_f+0x90>
 8010c64:	00ffe084 	movi	r3,-126
 8010c68:	100491fa 	slli	r2,r2,7
 8010c6c:	28c00215 	stw	r3,8(r5)
 8010c70:	00c000c4 	movi	r3,3
 8010c74:	28c00015 	stw	r3,0(r5)
 8010c78:	01900034 	movhi	r6,16384
 8010c7c:	31bfffc4 	addi	r6,r6,-1
 8010c80:	30801036 	bltu	r6,r2,8010cc4 <__unpack_f+0x88>
 8010c84:	00ffe044 	movi	r3,-127
 8010c88:	1085883a 	add	r2,r2,r2
 8010c8c:	1809883a 	mov	r4,r3
 8010c90:	18ffffc4 	addi	r3,r3,-1
 8010c94:	30bffc2e 	bgeu	r6,r2,8010c88 <__unpack_f+0x4c>
 8010c98:	29000215 	stw	r4,8(r5)
 8010c9c:	28800315 	stw	r2,12(r5)
 8010ca0:	f800283a 	ret
 8010ca4:	01803fc4 	movi	r6,255
 8010ca8:	21800b26 	beq	r4,r6,8010cd8 <__unpack_f+0x9c>
 8010cac:	100491fa 	slli	r2,r2,7
 8010cb0:	213fe044 	addi	r4,r4,-127
 8010cb4:	00c000c4 	movi	r3,3
 8010cb8:	10900034 	orhi	r2,r2,16384
 8010cbc:	29000215 	stw	r4,8(r5)
 8010cc0:	28c00015 	stw	r3,0(r5)
 8010cc4:	28800315 	stw	r2,12(r5)
 8010cc8:	f800283a 	ret
 8010ccc:	00800084 	movi	r2,2
 8010cd0:	28800015 	stw	r2,0(r5)
 8010cd4:	f800283a 	ret
 8010cd8:	10000526 	beq	r2,zero,8010cf0 <__unpack_f+0xb4>
 8010cdc:	18c0042c 	andhi	r3,r3,16
 8010ce0:	18000626 	beq	r3,zero,8010cfc <__unpack_f+0xc0>
 8010ce4:	00c00044 	movi	r3,1
 8010ce8:	28c00015 	stw	r3,0(r5)
 8010cec:	003ff506 	br	8010cc4 <__unpack_f+0x88>
 8010cf0:	00800104 	movi	r2,4
 8010cf4:	28800015 	stw	r2,0(r5)
 8010cf8:	f800283a 	ret
 8010cfc:	28000015 	stw	zero,0(r5)
 8010d00:	003ff006 	br	8010cc4 <__unpack_f+0x88>

08010d04 <__fpcmp_parts_f>:
 8010d04:	20c00017 	ldw	r3,0(r4)
 8010d08:	00800044 	movi	r2,1
 8010d0c:	10c0172e 	bgeu	r2,r3,8010d6c <__fpcmp_parts_f+0x68>
 8010d10:	29800017 	ldw	r6,0(r5)
 8010d14:	1180152e 	bgeu	r2,r6,8010d6c <__fpcmp_parts_f+0x68>
 8010d18:	01c00104 	movi	r7,4
 8010d1c:	19c02326 	beq	r3,r7,8010dac <__fpcmp_parts_f+0xa8>
 8010d20:	31c00926 	beq	r6,r7,8010d48 <__fpcmp_parts_f+0x44>
 8010d24:	01c00084 	movi	r7,2
 8010d28:	19c00626 	beq	r3,r7,8010d44 <__fpcmp_parts_f+0x40>
 8010d2c:	31c01126 	beq	r6,r7,8010d74 <__fpcmp_parts_f+0x70>
 8010d30:	20c00117 	ldw	r3,4(r4)
 8010d34:	29800117 	ldw	r6,4(r5)
 8010d38:	19801226 	beq	r3,r6,8010d84 <__fpcmp_parts_f+0x80>
 8010d3c:	1800041e 	bne	r3,zero,8010d50 <__fpcmp_parts_f+0x4c>
 8010d40:	f800283a 	ret
 8010d44:	30c01526 	beq	r6,r3,8010d9c <__fpcmp_parts_f+0x98>
 8010d48:	28800117 	ldw	r2,4(r5)
 8010d4c:	1000071e 	bne	r2,zero,8010d6c <__fpcmp_parts_f+0x68>
 8010d50:	00bfffc4 	movi	r2,-1
 8010d54:	f800283a 	ret
 8010d58:	39801216 	blt	r7,r6,8010da4 <__fpcmp_parts_f+0xa0>
 8010d5c:	21000317 	ldw	r4,12(r4)
 8010d60:	28800317 	ldw	r2,12(r5)
 8010d64:	11000c2e 	bgeu	r2,r4,8010d98 <__fpcmp_parts_f+0x94>
 8010d68:	183ff91e 	bne	r3,zero,8010d50 <__fpcmp_parts_f+0x4c>
 8010d6c:	00800044 	movi	r2,1
 8010d70:	f800283a 	ret
 8010d74:	20800117 	ldw	r2,4(r4)
 8010d78:	103ff51e 	bne	r2,zero,8010d50 <__fpcmp_parts_f+0x4c>
 8010d7c:	00800044 	movi	r2,1
 8010d80:	f800283a 	ret
 8010d84:	21c00217 	ldw	r7,8(r4)
 8010d88:	29800217 	ldw	r6,8(r5)
 8010d8c:	31fff20e 	bge	r6,r7,8010d58 <__fpcmp_parts_f+0x54>
 8010d90:	183fef1e 	bne	r3,zero,8010d50 <__fpcmp_parts_f+0x4c>
 8010d94:	f800283a 	ret
 8010d98:	20800236 	bltu	r4,r2,8010da4 <__fpcmp_parts_f+0xa0>
 8010d9c:	0005883a 	mov	r2,zero
 8010da0:	f800283a 	ret
 8010da4:	183fea26 	beq	r3,zero,8010d50 <__fpcmp_parts_f+0x4c>
 8010da8:	003ff006 	br	8010d6c <__fpcmp_parts_f+0x68>
 8010dac:	30fff11e 	bne	r6,r3,8010d74 <__fpcmp_parts_f+0x70>
 8010db0:	28c00117 	ldw	r3,4(r5)
 8010db4:	20800117 	ldw	r2,4(r4)
 8010db8:	1885c83a 	sub	r2,r3,r2
 8010dbc:	f800283a 	ret

08010dc0 <__make_fp>:
 8010dc0:	defffb04 	addi	sp,sp,-20
 8010dc4:	d9000015 	stw	r4,0(sp)
 8010dc8:	d809883a 	mov	r4,sp
 8010dcc:	dfc00415 	stw	ra,16(sp)
 8010dd0:	d9400115 	stw	r5,4(sp)
 8010dd4:	d9800215 	stw	r6,8(sp)
 8010dd8:	d9c00315 	stw	r7,12(sp)
 8010ddc:	8010ebc0 	call	8010ebc <__pack_f>
 8010de0:	dfc00417 	ldw	ra,16(sp)
 8010de4:	dec00504 	addi	sp,sp,20
 8010de8:	f800283a 	ret

08010dec <__fpcmp_parts_d>:
 8010dec:	20c00017 	ldw	r3,0(r4)
 8010df0:	00800044 	movi	r2,1
 8010df4:	10c0142e 	bgeu	r2,r3,8010e48 <__fpcmp_parts_d+0x5c>
 8010df8:	29800017 	ldw	r6,0(r5)
 8010dfc:	1180122e 	bgeu	r2,r6,8010e48 <__fpcmp_parts_d+0x5c>
 8010e00:	01c00104 	movi	r7,4
 8010e04:	19c02826 	beq	r3,r7,8010ea8 <__fpcmp_parts_d+0xbc>
 8010e08:	31c00926 	beq	r6,r7,8010e30 <__fpcmp_parts_d+0x44>
 8010e0c:	01c00084 	movi	r7,2
 8010e10:	19c00626 	beq	r3,r7,8010e2c <__fpcmp_parts_d+0x40>
 8010e14:	31c00a26 	beq	r6,r7,8010e40 <__fpcmp_parts_d+0x54>
 8010e18:	20c00117 	ldw	r3,4(r4)
 8010e1c:	29800117 	ldw	r6,4(r5)
 8010e20:	19800b26 	beq	r3,r6,8010e50 <__fpcmp_parts_d+0x64>
 8010e24:	1800041e 	bne	r3,zero,8010e38 <__fpcmp_parts_d+0x4c>
 8010e28:	f800283a 	ret
 8010e2c:	30c01a26 	beq	r6,r3,8010e98 <__fpcmp_parts_d+0xac>
 8010e30:	28800117 	ldw	r2,4(r5)
 8010e34:	1000041e 	bne	r2,zero,8010e48 <__fpcmp_parts_d+0x5c>
 8010e38:	00bfffc4 	movi	r2,-1
 8010e3c:	f800283a 	ret
 8010e40:	20800117 	ldw	r2,4(r4)
 8010e44:	103ffc1e 	bne	r2,zero,8010e38 <__fpcmp_parts_d+0x4c>
 8010e48:	00800044 	movi	r2,1
 8010e4c:	f800283a 	ret
 8010e50:	21c00217 	ldw	r7,8(r4)
 8010e54:	29800217 	ldw	r6,8(r5)
 8010e58:	31c0020e 	bge	r6,r7,8010e64 <__fpcmp_parts_d+0x78>
 8010e5c:	183ff61e 	bne	r3,zero,8010e38 <__fpcmp_parts_d+0x4c>
 8010e60:	f800283a 	ret
 8010e64:	39800a16 	blt	r7,r6,8010e90 <__fpcmp_parts_d+0xa4>
 8010e68:	20800417 	ldw	r2,16(r4)
 8010e6c:	29800417 	ldw	r6,16(r5)
 8010e70:	21c00317 	ldw	r7,12(r4)
 8010e74:	29000317 	ldw	r4,12(r5)
 8010e78:	30800936 	bltu	r6,r2,8010ea0 <__fpcmp_parts_d+0xb4>
 8010e7c:	1180011e 	bne	r2,r6,8010e84 <__fpcmp_parts_d+0x98>
 8010e80:	21c00736 	bltu	r4,r7,8010ea0 <__fpcmp_parts_d+0xb4>
 8010e84:	11800236 	bltu	r2,r6,8010e90 <__fpcmp_parts_d+0xa4>
 8010e88:	3080031e 	bne	r6,r2,8010e98 <__fpcmp_parts_d+0xac>
 8010e8c:	3900022e 	bgeu	r7,r4,8010e98 <__fpcmp_parts_d+0xac>
 8010e90:	183fe926 	beq	r3,zero,8010e38 <__fpcmp_parts_d+0x4c>
 8010e94:	003fec06 	br	8010e48 <__fpcmp_parts_d+0x5c>
 8010e98:	0005883a 	mov	r2,zero
 8010e9c:	f800283a 	ret
 8010ea0:	183fe926 	beq	r3,zero,8010e48 <__fpcmp_parts_d+0x5c>
 8010ea4:	003fe406 	br	8010e38 <__fpcmp_parts_d+0x4c>
 8010ea8:	30ffe51e 	bne	r6,r3,8010e40 <__fpcmp_parts_d+0x54>
 8010eac:	28c00117 	ldw	r3,4(r5)
 8010eb0:	20800117 	ldw	r2,4(r4)
 8010eb4:	1885c83a 	sub	r2,r3,r2
 8010eb8:	f800283a 	ret

08010ebc <__pack_f>:
 8010ebc:	21400017 	ldw	r5,0(r4)
 8010ec0:	01800044 	movi	r6,1
 8010ec4:	20c00317 	ldw	r3,12(r4)
 8010ec8:	21c00117 	ldw	r7,4(r4)
 8010ecc:	3140282e 	bgeu	r6,r5,8010f70 <__pack_f+0xb4>
 8010ed0:	00800104 	movi	r2,4
 8010ed4:	28802326 	beq	r5,r2,8010f64 <__pack_f+0xa8>
 8010ed8:	00800084 	movi	r2,2
 8010edc:	28800f26 	beq	r5,r2,8010f1c <__pack_f+0x60>
 8010ee0:	18000e26 	beq	r3,zero,8010f1c <__pack_f+0x60>
 8010ee4:	21000217 	ldw	r4,8(r4)
 8010ee8:	00bfe084 	movi	r2,-126
 8010eec:	20802616 	blt	r4,r2,8010f88 <__pack_f+0xcc>
 8010ef0:	00801fc4 	movi	r2,127
 8010ef4:	11001b16 	blt	r2,r4,8010f64 <__pack_f+0xa8>
 8010ef8:	188a703a 	and	r5,r3,r2
 8010efc:	00801004 	movi	r2,64
 8010f00:	28801126 	beq	r5,r2,8010f48 <__pack_f+0x8c>
 8010f04:	18c00fc4 	addi	r3,r3,63
 8010f08:	18001316 	blt	r3,zero,8010f58 <__pack_f+0x9c>
 8010f0c:	21001fc4 	addi	r4,r4,127
 8010f10:	180690ba 	slli	r3,r3,2
 8010f14:	1806d27a 	srli	r3,r3,9
 8010f18:	00000206 	br	8010f24 <__pack_f+0x68>
 8010f1c:	0009883a 	mov	r4,zero
 8010f20:	0007883a 	mov	r3,zero
 8010f24:	21003fcc 	andi	r4,r4,255
 8010f28:	200895fa 	slli	r4,r4,23
 8010f2c:	380a97fa 	slli	r5,r7,31
 8010f30:	00802034 	movhi	r2,128
 8010f34:	10bfffc4 	addi	r2,r2,-1
 8010f38:	1886703a 	and	r3,r3,r2
 8010f3c:	1904b03a 	or	r2,r3,r4
 8010f40:	1144b03a 	or	r2,r2,r5
 8010f44:	f800283a 	ret
 8010f48:	1880200c 	andi	r2,r3,128
 8010f4c:	103fee26 	beq	r2,zero,8010f08 <__pack_f+0x4c>
 8010f50:	18c01004 	addi	r3,r3,64
 8010f54:	183fed0e 	bge	r3,zero,8010f0c <__pack_f+0x50>
 8010f58:	1806d07a 	srli	r3,r3,1
 8010f5c:	21002004 	addi	r4,r4,128
 8010f60:	003feb06 	br	8010f10 <__pack_f+0x54>
 8010f64:	013fffc4 	movi	r4,-1
 8010f68:	0007883a 	mov	r3,zero
 8010f6c:	003fed06 	br	8010f24 <__pack_f+0x68>
 8010f70:	18c00434 	orhi	r3,r3,16
 8010f74:	00802034 	movhi	r2,128
 8010f78:	10bfffc4 	addi	r2,r2,-1
 8010f7c:	1886703a 	and	r3,r3,r2
 8010f80:	013fffc4 	movi	r4,-1
 8010f84:	003fe706 	br	8010f24 <__pack_f+0x68>
 8010f88:	1105c83a 	sub	r2,r2,r4
 8010f8c:	01000644 	movi	r4,25
 8010f90:	20801216 	blt	r4,r2,8010fdc <__pack_f+0x120>
 8010f94:	3088983a 	sll	r4,r6,r2
 8010f98:	1884d83a 	srl	r2,r3,r2
 8010f9c:	213fffc4 	addi	r4,r4,-1
 8010fa0:	20c6703a 	and	r3,r4,r3
 8010fa4:	1806c03a 	cmpne	r3,r3,zero
 8010fa8:	1884b03a 	or	r2,r3,r2
 8010fac:	11001fcc 	andi	r4,r2,127
 8010fb0:	00c01004 	movi	r3,64
 8010fb4:	20c00a1e 	bne	r4,r3,8010fe0 <__pack_f+0x124>
 8010fb8:	10c0200c 	andi	r3,r2,128
 8010fbc:	18000126 	beq	r3,zero,8010fc4 <__pack_f+0x108>
 8010fc0:	10801004 	addi	r2,r2,64
 8010fc4:	100690ba 	slli	r3,r2,2
 8010fc8:	01100034 	movhi	r4,16384
 8010fcc:	1105403a 	cmpgeu	r2,r2,r4
 8010fd0:	1806d27a 	srli	r3,r3,9
 8010fd4:	1009883a 	mov	r4,r2
 8010fd8:	003fd206 	br	8010f24 <__pack_f+0x68>
 8010fdc:	0005883a 	mov	r2,zero
 8010fe0:	10800fc4 	addi	r2,r2,63
 8010fe4:	003ff706 	br	8010fc4 <__pack_f+0x108>

08010fe8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010fe8:	defffe04 	addi	sp,sp,-8
 8010fec:	dfc00115 	stw	ra,4(sp)
 8010ff0:	df000015 	stw	fp,0(sp)
 8010ff4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010ff8:	00820074 	movhi	r2,2049
 8010ffc:	1099a604 	addi	r2,r2,26264
 8011000:	10800017 	ldw	r2,0(r2)
 8011004:	10000526 	beq	r2,zero,801101c <alt_get_errno+0x34>
 8011008:	00820074 	movhi	r2,2049
 801100c:	1099a604 	addi	r2,r2,26264
 8011010:	10800017 	ldw	r2,0(r2)
 8011014:	103ee83a 	callr	r2
 8011018:	00000206 	br	8011024 <alt_get_errno+0x3c>
 801101c:	008200b4 	movhi	r2,2050
 8011020:	10a07a04 	addi	r2,r2,-32280
}
 8011024:	e037883a 	mov	sp,fp
 8011028:	dfc00117 	ldw	ra,4(sp)
 801102c:	df000017 	ldw	fp,0(sp)
 8011030:	dec00204 	addi	sp,sp,8
 8011034:	f800283a 	ret

08011038 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8011038:	defffb04 	addi	sp,sp,-20
 801103c:	dfc00415 	stw	ra,16(sp)
 8011040:	df000315 	stw	fp,12(sp)
 8011044:	df000304 	addi	fp,sp,12
 8011048:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 801104c:	e0bfff17 	ldw	r2,-4(fp)
 8011050:	10000716 	blt	r2,zero,8011070 <close+0x38>
 8011054:	e13fff17 	ldw	r4,-4(fp)
 8011058:	01400304 	movi	r5,12
 801105c:	8001a6c0 	call	8001a6c <__mulsi3>
 8011060:	00c20074 	movhi	r3,2049
 8011064:	18d51904 	addi	r3,r3,21604
 8011068:	10c5883a 	add	r2,r2,r3
 801106c:	00000106 	br	8011074 <close+0x3c>
 8011070:	0005883a 	mov	r2,zero
 8011074:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8011078:	e0bffd17 	ldw	r2,-12(fp)
 801107c:	10001826 	beq	r2,zero,80110e0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8011080:	e0bffd17 	ldw	r2,-12(fp)
 8011084:	10800017 	ldw	r2,0(r2)
 8011088:	10800417 	ldw	r2,16(r2)
 801108c:	10000626 	beq	r2,zero,80110a8 <close+0x70>
 8011090:	e0bffd17 	ldw	r2,-12(fp)
 8011094:	10800017 	ldw	r2,0(r2)
 8011098:	10800417 	ldw	r2,16(r2)
 801109c:	e13ffd17 	ldw	r4,-12(fp)
 80110a0:	103ee83a 	callr	r2
 80110a4:	00000106 	br	80110ac <close+0x74>
 80110a8:	0005883a 	mov	r2,zero
 80110ac:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 80110b0:	e13fff17 	ldw	r4,-4(fp)
 80110b4:	80119c80 	call	80119c8 <alt_release_fd>
    if (rval < 0)
 80110b8:	e0bffe17 	ldw	r2,-8(fp)
 80110bc:	1000060e 	bge	r2,zero,80110d8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 80110c0:	8010fe80 	call	8010fe8 <alt_get_errno>
 80110c4:	e0fffe17 	ldw	r3,-8(fp)
 80110c8:	00c7c83a 	sub	r3,zero,r3
 80110cc:	10c00015 	stw	r3,0(r2)
      return -1;
 80110d0:	00bfffc4 	movi	r2,-1
 80110d4:	00000606 	br	80110f0 <close+0xb8>
    }
    return 0;
 80110d8:	0005883a 	mov	r2,zero
 80110dc:	00000406 	br	80110f0 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80110e0:	8010fe80 	call	8010fe8 <alt_get_errno>
 80110e4:	00c01444 	movi	r3,81
 80110e8:	10c00015 	stw	r3,0(r2)
    return -1;
 80110ec:	00bfffc4 	movi	r2,-1
  }
}
 80110f0:	e037883a 	mov	sp,fp
 80110f4:	dfc00117 	ldw	ra,4(sp)
 80110f8:	df000017 	ldw	fp,0(sp)
 80110fc:	dec00204 	addi	sp,sp,8
 8011100:	f800283a 	ret

08011104 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8011104:	defffc04 	addi	sp,sp,-16
 8011108:	df000315 	stw	fp,12(sp)
 801110c:	df000304 	addi	fp,sp,12
 8011110:	e13ffd15 	stw	r4,-12(fp)
 8011114:	e17ffe15 	stw	r5,-8(fp)
 8011118:	e1bfff15 	stw	r6,-4(fp)
  return len;
 801111c:	e0bfff17 	ldw	r2,-4(fp)
}
 8011120:	e037883a 	mov	sp,fp
 8011124:	df000017 	ldw	fp,0(sp)
 8011128:	dec00104 	addi	sp,sp,4
 801112c:	f800283a 	ret

08011130 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8011130:	defffe04 	addi	sp,sp,-8
 8011134:	dfc00115 	stw	ra,4(sp)
 8011138:	df000015 	stw	fp,0(sp)
 801113c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8011140:	00820074 	movhi	r2,2049
 8011144:	1099a604 	addi	r2,r2,26264
 8011148:	10800017 	ldw	r2,0(r2)
 801114c:	10000526 	beq	r2,zero,8011164 <alt_get_errno+0x34>
 8011150:	00820074 	movhi	r2,2049
 8011154:	1099a604 	addi	r2,r2,26264
 8011158:	10800017 	ldw	r2,0(r2)
 801115c:	103ee83a 	callr	r2
 8011160:	00000206 	br	801116c <alt_get_errno+0x3c>
 8011164:	008200b4 	movhi	r2,2050
 8011168:	10a07a04 	addi	r2,r2,-32280
}
 801116c:	e037883a 	mov	sp,fp
 8011170:	dfc00117 	ldw	ra,4(sp)
 8011174:	df000017 	ldw	fp,0(sp)
 8011178:	dec00204 	addi	sp,sp,8
 801117c:	f800283a 	ret

08011180 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8011180:	defffb04 	addi	sp,sp,-20
 8011184:	dfc00415 	stw	ra,16(sp)
 8011188:	df000315 	stw	fp,12(sp)
 801118c:	df000304 	addi	fp,sp,12
 8011190:	e13ffe15 	stw	r4,-8(fp)
 8011194:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8011198:	e0bffe17 	ldw	r2,-8(fp)
 801119c:	10000716 	blt	r2,zero,80111bc <fstat+0x3c>
 80111a0:	e13ffe17 	ldw	r4,-8(fp)
 80111a4:	01400304 	movi	r5,12
 80111a8:	8001a6c0 	call	8001a6c <__mulsi3>
 80111ac:	00c20074 	movhi	r3,2049
 80111b0:	18d51904 	addi	r3,r3,21604
 80111b4:	10c5883a 	add	r2,r2,r3
 80111b8:	00000106 	br	80111c0 <fstat+0x40>
 80111bc:	0005883a 	mov	r2,zero
 80111c0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 80111c4:	e0bffd17 	ldw	r2,-12(fp)
 80111c8:	10001026 	beq	r2,zero,801120c <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 80111cc:	e0bffd17 	ldw	r2,-12(fp)
 80111d0:	10800017 	ldw	r2,0(r2)
 80111d4:	10800817 	ldw	r2,32(r2)
 80111d8:	10000726 	beq	r2,zero,80111f8 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
 80111dc:	e0bffd17 	ldw	r2,-12(fp)
 80111e0:	10800017 	ldw	r2,0(r2)
 80111e4:	10800817 	ldw	r2,32(r2)
 80111e8:	e13ffd17 	ldw	r4,-12(fp)
 80111ec:	e17fff17 	ldw	r5,-4(fp)
 80111f0:	103ee83a 	callr	r2
 80111f4:	00000906 	br	801121c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 80111f8:	e0bfff17 	ldw	r2,-4(fp)
 80111fc:	00c80004 	movi	r3,8192
 8011200:	10c00115 	stw	r3,4(r2)
      return 0;
 8011204:	0005883a 	mov	r2,zero
 8011208:	00000406 	br	801121c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 801120c:	80111300 	call	8011130 <alt_get_errno>
 8011210:	00c01444 	movi	r3,81
 8011214:	10c00015 	stw	r3,0(r2)
    return -1;
 8011218:	00bfffc4 	movi	r2,-1
  }
}
 801121c:	e037883a 	mov	sp,fp
 8011220:	dfc00117 	ldw	ra,4(sp)
 8011224:	df000017 	ldw	fp,0(sp)
 8011228:	dec00204 	addi	sp,sp,8
 801122c:	f800283a 	ret

08011230 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8011230:	defffe04 	addi	sp,sp,-8
 8011234:	dfc00115 	stw	ra,4(sp)
 8011238:	df000015 	stw	fp,0(sp)
 801123c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8011240:	00820074 	movhi	r2,2049
 8011244:	1099a604 	addi	r2,r2,26264
 8011248:	10800017 	ldw	r2,0(r2)
 801124c:	10000526 	beq	r2,zero,8011264 <alt_get_errno+0x34>
 8011250:	00820074 	movhi	r2,2049
 8011254:	1099a604 	addi	r2,r2,26264
 8011258:	10800017 	ldw	r2,0(r2)
 801125c:	103ee83a 	callr	r2
 8011260:	00000206 	br	801126c <alt_get_errno+0x3c>
 8011264:	008200b4 	movhi	r2,2050
 8011268:	10a07a04 	addi	r2,r2,-32280
}
 801126c:	e037883a 	mov	sp,fp
 8011270:	dfc00117 	ldw	ra,4(sp)
 8011274:	df000017 	ldw	fp,0(sp)
 8011278:	dec00204 	addi	sp,sp,8
 801127c:	f800283a 	ret

08011280 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8011280:	deffed04 	addi	sp,sp,-76
 8011284:	dfc01215 	stw	ra,72(sp)
 8011288:	df001115 	stw	fp,68(sp)
 801128c:	df001104 	addi	fp,sp,68
 8011290:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8011294:	e0bfff17 	ldw	r2,-4(fp)
 8011298:	10000716 	blt	r2,zero,80112b8 <isatty+0x38>
 801129c:	e13fff17 	ldw	r4,-4(fp)
 80112a0:	01400304 	movi	r5,12
 80112a4:	8001a6c0 	call	8001a6c <__mulsi3>
 80112a8:	00c20074 	movhi	r3,2049
 80112ac:	18d51904 	addi	r3,r3,21604
 80112b0:	10c5883a 	add	r2,r2,r3
 80112b4:	00000106 	br	80112bc <isatty+0x3c>
 80112b8:	0005883a 	mov	r2,zero
 80112bc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 80112c0:	e0bfef17 	ldw	r2,-68(fp)
 80112c4:	10000e26 	beq	r2,zero,8011300 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 80112c8:	e0bfef17 	ldw	r2,-68(fp)
 80112cc:	10800017 	ldw	r2,0(r2)
 80112d0:	10800817 	ldw	r2,32(r2)
 80112d4:	1000021e 	bne	r2,zero,80112e0 <isatty+0x60>
    {
      return 1;
 80112d8:	00800044 	movi	r2,1
 80112dc:	00000c06 	br	8011310 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 80112e0:	e0bff004 	addi	r2,fp,-64
 80112e4:	e13fff17 	ldw	r4,-4(fp)
 80112e8:	100b883a 	mov	r5,r2
 80112ec:	80111800 	call	8011180 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 80112f0:	e0bff117 	ldw	r2,-60(fp)
 80112f4:	10880020 	cmpeqi	r2,r2,8192
 80112f8:	10803fcc 	andi	r2,r2,255
 80112fc:	00000406 	br	8011310 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8011300:	80112300 	call	8011230 <alt_get_errno>
 8011304:	00c01444 	movi	r3,81
 8011308:	10c00015 	stw	r3,0(r2)
    return 0;
 801130c:	0005883a 	mov	r2,zero
  }
}
 8011310:	e037883a 	mov	sp,fp
 8011314:	dfc00117 	ldw	ra,4(sp)
 8011318:	df000017 	ldw	fp,0(sp)
 801131c:	dec00204 	addi	sp,sp,8
 8011320:	f800283a 	ret

08011324 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8011324:	defffc04 	addi	sp,sp,-16
 8011328:	df000315 	stw	fp,12(sp)
 801132c:	df000304 	addi	fp,sp,12
 8011330:	e13ffd15 	stw	r4,-12(fp)
 8011334:	e17ffe15 	stw	r5,-8(fp)
 8011338:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 801133c:	e0fffe17 	ldw	r3,-8(fp)
 8011340:	e0bffd17 	ldw	r2,-12(fp)
 8011344:	18800e26 	beq	r3,r2,8011380 <alt_load_section+0x5c>
  {
    while( to != end )
 8011348:	00000a06 	br	8011374 <alt_load_section+0x50>
    {
      *to++ = *from++;
 801134c:	e0bffd17 	ldw	r2,-12(fp)
 8011350:	10c00017 	ldw	r3,0(r2)
 8011354:	e0bffe17 	ldw	r2,-8(fp)
 8011358:	10c00015 	stw	r3,0(r2)
 801135c:	e0bffe17 	ldw	r2,-8(fp)
 8011360:	10800104 	addi	r2,r2,4
 8011364:	e0bffe15 	stw	r2,-8(fp)
 8011368:	e0bffd17 	ldw	r2,-12(fp)
 801136c:	10800104 	addi	r2,r2,4
 8011370:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8011374:	e0fffe17 	ldw	r3,-8(fp)
 8011378:	e0bfff17 	ldw	r2,-4(fp)
 801137c:	18bff31e 	bne	r3,r2,801134c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 8011380:	e037883a 	mov	sp,fp
 8011384:	df000017 	ldw	fp,0(sp)
 8011388:	dec00104 	addi	sp,sp,4
 801138c:	f800283a 	ret

08011390 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8011390:	defffe04 	addi	sp,sp,-8
 8011394:	dfc00115 	stw	ra,4(sp)
 8011398:	df000015 	stw	fp,0(sp)
 801139c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 80113a0:	01020074 	movhi	r4,2049
 80113a4:	2119bd04 	addi	r4,r4,26356
 80113a8:	01420074 	movhi	r5,2049
 80113ac:	29530004 	addi	r5,r5,19456
 80113b0:	01820074 	movhi	r6,2049
 80113b4:	3199bd04 	addi	r6,r6,26356
 80113b8:	80113240 	call	8011324 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 80113bc:	01020034 	movhi	r4,2048
 80113c0:	21000804 	addi	r4,r4,32
 80113c4:	01420034 	movhi	r5,2048
 80113c8:	29400804 	addi	r5,r5,32
 80113cc:	01820034 	movhi	r6,2048
 80113d0:	31806e04 	addi	r6,r6,440
 80113d4:	80113240 	call	8011324 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 80113d8:	01020074 	movhi	r4,2049
 80113dc:	21110d04 	addi	r4,r4,17460
 80113e0:	01420074 	movhi	r5,2049
 80113e4:	29510d04 	addi	r5,r5,17460
 80113e8:	01820074 	movhi	r6,2049
 80113ec:	31930004 	addi	r6,r6,19456
 80113f0:	80113240 	call	8011324 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 80113f4:	80135a80 	call	80135a8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 80113f8:	8013a680 	call	8013a68 <alt_icache_flush_all>
}
 80113fc:	e037883a 	mov	sp,fp
 8011400:	dfc00117 	ldw	ra,4(sp)
 8011404:	df000017 	ldw	fp,0(sp)
 8011408:	dec00204 	addi	sp,sp,8
 801140c:	f800283a 	ret

08011410 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8011410:	defffe04 	addi	sp,sp,-8
 8011414:	dfc00115 	stw	ra,4(sp)
 8011418:	df000015 	stw	fp,0(sp)
 801141c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8011420:	00820074 	movhi	r2,2049
 8011424:	1099a604 	addi	r2,r2,26264
 8011428:	10800017 	ldw	r2,0(r2)
 801142c:	10000526 	beq	r2,zero,8011444 <alt_get_errno+0x34>
 8011430:	00820074 	movhi	r2,2049
 8011434:	1099a604 	addi	r2,r2,26264
 8011438:	10800017 	ldw	r2,0(r2)
 801143c:	103ee83a 	callr	r2
 8011440:	00000206 	br	801144c <alt_get_errno+0x3c>
 8011444:	008200b4 	movhi	r2,2050
 8011448:	10a07a04 	addi	r2,r2,-32280
}
 801144c:	e037883a 	mov	sp,fp
 8011450:	dfc00117 	ldw	ra,4(sp)
 8011454:	df000017 	ldw	fp,0(sp)
 8011458:	dec00204 	addi	sp,sp,8
 801145c:	f800283a 	ret

08011460 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8011460:	defff904 	addi	sp,sp,-28
 8011464:	dfc00615 	stw	ra,24(sp)
 8011468:	df000515 	stw	fp,20(sp)
 801146c:	df000504 	addi	fp,sp,20
 8011470:	e13ffd15 	stw	r4,-12(fp)
 8011474:	e17ffe15 	stw	r5,-8(fp)
 8011478:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 801147c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8011480:	e0bffd17 	ldw	r2,-12(fp)
 8011484:	10000716 	blt	r2,zero,80114a4 <lseek+0x44>
 8011488:	e13ffd17 	ldw	r4,-12(fp)
 801148c:	01400304 	movi	r5,12
 8011490:	8001a6c0 	call	8001a6c <__mulsi3>
 8011494:	00c20074 	movhi	r3,2049
 8011498:	18d51904 	addi	r3,r3,21604
 801149c:	10c5883a 	add	r2,r2,r3
 80114a0:	00000106 	br	80114a8 <lseek+0x48>
 80114a4:	0005883a 	mov	r2,zero
 80114a8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 80114ac:	e0bffc17 	ldw	r2,-16(fp)
 80114b0:	10001026 	beq	r2,zero,80114f4 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 80114b4:	e0bffc17 	ldw	r2,-16(fp)
 80114b8:	10800017 	ldw	r2,0(r2)
 80114bc:	10800717 	ldw	r2,28(r2)
 80114c0:	10000926 	beq	r2,zero,80114e8 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 80114c4:	e0bffc17 	ldw	r2,-16(fp)
 80114c8:	10800017 	ldw	r2,0(r2)
 80114cc:	10800717 	ldw	r2,28(r2)
 80114d0:	e13ffc17 	ldw	r4,-16(fp)
 80114d4:	e17ffe17 	ldw	r5,-8(fp)
 80114d8:	e1bfff17 	ldw	r6,-4(fp)
 80114dc:	103ee83a 	callr	r2
 80114e0:	e0bffb15 	stw	r2,-20(fp)
 80114e4:	00000506 	br	80114fc <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 80114e8:	00bfde84 	movi	r2,-134
 80114ec:	e0bffb15 	stw	r2,-20(fp)
 80114f0:	00000206 	br	80114fc <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
 80114f4:	00bfebc4 	movi	r2,-81
 80114f8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 80114fc:	e0bffb17 	ldw	r2,-20(fp)
 8011500:	1000060e 	bge	r2,zero,801151c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 8011504:	80114100 	call	8011410 <alt_get_errno>
 8011508:	e0fffb17 	ldw	r3,-20(fp)
 801150c:	00c7c83a 	sub	r3,zero,r3
 8011510:	10c00015 	stw	r3,0(r2)
    rc = -1;
 8011514:	00bfffc4 	movi	r2,-1
 8011518:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 801151c:	e0bffb17 	ldw	r2,-20(fp)
}
 8011520:	e037883a 	mov	sp,fp
 8011524:	dfc00117 	ldw	ra,4(sp)
 8011528:	df000017 	ldw	fp,0(sp)
 801152c:	dec00204 	addi	sp,sp,8
 8011530:	f800283a 	ret

08011534 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8011534:	defffd04 	addi	sp,sp,-12
 8011538:	dfc00215 	stw	ra,8(sp)
 801153c:	df000115 	stw	fp,4(sp)
 8011540:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8011544:	0009883a 	mov	r4,zero
 8011548:	8011d440 	call	8011d44 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 801154c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8011550:	8011d780 	call	8011d78 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8011554:	01020074 	movhi	r4,2049
 8011558:	2112f504 	addi	r4,r4,19412
 801155c:	01420074 	movhi	r5,2049
 8011560:	2952f504 	addi	r5,r5,19412
 8011564:	01820074 	movhi	r6,2049
 8011568:	3192f504 	addi	r6,r6,19412
 801156c:	8013e2c0 	call	8013e2c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8011570:	80136b40 	call	80136b4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8011574:	01020074 	movhi	r4,2049
 8011578:	210dc404 	addi	r4,r4,14096
 801157c:	80140600 	call	8014060 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8011580:	d126e617 	ldw	r4,-25704(gp)
 8011584:	d0e6e717 	ldw	r3,-25700(gp)
 8011588:	d0a6e817 	ldw	r2,-25696(gp)
 801158c:	180b883a 	mov	r5,r3
 8011590:	100d883a 	mov	r6,r2
 8011594:	800140c0 	call	800140c <main>
 8011598:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 801159c:	01000044 	movi	r4,1
 80115a0:	80110380 	call	8011038 <close>
  exit (result);
 80115a4:	e13fff17 	ldw	r4,-4(fp)
 80115a8:	80140740 	call	8014074 <exit>

080115ac <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 80115ac:	defffe04 	addi	sp,sp,-8
 80115b0:	df000115 	stw	fp,4(sp)
 80115b4:	df000104 	addi	fp,sp,4
 80115b8:	e13fff15 	stw	r4,-4(fp)
}
 80115bc:	e037883a 	mov	sp,fp
 80115c0:	df000017 	ldw	fp,0(sp)
 80115c4:	dec00104 	addi	sp,sp,4
 80115c8:	f800283a 	ret

080115cc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 80115cc:	defffe04 	addi	sp,sp,-8
 80115d0:	df000115 	stw	fp,4(sp)
 80115d4:	df000104 	addi	fp,sp,4
 80115d8:	e13fff15 	stw	r4,-4(fp)
}
 80115dc:	e037883a 	mov	sp,fp
 80115e0:	df000017 	ldw	fp,0(sp)
 80115e4:	dec00104 	addi	sp,sp,4
 80115e8:	f800283a 	ret

080115ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80115ec:	defffe04 	addi	sp,sp,-8
 80115f0:	dfc00115 	stw	ra,4(sp)
 80115f4:	df000015 	stw	fp,0(sp)
 80115f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80115fc:	00820074 	movhi	r2,2049
 8011600:	1099a604 	addi	r2,r2,26264
 8011604:	10800017 	ldw	r2,0(r2)
 8011608:	10000526 	beq	r2,zero,8011620 <alt_get_errno+0x34>
 801160c:	00820074 	movhi	r2,2049
 8011610:	1099a604 	addi	r2,r2,26264
 8011614:	10800017 	ldw	r2,0(r2)
 8011618:	103ee83a 	callr	r2
 801161c:	00000206 	br	8011628 <alt_get_errno+0x3c>
 8011620:	008200b4 	movhi	r2,2050
 8011624:	10a07a04 	addi	r2,r2,-32280
}
 8011628:	e037883a 	mov	sp,fp
 801162c:	dfc00117 	ldw	ra,4(sp)
 8011630:	df000017 	ldw	fp,0(sp)
 8011634:	dec00204 	addi	sp,sp,8
 8011638:	f800283a 	ret

0801163c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 801163c:	defffb04 	addi	sp,sp,-20
 8011640:	dfc00415 	stw	ra,16(sp)
 8011644:	df000315 	stw	fp,12(sp)
 8011648:	dc000215 	stw	r16,8(sp)
 801164c:	df000204 	addi	fp,sp,8
 8011650:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8011654:	e0bfff17 	ldw	r2,-4(fp)
 8011658:	10800217 	ldw	r2,8(r2)
 801165c:	10d00034 	orhi	r3,r2,16384
 8011660:	e0bfff17 	ldw	r2,-4(fp)
 8011664:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8011668:	e03ffe15 	stw	zero,-8(fp)
 801166c:	00002206 	br	80116f8 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8011670:	04020074 	movhi	r16,2049
 8011674:	84151904 	addi	r16,r16,21604
 8011678:	e0bffe17 	ldw	r2,-8(fp)
 801167c:	1009883a 	mov	r4,r2
 8011680:	01400304 	movi	r5,12
 8011684:	8001a6c0 	call	8001a6c <__mulsi3>
 8011688:	8085883a 	add	r2,r16,r2
 801168c:	10c00017 	ldw	r3,0(r2)
 8011690:	e0bfff17 	ldw	r2,-4(fp)
 8011694:	10800017 	ldw	r2,0(r2)
 8011698:	1880141e 	bne	r3,r2,80116ec <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 801169c:	04020074 	movhi	r16,2049
 80116a0:	84151904 	addi	r16,r16,21604
 80116a4:	e0bffe17 	ldw	r2,-8(fp)
 80116a8:	1009883a 	mov	r4,r2
 80116ac:	01400304 	movi	r5,12
 80116b0:	8001a6c0 	call	8001a6c <__mulsi3>
 80116b4:	8085883a 	add	r2,r16,r2
 80116b8:	10800204 	addi	r2,r2,8
 80116bc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80116c0:	10000a0e 	bge	r2,zero,80116ec <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 80116c4:	e13ffe17 	ldw	r4,-8(fp)
 80116c8:	01400304 	movi	r5,12
 80116cc:	8001a6c0 	call	8001a6c <__mulsi3>
 80116d0:	00c20074 	movhi	r3,2049
 80116d4:	18d51904 	addi	r3,r3,21604
 80116d8:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80116dc:	e0bfff17 	ldw	r2,-4(fp)
 80116e0:	18800226 	beq	r3,r2,80116ec <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 80116e4:	00bffcc4 	movi	r2,-13
 80116e8:	00000a06 	br	8011714 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80116ec:	e0bffe17 	ldw	r2,-8(fp)
 80116f0:	10800044 	addi	r2,r2,1
 80116f4:	e0bffe15 	stw	r2,-8(fp)
 80116f8:	00820074 	movhi	r2,2049
 80116fc:	1099a504 	addi	r2,r2,26260
 8011700:	10800017 	ldw	r2,0(r2)
 8011704:	1007883a 	mov	r3,r2
 8011708:	e0bffe17 	ldw	r2,-8(fp)
 801170c:	18bfd82e 	bgeu	r3,r2,8011670 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8011710:	0005883a 	mov	r2,zero
}
 8011714:	e037883a 	mov	sp,fp
 8011718:	dfc00217 	ldw	ra,8(sp)
 801171c:	df000117 	ldw	fp,4(sp)
 8011720:	dc000017 	ldw	r16,0(sp)
 8011724:	dec00304 	addi	sp,sp,12
 8011728:	f800283a 	ret

0801172c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 801172c:	defff604 	addi	sp,sp,-40
 8011730:	dfc00915 	stw	ra,36(sp)
 8011734:	df000815 	stw	fp,32(sp)
 8011738:	df000804 	addi	fp,sp,32
 801173c:	e13ffd15 	stw	r4,-12(fp)
 8011740:	e17ffe15 	stw	r5,-8(fp)
 8011744:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8011748:	00bfffc4 	movi	r2,-1
 801174c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8011750:	00bffb44 	movi	r2,-19
 8011754:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8011758:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 801175c:	e13ffd17 	ldw	r4,-12(fp)
 8011760:	01420074 	movhi	r5,2049
 8011764:	2959a304 	addi	r5,r5,26252
 8011768:	801376c0 	call	801376c <alt_find_dev>
 801176c:	e0bff815 	stw	r2,-32(fp)
 8011770:	e0bff817 	ldw	r2,-32(fp)
 8011774:	1000051e 	bne	r2,zero,801178c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8011778:	e13ffd17 	ldw	r4,-12(fp)
 801177c:	80137fc0 	call	80137fc <alt_find_file>
 8011780:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8011784:	00800044 	movi	r2,1
 8011788:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 801178c:	e0bff817 	ldw	r2,-32(fp)
 8011790:	10002a26 	beq	r2,zero,801183c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8011794:	e13ff817 	ldw	r4,-32(fp)
 8011798:	80139940 	call	8013994 <alt_get_fd>
 801179c:	e0bff915 	stw	r2,-28(fp)
 80117a0:	e0bff917 	ldw	r2,-28(fp)
 80117a4:	1000030e 	bge	r2,zero,80117b4 <open+0x88>
    {
      status = index;
 80117a8:	e0bff917 	ldw	r2,-28(fp)
 80117ac:	e0bffa15 	stw	r2,-24(fp)
 80117b0:	00002406 	br	8011844 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 80117b4:	e13ff917 	ldw	r4,-28(fp)
 80117b8:	01400304 	movi	r5,12
 80117bc:	8001a6c0 	call	8001a6c <__mulsi3>
 80117c0:	00c20074 	movhi	r3,2049
 80117c4:	18d51904 	addi	r3,r3,21604
 80117c8:	10c5883a 	add	r2,r2,r3
 80117cc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 80117d0:	e0fffe17 	ldw	r3,-8(fp)
 80117d4:	00900034 	movhi	r2,16384
 80117d8:	10bfffc4 	addi	r2,r2,-1
 80117dc:	1886703a 	and	r3,r3,r2
 80117e0:	e0bffc17 	ldw	r2,-16(fp)
 80117e4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 80117e8:	e0bffb17 	ldw	r2,-20(fp)
 80117ec:	1000051e 	bne	r2,zero,8011804 <open+0xd8>
 80117f0:	e13ffc17 	ldw	r4,-16(fp)
 80117f4:	801163c0 	call	801163c <alt_file_locked>
 80117f8:	e0bffa15 	stw	r2,-24(fp)
 80117fc:	e0bffa17 	ldw	r2,-24(fp)
 8011800:	10001016 	blt	r2,zero,8011844 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8011804:	e0bff817 	ldw	r2,-32(fp)
 8011808:	10800317 	ldw	r2,12(r2)
 801180c:	10000826 	beq	r2,zero,8011830 <open+0x104>
 8011810:	e0bff817 	ldw	r2,-32(fp)
 8011814:	10800317 	ldw	r2,12(r2)
 8011818:	e13ffc17 	ldw	r4,-16(fp)
 801181c:	e17ffd17 	ldw	r5,-12(fp)
 8011820:	e1bffe17 	ldw	r6,-8(fp)
 8011824:	e1ffff17 	ldw	r7,-4(fp)
 8011828:	103ee83a 	callr	r2
 801182c:	00000106 	br	8011834 <open+0x108>
 8011830:	0005883a 	mov	r2,zero
 8011834:	e0bffa15 	stw	r2,-24(fp)
 8011838:	00000206 	br	8011844 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 801183c:	00bffb44 	movi	r2,-19
 8011840:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8011844:	e0bffa17 	ldw	r2,-24(fp)
 8011848:	1000080e 	bge	r2,zero,801186c <open+0x140>
  {
    alt_release_fd (index);  
 801184c:	e13ff917 	ldw	r4,-28(fp)
 8011850:	80119c80 	call	80119c8 <alt_release_fd>
    ALT_ERRNO = -status;
 8011854:	80115ec0 	call	80115ec <alt_get_errno>
 8011858:	e0fffa17 	ldw	r3,-24(fp)
 801185c:	00c7c83a 	sub	r3,zero,r3
 8011860:	10c00015 	stw	r3,0(r2)
    return -1;
 8011864:	00bfffc4 	movi	r2,-1
 8011868:	00000106 	br	8011870 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 801186c:	e0bff917 	ldw	r2,-28(fp)
}
 8011870:	e037883a 	mov	sp,fp
 8011874:	dfc00117 	ldw	ra,4(sp)
 8011878:	df000017 	ldw	fp,0(sp)
 801187c:	dec00204 	addi	sp,sp,8
 8011880:	f800283a 	ret

08011884 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8011884:	defffe04 	addi	sp,sp,-8
 8011888:	dfc00115 	stw	ra,4(sp)
 801188c:	df000015 	stw	fp,0(sp)
 8011890:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8011894:	00820074 	movhi	r2,2049
 8011898:	1099a604 	addi	r2,r2,26264
 801189c:	10800017 	ldw	r2,0(r2)
 80118a0:	10000526 	beq	r2,zero,80118b8 <alt_get_errno+0x34>
 80118a4:	00820074 	movhi	r2,2049
 80118a8:	1099a604 	addi	r2,r2,26264
 80118ac:	10800017 	ldw	r2,0(r2)
 80118b0:	103ee83a 	callr	r2
 80118b4:	00000206 	br	80118c0 <alt_get_errno+0x3c>
 80118b8:	008200b4 	movhi	r2,2050
 80118bc:	10a07a04 	addi	r2,r2,-32280
}
 80118c0:	e037883a 	mov	sp,fp
 80118c4:	dfc00117 	ldw	ra,4(sp)
 80118c8:	df000017 	ldw	fp,0(sp)
 80118cc:	dec00204 	addi	sp,sp,8
 80118d0:	f800283a 	ret

080118d4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 80118d4:	defff904 	addi	sp,sp,-28
 80118d8:	dfc00615 	stw	ra,24(sp)
 80118dc:	df000515 	stw	fp,20(sp)
 80118e0:	df000504 	addi	fp,sp,20
 80118e4:	e13ffd15 	stw	r4,-12(fp)
 80118e8:	e17ffe15 	stw	r5,-8(fp)
 80118ec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80118f0:	e0bffd17 	ldw	r2,-12(fp)
 80118f4:	10000716 	blt	r2,zero,8011914 <read+0x40>
 80118f8:	e13ffd17 	ldw	r4,-12(fp)
 80118fc:	01400304 	movi	r5,12
 8011900:	8001a6c0 	call	8001a6c <__mulsi3>
 8011904:	00c20074 	movhi	r3,2049
 8011908:	18d51904 	addi	r3,r3,21604
 801190c:	10c5883a 	add	r2,r2,r3
 8011910:	00000106 	br	8011918 <read+0x44>
 8011914:	0005883a 	mov	r2,zero
 8011918:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 801191c:	e0bffb17 	ldw	r2,-20(fp)
 8011920:	10002026 	beq	r2,zero,80119a4 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8011924:	e0bffb17 	ldw	r2,-20(fp)
 8011928:	10800217 	ldw	r2,8(r2)
 801192c:	108000cc 	andi	r2,r2,3
 8011930:	10800060 	cmpeqi	r2,r2,1
 8011934:	1000171e 	bne	r2,zero,8011994 <read+0xc0>
        (fd->dev->read))
 8011938:	e0bffb17 	ldw	r2,-20(fp)
 801193c:	10800017 	ldw	r2,0(r2)
 8011940:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8011944:	10001326 	beq	r2,zero,8011994 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8011948:	e0bffb17 	ldw	r2,-20(fp)
 801194c:	10800017 	ldw	r2,0(r2)
 8011950:	10c00517 	ldw	r3,20(r2)
 8011954:	e0bfff17 	ldw	r2,-4(fp)
 8011958:	e13ffb17 	ldw	r4,-20(fp)
 801195c:	e17ffe17 	ldw	r5,-8(fp)
 8011960:	100d883a 	mov	r6,r2
 8011964:	183ee83a 	callr	r3
 8011968:	e0bffc15 	stw	r2,-16(fp)
 801196c:	e0bffc17 	ldw	r2,-16(fp)
 8011970:	1000060e 	bge	r2,zero,801198c <read+0xb8>
        {
          ALT_ERRNO = -rval;
 8011974:	80118840 	call	8011884 <alt_get_errno>
 8011978:	e0fffc17 	ldw	r3,-16(fp)
 801197c:	00c7c83a 	sub	r3,zero,r3
 8011980:	10c00015 	stw	r3,0(r2)
          return -1;
 8011984:	00bfffc4 	movi	r2,-1
 8011988:	00000a06 	br	80119b4 <read+0xe0>
        }
        return rval;
 801198c:	e0bffc17 	ldw	r2,-16(fp)
 8011990:	00000806 	br	80119b4 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8011994:	80118840 	call	8011884 <alt_get_errno>
 8011998:	00c00344 	movi	r3,13
 801199c:	10c00015 	stw	r3,0(r2)
 80119a0:	00000306 	br	80119b0 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 80119a4:	80118840 	call	8011884 <alt_get_errno>
 80119a8:	00c01444 	movi	r3,81
 80119ac:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 80119b0:	00bfffc4 	movi	r2,-1
}
 80119b4:	e037883a 	mov	sp,fp
 80119b8:	dfc00117 	ldw	ra,4(sp)
 80119bc:	df000017 	ldw	fp,0(sp)
 80119c0:	dec00204 	addi	sp,sp,8
 80119c4:	f800283a 	ret

080119c8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 80119c8:	defffc04 	addi	sp,sp,-16
 80119cc:	dfc00315 	stw	ra,12(sp)
 80119d0:	df000215 	stw	fp,8(sp)
 80119d4:	dc000115 	stw	r16,4(sp)
 80119d8:	df000104 	addi	fp,sp,4
 80119dc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 80119e0:	e0bfff17 	ldw	r2,-4(fp)
 80119e4:	108000d0 	cmplti	r2,r2,3
 80119e8:	1000111e 	bne	r2,zero,8011a30 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 80119ec:	04020074 	movhi	r16,2049
 80119f0:	84151904 	addi	r16,r16,21604
 80119f4:	e0bfff17 	ldw	r2,-4(fp)
 80119f8:	1009883a 	mov	r4,r2
 80119fc:	01400304 	movi	r5,12
 8011a00:	8001a6c0 	call	8001a6c <__mulsi3>
 8011a04:	8085883a 	add	r2,r16,r2
 8011a08:	10800204 	addi	r2,r2,8
 8011a0c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8011a10:	04020074 	movhi	r16,2049
 8011a14:	84151904 	addi	r16,r16,21604
 8011a18:	e0bfff17 	ldw	r2,-4(fp)
 8011a1c:	1009883a 	mov	r4,r2
 8011a20:	01400304 	movi	r5,12
 8011a24:	8001a6c0 	call	8001a6c <__mulsi3>
 8011a28:	8085883a 	add	r2,r16,r2
 8011a2c:	10000015 	stw	zero,0(r2)
  }
}
 8011a30:	e037883a 	mov	sp,fp
 8011a34:	dfc00217 	ldw	ra,8(sp)
 8011a38:	df000117 	ldw	fp,4(sp)
 8011a3c:	dc000017 	ldw	r16,0(sp)
 8011a40:	dec00304 	addi	sp,sp,12
 8011a44:	f800283a 	ret

08011a48 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8011a48:	defff904 	addi	sp,sp,-28
 8011a4c:	df000615 	stw	fp,24(sp)
 8011a50:	df000604 	addi	fp,sp,24
 8011a54:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011a58:	0005303a 	rdctl	r2,status
 8011a5c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011a60:	e0fffc17 	ldw	r3,-16(fp)
 8011a64:	00bfff84 	movi	r2,-2
 8011a68:	1884703a 	and	r2,r3,r2
 8011a6c:	1001703a 	wrctl	status,r2
  
  return context;
 8011a70:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8011a74:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8011a78:	d0a00c17 	ldw	r2,-32720(gp)
 8011a7c:	10c000c4 	addi	r3,r2,3
 8011a80:	00bfff04 	movi	r2,-4
 8011a84:	1884703a 	and	r2,r3,r2
 8011a88:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8011a8c:	d0e00c17 	ldw	r3,-32720(gp)
 8011a90:	e0bfff17 	ldw	r2,-4(fp)
 8011a94:	1885883a 	add	r2,r3,r2
 8011a98:	00c40034 	movhi	r3,4096
 8011a9c:	18c00004 	addi	r3,r3,0
 8011aa0:	1880062e 	bgeu	r3,r2,8011abc <sbrk+0x74>
 8011aa4:	e0bffa17 	ldw	r2,-24(fp)
 8011aa8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011aac:	e0bffd17 	ldw	r2,-12(fp)
 8011ab0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8011ab4:	00bfffc4 	movi	r2,-1
 8011ab8:	00000b06 	br	8011ae8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8011abc:	d0a00c17 	ldw	r2,-32720(gp)
 8011ac0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 8011ac4:	d0e00c17 	ldw	r3,-32720(gp)
 8011ac8:	e0bfff17 	ldw	r2,-4(fp)
 8011acc:	1885883a 	add	r2,r3,r2
 8011ad0:	d0a00c15 	stw	r2,-32720(gp)
 8011ad4:	e0bffa17 	ldw	r2,-24(fp)
 8011ad8:	e0bffe15 	stw	r2,-8(fp)
 8011adc:	e0bffe17 	ldw	r2,-8(fp)
 8011ae0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8011ae4:	e0bffb17 	ldw	r2,-20(fp)
} 
 8011ae8:	e037883a 	mov	sp,fp
 8011aec:	df000017 	ldw	fp,0(sp)
 8011af0:	dec00104 	addi	sp,sp,4
 8011af4:	f800283a 	ret

08011af8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8011af8:	defffe04 	addi	sp,sp,-8
 8011afc:	dfc00115 	stw	ra,4(sp)
 8011b00:	df000015 	stw	fp,0(sp)
 8011b04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8011b08:	00820074 	movhi	r2,2049
 8011b0c:	1099a604 	addi	r2,r2,26264
 8011b10:	10800017 	ldw	r2,0(r2)
 8011b14:	10000526 	beq	r2,zero,8011b2c <alt_get_errno+0x34>
 8011b18:	00820074 	movhi	r2,2049
 8011b1c:	1099a604 	addi	r2,r2,26264
 8011b20:	10800017 	ldw	r2,0(r2)
 8011b24:	103ee83a 	callr	r2
 8011b28:	00000206 	br	8011b34 <alt_get_errno+0x3c>
 8011b2c:	008200b4 	movhi	r2,2050
 8011b30:	10a07a04 	addi	r2,r2,-32280
}
 8011b34:	e037883a 	mov	sp,fp
 8011b38:	dfc00117 	ldw	ra,4(sp)
 8011b3c:	df000017 	ldw	fp,0(sp)
 8011b40:	dec00204 	addi	sp,sp,8
 8011b44:	f800283a 	ret

08011b48 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
 8011b48:	defffc04 	addi	sp,sp,-16
 8011b4c:	dfc00315 	stw	ra,12(sp)
 8011b50:	df000215 	stw	fp,8(sp)
 8011b54:	df000204 	addi	fp,sp,8
 8011b58:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8011b5c:	008200b4 	movhi	r2,2050
 8011b60:	10a08604 	addi	r2,r2,-32232
 8011b64:	10800017 	ldw	r2,0(r2)
  clock_t ticks = alt_nticks(); 
 8011b68:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8011b6c:	008200b4 	movhi	r2,2050
 8011b70:	10a08504 	addi	r2,r2,-32236
 8011b74:	10800017 	ldw	r2,0(r2)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
 8011b78:	1000051e 	bne	r2,zero,8011b90 <times+0x48>
  {
    ALT_ERRNO = ENOSYS;
 8011b7c:	8011af80 	call	8011af8 <alt_get_errno>
 8011b80:	00c01604 	movi	r3,88
 8011b84:	10c00015 	stw	r3,0(r2)
    return 0;
 8011b88:	0005883a 	mov	r2,zero
 8011b8c:	00000a06 	br	8011bb8 <times+0x70>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
 8011b90:	e0bfff17 	ldw	r2,-4(fp)
 8011b94:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
 8011b98:	e0bfff17 	ldw	r2,-4(fp)
 8011b9c:	e0fffe17 	ldw	r3,-8(fp)
 8011ba0:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
 8011ba4:	e0bfff17 	ldw	r2,-4(fp)
 8011ba8:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
 8011bac:	e0bfff17 	ldw	r2,-4(fp)
 8011bb0:	10000315 	stw	zero,12(r2)

  return ticks;
 8011bb4:	e0bffe17 	ldw	r2,-8(fp)
}
 8011bb8:	e037883a 	mov	sp,fp
 8011bbc:	dfc00117 	ldw	ra,4(sp)
 8011bc0:	df000017 	ldw	fp,0(sp)
 8011bc4:	dec00204 	addi	sp,sp,8
 8011bc8:	f800283a 	ret

08011bcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8011bcc:	defffe04 	addi	sp,sp,-8
 8011bd0:	dfc00115 	stw	ra,4(sp)
 8011bd4:	df000015 	stw	fp,0(sp)
 8011bd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8011bdc:	00820074 	movhi	r2,2049
 8011be0:	1099a604 	addi	r2,r2,26264
 8011be4:	10800017 	ldw	r2,0(r2)
 8011be8:	10000526 	beq	r2,zero,8011c00 <alt_get_errno+0x34>
 8011bec:	00820074 	movhi	r2,2049
 8011bf0:	1099a604 	addi	r2,r2,26264
 8011bf4:	10800017 	ldw	r2,0(r2)
 8011bf8:	103ee83a 	callr	r2
 8011bfc:	00000206 	br	8011c08 <alt_get_errno+0x3c>
 8011c00:	008200b4 	movhi	r2,2050
 8011c04:	10a07a04 	addi	r2,r2,-32280
}
 8011c08:	e037883a 	mov	sp,fp
 8011c0c:	dfc00117 	ldw	ra,4(sp)
 8011c10:	df000017 	ldw	fp,0(sp)
 8011c14:	dec00204 	addi	sp,sp,8
 8011c18:	f800283a 	ret

08011c1c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8011c1c:	defff904 	addi	sp,sp,-28
 8011c20:	dfc00615 	stw	ra,24(sp)
 8011c24:	df000515 	stw	fp,20(sp)
 8011c28:	df000504 	addi	fp,sp,20
 8011c2c:	e13ffd15 	stw	r4,-12(fp)
 8011c30:	e17ffe15 	stw	r5,-8(fp)
 8011c34:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8011c38:	e0bffd17 	ldw	r2,-12(fp)
 8011c3c:	10000716 	blt	r2,zero,8011c5c <write+0x40>
 8011c40:	e13ffd17 	ldw	r4,-12(fp)
 8011c44:	01400304 	movi	r5,12
 8011c48:	8001a6c0 	call	8001a6c <__mulsi3>
 8011c4c:	00c20074 	movhi	r3,2049
 8011c50:	18d51904 	addi	r3,r3,21604
 8011c54:	10c5883a 	add	r2,r2,r3
 8011c58:	00000106 	br	8011c60 <write+0x44>
 8011c5c:	0005883a 	mov	r2,zero
 8011c60:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8011c64:	e0bffb17 	ldw	r2,-20(fp)
 8011c68:	10001f26 	beq	r2,zero,8011ce8 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8011c6c:	e0bffb17 	ldw	r2,-20(fp)
 8011c70:	10800217 	ldw	r2,8(r2)
 8011c74:	108000cc 	andi	r2,r2,3
 8011c78:	10001726 	beq	r2,zero,8011cd8 <write+0xbc>
 8011c7c:	e0bffb17 	ldw	r2,-20(fp)
 8011c80:	10800017 	ldw	r2,0(r2)
 8011c84:	10800617 	ldw	r2,24(r2)
 8011c88:	10001326 	beq	r2,zero,8011cd8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8011c8c:	e0bffb17 	ldw	r2,-20(fp)
 8011c90:	10800017 	ldw	r2,0(r2)
 8011c94:	10c00617 	ldw	r3,24(r2)
 8011c98:	e0bfff17 	ldw	r2,-4(fp)
 8011c9c:	e13ffb17 	ldw	r4,-20(fp)
 8011ca0:	e17ffe17 	ldw	r5,-8(fp)
 8011ca4:	100d883a 	mov	r6,r2
 8011ca8:	183ee83a 	callr	r3
 8011cac:	e0bffc15 	stw	r2,-16(fp)
 8011cb0:	e0bffc17 	ldw	r2,-16(fp)
 8011cb4:	1000060e 	bge	r2,zero,8011cd0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 8011cb8:	8011bcc0 	call	8011bcc <alt_get_errno>
 8011cbc:	e0fffc17 	ldw	r3,-16(fp)
 8011cc0:	00c7c83a 	sub	r3,zero,r3
 8011cc4:	10c00015 	stw	r3,0(r2)
        return -1;
 8011cc8:	00bfffc4 	movi	r2,-1
 8011ccc:	00000a06 	br	8011cf8 <write+0xdc>
      }
      return rval;
 8011cd0:	e0bffc17 	ldw	r2,-16(fp)
 8011cd4:	00000806 	br	8011cf8 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8011cd8:	8011bcc0 	call	8011bcc <alt_get_errno>
 8011cdc:	00c00344 	movi	r3,13
 8011ce0:	10c00015 	stw	r3,0(r2)
 8011ce4:	00000306 	br	8011cf4 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8011ce8:	8011bcc0 	call	8011bcc <alt_get_errno>
 8011cec:	00c01444 	movi	r3,81
 8011cf0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 8011cf4:	00bfffc4 	movi	r2,-1
}
 8011cf8:	e037883a 	mov	sp,fp
 8011cfc:	dfc00117 	ldw	ra,4(sp)
 8011d00:	df000017 	ldw	fp,0(sp)
 8011d04:	dec00204 	addi	sp,sp,8
 8011d08:	f800283a 	ret

08011d0c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8011d0c:	defffd04 	addi	sp,sp,-12
 8011d10:	dfc00215 	stw	ra,8(sp)
 8011d14:	df000115 	stw	fp,4(sp)
 8011d18:	df000104 	addi	fp,sp,4
 8011d1c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8011d20:	e13fff17 	ldw	r4,-4(fp)
 8011d24:	01420074 	movhi	r5,2049
 8011d28:	2959a304 	addi	r5,r5,26252
 8011d2c:	80136140 	call	8013614 <alt_dev_llist_insert>
}
 8011d30:	e037883a 	mov	sp,fp
 8011d34:	dfc00117 	ldw	ra,4(sp)
 8011d38:	df000017 	ldw	fp,0(sp)
 8011d3c:	dec00204 	addi	sp,sp,8
 8011d40:	f800283a 	ret

08011d44 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8011d44:	defffd04 	addi	sp,sp,-12
 8011d48:	dfc00215 	stw	ra,8(sp)
 8011d4c:	df000115 	stw	fp,4(sp)
 8011d50:	df000104 	addi	fp,sp,4
 8011d54:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU1, cpu1);
 8011d58:	80140400 	call	8014040 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8011d5c:	00800044 	movi	r2,1
 8011d60:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8011d64:	e037883a 	mov	sp,fp
 8011d68:	dfc00117 	ldw	ra,4(sp)
 8011d6c:	df000017 	ldw	fp,0(sp)
 8011d70:	dec00204 	addi	sp,sp,8
 8011d74:	f800283a 	ret

08011d78 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8011d78:	defffe04 	addi	sp,sp,-8
 8011d7c:	dfc00115 	stw	ra,4(sp)
 8011d80:	df000015 	stw	fp,0(sp)
 8011d84:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
 8011d88:	01040034 	movhi	r4,4096
 8011d8c:	21043004 	addi	r4,r4,4288
 8011d90:	000b883a 	mov	r5,zero
 8011d94:	01800044 	movi	r6,1
 8011d98:	01c0fa04 	movi	r7,1000
 8011d9c:	8012db80 	call	8012db8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO1TO4, fifo1to4);
 8011da0:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO1TO5, fifo1to5);
 8011da4:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO1TO6, fifo1to6);
 8011da8:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART1, jtag_uart1);
 8011dac:	01020074 	movhi	r4,2049
 8011db0:	21158304 	addi	r4,r4,22028
 8011db4:	000b883a 	mov	r5,zero
 8011db8:	01800404 	movi	r6,16
 8011dbc:	80124440 	call	8012444 <altera_avalon_jtag_uart_init>
 8011dc0:	01020074 	movhi	r4,2049
 8011dc4:	21157904 	addi	r4,r4,21988
 8011dc8:	8011d0c0 	call	8011d0c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 8011dcc:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
 8011dd0:	01020074 	movhi	r4,2049
 8011dd4:	21199104 	addi	r4,r4,26180
 8011dd8:	80139100 	call	8013910 <alt_fs_reg>
}
 8011ddc:	e037883a 	mov	sp,fp
 8011de0:	dfc00117 	ldw	ra,4(sp)
 8011de4:	df000017 	ldw	fp,0(sp)
 8011de8:	dec00204 	addi	sp,sp,8
 8011dec:	f800283a 	ret

08011df0 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
 8011df0:	defffa04 	addi	sp,sp,-24
 8011df4:	dfc00515 	stw	ra,20(sp)
 8011df8:	df000415 	stw	fp,16(sp)
 8011dfc:	df000404 	addi	fp,sp,16
 8011e00:	e13ffc15 	stw	r4,-16(fp)
 8011e04:	e17ffd15 	stw	r5,-12(fp)
 8011e08:	e1bffe15 	stw	r6,-8(fp)
 8011e0c:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
 8011e10:	e13ffc17 	ldw	r4,-16(fp)
 8011e14:	01400fc4 	movi	r5,63
 8011e18:	8011fbc0 	call	8011fbc <altera_avalon_fifo_clear_event>
 8011e1c:	10000226 	beq	r2,zero,8011e28 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
 8011e20:	00bfffc4 	movi	r2,-1
 8011e24:	00001306 	br	8011e74 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
 8011e28:	e13ffc17 	ldw	r4,-16(fp)
 8011e2c:	e17ffd17 	ldw	r5,-12(fp)
 8011e30:	80120180 	call	8012018 <altera_avalon_fifo_write_ienable>
 8011e34:	10000226 	beq	r2,zero,8011e40 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
 8011e38:	00bfff84 	movi	r2,-2
 8011e3c:	00000d06 	br	8011e74 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
 8011e40:	e13ffc17 	ldw	r4,-16(fp)
 8011e44:	e17fff17 	ldw	r5,-4(fp)
 8011e48:	80120700 	call	8012070 <altera_avalon_fifo_write_almostfull>
 8011e4c:	10000226 	beq	r2,zero,8011e58 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
 8011e50:	00bfff44 	movi	r2,-3
 8011e54:	00000706 	br	8011e74 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
 8011e58:	e13ffc17 	ldw	r4,-16(fp)
 8011e5c:	e17ffe17 	ldw	r5,-8(fp)
 8011e60:	80120c80 	call	80120c8 <altera_avalon_fifo_write_almostempty>
 8011e64:	10000226 	beq	r2,zero,8011e70 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
 8011e68:	00bfff44 	movi	r2,-3
 8011e6c:	00000106 	br	8011e74 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
 8011e70:	0005883a 	mov	r2,zero
}
 8011e74:	e037883a 	mov	sp,fp
 8011e78:	dfc00117 	ldw	ra,4(sp)
 8011e7c:	df000017 	ldw	fp,0(sp)
 8011e80:	dec00204 	addi	sp,sp,8
 8011e84:	f800283a 	ret

08011e88 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
 8011e88:	defffd04 	addi	sp,sp,-12
 8011e8c:	df000215 	stw	fp,8(sp)
 8011e90:	df000204 	addi	fp,sp,8
 8011e94:	e13ffe15 	stw	r4,-8(fp)
 8011e98:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
 8011e9c:	e0bffe17 	ldw	r2,-8(fp)
 8011ea0:	10800104 	addi	r2,r2,4
 8011ea4:	10800037 	ldwio	r2,0(r2)
 8011ea8:	1007883a 	mov	r3,r2
 8011eac:	e0bfff17 	ldw	r2,-4(fp)
 8011eb0:	1884703a 	and	r2,r3,r2
}
 8011eb4:	e037883a 	mov	sp,fp
 8011eb8:	df000017 	ldw	fp,0(sp)
 8011ebc:	dec00104 	addi	sp,sp,4
 8011ec0:	f800283a 	ret

08011ec4 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
 8011ec4:	defffd04 	addi	sp,sp,-12
 8011ec8:	df000215 	stw	fp,8(sp)
 8011ecc:	df000204 	addi	fp,sp,8
 8011ed0:	e13ffe15 	stw	r4,-8(fp)
 8011ed4:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
 8011ed8:	e0bffe17 	ldw	r2,-8(fp)
 8011edc:	10800304 	addi	r2,r2,12
 8011ee0:	10800037 	ldwio	r2,0(r2)
 8011ee4:	1007883a 	mov	r3,r2
 8011ee8:	e0bfff17 	ldw	r2,-4(fp)
 8011eec:	1884703a 	and	r2,r3,r2
}
 8011ef0:	e037883a 	mov	sp,fp
 8011ef4:	df000017 	ldw	fp,0(sp)
 8011ef8:	dec00104 	addi	sp,sp,4
 8011efc:	f800283a 	ret

08011f00 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
 8011f00:	defffe04 	addi	sp,sp,-8
 8011f04:	df000115 	stw	fp,4(sp)
 8011f08:	df000104 	addi	fp,sp,4
 8011f0c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
 8011f10:	e0bfff17 	ldw	r2,-4(fp)
 8011f14:	10800404 	addi	r2,r2,16
 8011f18:	10800037 	ldwio	r2,0(r2)
}
 8011f1c:	e037883a 	mov	sp,fp
 8011f20:	df000017 	ldw	fp,0(sp)
 8011f24:	dec00104 	addi	sp,sp,4
 8011f28:	f800283a 	ret

08011f2c <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
 8011f2c:	defffe04 	addi	sp,sp,-8
 8011f30:	df000115 	stw	fp,4(sp)
 8011f34:	df000104 	addi	fp,sp,4
 8011f38:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
 8011f3c:	e0bfff17 	ldw	r2,-4(fp)
 8011f40:	10800504 	addi	r2,r2,20
 8011f44:	10800037 	ldwio	r2,0(r2)
}
 8011f48:	e037883a 	mov	sp,fp
 8011f4c:	df000017 	ldw	fp,0(sp)
 8011f50:	dec00104 	addi	sp,sp,4
 8011f54:	f800283a 	ret

08011f58 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
 8011f58:	defffd04 	addi	sp,sp,-12
 8011f5c:	df000215 	stw	fp,8(sp)
 8011f60:	df000204 	addi	fp,sp,8
 8011f64:	e13ffe15 	stw	r4,-8(fp)
 8011f68:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
 8011f6c:	e0bffe17 	ldw	r2,-8(fp)
 8011f70:	10800204 	addi	r2,r2,8
 8011f74:	10800037 	ldwio	r2,0(r2)
 8011f78:	1007883a 	mov	r3,r2
 8011f7c:	e0bfff17 	ldw	r2,-4(fp)
 8011f80:	1884703a 	and	r2,r3,r2
}
 8011f84:	e037883a 	mov	sp,fp
 8011f88:	df000017 	ldw	fp,0(sp)
 8011f8c:	dec00104 	addi	sp,sp,4
 8011f90:	f800283a 	ret

08011f94 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
 8011f94:	defffe04 	addi	sp,sp,-8
 8011f98:	df000115 	stw	fp,4(sp)
 8011f9c:	df000104 	addi	fp,sp,4
 8011fa0:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
 8011fa4:	e0bfff17 	ldw	r2,-4(fp)
 8011fa8:	10800037 	ldwio	r2,0(r2)
}
 8011fac:	e037883a 	mov	sp,fp
 8011fb0:	df000017 	ldw	fp,0(sp)
 8011fb4:	dec00104 	addi	sp,sp,4
 8011fb8:	f800283a 	ret

08011fbc <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
 8011fbc:	defffd04 	addi	sp,sp,-12
 8011fc0:	df000215 	stw	fp,8(sp)
 8011fc4:	df000204 	addi	fp,sp,8
 8011fc8:	e13ffe15 	stw	r4,-8(fp)
 8011fcc:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
 8011fd0:	e0bffe17 	ldw	r2,-8(fp)
 8011fd4:	10800204 	addi	r2,r2,8
 8011fd8:	e0ffff17 	ldw	r3,-4(fp)
 8011fdc:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
 8011fe0:	e0bffe17 	ldw	r2,-8(fp)
 8011fe4:	10800204 	addi	r2,r2,8
 8011fe8:	10800037 	ldwio	r2,0(r2)
 8011fec:	1007883a 	mov	r3,r2
 8011ff0:	e0bfff17 	ldw	r2,-4(fp)
 8011ff4:	1884703a 	and	r2,r3,r2
 8011ff8:	1000021e 	bne	r2,zero,8012004 <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
 8011ffc:	0005883a 	mov	r2,zero
 8012000:	00000106 	br	8012008 <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
 8012004:	00bfffc4 	movi	r2,-1
}
 8012008:	e037883a 	mov	sp,fp
 801200c:	df000017 	ldw	fp,0(sp)
 8012010:	dec00104 	addi	sp,sp,4
 8012014:	f800283a 	ret

08012018 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
 8012018:	defffd04 	addi	sp,sp,-12
 801201c:	df000215 	stw	fp,8(sp)
 8012020:	df000204 	addi	fp,sp,8
 8012024:	e13ffe15 	stw	r4,-8(fp)
 8012028:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
 801202c:	e0bffe17 	ldw	r2,-8(fp)
 8012030:	10800304 	addi	r2,r2,12
 8012034:	e0ffff17 	ldw	r3,-4(fp)
 8012038:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
 801203c:	e0bffe17 	ldw	r2,-8(fp)
 8012040:	10800304 	addi	r2,r2,12
 8012044:	10800037 	ldwio	r2,0(r2)
 8012048:	1007883a 	mov	r3,r2
 801204c:	e0bfff17 	ldw	r2,-4(fp)
 8012050:	1880021e 	bne	r3,r2,801205c <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
 8012054:	0005883a 	mov	r2,zero
 8012058:	00000106 	br	8012060 <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
 801205c:	00bfff84 	movi	r2,-2
}
 8012060:	e037883a 	mov	sp,fp
 8012064:	df000017 	ldw	fp,0(sp)
 8012068:	dec00104 	addi	sp,sp,4
 801206c:	f800283a 	ret

08012070 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
 8012070:	defffd04 	addi	sp,sp,-12
 8012074:	df000215 	stw	fp,8(sp)
 8012078:	df000204 	addi	fp,sp,8
 801207c:	e13ffe15 	stw	r4,-8(fp)
 8012080:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
 8012084:	e0bffe17 	ldw	r2,-8(fp)
 8012088:	10800404 	addi	r2,r2,16
 801208c:	e0ffff17 	ldw	r3,-4(fp)
 8012090:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
 8012094:	e0bffe17 	ldw	r2,-8(fp)
 8012098:	10800404 	addi	r2,r2,16
 801209c:	10800037 	ldwio	r2,0(r2)
 80120a0:	1007883a 	mov	r3,r2
 80120a4:	e0bfff17 	ldw	r2,-4(fp)
 80120a8:	1880021e 	bne	r3,r2,80120b4 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
 80120ac:	0005883a 	mov	r2,zero
 80120b0:	00000106 	br	80120b8 <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
 80120b4:	00bfff44 	movi	r2,-3
}
 80120b8:	e037883a 	mov	sp,fp
 80120bc:	df000017 	ldw	fp,0(sp)
 80120c0:	dec00104 	addi	sp,sp,4
 80120c4:	f800283a 	ret

080120c8 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
 80120c8:	defffd04 	addi	sp,sp,-12
 80120cc:	df000215 	stw	fp,8(sp)
 80120d0:	df000204 	addi	fp,sp,8
 80120d4:	e13ffe15 	stw	r4,-8(fp)
 80120d8:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
 80120dc:	e0bffe17 	ldw	r2,-8(fp)
 80120e0:	10800504 	addi	r2,r2,20
 80120e4:	e0ffff17 	ldw	r3,-4(fp)
 80120e8:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
 80120ec:	e0bffe17 	ldw	r2,-8(fp)
 80120f0:	10800504 	addi	r2,r2,20
 80120f4:	10800037 	ldwio	r2,0(r2)
 80120f8:	1007883a 	mov	r3,r2
 80120fc:	e0bfff17 	ldw	r2,-4(fp)
 8012100:	1880021e 	bne	r3,r2,801210c <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
 8012104:	0005883a 	mov	r2,zero
 8012108:	00000106 	br	8012110 <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
 801210c:	00bfff44 	movi	r2,-3
}
 8012110:	e037883a 	mov	sp,fp
 8012114:	df000017 	ldw	fp,0(sp)
 8012118:	dec00104 	addi	sp,sp,4
 801211c:	f800283a 	ret

08012120 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
 8012120:	defffb04 	addi	sp,sp,-20
 8012124:	dfc00415 	stw	ra,16(sp)
 8012128:	df000315 	stw	fp,12(sp)
 801212c:	df000304 	addi	fp,sp,12
 8012130:	e13ffd15 	stw	r4,-12(fp)
 8012134:	e17ffe15 	stw	r5,-8(fp)
 8012138:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
 801213c:	e13ffe17 	ldw	r4,-8(fp)
 8012140:	01400044 	movi	r5,1
 8012144:	8011e880 	call	8011e88 <altera_avalon_fifo_read_status>
 8012148:	1000051e 	bne	r2,zero,8012160 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
 801214c:	e0bffd17 	ldw	r2,-12(fp)
 8012150:	e0ffff17 	ldw	r3,-4(fp)
 8012154:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
 8012158:	0005883a 	mov	r2,zero
 801215c:	00000106 	br	8012164 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
 8012160:	00bfff04 	movi	r2,-4
    }
}
 8012164:	e037883a 	mov	sp,fp
 8012168:	dfc00117 	ldw	ra,4(sp)
 801216c:	df000017 	ldw	fp,0(sp)
 8012170:	dec00204 	addi	sp,sp,8
 8012174:	f800283a 	ret

08012178 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
 8012178:	defffa04 	addi	sp,sp,-24
 801217c:	dfc00515 	stw	ra,20(sp)
 8012180:	df000415 	stw	fp,16(sp)
 8012184:	df000404 	addi	fp,sp,16
 8012188:	e13ffd15 	stw	r4,-12(fp)
 801218c:	e17ffe15 	stw	r5,-8(fp)
 8012190:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
 8012194:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
 8012198:	e0bfff17 	ldw	r2,-4(fp)
 801219c:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
 80121a0:	e13ffe17 	ldw	r4,-8(fp)
 80121a4:	01400084 	movi	r5,2
 80121a8:	8011e880 	call	8011e88 <altera_avalon_fifo_read_status>
 80121ac:	1000071e 	bne	r2,zero,80121cc <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
 80121b0:	e13ffe17 	ldw	r4,-8(fp)
 80121b4:	8011f940 	call	8011f94 <altera_avalon_fifo_read_level>
 80121b8:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
 80121bc:	e0bffd17 	ldw	r2,-12(fp)
 80121c0:	10c00037 	ldwio	r3,0(r2)
 80121c4:	e0bfff17 	ldw	r2,-4(fp)
 80121c8:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
 80121cc:	e0bffc17 	ldw	r2,-16(fp)
}
 80121d0:	e037883a 	mov	sp,fp
 80121d4:	dfc00117 	ldw	ra,4(sp)
 80121d8:	df000017 	ldw	fp,0(sp)
 80121dc:	dec00204 	addi	sp,sp,8
 80121e0:	f800283a 	ret

080121e4 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
 80121e4:	defffc04 	addi	sp,sp,-16
 80121e8:	dfc00315 	stw	ra,12(sp)
 80121ec:	df000215 	stw	fp,8(sp)
 80121f0:	df000204 	addi	fp,sp,8
 80121f4:	e13ffe15 	stw	r4,-8(fp)
 80121f8:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
 80121fc:	e13fff17 	ldw	r4,-4(fp)
 8012200:	01400084 	movi	r5,2
 8012204:	8011e880 	call	8011e88 <altera_avalon_fifo_read_status>
 8012208:	1000031e 	bne	r2,zero,8012218 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
 801220c:	e0bffe17 	ldw	r2,-8(fp)
 8012210:	10800037 	ldwio	r2,0(r2)
 8012214:	00000106 	br	801221c <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
 8012218:	0005883a 	mov	r2,zero
}
 801221c:	e037883a 	mov	sp,fp
 8012220:	dfc00117 	ldw	ra,4(sp)
 8012224:	df000017 	ldw	fp,0(sp)
 8012228:	dec00204 	addi	sp,sp,8
 801222c:	f800283a 	ret

08012230 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
 8012230:	defffb04 	addi	sp,sp,-20
 8012234:	dfc00415 	stw	ra,16(sp)
 8012238:	df000315 	stw	fp,12(sp)
 801223c:	df000304 	addi	fp,sp,12
 8012240:	e13ffd15 	stw	r4,-12(fp)
 8012244:	e17ffe15 	stw	r5,-8(fp)
 8012248:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
 801224c:	e13ffe17 	ldw	r4,-8(fp)
 8012250:	01400044 	movi	r5,1
 8012254:	8011e880 	call	8011e88 <altera_avalon_fifo_read_status>
 8012258:	1000061e 	bne	r2,zero,8012274 <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
 801225c:	e0bffd17 	ldw	r2,-12(fp)
 8012260:	10800104 	addi	r2,r2,4
 8012264:	e0ffff17 	ldw	r3,-4(fp)
 8012268:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
 801226c:	0005883a 	mov	r2,zero
 8012270:	00000106 	br	8012278 <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
 8012274:	00bfff04 	movi	r2,-4
    }
}
 8012278:	e037883a 	mov	sp,fp
 801227c:	dfc00117 	ldw	ra,4(sp)
 8012280:	df000017 	ldw	fp,0(sp)
 8012284:	dec00204 	addi	sp,sp,8
 8012288:	f800283a 	ret

0801228c <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
 801228c:	defffe04 	addi	sp,sp,-8
 8012290:	df000115 	stw	fp,4(sp)
 8012294:	df000104 	addi	fp,sp,4
 8012298:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
 801229c:	e0bfff17 	ldw	r2,-4(fp)
 80122a0:	10800104 	addi	r2,r2,4
 80122a4:	10800037 	ldwio	r2,0(r2)
}
 80122a8:	e037883a 	mov	sp,fp
 80122ac:	df000017 	ldw	fp,0(sp)
 80122b0:	dec00104 	addi	sp,sp,4
 80122b4:	f800283a 	ret

080122b8 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
 80122b8:	defffe04 	addi	sp,sp,-8
 80122bc:	df000115 	stw	fp,4(sp)
 80122c0:	df000104 	addi	fp,sp,4
 80122c4:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
 80122c8:	e0bfff17 	ldw	r2,-4(fp)
 80122cc:	10800037 	ldwio	r2,0(r2)
}
 80122d0:	e037883a 	mov	sp,fp
 80122d4:	df000017 	ldw	fp,0(sp)
 80122d8:	dec00104 	addi	sp,sp,4
 80122dc:	f800283a 	ret

080122e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 80122e0:	defffa04 	addi	sp,sp,-24
 80122e4:	dfc00515 	stw	ra,20(sp)
 80122e8:	df000415 	stw	fp,16(sp)
 80122ec:	df000404 	addi	fp,sp,16
 80122f0:	e13ffd15 	stw	r4,-12(fp)
 80122f4:	e17ffe15 	stw	r5,-8(fp)
 80122f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80122fc:	e0bffd17 	ldw	r2,-12(fp)
 8012300:	10800017 	ldw	r2,0(r2)
 8012304:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8012308:	e0bffc17 	ldw	r2,-16(fp)
 801230c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 8012310:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8012314:	10800217 	ldw	r2,8(r2)
 8012318:	1809883a 	mov	r4,r3
 801231c:	e17ffe17 	ldw	r5,-8(fp)
 8012320:	e1bfff17 	ldw	r6,-4(fp)
 8012324:	100f883a 	mov	r7,r2
 8012328:	80129080 	call	8012908 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 801232c:	e037883a 	mov	sp,fp
 8012330:	dfc00117 	ldw	ra,4(sp)
 8012334:	df000017 	ldw	fp,0(sp)
 8012338:	dec00204 	addi	sp,sp,8
 801233c:	f800283a 	ret

08012340 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8012340:	defffa04 	addi	sp,sp,-24
 8012344:	dfc00515 	stw	ra,20(sp)
 8012348:	df000415 	stw	fp,16(sp)
 801234c:	df000404 	addi	fp,sp,16
 8012350:	e13ffd15 	stw	r4,-12(fp)
 8012354:	e17ffe15 	stw	r5,-8(fp)
 8012358:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 801235c:	e0bffd17 	ldw	r2,-12(fp)
 8012360:	10800017 	ldw	r2,0(r2)
 8012364:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8012368:	e0bffc17 	ldw	r2,-16(fp)
 801236c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 8012370:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8012374:	10800217 	ldw	r2,8(r2)
 8012378:	1809883a 	mov	r4,r3
 801237c:	e17ffe17 	ldw	r5,-8(fp)
 8012380:	e1bfff17 	ldw	r6,-4(fp)
 8012384:	100f883a 	mov	r7,r2
 8012388:	8012b200 	call	8012b20 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 801238c:	e037883a 	mov	sp,fp
 8012390:	dfc00117 	ldw	ra,4(sp)
 8012394:	df000017 	ldw	fp,0(sp)
 8012398:	dec00204 	addi	sp,sp,8
 801239c:	f800283a 	ret

080123a0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 80123a0:	defffc04 	addi	sp,sp,-16
 80123a4:	dfc00315 	stw	ra,12(sp)
 80123a8:	df000215 	stw	fp,8(sp)
 80123ac:	df000204 	addi	fp,sp,8
 80123b0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80123b4:	e0bfff17 	ldw	r2,-4(fp)
 80123b8:	10800017 	ldw	r2,0(r2)
 80123bc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 80123c0:	e0bffe17 	ldw	r2,-8(fp)
 80123c4:	10c00a04 	addi	r3,r2,40
 80123c8:	e0bfff17 	ldw	r2,-4(fp)
 80123cc:	10800217 	ldw	r2,8(r2)
 80123d0:	1809883a 	mov	r4,r3
 80123d4:	100b883a 	mov	r5,r2
 80123d8:	80127ac0 	call	80127ac <altera_avalon_jtag_uart_close>
}
 80123dc:	e037883a 	mov	sp,fp
 80123e0:	dfc00117 	ldw	ra,4(sp)
 80123e4:	df000017 	ldw	fp,0(sp)
 80123e8:	dec00204 	addi	sp,sp,8
 80123ec:	f800283a 	ret

080123f0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 80123f0:	defffa04 	addi	sp,sp,-24
 80123f4:	dfc00515 	stw	ra,20(sp)
 80123f8:	df000415 	stw	fp,16(sp)
 80123fc:	df000404 	addi	fp,sp,16
 8012400:	e13ffd15 	stw	r4,-12(fp)
 8012404:	e17ffe15 	stw	r5,-8(fp)
 8012408:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 801240c:	e0bffd17 	ldw	r2,-12(fp)
 8012410:	10800017 	ldw	r2,0(r2)
 8012414:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8012418:	e0bffc17 	ldw	r2,-16(fp)
 801241c:	10800a04 	addi	r2,r2,40
 8012420:	1009883a 	mov	r4,r2
 8012424:	e17ffe17 	ldw	r5,-8(fp)
 8012428:	e1bfff17 	ldw	r6,-4(fp)
 801242c:	80128140 	call	8012814 <altera_avalon_jtag_uart_ioctl>
}
 8012430:	e037883a 	mov	sp,fp
 8012434:	dfc00117 	ldw	ra,4(sp)
 8012438:	df000017 	ldw	fp,0(sp)
 801243c:	dec00204 	addi	sp,sp,8
 8012440:	f800283a 	ret

08012444 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8012444:	defffa04 	addi	sp,sp,-24
 8012448:	dfc00515 	stw	ra,20(sp)
 801244c:	df000415 	stw	fp,16(sp)
 8012450:	df000404 	addi	fp,sp,16
 8012454:	e13ffd15 	stw	r4,-12(fp)
 8012458:	e17ffe15 	stw	r5,-8(fp)
 801245c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8012460:	e0bffd17 	ldw	r2,-12(fp)
 8012464:	00c00044 	movi	r3,1
 8012468:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 801246c:	e0bffd17 	ldw	r2,-12(fp)
 8012470:	10800017 	ldw	r2,0(r2)
 8012474:	10800104 	addi	r2,r2,4
 8012478:	e0fffd17 	ldw	r3,-12(fp)
 801247c:	18c00817 	ldw	r3,32(r3)
 8012480:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8012484:	e0fffe17 	ldw	r3,-8(fp)
 8012488:	e0bfff17 	ldw	r2,-4(fp)
 801248c:	d8000015 	stw	zero,0(sp)
 8012490:	1809883a 	mov	r4,r3
 8012494:	100b883a 	mov	r5,r2
 8012498:	01820074 	movhi	r6,2049
 801249c:	31894104 	addi	r6,r6,9476
 80124a0:	e1fffd17 	ldw	r7,-12(fp)
 80124a4:	8013a840 	call	8013a84 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 80124a8:	e0bffd17 	ldw	r2,-12(fp)
 80124ac:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 80124b0:	e0bffd17 	ldw	r2,-12(fp)
 80124b4:	10c00204 	addi	r3,r2,8
 80124b8:	008200b4 	movhi	r2,2050
 80124bc:	10a08504 	addi	r2,r2,-32236
 80124c0:	10800017 	ldw	r2,0(r2)
 80124c4:	1809883a 	mov	r4,r3
 80124c8:	100b883a 	mov	r5,r2
 80124cc:	01820074 	movhi	r6,2049
 80124d0:	3189c204 	addi	r6,r6,9992
 80124d4:	e1fffd17 	ldw	r7,-12(fp)
 80124d8:	80134680 	call	8013468 <alt_alarm_start>
 80124dc:	1000040e 	bge	r2,zero,80124f0 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 80124e0:	e0bffd17 	ldw	r2,-12(fp)
 80124e4:	00e00034 	movhi	r3,32768
 80124e8:	18ffffc4 	addi	r3,r3,-1
 80124ec:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 80124f0:	e037883a 	mov	sp,fp
 80124f4:	dfc00117 	ldw	ra,4(sp)
 80124f8:	df000017 	ldw	fp,0(sp)
 80124fc:	dec00204 	addi	sp,sp,8
 8012500:	f800283a 	ret

08012504 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8012504:	defff804 	addi	sp,sp,-32
 8012508:	df000715 	stw	fp,28(sp)
 801250c:	df000704 	addi	fp,sp,28
 8012510:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8012514:	e0bfff17 	ldw	r2,-4(fp)
 8012518:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 801251c:	e0bffb17 	ldw	r2,-20(fp)
 8012520:	10800017 	ldw	r2,0(r2)
 8012524:	e0bffc15 	stw	r2,-16(fp)
 8012528:	00000106 	br	8012530 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
 801252c:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8012530:	e0bffc17 	ldw	r2,-16(fp)
 8012534:	10800104 	addi	r2,r2,4
 8012538:	10800037 	ldwio	r2,0(r2)
 801253c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8012540:	e0bffd17 	ldw	r2,-12(fp)
 8012544:	1080c00c 	andi	r2,r2,768
 8012548:	10006a26 	beq	r2,zero,80126f4 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 801254c:	e0bffd17 	ldw	r2,-12(fp)
 8012550:	1080400c 	andi	r2,r2,256
 8012554:	10003326 	beq	r2,zero,8012624 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8012558:	00800074 	movhi	r2,1
 801255c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8012560:	e0bffb17 	ldw	r2,-20(fp)
 8012564:	10800a17 	ldw	r2,40(r2)
 8012568:	10800044 	addi	r2,r2,1
 801256c:	1081ffcc 	andi	r2,r2,2047
 8012570:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8012574:	e0bffb17 	ldw	r2,-20(fp)
 8012578:	10c00b17 	ldw	r3,44(r2)
 801257c:	e0bffe17 	ldw	r2,-8(fp)
 8012580:	18801426 	beq	r3,r2,80125d4 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8012584:	e0bffc17 	ldw	r2,-16(fp)
 8012588:	10800037 	ldwio	r2,0(r2)
 801258c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8012590:	e0bff917 	ldw	r2,-28(fp)
 8012594:	10a0000c 	andi	r2,r2,32768
 8012598:	10001026 	beq	r2,zero,80125dc <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 801259c:	e0bffb17 	ldw	r2,-20(fp)
 80125a0:	10800a17 	ldw	r2,40(r2)
 80125a4:	e0fff917 	ldw	r3,-28(fp)
 80125a8:	e13ffb17 	ldw	r4,-20(fp)
 80125ac:	2085883a 	add	r2,r4,r2
 80125b0:	10800e04 	addi	r2,r2,56
 80125b4:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80125b8:	e0bffb17 	ldw	r2,-20(fp)
 80125bc:	10800a17 	ldw	r2,40(r2)
 80125c0:	10800044 	addi	r2,r2,1
 80125c4:	10c1ffcc 	andi	r3,r2,2047
 80125c8:	e0bffb17 	ldw	r2,-20(fp)
 80125cc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 80125d0:	003fe306 	br	8012560 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 80125d4:	0001883a 	nop
 80125d8:	00000106 	br	80125e0 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 80125dc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 80125e0:	e0bff917 	ldw	r2,-28(fp)
 80125e4:	10bfffec 	andhi	r2,r2,65535
 80125e8:	10000e26 	beq	r2,zero,8012624 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80125ec:	e0bffb17 	ldw	r2,-20(fp)
 80125f0:	10c00817 	ldw	r3,32(r2)
 80125f4:	00bfff84 	movi	r2,-2
 80125f8:	1886703a 	and	r3,r3,r2
 80125fc:	e0bffb17 	ldw	r2,-20(fp)
 8012600:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8012604:	e0bffc17 	ldw	r2,-16(fp)
 8012608:	10800104 	addi	r2,r2,4
 801260c:	e0fffb17 	ldw	r3,-20(fp)
 8012610:	18c00817 	ldw	r3,32(r3)
 8012614:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8012618:	e0bffc17 	ldw	r2,-16(fp)
 801261c:	10800104 	addi	r2,r2,4
 8012620:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8012624:	e0bffd17 	ldw	r2,-12(fp)
 8012628:	1080800c 	andi	r2,r2,512
 801262c:	103fbf26 	beq	r2,zero,801252c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8012630:	e0bffd17 	ldw	r2,-12(fp)
 8012634:	1004d43a 	srli	r2,r2,16
 8012638:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 801263c:	00001406 	br	8012690 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8012640:	e0bffc17 	ldw	r2,-16(fp)
 8012644:	e0fffb17 	ldw	r3,-20(fp)
 8012648:	18c00d17 	ldw	r3,52(r3)
 801264c:	e13ffb17 	ldw	r4,-20(fp)
 8012650:	20c7883a 	add	r3,r4,r3
 8012654:	18c20e04 	addi	r3,r3,2104
 8012658:	18c00003 	ldbu	r3,0(r3)
 801265c:	18c03fcc 	andi	r3,r3,255
 8012660:	18c0201c 	xori	r3,r3,128
 8012664:	18ffe004 	addi	r3,r3,-128
 8012668:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801266c:	e0bffb17 	ldw	r2,-20(fp)
 8012670:	10800d17 	ldw	r2,52(r2)
 8012674:	10800044 	addi	r2,r2,1
 8012678:	10c1ffcc 	andi	r3,r2,2047
 801267c:	e0bffb17 	ldw	r2,-20(fp)
 8012680:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8012684:	e0bffa17 	ldw	r2,-24(fp)
 8012688:	10bfffc4 	addi	r2,r2,-1
 801268c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8012690:	e0bffa17 	ldw	r2,-24(fp)
 8012694:	10000526 	beq	r2,zero,80126ac <altera_avalon_jtag_uart_irq+0x1a8>
 8012698:	e0bffb17 	ldw	r2,-20(fp)
 801269c:	10c00d17 	ldw	r3,52(r2)
 80126a0:	e0bffb17 	ldw	r2,-20(fp)
 80126a4:	10800c17 	ldw	r2,48(r2)
 80126a8:	18bfe51e 	bne	r3,r2,8012640 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 80126ac:	e0bffa17 	ldw	r2,-24(fp)
 80126b0:	103f9e26 	beq	r2,zero,801252c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80126b4:	e0bffb17 	ldw	r2,-20(fp)
 80126b8:	10c00817 	ldw	r3,32(r2)
 80126bc:	00bfff44 	movi	r2,-3
 80126c0:	1886703a 	and	r3,r3,r2
 80126c4:	e0bffb17 	ldw	r2,-20(fp)
 80126c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80126cc:	e0bffb17 	ldw	r2,-20(fp)
 80126d0:	10800017 	ldw	r2,0(r2)
 80126d4:	10800104 	addi	r2,r2,4
 80126d8:	e0fffb17 	ldw	r3,-20(fp)
 80126dc:	18c00817 	ldw	r3,32(r3)
 80126e0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80126e4:	e0bffc17 	ldw	r2,-16(fp)
 80126e8:	10800104 	addi	r2,r2,4
 80126ec:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 80126f0:	003f8e06 	br	801252c <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 80126f4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 80126f8:	e037883a 	mov	sp,fp
 80126fc:	df000017 	ldw	fp,0(sp)
 8012700:	dec00104 	addi	sp,sp,4
 8012704:	f800283a 	ret

08012708 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8012708:	defffc04 	addi	sp,sp,-16
 801270c:	df000315 	stw	fp,12(sp)
 8012710:	df000304 	addi	fp,sp,12
 8012714:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8012718:	e0bfff17 	ldw	r2,-4(fp)
 801271c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8012720:	e0bffd17 	ldw	r2,-12(fp)
 8012724:	10800017 	ldw	r2,0(r2)
 8012728:	10800104 	addi	r2,r2,4
 801272c:	10800037 	ldwio	r2,0(r2)
 8012730:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8012734:	e0bffe17 	ldw	r2,-8(fp)
 8012738:	1081000c 	andi	r2,r2,1024
 801273c:	10000a26 	beq	r2,zero,8012768 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8012740:	e0bffd17 	ldw	r2,-12(fp)
 8012744:	10800017 	ldw	r2,0(r2)
 8012748:	10800104 	addi	r2,r2,4
 801274c:	e0fffd17 	ldw	r3,-12(fp)
 8012750:	18c00817 	ldw	r3,32(r3)
 8012754:	18c10014 	ori	r3,r3,1024
 8012758:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 801275c:	e0bffd17 	ldw	r2,-12(fp)
 8012760:	10000915 	stw	zero,36(r2)
 8012764:	00000a06 	br	8012790 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8012768:	e0bffd17 	ldw	r2,-12(fp)
 801276c:	10800917 	ldw	r2,36(r2)
 8012770:	00e00034 	movhi	r3,32768
 8012774:	18ffff04 	addi	r3,r3,-4
 8012778:	18800536 	bltu	r3,r2,8012790 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 801277c:	e0bffd17 	ldw	r2,-12(fp)
 8012780:	10800917 	ldw	r2,36(r2)
 8012784:	10c00044 	addi	r3,r2,1
 8012788:	e0bffd17 	ldw	r2,-12(fp)
 801278c:	10c00915 	stw	r3,36(r2)
 8012790:	008200b4 	movhi	r2,2050
 8012794:	10a08504 	addi	r2,r2,-32236
 8012798:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 801279c:	e037883a 	mov	sp,fp
 80127a0:	df000017 	ldw	fp,0(sp)
 80127a4:	dec00104 	addi	sp,sp,4
 80127a8:	f800283a 	ret

080127ac <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 80127ac:	defffd04 	addi	sp,sp,-12
 80127b0:	df000215 	stw	fp,8(sp)
 80127b4:	df000204 	addi	fp,sp,8
 80127b8:	e13ffe15 	stw	r4,-8(fp)
 80127bc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80127c0:	00000506 	br	80127d8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 80127c4:	e0bfff17 	ldw	r2,-4(fp)
 80127c8:	1090000c 	andi	r2,r2,16384
 80127cc:	10000226 	beq	r2,zero,80127d8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 80127d0:	00bffd44 	movi	r2,-11
 80127d4:	00000b06 	br	8012804 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80127d8:	e0bffe17 	ldw	r2,-8(fp)
 80127dc:	10c00d17 	ldw	r3,52(r2)
 80127e0:	e0bffe17 	ldw	r2,-8(fp)
 80127e4:	10800c17 	ldw	r2,48(r2)
 80127e8:	18800526 	beq	r3,r2,8012800 <altera_avalon_jtag_uart_close+0x54>
 80127ec:	e0bffe17 	ldw	r2,-8(fp)
 80127f0:	10c00917 	ldw	r3,36(r2)
 80127f4:	e0bffe17 	ldw	r2,-8(fp)
 80127f8:	10800117 	ldw	r2,4(r2)
 80127fc:	18bff136 	bltu	r3,r2,80127c4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8012800:	0005883a 	mov	r2,zero
}
 8012804:	e037883a 	mov	sp,fp
 8012808:	df000017 	ldw	fp,0(sp)
 801280c:	dec00104 	addi	sp,sp,4
 8012810:	f800283a 	ret

08012814 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8012814:	defffa04 	addi	sp,sp,-24
 8012818:	df000515 	stw	fp,20(sp)
 801281c:	df000504 	addi	fp,sp,20
 8012820:	e13ffd15 	stw	r4,-12(fp)
 8012824:	e17ffe15 	stw	r5,-8(fp)
 8012828:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 801282c:	00bff9c4 	movi	r2,-25
 8012830:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8012834:	e0bffe17 	ldw	r2,-8(fp)
 8012838:	10da8060 	cmpeqi	r3,r2,27137
 801283c:	1800031e 	bne	r3,zero,801284c <altera_avalon_jtag_uart_ioctl+0x38>
 8012840:	109a80a0 	cmpeqi	r2,r2,27138
 8012844:	1000181e 	bne	r2,zero,80128a8 <altera_avalon_jtag_uart_ioctl+0x94>
 8012848:	00002606 	br	80128e4 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 801284c:	e0bffd17 	ldw	r2,-12(fp)
 8012850:	10c00117 	ldw	r3,4(r2)
 8012854:	00a00034 	movhi	r2,32768
 8012858:	10bfffc4 	addi	r2,r2,-1
 801285c:	18802226 	beq	r3,r2,80128e8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
 8012860:	e0bfff17 	ldw	r2,-4(fp)
 8012864:	10800017 	ldw	r2,0(r2)
 8012868:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 801286c:	e0bffc17 	ldw	r2,-16(fp)
 8012870:	10800090 	cmplti	r2,r2,2
 8012874:	1000061e 	bne	r2,zero,8012890 <altera_avalon_jtag_uart_ioctl+0x7c>
 8012878:	e0fffc17 	ldw	r3,-16(fp)
 801287c:	00a00034 	movhi	r2,32768
 8012880:	10bfffc4 	addi	r2,r2,-1
 8012884:	18800226 	beq	r3,r2,8012890 <altera_avalon_jtag_uart_ioctl+0x7c>
 8012888:	e0bffc17 	ldw	r2,-16(fp)
 801288c:	00000206 	br	8012898 <altera_avalon_jtag_uart_ioctl+0x84>
 8012890:	00a00034 	movhi	r2,32768
 8012894:	10bfff84 	addi	r2,r2,-2
 8012898:	e0fffd17 	ldw	r3,-12(fp)
 801289c:	18800115 	stw	r2,4(r3)
      rc = 0;
 80128a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80128a4:	00001006 	br	80128e8 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 80128a8:	e0bffd17 	ldw	r2,-12(fp)
 80128ac:	10c00117 	ldw	r3,4(r2)
 80128b0:	00a00034 	movhi	r2,32768
 80128b4:	10bfffc4 	addi	r2,r2,-1
 80128b8:	18800d26 	beq	r3,r2,80128f0 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 80128bc:	e0bffd17 	ldw	r2,-12(fp)
 80128c0:	10c00917 	ldw	r3,36(r2)
 80128c4:	e0bffd17 	ldw	r2,-12(fp)
 80128c8:	10800117 	ldw	r2,4(r2)
 80128cc:	1885803a 	cmpltu	r2,r3,r2
 80128d0:	10c03fcc 	andi	r3,r2,255
 80128d4:	e0bfff17 	ldw	r2,-4(fp)
 80128d8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 80128dc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80128e0:	00000306 	br	80128f0 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
 80128e4:	00000306 	br	80128f4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 80128e8:	0001883a 	nop
 80128ec:	00000106 	br	80128f4 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 80128f0:	0001883a 	nop

  default:
    break;
  }

  return rc;
 80128f4:	e0bffb17 	ldw	r2,-20(fp)
}
 80128f8:	e037883a 	mov	sp,fp
 80128fc:	df000017 	ldw	fp,0(sp)
 8012900:	dec00104 	addi	sp,sp,4
 8012904:	f800283a 	ret

08012908 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8012908:	defff304 	addi	sp,sp,-52
 801290c:	dfc00c15 	stw	ra,48(sp)
 8012910:	df000b15 	stw	fp,44(sp)
 8012914:	df000b04 	addi	fp,sp,44
 8012918:	e13ffc15 	stw	r4,-16(fp)
 801291c:	e17ffd15 	stw	r5,-12(fp)
 8012920:	e1bffe15 	stw	r6,-8(fp)
 8012924:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8012928:	e0bffd17 	ldw	r2,-12(fp)
 801292c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8012930:	00004706 	br	8012a50 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8012934:	e0bffc17 	ldw	r2,-16(fp)
 8012938:	10800a17 	ldw	r2,40(r2)
 801293c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8012940:	e0bffc17 	ldw	r2,-16(fp)
 8012944:	10800b17 	ldw	r2,44(r2)
 8012948:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 801294c:	e0fff717 	ldw	r3,-36(fp)
 8012950:	e0bff817 	ldw	r2,-32(fp)
 8012954:	18800536 	bltu	r3,r2,801296c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8012958:	e0fff717 	ldw	r3,-36(fp)
 801295c:	e0bff817 	ldw	r2,-32(fp)
 8012960:	1885c83a 	sub	r2,r3,r2
 8012964:	e0bff615 	stw	r2,-40(fp)
 8012968:	00000406 	br	801297c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 801296c:	00c20004 	movi	r3,2048
 8012970:	e0bff817 	ldw	r2,-32(fp)
 8012974:	1885c83a 	sub	r2,r3,r2
 8012978:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 801297c:	e0bff617 	ldw	r2,-40(fp)
 8012980:	10001e26 	beq	r2,zero,80129fc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8012984:	e0fffe17 	ldw	r3,-8(fp)
 8012988:	e0bff617 	ldw	r2,-40(fp)
 801298c:	1880022e 	bgeu	r3,r2,8012998 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8012990:	e0bffe17 	ldw	r2,-8(fp)
 8012994:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8012998:	e0bff817 	ldw	r2,-32(fp)
 801299c:	10800e04 	addi	r2,r2,56
 80129a0:	e0fffc17 	ldw	r3,-16(fp)
 80129a4:	1885883a 	add	r2,r3,r2
 80129a8:	e13ff517 	ldw	r4,-44(fp)
 80129ac:	100b883a 	mov	r5,r2
 80129b0:	e1bff617 	ldw	r6,-40(fp)
 80129b4:	8003eb00 	call	8003eb0 <memcpy>
      ptr   += n;
 80129b8:	e0fff517 	ldw	r3,-44(fp)
 80129bc:	e0bff617 	ldw	r2,-40(fp)
 80129c0:	1885883a 	add	r2,r3,r2
 80129c4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 80129c8:	e0fffe17 	ldw	r3,-8(fp)
 80129cc:	e0bff617 	ldw	r2,-40(fp)
 80129d0:	1885c83a 	sub	r2,r3,r2
 80129d4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80129d8:	e0fff817 	ldw	r3,-32(fp)
 80129dc:	e0bff617 	ldw	r2,-40(fp)
 80129e0:	1885883a 	add	r2,r3,r2
 80129e4:	10c1ffcc 	andi	r3,r2,2047
 80129e8:	e0bffc17 	ldw	r2,-16(fp)
 80129ec:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 80129f0:	e0bffe17 	ldw	r2,-8(fp)
 80129f4:	00bfcf16 	blt	zero,r2,8012934 <altera_avalon_jtag_uart_read+0x2c>
 80129f8:	00000106 	br	8012a00 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 80129fc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 8012a00:	e0fff517 	ldw	r3,-44(fp)
 8012a04:	e0bffd17 	ldw	r2,-12(fp)
 8012a08:	1880141e 	bne	r3,r2,8012a5c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8012a0c:	e0bfff17 	ldw	r2,-4(fp)
 8012a10:	1090000c 	andi	r2,r2,16384
 8012a14:	1000131e 	bne	r2,zero,8012a64 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8012a18:	0001883a 	nop
 8012a1c:	e0bffc17 	ldw	r2,-16(fp)
 8012a20:	10c00a17 	ldw	r3,40(r2)
 8012a24:	e0bff717 	ldw	r2,-36(fp)
 8012a28:	1880051e 	bne	r3,r2,8012a40 <altera_avalon_jtag_uart_read+0x138>
 8012a2c:	e0bffc17 	ldw	r2,-16(fp)
 8012a30:	10c00917 	ldw	r3,36(r2)
 8012a34:	e0bffc17 	ldw	r2,-16(fp)
 8012a38:	10800117 	ldw	r2,4(r2)
 8012a3c:	18bff736 	bltu	r3,r2,8012a1c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8012a40:	e0bffc17 	ldw	r2,-16(fp)
 8012a44:	10c00a17 	ldw	r3,40(r2)
 8012a48:	e0bff717 	ldw	r2,-36(fp)
 8012a4c:	18800726 	beq	r3,r2,8012a6c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8012a50:	e0bffe17 	ldw	r2,-8(fp)
 8012a54:	00bfb716 	blt	zero,r2,8012934 <altera_avalon_jtag_uart_read+0x2c>
 8012a58:	00000506 	br	8012a70 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8012a5c:	0001883a 	nop
 8012a60:	00000306 	br	8012a70 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8012a64:	0001883a 	nop
 8012a68:	00000106 	br	8012a70 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8012a6c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8012a70:	e0fff517 	ldw	r3,-44(fp)
 8012a74:	e0bffd17 	ldw	r2,-12(fp)
 8012a78:	18801726 	beq	r3,r2,8012ad8 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012a7c:	0005303a 	rdctl	r2,status
 8012a80:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012a84:	e0fffa17 	ldw	r3,-24(fp)
 8012a88:	00bfff84 	movi	r2,-2
 8012a8c:	1884703a 	and	r2,r3,r2
 8012a90:	1001703a 	wrctl	status,r2
  
  return context;
 8012a94:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8012a98:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8012a9c:	e0bffc17 	ldw	r2,-16(fp)
 8012aa0:	10800817 	ldw	r2,32(r2)
 8012aa4:	10c00054 	ori	r3,r2,1
 8012aa8:	e0bffc17 	ldw	r2,-16(fp)
 8012aac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8012ab0:	e0bffc17 	ldw	r2,-16(fp)
 8012ab4:	10800017 	ldw	r2,0(r2)
 8012ab8:	10800104 	addi	r2,r2,4
 8012abc:	e0fffc17 	ldw	r3,-16(fp)
 8012ac0:	18c00817 	ldw	r3,32(r3)
 8012ac4:	10c00035 	stwio	r3,0(r2)
 8012ac8:	e0bff917 	ldw	r2,-28(fp)
 8012acc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012ad0:	e0bffb17 	ldw	r2,-20(fp)
 8012ad4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8012ad8:	e0fff517 	ldw	r3,-44(fp)
 8012adc:	e0bffd17 	ldw	r2,-12(fp)
 8012ae0:	18800426 	beq	r3,r2,8012af4 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
 8012ae4:	e0fff517 	ldw	r3,-44(fp)
 8012ae8:	e0bffd17 	ldw	r2,-12(fp)
 8012aec:	1885c83a 	sub	r2,r3,r2
 8012af0:	00000606 	br	8012b0c <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
 8012af4:	e0bfff17 	ldw	r2,-4(fp)
 8012af8:	1090000c 	andi	r2,r2,16384
 8012afc:	10000226 	beq	r2,zero,8012b08 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
 8012b00:	00bffd44 	movi	r2,-11
 8012b04:	00000106 	br	8012b0c <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
 8012b08:	00bffec4 	movi	r2,-5
}
 8012b0c:	e037883a 	mov	sp,fp
 8012b10:	dfc00117 	ldw	ra,4(sp)
 8012b14:	df000017 	ldw	fp,0(sp)
 8012b18:	dec00204 	addi	sp,sp,8
 8012b1c:	f800283a 	ret

08012b20 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8012b20:	defff304 	addi	sp,sp,-52
 8012b24:	dfc00c15 	stw	ra,48(sp)
 8012b28:	df000b15 	stw	fp,44(sp)
 8012b2c:	df000b04 	addi	fp,sp,44
 8012b30:	e13ffc15 	stw	r4,-16(fp)
 8012b34:	e17ffd15 	stw	r5,-12(fp)
 8012b38:	e1bffe15 	stw	r6,-8(fp)
 8012b3c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8012b40:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8012b44:	e0bffd17 	ldw	r2,-12(fp)
 8012b48:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8012b4c:	00003706 	br	8012c2c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8012b50:	e0bffc17 	ldw	r2,-16(fp)
 8012b54:	10800c17 	ldw	r2,48(r2)
 8012b58:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 8012b5c:	e0bffc17 	ldw	r2,-16(fp)
 8012b60:	10800d17 	ldw	r2,52(r2)
 8012b64:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8012b68:	e0fff817 	ldw	r3,-32(fp)
 8012b6c:	e0bff517 	ldw	r2,-44(fp)
 8012b70:	1880062e 	bgeu	r3,r2,8012b8c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8012b74:	e0fff517 	ldw	r3,-44(fp)
 8012b78:	e0bff817 	ldw	r2,-32(fp)
 8012b7c:	1885c83a 	sub	r2,r3,r2
 8012b80:	10bfffc4 	addi	r2,r2,-1
 8012b84:	e0bff615 	stw	r2,-40(fp)
 8012b88:	00000b06 	br	8012bb8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8012b8c:	e0bff517 	ldw	r2,-44(fp)
 8012b90:	10000526 	beq	r2,zero,8012ba8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8012b94:	00c20004 	movi	r3,2048
 8012b98:	e0bff817 	ldw	r2,-32(fp)
 8012b9c:	1885c83a 	sub	r2,r3,r2
 8012ba0:	e0bff615 	stw	r2,-40(fp)
 8012ba4:	00000406 	br	8012bb8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8012ba8:	00c1ffc4 	movi	r3,2047
 8012bac:	e0bff817 	ldw	r2,-32(fp)
 8012bb0:	1885c83a 	sub	r2,r3,r2
 8012bb4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8012bb8:	e0bff617 	ldw	r2,-40(fp)
 8012bbc:	10001e26 	beq	r2,zero,8012c38 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8012bc0:	e0fffe17 	ldw	r3,-8(fp)
 8012bc4:	e0bff617 	ldw	r2,-40(fp)
 8012bc8:	1880022e 	bgeu	r3,r2,8012bd4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8012bcc:	e0bffe17 	ldw	r2,-8(fp)
 8012bd0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8012bd4:	e0bff817 	ldw	r2,-32(fp)
 8012bd8:	10820e04 	addi	r2,r2,2104
 8012bdc:	e0fffc17 	ldw	r3,-16(fp)
 8012be0:	1885883a 	add	r2,r3,r2
 8012be4:	1009883a 	mov	r4,r2
 8012be8:	e17ffd17 	ldw	r5,-12(fp)
 8012bec:	e1bff617 	ldw	r6,-40(fp)
 8012bf0:	8003eb00 	call	8003eb0 <memcpy>
      ptr   += n;
 8012bf4:	e0fffd17 	ldw	r3,-12(fp)
 8012bf8:	e0bff617 	ldw	r2,-40(fp)
 8012bfc:	1885883a 	add	r2,r3,r2
 8012c00:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8012c04:	e0fffe17 	ldw	r3,-8(fp)
 8012c08:	e0bff617 	ldw	r2,-40(fp)
 8012c0c:	1885c83a 	sub	r2,r3,r2
 8012c10:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8012c14:	e0fff817 	ldw	r3,-32(fp)
 8012c18:	e0bff617 	ldw	r2,-40(fp)
 8012c1c:	1885883a 	add	r2,r3,r2
 8012c20:	10c1ffcc 	andi	r3,r2,2047
 8012c24:	e0bffc17 	ldw	r2,-16(fp)
 8012c28:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8012c2c:	e0bffe17 	ldw	r2,-8(fp)
 8012c30:	00bfc716 	blt	zero,r2,8012b50 <altera_avalon_jtag_uart_write+0x30>
 8012c34:	00000106 	br	8012c3c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8012c38:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012c3c:	0005303a 	rdctl	r2,status
 8012c40:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012c44:	e0fffa17 	ldw	r3,-24(fp)
 8012c48:	00bfff84 	movi	r2,-2
 8012c4c:	1884703a 	and	r2,r3,r2
 8012c50:	1001703a 	wrctl	status,r2
  
  return context;
 8012c54:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8012c58:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8012c5c:	e0bffc17 	ldw	r2,-16(fp)
 8012c60:	10800817 	ldw	r2,32(r2)
 8012c64:	10c00094 	ori	r3,r2,2
 8012c68:	e0bffc17 	ldw	r2,-16(fp)
 8012c6c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8012c70:	e0bffc17 	ldw	r2,-16(fp)
 8012c74:	10800017 	ldw	r2,0(r2)
 8012c78:	10800104 	addi	r2,r2,4
 8012c7c:	e0fffc17 	ldw	r3,-16(fp)
 8012c80:	18c00817 	ldw	r3,32(r3)
 8012c84:	10c00035 	stwio	r3,0(r2)
 8012c88:	e0bff917 	ldw	r2,-28(fp)
 8012c8c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012c90:	e0bffb17 	ldw	r2,-20(fp)
 8012c94:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8012c98:	e0bffe17 	ldw	r2,-8(fp)
 8012c9c:	0080110e 	bge	zero,r2,8012ce4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8012ca0:	e0bfff17 	ldw	r2,-4(fp)
 8012ca4:	1090000c 	andi	r2,r2,16384
 8012ca8:	1000111e 	bne	r2,zero,8012cf0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8012cac:	0001883a 	nop
 8012cb0:	e0bffc17 	ldw	r2,-16(fp)
 8012cb4:	10c00d17 	ldw	r3,52(r2)
 8012cb8:	e0bff517 	ldw	r2,-44(fp)
 8012cbc:	1880051e 	bne	r3,r2,8012cd4 <altera_avalon_jtag_uart_write+0x1b4>
 8012cc0:	e0bffc17 	ldw	r2,-16(fp)
 8012cc4:	10c00917 	ldw	r3,36(r2)
 8012cc8:	e0bffc17 	ldw	r2,-16(fp)
 8012ccc:	10800117 	ldw	r2,4(r2)
 8012cd0:	18bff736 	bltu	r3,r2,8012cb0 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 8012cd4:	e0bffc17 	ldw	r2,-16(fp)
 8012cd8:	10c00d17 	ldw	r3,52(r2)
 8012cdc:	e0bff517 	ldw	r2,-44(fp)
 8012ce0:	18800526 	beq	r3,r2,8012cf8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8012ce4:	e0bffe17 	ldw	r2,-8(fp)
 8012ce8:	00bfd016 	blt	zero,r2,8012c2c <altera_avalon_jtag_uart_write+0x10c>
 8012cec:	00000306 	br	8012cfc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8012cf0:	0001883a 	nop
 8012cf4:	00000106 	br	8012cfc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
 8012cf8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8012cfc:	e0fffd17 	ldw	r3,-12(fp)
 8012d00:	e0bff717 	ldw	r2,-36(fp)
 8012d04:	18800426 	beq	r3,r2,8012d18 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8012d08:	e0fffd17 	ldw	r3,-12(fp)
 8012d0c:	e0bff717 	ldw	r2,-36(fp)
 8012d10:	1885c83a 	sub	r2,r3,r2
 8012d14:	00000606 	br	8012d30 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8012d18:	e0bfff17 	ldw	r2,-4(fp)
 8012d1c:	1090000c 	andi	r2,r2,16384
 8012d20:	10000226 	beq	r2,zero,8012d2c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8012d24:	00bffd44 	movi	r2,-11
 8012d28:	00000106 	br	8012d30 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8012d2c:	00bffec4 	movi	r2,-5
}
 8012d30:	e037883a 	mov	sp,fp
 8012d34:	dfc00117 	ldw	ra,4(sp)
 8012d38:	df000017 	ldw	fp,0(sp)
 8012d3c:	dec00204 	addi	sp,sp,8
 8012d40:	f800283a 	ret

08012d44 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8012d44:	defffa04 	addi	sp,sp,-24
 8012d48:	dfc00515 	stw	ra,20(sp)
 8012d4c:	df000415 	stw	fp,16(sp)
 8012d50:	df000404 	addi	fp,sp,16
 8012d54:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8012d58:	0007883a 	mov	r3,zero
 8012d5c:	e0bfff17 	ldw	r2,-4(fp)
 8012d60:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8012d64:	e0bfff17 	ldw	r2,-4(fp)
 8012d68:	10800104 	addi	r2,r2,4
 8012d6c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012d70:	0005303a 	rdctl	r2,status
 8012d74:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012d78:	e0fffd17 	ldw	r3,-12(fp)
 8012d7c:	00bfff84 	movi	r2,-2
 8012d80:	1884703a 	and	r2,r3,r2
 8012d84:	1001703a 	wrctl	status,r2
  
  return context;
 8012d88:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8012d8c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8012d90:	8013f3c0 	call	8013f3c <alt_tick>
 8012d94:	e0bffc17 	ldw	r2,-16(fp)
 8012d98:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012d9c:	e0bffe17 	ldw	r2,-8(fp)
 8012da0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8012da4:	e037883a 	mov	sp,fp
 8012da8:	dfc00117 	ldw	ra,4(sp)
 8012dac:	df000017 	ldw	fp,0(sp)
 8012db0:	dec00204 	addi	sp,sp,8
 8012db4:	f800283a 	ret

08012db8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8012db8:	defff804 	addi	sp,sp,-32
 8012dbc:	dfc00715 	stw	ra,28(sp)
 8012dc0:	df000615 	stw	fp,24(sp)
 8012dc4:	df000604 	addi	fp,sp,24
 8012dc8:	e13ffc15 	stw	r4,-16(fp)
 8012dcc:	e17ffd15 	stw	r5,-12(fp)
 8012dd0:	e1bffe15 	stw	r6,-8(fp)
 8012dd4:	e1ffff15 	stw	r7,-4(fp)
 8012dd8:	e0bfff17 	ldw	r2,-4(fp)
 8012ddc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8012de0:	008200b4 	movhi	r2,2050
 8012de4:	10a08504 	addi	r2,r2,-32236
 8012de8:	10800017 	ldw	r2,0(r2)
 8012dec:	1000041e 	bne	r2,zero,8012e00 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 8012df0:	008200b4 	movhi	r2,2050
 8012df4:	10a08504 	addi	r2,r2,-32236
 8012df8:	e0fffb17 	ldw	r3,-20(fp)
 8012dfc:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8012e00:	e0bffc17 	ldw	r2,-16(fp)
 8012e04:	10800104 	addi	r2,r2,4
 8012e08:	00c001c4 	movi	r3,7
 8012e0c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8012e10:	d8000015 	stw	zero,0(sp)
 8012e14:	e13ffd17 	ldw	r4,-12(fp)
 8012e18:	e17ffe17 	ldw	r5,-8(fp)
 8012e1c:	01820074 	movhi	r6,2049
 8012e20:	318b5104 	addi	r6,r6,11588
 8012e24:	e1fffc17 	ldw	r7,-16(fp)
 8012e28:	8013a840 	call	8013a84 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8012e2c:	e037883a 	mov	sp,fp
 8012e30:	dfc00117 	ldw	ra,4(sp)
 8012e34:	df000017 	ldw	fp,0(sp)
 8012e38:	dec00204 	addi	sp,sp,8
 8012e3c:	f800283a 	ret

08012e40 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
 8012e40:	deffeb04 	addi	sp,sp,-84
 8012e44:	df001415 	stw	fp,80(sp)
 8012e48:	dc401315 	stw	r17,76(sp)
 8012e4c:	dc001215 	stw	r16,72(sp)
 8012e50:	df001204 	addi	fp,sp,72
 8012e54:	e13ffb15 	stw	r4,-20(fp)
 8012e58:	e17ffc15 	stw	r5,-16(fp)
 8012e5c:	e1bffd15 	stw	r6,-12(fp)
 8012e60:	e1fffe15 	stw	r7,-8(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
 8012e64:	e0bffb17 	ldw	r2,-20(fp)
 8012e68:	10800017 	ldw	r2,0(r2)
 8012e6c:	e0bfee15 	stw	r2,-72(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
 8012e70:	e0bfee17 	ldw	r2,-72(fp)
 8012e74:	10800217 	ldw	r2,8(r2)
 8012e78:	e0bff715 	stw	r2,-36(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
 8012e7c:	e0bff717 	ldw	r2,-36(fp)
 8012e80:	10bfffc4 	addi	r2,r2,-1
 8012e84:	e0bff815 	stw	r2,-32(fp)

  while (*++ptr != 0)
 8012e88:	e0bff817 	ldw	r2,-32(fp)
 8012e8c:	10800044 	addi	r2,r2,1
 8012e90:	e0bff815 	stw	r2,-32(fp)
 8012e94:	e0bff817 	ldw	r2,-32(fp)
 8012e98:	10800003 	ldbu	r2,0(r2)
 8012e9c:	10803fcc 	andi	r2,r2,255
 8012ea0:	1080201c 	xori	r2,r2,128
 8012ea4:	10bfe004 	addi	r2,r2,-128
 8012ea8:	103ff71e 	bne	r2,zero,8012e88 <alt_hostfs_open+0x48>
    ;

  return ptr - string;
 8012eac:	e0fff817 	ldw	r3,-32(fp)
 8012eb0:	e0bff717 	ldw	r2,-36(fp)
 8012eb4:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
 8012eb8:	10800044 	addi	r2,r2,1
 8012ebc:	e0fffc17 	ldw	r3,-16(fp)
 8012ec0:	1885883a 	add	r2,r3,r2
 8012ec4:	e0bffc15 	stw	r2,-16(fp)

  r3 = (int)&hcinfo;
 8012ec8:	d0a01c04 	addi	r2,gp,-32656
 8012ecc:	e0bfef15 	stw	r2,-68(fp)
  r4 = (int)name;
 8012ed0:	e0bffc17 	ldw	r2,-16(fp)
 8012ed4:	e0bff015 	stw	r2,-64(fp)
  r5 = flags;
 8012ed8:	e0bffd17 	ldw	r2,-12(fp)
 8012edc:	e0bff115 	stw	r2,-60(fp)
  r6 = mode;
 8012ee0:	e0bffe17 	ldw	r2,-8(fp)
 8012ee4:	e0bff215 	stw	r2,-56(fp)
 8012ee8:	e0bffc17 	ldw	r2,-16(fp)
 8012eec:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
 8012ef0:	e0bff917 	ldw	r2,-28(fp)
 8012ef4:	10bfffc4 	addi	r2,r2,-1
 8012ef8:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
 8012efc:	e0bffa17 	ldw	r2,-24(fp)
 8012f00:	10800044 	addi	r2,r2,1
 8012f04:	e0bffa15 	stw	r2,-24(fp)
 8012f08:	e0bffa17 	ldw	r2,-24(fp)
 8012f0c:	10800003 	ldbu	r2,0(r2)
 8012f10:	10803fcc 	andi	r2,r2,255
 8012f14:	1080201c 	xori	r2,r2,128
 8012f18:	10bfe004 	addi	r2,r2,-128
 8012f1c:	103ff71e 	bne	r2,zero,8012efc <alt_hostfs_open+0xbc>
    ;

  return ptr - string;
 8012f20:	e0fffa17 	ldw	r3,-24(fp)
 8012f24:	e0bff917 	ldw	r2,-28(fp)
 8012f28:	1885c83a 	sub	r2,r3,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
 8012f2c:	e0bff315 	stw	r2,-52(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6), "D07" (r7) : "memory" );
 8012f30:	e13ff017 	ldw	r4,-64(fp)
 8012f34:	e13fff15 	stw	r4,-4(fp)
 8012f38:	e17ff117 	ldw	r5,-60(fp)
 8012f3c:	e1bff217 	ldw	r6,-56(fp)
 8012f40:	e1fff317 	ldw	r7,-52(fp)
 8012f44:	e0ffef17 	ldw	r3,-68(fp)
 8012f48:	1821883a 	mov	r16,r3
 8012f4c:	8007883a 	mov	r3,r16
 8012f50:	e13fff17 	ldw	r4,-4(fp)
 8012f54:	003da07a 	break	1
 8012f58:	1821883a 	mov	r16,r3
 8012f5c:	1023883a 	mov	r17,r2
 8012f60:	e47ff415 	stw	r17,-48(fp)
 8012f64:	e43fef15 	stw	r16,-68(fp)

  handle = (void *)r2;
 8012f68:	e0bff417 	ldw	r2,-48(fp)
 8012f6c:	e0bff515 	stw	r2,-44(fp)
  error = r3;
 8012f70:	e0bfef17 	ldw	r2,-68(fp)
 8012f74:	e0bff615 	stw	r2,-40(fp)

  if (error == 0)
 8012f78:	e0bff617 	ldw	r2,-40(fp)
 8012f7c:	1000031e 	bne	r2,zero,8012f8c <alt_hostfs_open+0x14c>
    fd->priv = handle;
 8012f80:	e0bffb17 	ldw	r2,-20(fp)
 8012f84:	e0fff517 	ldw	r3,-44(fp)
 8012f88:	10c00115 	stw	r3,4(r2)

  return -error;
 8012f8c:	e0bff617 	ldw	r2,-40(fp)
 8012f90:	0085c83a 	sub	r2,zero,r2
}
 8012f94:	e037883a 	mov	sp,fp
 8012f98:	df000217 	ldw	fp,8(sp)
 8012f9c:	dc400117 	ldw	r17,4(sp)
 8012fa0:	dc000017 	ldw	r16,0(sp)
 8012fa4:	dec00304 	addi	sp,sp,12
 8012fa8:	f800283a 	ret

08012fac <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
 8012fac:	defffa04 	addi	sp,sp,-24
 8012fb0:	df000515 	stw	fp,20(sp)
 8012fb4:	dc000415 	stw	r16,16(sp)
 8012fb8:	df000404 	addi	fp,sp,16
 8012fbc:	e13fff15 	stw	r4,-4(fp)
  int error;

  /* Input and output parameters for the hostcall */
  int r3, r4;

  r3 = (int)&hcinfo;
 8012fc0:	d0a01904 	addi	r2,gp,-32668
 8012fc4:	e0bffc15 	stw	r2,-16(fp)
  r4 = (int)fd->priv;
 8012fc8:	e0bfff17 	ldw	r2,-4(fp)
 8012fcc:	10800117 	ldw	r2,4(r2)
 8012fd0:	e0bffd15 	stw	r2,-12(fp)

  __asm__ volatile("break 1" : "+D03" (r3) : "D04" (r4) );
 8012fd4:	e0bffd17 	ldw	r2,-12(fp)
 8012fd8:	e0fffc17 	ldw	r3,-16(fp)
 8012fdc:	1821883a 	mov	r16,r3
 8012fe0:	8007883a 	mov	r3,r16
 8012fe4:	1009883a 	mov	r4,r2
 8012fe8:	003da07a 	break	1
 8012fec:	1821883a 	mov	r16,r3
 8012ff0:	e43ffc15 	stw	r16,-16(fp)

  error = r3;
 8012ff4:	e0bffc17 	ldw	r2,-16(fp)
 8012ff8:	e0bffe15 	stw	r2,-8(fp)

  return -error;
 8012ffc:	e0bffe17 	ldw	r2,-8(fp)
 8013000:	0085c83a 	sub	r2,zero,r2
}
 8013004:	e037883a 	mov	sp,fp
 8013008:	df000117 	ldw	fp,4(sp)
 801300c:	dc000017 	ldw	r16,0(sp)
 8013010:	dec00204 	addi	sp,sp,8
 8013014:	f800283a 	ret

08013018 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
 8013018:	defff204 	addi	sp,sp,-56
 801301c:	df000d15 	stw	fp,52(sp)
 8013020:	dc400c15 	stw	r17,48(sp)
 8013024:	dc000b15 	stw	r16,44(sp)
 8013028:	df000b04 	addi	fp,sp,44
 801302c:	e13ffc15 	stw	r4,-16(fp)
 8013030:	e17ffd15 	stw	r5,-12(fp)
 8013034:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
 8013038:	d0a01604 	addi	r2,gp,-32680
 801303c:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
 8013040:	e0bffc17 	ldw	r2,-16(fp)
 8013044:	10800117 	ldw	r2,4(r2)
 8013048:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
 801304c:	e0bffd17 	ldw	r2,-12(fp)
 8013050:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
 8013054:	e0bffe17 	ldw	r2,-8(fp)
 8013058:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
 801305c:	e13ff617 	ldw	r4,-40(fp)
 8013060:	e13fff15 	stw	r4,-4(fp)
 8013064:	e17ff717 	ldw	r5,-36(fp)
 8013068:	e1bff817 	ldw	r6,-32(fp)
 801306c:	e0fff517 	ldw	r3,-44(fp)
 8013070:	1821883a 	mov	r16,r3
 8013074:	8007883a 	mov	r3,r16
 8013078:	e13fff17 	ldw	r4,-4(fp)
 801307c:	003da07a 	break	1
 8013080:	1821883a 	mov	r16,r3
 8013084:	1023883a 	mov	r17,r2
 8013088:	e47ff915 	stw	r17,-28(fp)
 801308c:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
 8013090:	e0bff917 	ldw	r2,-28(fp)
 8013094:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
 8013098:	e0bff517 	ldw	r2,-44(fp)
 801309c:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
 80130a0:	e0bffb17 	ldw	r2,-20(fp)
 80130a4:	10000326 	beq	r2,zero,80130b4 <alt_hostfs_read+0x9c>
 80130a8:	e0bffb17 	ldw	r2,-20(fp)
 80130ac:	0085c83a 	sub	r2,zero,r2
 80130b0:	00000106 	br	80130b8 <alt_hostfs_read+0xa0>
 80130b4:	e0bffa17 	ldw	r2,-24(fp)
}
 80130b8:	e037883a 	mov	sp,fp
 80130bc:	df000217 	ldw	fp,8(sp)
 80130c0:	dc400117 	ldw	r17,4(sp)
 80130c4:	dc000017 	ldw	r16,0(sp)
 80130c8:	dec00304 	addi	sp,sp,12
 80130cc:	f800283a 	ret

080130d0 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
 80130d0:	defff204 	addi	sp,sp,-56
 80130d4:	df000d15 	stw	fp,52(sp)
 80130d8:	dc400c15 	stw	r17,48(sp)
 80130dc:	dc000b15 	stw	r16,44(sp)
 80130e0:	df000b04 	addi	fp,sp,44
 80130e4:	e13ffc15 	stw	r4,-16(fp)
 80130e8:	e17ffd15 	stw	r5,-12(fp)
 80130ec:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
 80130f0:	d0a01304 	addi	r2,gp,-32692
 80130f4:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
 80130f8:	e0bffc17 	ldw	r2,-16(fp)
 80130fc:	10800117 	ldw	r2,4(r2)
 8013100:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
 8013104:	e0bffd17 	ldw	r2,-12(fp)
 8013108:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
 801310c:	e0bffe17 	ldw	r2,-8(fp)
 8013110:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
 8013114:	e13ff617 	ldw	r4,-40(fp)
 8013118:	e13fff15 	stw	r4,-4(fp)
 801311c:	e17ff717 	ldw	r5,-36(fp)
 8013120:	e1bff817 	ldw	r6,-32(fp)
 8013124:	e0fff517 	ldw	r3,-44(fp)
 8013128:	1821883a 	mov	r16,r3
 801312c:	8007883a 	mov	r3,r16
 8013130:	e13fff17 	ldw	r4,-4(fp)
 8013134:	003da07a 	break	1
 8013138:	1821883a 	mov	r16,r3
 801313c:	1023883a 	mov	r17,r2
 8013140:	e47ff915 	stw	r17,-28(fp)
 8013144:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
 8013148:	e0bff917 	ldw	r2,-28(fp)
 801314c:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
 8013150:	e0bff517 	ldw	r2,-44(fp)
 8013154:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
 8013158:	e0bffb17 	ldw	r2,-20(fp)
 801315c:	10000326 	beq	r2,zero,801316c <alt_hostfs_write+0x9c>
 8013160:	e0bffb17 	ldw	r2,-20(fp)
 8013164:	0085c83a 	sub	r2,zero,r2
 8013168:	00000106 	br	8013170 <alt_hostfs_write+0xa0>
 801316c:	e0bffa17 	ldw	r2,-24(fp)
}
 8013170:	e037883a 	mov	sp,fp
 8013174:	df000217 	ldw	fp,8(sp)
 8013178:	dc400117 	ldw	r17,4(sp)
 801317c:	dc000017 	ldw	r16,0(sp)
 8013180:	dec00304 	addi	sp,sp,12
 8013184:	f800283a 	ret

08013188 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
 8013188:	defff204 	addi	sp,sp,-56
 801318c:	df000d15 	stw	fp,52(sp)
 8013190:	dc400c15 	stw	r17,48(sp)
 8013194:	dc000b15 	stw	r16,44(sp)
 8013198:	df000b04 	addi	fp,sp,44
 801319c:	e13ffc15 	stw	r4,-16(fp)
 80131a0:	e17ffd15 	stw	r5,-12(fp)
 80131a4:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
 80131a8:	d0a01004 	addi	r2,gp,-32704
 80131ac:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
 80131b0:	e0bffc17 	ldw	r2,-16(fp)
 80131b4:	10800117 	ldw	r2,4(r2)
 80131b8:	e0bff615 	stw	r2,-40(fp)
  r5 = ptr;
 80131bc:	e0bffd17 	ldw	r2,-12(fp)
 80131c0:	e0bff715 	stw	r2,-36(fp)
  r6 = dir;
 80131c4:	e0bffe17 	ldw	r2,-8(fp)
 80131c8:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
 80131cc:	e13ff617 	ldw	r4,-40(fp)
 80131d0:	e13fff15 	stw	r4,-4(fp)
 80131d4:	e17ff717 	ldw	r5,-36(fp)
 80131d8:	e1bff817 	ldw	r6,-32(fp)
 80131dc:	e0fff517 	ldw	r3,-44(fp)
 80131e0:	1821883a 	mov	r16,r3
 80131e4:	8007883a 	mov	r3,r16
 80131e8:	e13fff17 	ldw	r4,-4(fp)
 80131ec:	003da07a 	break	1
 80131f0:	1821883a 	mov	r16,r3
 80131f4:	1023883a 	mov	r17,r2
 80131f8:	e47ff915 	stw	r17,-28(fp)
 80131fc:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
 8013200:	e0bff917 	ldw	r2,-28(fp)
 8013204:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
 8013208:	e0bff517 	ldw	r2,-44(fp)
 801320c:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
 8013210:	e0bffb17 	ldw	r2,-20(fp)
 8013214:	10000326 	beq	r2,zero,8013224 <alt_hostfs_seek+0x9c>
 8013218:	e0bffb17 	ldw	r2,-20(fp)
 801321c:	0085c83a 	sub	r2,zero,r2
 8013220:	00000106 	br	8013228 <alt_hostfs_seek+0xa0>
 8013224:	e0bffa17 	ldw	r2,-24(fp)
}
 8013228:	e037883a 	mov	sp,fp
 801322c:	df000217 	ldw	fp,8(sp)
 8013230:	dc400117 	ldw	r17,4(sp)
 8013234:	dc000017 	ldw	r16,0(sp)
 8013238:	dec00304 	addi	sp,sp,12
 801323c:	f800283a 	ret

08013240 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
 8013240:	deffe204 	addi	sp,sp,-120
 8013244:	df001d15 	stw	fp,116(sp)
 8013248:	dc401c15 	stw	r17,112(sp)
 801324c:	dc001b15 	stw	r16,108(sp)
 8013250:	df001b04 	addi	fp,sp,108
 8013254:	e13ffd15 	stw	r4,-12(fp)
 8013258:	e17ffe15 	stw	r5,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5;

  r3 = (int)&hcinfo;
 801325c:	d0a00d04 	addi	r2,gp,-32716
 8013260:	e0bfe615 	stw	r2,-104(fp)
  r4 = (int)fd->priv;
 8013264:	e0bffd17 	ldw	r2,-12(fp)
 8013268:	10800117 	ldw	r2,4(r2)
 801326c:	e0bfe715 	stw	r2,-100(fp)
  r5 = (int)&hoststat;
 8013270:	e0bfed04 	addi	r2,fp,-76
 8013274:	e0bfe815 	stw	r2,-96(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5) : "memory" );
 8013278:	e13fe717 	ldw	r4,-100(fp)
 801327c:	e13fff15 	stw	r4,-4(fp)
 8013280:	e17fe817 	ldw	r5,-96(fp)
 8013284:	e0ffe617 	ldw	r3,-104(fp)
 8013288:	1821883a 	mov	r16,r3
 801328c:	8007883a 	mov	r3,r16
 8013290:	e13fff17 	ldw	r4,-4(fp)
 8013294:	003da07a 	break	1
 8013298:	1821883a 	mov	r16,r3
 801329c:	1023883a 	mov	r17,r2
 80132a0:	e47fe915 	stw	r17,-92(fp)
 80132a4:	e43fe615 	stw	r16,-104(fp)

  rc = r2;
 80132a8:	e0bfe917 	ldw	r2,-92(fp)
 80132ac:	e0bfea15 	stw	r2,-88(fp)
  error = r3;
 80132b0:	e0bfe617 	ldw	r2,-104(fp)
 80132b4:	e0bfeb15 	stw	r2,-84(fp)

  if (error == 0)
 80132b8:	e0bfeb17 	ldw	r2,-84(fp)
 80132bc:	1000621e 	bne	r2,zero,8013448 <alt_hostfs_fstat+0x208>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
 80132c0:	e0bfed04 	addi	r2,fp,-76
 80132c4:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
 80132c8:	e0bfe517 	ldw	r2,-108(fp)
 80132cc:	10801004 	addi	r2,r2,64
 80132d0:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
 80132d4:	00001606 	br	8013330 <alt_hostfs_fstat+0xf0>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 80132d8:	e0bfe517 	ldw	r2,-108(fp)
 80132dc:	10800017 	ldw	r2,0(r2)
 80132e0:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
 80132e4:	e0bfe517 	ldw	r2,-108(fp)
 80132e8:	10800017 	ldw	r2,0(r2)
 80132ec:	10803fec 	andhi	r2,r2,255
 80132f0:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 80132f4:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
 80132f8:	e0bfe517 	ldw	r2,-108(fp)
 80132fc:	10800017 	ldw	r2,0(r2)
 8013300:	10bfc00c 	andi	r2,r2,65280
 8013304:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
 8013308:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
 801330c:	e0bfe517 	ldw	r2,-108(fp)
 8013310:	10800017 	ldw	r2,0(r2)
 8013314:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
 8013318:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 801331c:	e0bfe517 	ldw	r2,-108(fp)
 8013320:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
 8013324:	e0bfe517 	ldw	r2,-108(fp)
 8013328:	10800104 	addi	r2,r2,4
 801332c:	e0bfe515 	stw	r2,-108(fp)
 8013330:	e0ffe517 	ldw	r3,-108(fp)
 8013334:	e0bfec17 	ldw	r2,-80(fp)
 8013338:	18bfe736 	bltu	r3,r2,80132d8 <alt_hostfs_fstat+0x98>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
 801333c:	e0bffe17 	ldw	r2,-8(fp)
 8013340:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
 8013344:	e0bfe517 	ldw	r2,-108(fp)
 8013348:	10800f04 	addi	r2,r2,60
 801334c:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
 8013350:	00000506 	br	8013368 <alt_hostfs_fstat+0x128>
      *ptr = 0;
 8013354:	e0bfe517 	ldw	r2,-108(fp)
 8013358:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
 801335c:	e0bfe517 	ldw	r2,-108(fp)
 8013360:	10800104 	addi	r2,r2,4
 8013364:	e0bfe515 	stw	r2,-108(fp)
 8013368:	e0ffe517 	ldw	r3,-108(fp)
 801336c:	e0bfec17 	ldw	r2,-80(fp)
 8013370:	18bff836 	bltu	r3,r2,8013354 <alt_hostfs_fstat+0x114>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
 8013374:	e0bfed17 	ldw	r2,-76(fp)
 8013378:	1007883a 	mov	r3,r2
 801337c:	e0bffe17 	ldw	r2,-8(fp)
 8013380:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
 8013384:	e0bfee17 	ldw	r2,-72(fp)
 8013388:	1007883a 	mov	r3,r2
 801338c:	e0bffe17 	ldw	r2,-8(fp)
 8013390:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
 8013394:	e0ffef17 	ldw	r3,-68(fp)
 8013398:	e0bffe17 	ldw	r2,-8(fp)
 801339c:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
 80133a0:	e0bff017 	ldw	r2,-64(fp)
 80133a4:	1007883a 	mov	r3,r2
 80133a8:	e0bffe17 	ldw	r2,-8(fp)
 80133ac:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
 80133b0:	e0bff117 	ldw	r2,-60(fp)
 80133b4:	1007883a 	mov	r3,r2
 80133b8:	e0bffe17 	ldw	r2,-8(fp)
 80133bc:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
 80133c0:	e0bff217 	ldw	r2,-56(fp)
 80133c4:	1007883a 	mov	r3,r2
 80133c8:	e0bffe17 	ldw	r2,-8(fp)
 80133cc:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
 80133d0:	e0bff317 	ldw	r2,-52(fp)
 80133d4:	1007883a 	mov	r3,r2
 80133d8:	e0bffe17 	ldw	r2,-8(fp)
 80133dc:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
 80133e0:	e0bff517 	ldw	r2,-44(fp)
 80133e4:	1007883a 	mov	r3,r2
 80133e8:	e0bffe17 	ldw	r2,-8(fp)
 80133ec:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
 80133f0:	e0bffa17 	ldw	r2,-24(fp)
 80133f4:	1007883a 	mov	r3,r2
 80133f8:	e0bffe17 	ldw	r2,-8(fp)
 80133fc:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
 8013400:	e0bffb17 	ldw	r2,-20(fp)
 8013404:	1007883a 	mov	r3,r2
 8013408:	e0bffe17 	ldw	r2,-8(fp)
 801340c:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
 8013410:	e0bffc17 	ldw	r2,-16(fp)
 8013414:	1007883a 	mov	r3,r2
 8013418:	e0bffe17 	ldw	r2,-8(fp)
 801341c:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
 8013420:	e0bff717 	ldw	r2,-36(fp)
 8013424:	1007883a 	mov	r3,r2
 8013428:	e0bffe17 	ldw	r2,-8(fp)
 801342c:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
 8013430:	e0bff917 	ldw	r2,-28(fp)
 8013434:	1007883a 	mov	r3,r2
 8013438:	e0bffe17 	ldw	r2,-8(fp)
 801343c:	10c00c15 	stw	r3,48(r2)

    return rc;
 8013440:	e0bfea17 	ldw	r2,-88(fp)
 8013444:	00000206 	br	8013450 <alt_hostfs_fstat+0x210>
  }
  else
    return -error;
 8013448:	e0bfeb17 	ldw	r2,-84(fp)
 801344c:	0085c83a 	sub	r2,zero,r2
}
 8013450:	e037883a 	mov	sp,fp
 8013454:	df000217 	ldw	fp,8(sp)
 8013458:	dc400117 	ldw	r17,4(sp)
 801345c:	dc000017 	ldw	r16,0(sp)
 8013460:	dec00304 	addi	sp,sp,12
 8013464:	f800283a 	ret

08013468 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8013468:	defff504 	addi	sp,sp,-44
 801346c:	df000a15 	stw	fp,40(sp)
 8013470:	df000a04 	addi	fp,sp,40
 8013474:	e13ffc15 	stw	r4,-16(fp)
 8013478:	e17ffd15 	stw	r5,-12(fp)
 801347c:	e1bffe15 	stw	r6,-8(fp)
 8013480:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8013484:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8013488:	008200b4 	movhi	r2,2050
 801348c:	10a08504 	addi	r2,r2,-32236
 8013490:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 8013494:	10003f26 	beq	r2,zero,8013594 <alt_alarm_start+0x12c>
  {
    if (alarm)
 8013498:	e0bffc17 	ldw	r2,-16(fp)
 801349c:	10003b26 	beq	r2,zero,801358c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 80134a0:	e0bffc17 	ldw	r2,-16(fp)
 80134a4:	e0fffe17 	ldw	r3,-8(fp)
 80134a8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 80134ac:	e0bffc17 	ldw	r2,-16(fp)
 80134b0:	e0ffff17 	ldw	r3,-4(fp)
 80134b4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80134b8:	0005303a 	rdctl	r2,status
 80134bc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80134c0:	e0fff817 	ldw	r3,-32(fp)
 80134c4:	00bfff84 	movi	r2,-2
 80134c8:	1884703a 	and	r2,r3,r2
 80134cc:	1001703a 	wrctl	status,r2
  
  return context;
 80134d0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 80134d4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80134d8:	008200b4 	movhi	r2,2050
 80134dc:	10a08604 	addi	r2,r2,-32232
 80134e0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 80134e4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 80134e8:	e0fffd17 	ldw	r3,-12(fp)
 80134ec:	e0bff617 	ldw	r2,-40(fp)
 80134f0:	1885883a 	add	r2,r3,r2
 80134f4:	10c00044 	addi	r3,r2,1
 80134f8:	e0bffc17 	ldw	r2,-16(fp)
 80134fc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8013500:	e0bffc17 	ldw	r2,-16(fp)
 8013504:	10c00217 	ldw	r3,8(r2)
 8013508:	e0bff617 	ldw	r2,-40(fp)
 801350c:	1880042e 	bgeu	r3,r2,8013520 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 8013510:	e0bffc17 	ldw	r2,-16(fp)
 8013514:	00c00044 	movi	r3,1
 8013518:	10c00405 	stb	r3,16(r2)
 801351c:	00000206 	br	8013528 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 8013520:	e0bffc17 	ldw	r2,-16(fp)
 8013524:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8013528:	e0bffc17 	ldw	r2,-16(fp)
 801352c:	00c20074 	movhi	r3,2049
 8013530:	18d9bb04 	addi	r3,r3,26348
 8013534:	e0fff915 	stw	r3,-28(fp)
 8013538:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 801353c:	e0bffa17 	ldw	r2,-24(fp)
 8013540:	e0fff917 	ldw	r3,-28(fp)
 8013544:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8013548:	e0bff917 	ldw	r2,-28(fp)
 801354c:	10c00017 	ldw	r3,0(r2)
 8013550:	e0bffa17 	ldw	r2,-24(fp)
 8013554:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8013558:	e0bff917 	ldw	r2,-28(fp)
 801355c:	10800017 	ldw	r2,0(r2)
 8013560:	e0fffa17 	ldw	r3,-24(fp)
 8013564:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8013568:	e0bff917 	ldw	r2,-28(fp)
 801356c:	e0fffa17 	ldw	r3,-24(fp)
 8013570:	10c00015 	stw	r3,0(r2)
 8013574:	e0bff717 	ldw	r2,-36(fp)
 8013578:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801357c:	e0bffb17 	ldw	r2,-20(fp)
 8013580:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8013584:	0005883a 	mov	r2,zero
 8013588:	00000306 	br	8013598 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 801358c:	00bffa84 	movi	r2,-22
 8013590:	00000106 	br	8013598 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 8013594:	00bfde84 	movi	r2,-134
  }
}
 8013598:	e037883a 	mov	sp,fp
 801359c:	df000017 	ldw	fp,0(sp)
 80135a0:	dec00104 	addi	sp,sp,4
 80135a4:	f800283a 	ret

080135a8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 80135a8:	deffff04 	addi	sp,sp,-4
 80135ac:	df000015 	stw	fp,0(sp)
 80135b0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80135b4:	e037883a 	mov	sp,fp
 80135b8:	df000017 	ldw	fp,0(sp)
 80135bc:	dec00104 	addi	sp,sp,4
 80135c0:	f800283a 	ret

080135c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80135c4:	defffe04 	addi	sp,sp,-8
 80135c8:	dfc00115 	stw	ra,4(sp)
 80135cc:	df000015 	stw	fp,0(sp)
 80135d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80135d4:	00820074 	movhi	r2,2049
 80135d8:	1099a604 	addi	r2,r2,26264
 80135dc:	10800017 	ldw	r2,0(r2)
 80135e0:	10000526 	beq	r2,zero,80135f8 <alt_get_errno+0x34>
 80135e4:	00820074 	movhi	r2,2049
 80135e8:	1099a604 	addi	r2,r2,26264
 80135ec:	10800017 	ldw	r2,0(r2)
 80135f0:	103ee83a 	callr	r2
 80135f4:	00000206 	br	8013600 <alt_get_errno+0x3c>
 80135f8:	008200b4 	movhi	r2,2050
 80135fc:	10a07a04 	addi	r2,r2,-32280
}
 8013600:	e037883a 	mov	sp,fp
 8013604:	dfc00117 	ldw	ra,4(sp)
 8013608:	df000017 	ldw	fp,0(sp)
 801360c:	dec00204 	addi	sp,sp,8
 8013610:	f800283a 	ret

08013614 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8013614:	defffa04 	addi	sp,sp,-24
 8013618:	dfc00515 	stw	ra,20(sp)
 801361c:	df000415 	stw	fp,16(sp)
 8013620:	df000404 	addi	fp,sp,16
 8013624:	e13ffe15 	stw	r4,-8(fp)
 8013628:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 801362c:	e0bffe17 	ldw	r2,-8(fp)
 8013630:	10000326 	beq	r2,zero,8013640 <alt_dev_llist_insert+0x2c>
 8013634:	e0bffe17 	ldw	r2,-8(fp)
 8013638:	10800217 	ldw	r2,8(r2)
 801363c:	1000051e 	bne	r2,zero,8013654 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 8013640:	80135c40 	call	80135c4 <alt_get_errno>
 8013644:	00c00584 	movi	r3,22
 8013648:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 801364c:	00bffa84 	movi	r2,-22
 8013650:	00001306 	br	80136a0 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8013654:	e0bffe17 	ldw	r2,-8(fp)
 8013658:	e0ffff17 	ldw	r3,-4(fp)
 801365c:	e0fffc15 	stw	r3,-16(fp)
 8013660:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8013664:	e0bffd17 	ldw	r2,-12(fp)
 8013668:	e0fffc17 	ldw	r3,-16(fp)
 801366c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8013670:	e0bffc17 	ldw	r2,-16(fp)
 8013674:	10c00017 	ldw	r3,0(r2)
 8013678:	e0bffd17 	ldw	r2,-12(fp)
 801367c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8013680:	e0bffc17 	ldw	r2,-16(fp)
 8013684:	10800017 	ldw	r2,0(r2)
 8013688:	e0fffd17 	ldw	r3,-12(fp)
 801368c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8013690:	e0bffc17 	ldw	r2,-16(fp)
 8013694:	e0fffd17 	ldw	r3,-12(fp)
 8013698:	10c00015 	stw	r3,0(r2)

  return 0;  
 801369c:	0005883a 	mov	r2,zero
}
 80136a0:	e037883a 	mov	sp,fp
 80136a4:	dfc00117 	ldw	ra,4(sp)
 80136a8:	df000017 	ldw	fp,0(sp)
 80136ac:	dec00204 	addi	sp,sp,8
 80136b0:	f800283a 	ret

080136b4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 80136b4:	defffd04 	addi	sp,sp,-12
 80136b8:	dfc00215 	stw	ra,8(sp)
 80136bc:	df000115 	stw	fp,4(sp)
 80136c0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80136c4:	00820074 	movhi	r2,2049
 80136c8:	10910c04 	addi	r2,r2,17456
 80136cc:	e0bfff15 	stw	r2,-4(fp)
 80136d0:	00000606 	br	80136ec <_do_ctors+0x38>
        (*ctor) (); 
 80136d4:	e0bfff17 	ldw	r2,-4(fp)
 80136d8:	10800017 	ldw	r2,0(r2)
 80136dc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80136e0:	e0bfff17 	ldw	r2,-4(fp)
 80136e4:	10bfff04 	addi	r2,r2,-4
 80136e8:	e0bfff15 	stw	r2,-4(fp)
 80136ec:	e0ffff17 	ldw	r3,-4(fp)
 80136f0:	00820074 	movhi	r2,2049
 80136f4:	10910d04 	addi	r2,r2,17460
 80136f8:	18bff62e 	bgeu	r3,r2,80136d4 <_do_ctors+0x20>
        (*ctor) (); 
}
 80136fc:	e037883a 	mov	sp,fp
 8013700:	dfc00117 	ldw	ra,4(sp)
 8013704:	df000017 	ldw	fp,0(sp)
 8013708:	dec00204 	addi	sp,sp,8
 801370c:	f800283a 	ret

08013710 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8013710:	defffd04 	addi	sp,sp,-12
 8013714:	dfc00215 	stw	ra,8(sp)
 8013718:	df000115 	stw	fp,4(sp)
 801371c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8013720:	00820074 	movhi	r2,2049
 8013724:	10910c04 	addi	r2,r2,17456
 8013728:	e0bfff15 	stw	r2,-4(fp)
 801372c:	00000606 	br	8013748 <_do_dtors+0x38>
        (*dtor) (); 
 8013730:	e0bfff17 	ldw	r2,-4(fp)
 8013734:	10800017 	ldw	r2,0(r2)
 8013738:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 801373c:	e0bfff17 	ldw	r2,-4(fp)
 8013740:	10bfff04 	addi	r2,r2,-4
 8013744:	e0bfff15 	stw	r2,-4(fp)
 8013748:	e0ffff17 	ldw	r3,-4(fp)
 801374c:	00820074 	movhi	r2,2049
 8013750:	10910d04 	addi	r2,r2,17460
 8013754:	18bff62e 	bgeu	r3,r2,8013730 <_do_dtors+0x20>
        (*dtor) (); 
}
 8013758:	e037883a 	mov	sp,fp
 801375c:	dfc00117 	ldw	ra,4(sp)
 8013760:	df000017 	ldw	fp,0(sp)
 8013764:	dec00204 	addi	sp,sp,8
 8013768:	f800283a 	ret

0801376c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 801376c:	defffa04 	addi	sp,sp,-24
 8013770:	dfc00515 	stw	ra,20(sp)
 8013774:	df000415 	stw	fp,16(sp)
 8013778:	df000404 	addi	fp,sp,16
 801377c:	e13ffe15 	stw	r4,-8(fp)
 8013780:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8013784:	e0bfff17 	ldw	r2,-4(fp)
 8013788:	10800017 	ldw	r2,0(r2)
 801378c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8013790:	e13ffe17 	ldw	r4,-8(fp)
 8013794:	80047340 	call	8004734 <strlen>
 8013798:	10800044 	addi	r2,r2,1
 801379c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80137a0:	00000d06 	br	80137d8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 80137a4:	e0bffc17 	ldw	r2,-16(fp)
 80137a8:	10c00217 	ldw	r3,8(r2)
 80137ac:	e0bffd17 	ldw	r2,-12(fp)
 80137b0:	1809883a 	mov	r4,r3
 80137b4:	e17ffe17 	ldw	r5,-8(fp)
 80137b8:	100d883a 	mov	r6,r2
 80137bc:	80140ac0 	call	80140ac <memcmp>
 80137c0:	1000021e 	bne	r2,zero,80137cc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 80137c4:	e0bffc17 	ldw	r2,-16(fp)
 80137c8:	00000706 	br	80137e8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 80137cc:	e0bffc17 	ldw	r2,-16(fp)
 80137d0:	10800017 	ldw	r2,0(r2)
 80137d4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80137d8:	e0fffc17 	ldw	r3,-16(fp)
 80137dc:	e0bfff17 	ldw	r2,-4(fp)
 80137e0:	18bff01e 	bne	r3,r2,80137a4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 80137e4:	0005883a 	mov	r2,zero
}
 80137e8:	e037883a 	mov	sp,fp
 80137ec:	dfc00117 	ldw	ra,4(sp)
 80137f0:	df000017 	ldw	fp,0(sp)
 80137f4:	dec00204 	addi	sp,sp,8
 80137f8:	f800283a 	ret

080137fc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 80137fc:	defffb04 	addi	sp,sp,-20
 8013800:	dfc00415 	stw	ra,16(sp)
 8013804:	df000315 	stw	fp,12(sp)
 8013808:	df000304 	addi	fp,sp,12
 801380c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8013810:	00820074 	movhi	r2,2049
 8013814:	1099a104 	addi	r2,r2,26244
 8013818:	10800017 	ldw	r2,0(r2)
 801381c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8013820:	00003106 	br	80138e8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 8013824:	e0bffd17 	ldw	r2,-12(fp)
 8013828:	10800217 	ldw	r2,8(r2)
 801382c:	1009883a 	mov	r4,r2
 8013830:	80047340 	call	8004734 <strlen>
 8013834:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8013838:	e0bffd17 	ldw	r2,-12(fp)
 801383c:	10c00217 	ldw	r3,8(r2)
 8013840:	e0bffe17 	ldw	r2,-8(fp)
 8013844:	10bfffc4 	addi	r2,r2,-1
 8013848:	1885883a 	add	r2,r3,r2
 801384c:	10800003 	ldbu	r2,0(r2)
 8013850:	10803fcc 	andi	r2,r2,255
 8013854:	1080201c 	xori	r2,r2,128
 8013858:	10bfe004 	addi	r2,r2,-128
 801385c:	10800bd8 	cmpnei	r2,r2,47
 8013860:	1000031e 	bne	r2,zero,8013870 <alt_find_file+0x74>
    {
      len -= 1;
 8013864:	e0bffe17 	ldw	r2,-8(fp)
 8013868:	10bfffc4 	addi	r2,r2,-1
 801386c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8013870:	e0bffe17 	ldw	r2,-8(fp)
 8013874:	e0ffff17 	ldw	r3,-4(fp)
 8013878:	1885883a 	add	r2,r3,r2
 801387c:	10800003 	ldbu	r2,0(r2)
 8013880:	10803fcc 	andi	r2,r2,255
 8013884:	1080201c 	xori	r2,r2,128
 8013888:	10bfe004 	addi	r2,r2,-128
 801388c:	10800be0 	cmpeqi	r2,r2,47
 8013890:	1000081e 	bne	r2,zero,80138b4 <alt_find_file+0xb8>
 8013894:	e0bffe17 	ldw	r2,-8(fp)
 8013898:	e0ffff17 	ldw	r3,-4(fp)
 801389c:	1885883a 	add	r2,r3,r2
 80138a0:	10800003 	ldbu	r2,0(r2)
 80138a4:	10803fcc 	andi	r2,r2,255
 80138a8:	1080201c 	xori	r2,r2,128
 80138ac:	10bfe004 	addi	r2,r2,-128
 80138b0:	10000a1e 	bne	r2,zero,80138dc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 80138b4:	e0bffd17 	ldw	r2,-12(fp)
 80138b8:	10c00217 	ldw	r3,8(r2)
 80138bc:	e0bffe17 	ldw	r2,-8(fp)
 80138c0:	1809883a 	mov	r4,r3
 80138c4:	e17fff17 	ldw	r5,-4(fp)
 80138c8:	100d883a 	mov	r6,r2
 80138cc:	80140ac0 	call	80140ac <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80138d0:	1000021e 	bne	r2,zero,80138dc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 80138d4:	e0bffd17 	ldw	r2,-12(fp)
 80138d8:	00000806 	br	80138fc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 80138dc:	e0bffd17 	ldw	r2,-12(fp)
 80138e0:	10800017 	ldw	r2,0(r2)
 80138e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80138e8:	e0fffd17 	ldw	r3,-12(fp)
 80138ec:	00820074 	movhi	r2,2049
 80138f0:	1099a104 	addi	r2,r2,26244
 80138f4:	18bfcb1e 	bne	r3,r2,8013824 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 80138f8:	0005883a 	mov	r2,zero
}
 80138fc:	e037883a 	mov	sp,fp
 8013900:	dfc00117 	ldw	ra,4(sp)
 8013904:	df000017 	ldw	fp,0(sp)
 8013908:	dec00204 	addi	sp,sp,8
 801390c:	f800283a 	ret

08013910 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
 8013910:	defffc04 	addi	sp,sp,-16
 8013914:	df000315 	stw	fp,12(sp)
 8013918:	df000304 	addi	fp,sp,12
 801391c:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
 8013920:	e0bfff17 	ldw	r2,-4(fp)
 8013924:	10800217 	ldw	r2,8(r2)
 8013928:	1000021e 	bne	r2,zero,8013934 <alt_fs_reg+0x24>
  {
    return -ENODEV;
 801392c:	00bffb44 	movi	r2,-19
 8013930:	00001406 	br	8013984 <alt_fs_reg+0x74>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
 8013934:	e0bfff17 	ldw	r2,-4(fp)
 8013938:	00c20074 	movhi	r3,2049
 801393c:	18d9a104 	addi	r3,r3,26244
 8013940:	e0fffd15 	stw	r3,-12(fp)
 8013944:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8013948:	e0bffe17 	ldw	r2,-8(fp)
 801394c:	e0fffd17 	ldw	r3,-12(fp)
 8013950:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8013954:	e0bffd17 	ldw	r2,-12(fp)
 8013958:	10c00017 	ldw	r3,0(r2)
 801395c:	e0bffe17 	ldw	r2,-8(fp)
 8013960:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8013964:	e0bffd17 	ldw	r2,-12(fp)
 8013968:	10800017 	ldw	r2,0(r2)
 801396c:	e0fffe17 	ldw	r3,-8(fp)
 8013970:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8013974:	e0bffd17 	ldw	r2,-12(fp)
 8013978:	e0fffe17 	ldw	r3,-8(fp)
 801397c:	10c00015 	stw	r3,0(r2)

  return 0;
 8013980:	0005883a 	mov	r2,zero
} 
 8013984:	e037883a 	mov	sp,fp
 8013988:	df000017 	ldw	fp,0(sp)
 801398c:	dec00104 	addi	sp,sp,4
 8013990:	f800283a 	ret

08013994 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8013994:	defffa04 	addi	sp,sp,-24
 8013998:	dfc00515 	stw	ra,20(sp)
 801399c:	df000415 	stw	fp,16(sp)
 80139a0:	dc000315 	stw	r16,12(sp)
 80139a4:	df000304 	addi	fp,sp,12
 80139a8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 80139ac:	00bffa04 	movi	r2,-24
 80139b0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80139b4:	e03ffd15 	stw	zero,-12(fp)
 80139b8:	00002106 	br	8013a40 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 80139bc:	04020074 	movhi	r16,2049
 80139c0:	84151904 	addi	r16,r16,21604
 80139c4:	e0bffd17 	ldw	r2,-12(fp)
 80139c8:	1009883a 	mov	r4,r2
 80139cc:	01400304 	movi	r5,12
 80139d0:	8001a6c0 	call	8001a6c <__mulsi3>
 80139d4:	8085883a 	add	r2,r16,r2
 80139d8:	10800017 	ldw	r2,0(r2)
 80139dc:	1000151e 	bne	r2,zero,8013a34 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 80139e0:	04020074 	movhi	r16,2049
 80139e4:	84151904 	addi	r16,r16,21604
 80139e8:	e0bffd17 	ldw	r2,-12(fp)
 80139ec:	1009883a 	mov	r4,r2
 80139f0:	01400304 	movi	r5,12
 80139f4:	8001a6c0 	call	8001a6c <__mulsi3>
 80139f8:	8085883a 	add	r2,r16,r2
 80139fc:	e0ffff17 	ldw	r3,-4(fp)
 8013a00:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8013a04:	00820074 	movhi	r2,2049
 8013a08:	1099a504 	addi	r2,r2,26260
 8013a0c:	10c00017 	ldw	r3,0(r2)
 8013a10:	e0bffd17 	ldw	r2,-12(fp)
 8013a14:	1880040e 	bge	r3,r2,8013a28 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 8013a18:	00820074 	movhi	r2,2049
 8013a1c:	1099a504 	addi	r2,r2,26260
 8013a20:	e0fffd17 	ldw	r3,-12(fp)
 8013a24:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 8013a28:	e0bffd17 	ldw	r2,-12(fp)
 8013a2c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8013a30:	00000606 	br	8013a4c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8013a34:	e0bffd17 	ldw	r2,-12(fp)
 8013a38:	10800044 	addi	r2,r2,1
 8013a3c:	e0bffd15 	stw	r2,-12(fp)
 8013a40:	e0bffd17 	ldw	r2,-12(fp)
 8013a44:	10800810 	cmplti	r2,r2,32
 8013a48:	103fdc1e 	bne	r2,zero,80139bc <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8013a4c:	e0bffe17 	ldw	r2,-8(fp)
}
 8013a50:	e037883a 	mov	sp,fp
 8013a54:	dfc00217 	ldw	ra,8(sp)
 8013a58:	df000117 	ldw	fp,4(sp)
 8013a5c:	dc000017 	ldw	r16,0(sp)
 8013a60:	dec00304 	addi	sp,sp,12
 8013a64:	f800283a 	ret

08013a68 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8013a68:	deffff04 	addi	sp,sp,-4
 8013a6c:	df000015 	stw	fp,0(sp)
 8013a70:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8013a74:	e037883a 	mov	sp,fp
 8013a78:	df000017 	ldw	fp,0(sp)
 8013a7c:	dec00104 	addi	sp,sp,4
 8013a80:	f800283a 	ret

08013a84 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8013a84:	defff904 	addi	sp,sp,-28
 8013a88:	dfc00615 	stw	ra,24(sp)
 8013a8c:	df000515 	stw	fp,20(sp)
 8013a90:	df000504 	addi	fp,sp,20
 8013a94:	e13ffc15 	stw	r4,-16(fp)
 8013a98:	e17ffd15 	stw	r5,-12(fp)
 8013a9c:	e1bffe15 	stw	r6,-8(fp)
 8013aa0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8013aa4:	e0800217 	ldw	r2,8(fp)
 8013aa8:	d8800015 	stw	r2,0(sp)
 8013aac:	e13ffc17 	ldw	r4,-16(fp)
 8013ab0:	e17ffd17 	ldw	r5,-12(fp)
 8013ab4:	e1bffe17 	ldw	r6,-8(fp)
 8013ab8:	e1ffff17 	ldw	r7,-4(fp)
 8013abc:	8013c5c0 	call	8013c5c <alt_iic_isr_register>
}  
 8013ac0:	e037883a 	mov	sp,fp
 8013ac4:	dfc00117 	ldw	ra,4(sp)
 8013ac8:	df000017 	ldw	fp,0(sp)
 8013acc:	dec00204 	addi	sp,sp,8
 8013ad0:	f800283a 	ret

08013ad4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8013ad4:	defff904 	addi	sp,sp,-28
 8013ad8:	df000615 	stw	fp,24(sp)
 8013adc:	df000604 	addi	fp,sp,24
 8013ae0:	e13ffe15 	stw	r4,-8(fp)
 8013ae4:	e17fff15 	stw	r5,-4(fp)
 8013ae8:	e0bfff17 	ldw	r2,-4(fp)
 8013aec:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013af0:	0005303a 	rdctl	r2,status
 8013af4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013af8:	e0fffb17 	ldw	r3,-20(fp)
 8013afc:	00bfff84 	movi	r2,-2
 8013b00:	1884703a 	and	r2,r3,r2
 8013b04:	1001703a 	wrctl	status,r2
  
  return context;
 8013b08:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8013b0c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8013b10:	e0bffa17 	ldw	r2,-24(fp)
 8013b14:	00c00044 	movi	r3,1
 8013b18:	1884983a 	sll	r2,r3,r2
 8013b1c:	1007883a 	mov	r3,r2
 8013b20:	008200b4 	movhi	r2,2050
 8013b24:	10a08404 	addi	r2,r2,-32240
 8013b28:	10800017 	ldw	r2,0(r2)
 8013b2c:	1886b03a 	or	r3,r3,r2
 8013b30:	008200b4 	movhi	r2,2050
 8013b34:	10a08404 	addi	r2,r2,-32240
 8013b38:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8013b3c:	008200b4 	movhi	r2,2050
 8013b40:	10a08404 	addi	r2,r2,-32240
 8013b44:	10800017 	ldw	r2,0(r2)
 8013b48:	100170fa 	wrctl	ienable,r2
 8013b4c:	e0bffc17 	ldw	r2,-16(fp)
 8013b50:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013b54:	e0bffd17 	ldw	r2,-12(fp)
 8013b58:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8013b5c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 8013b60:	e037883a 	mov	sp,fp
 8013b64:	df000017 	ldw	fp,0(sp)
 8013b68:	dec00104 	addi	sp,sp,4
 8013b6c:	f800283a 	ret

08013b70 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8013b70:	defff904 	addi	sp,sp,-28
 8013b74:	df000615 	stw	fp,24(sp)
 8013b78:	df000604 	addi	fp,sp,24
 8013b7c:	e13ffe15 	stw	r4,-8(fp)
 8013b80:	e17fff15 	stw	r5,-4(fp)
 8013b84:	e0bfff17 	ldw	r2,-4(fp)
 8013b88:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013b8c:	0005303a 	rdctl	r2,status
 8013b90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013b94:	e0fffb17 	ldw	r3,-20(fp)
 8013b98:	00bfff84 	movi	r2,-2
 8013b9c:	1884703a 	and	r2,r3,r2
 8013ba0:	1001703a 	wrctl	status,r2
  
  return context;
 8013ba4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8013ba8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8013bac:	e0bffa17 	ldw	r2,-24(fp)
 8013bb0:	00c00044 	movi	r3,1
 8013bb4:	1884983a 	sll	r2,r3,r2
 8013bb8:	0084303a 	nor	r2,zero,r2
 8013bbc:	1007883a 	mov	r3,r2
 8013bc0:	008200b4 	movhi	r2,2050
 8013bc4:	10a08404 	addi	r2,r2,-32240
 8013bc8:	10800017 	ldw	r2,0(r2)
 8013bcc:	1886703a 	and	r3,r3,r2
 8013bd0:	008200b4 	movhi	r2,2050
 8013bd4:	10a08404 	addi	r2,r2,-32240
 8013bd8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8013bdc:	008200b4 	movhi	r2,2050
 8013be0:	10a08404 	addi	r2,r2,-32240
 8013be4:	10800017 	ldw	r2,0(r2)
 8013be8:	100170fa 	wrctl	ienable,r2
 8013bec:	e0bffc17 	ldw	r2,-16(fp)
 8013bf0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013bf4:	e0bffd17 	ldw	r2,-12(fp)
 8013bf8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8013bfc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 8013c00:	e037883a 	mov	sp,fp
 8013c04:	df000017 	ldw	fp,0(sp)
 8013c08:	dec00104 	addi	sp,sp,4
 8013c0c:	f800283a 	ret

08013c10 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8013c10:	defffc04 	addi	sp,sp,-16
 8013c14:	df000315 	stw	fp,12(sp)
 8013c18:	df000304 	addi	fp,sp,12
 8013c1c:	e13ffe15 	stw	r4,-8(fp)
 8013c20:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8013c24:	000530fa 	rdctl	r2,ienable
 8013c28:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8013c2c:	e0bfff17 	ldw	r2,-4(fp)
 8013c30:	00c00044 	movi	r3,1
 8013c34:	1884983a 	sll	r2,r3,r2
 8013c38:	1007883a 	mov	r3,r2
 8013c3c:	e0bffd17 	ldw	r2,-12(fp)
 8013c40:	1884703a 	and	r2,r3,r2
 8013c44:	1004c03a 	cmpne	r2,r2,zero
 8013c48:	10803fcc 	andi	r2,r2,255
}
 8013c4c:	e037883a 	mov	sp,fp
 8013c50:	df000017 	ldw	fp,0(sp)
 8013c54:	dec00104 	addi	sp,sp,4
 8013c58:	f800283a 	ret

08013c5c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8013c5c:	defff504 	addi	sp,sp,-44
 8013c60:	dfc00a15 	stw	ra,40(sp)
 8013c64:	df000915 	stw	fp,36(sp)
 8013c68:	df000904 	addi	fp,sp,36
 8013c6c:	e13ffc15 	stw	r4,-16(fp)
 8013c70:	e17ffd15 	stw	r5,-12(fp)
 8013c74:	e1bffe15 	stw	r6,-8(fp)
 8013c78:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8013c7c:	00bffa84 	movi	r2,-22
 8013c80:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8013c84:	e0bffd17 	ldw	r2,-12(fp)
 8013c88:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8013c8c:	e0bff817 	ldw	r2,-32(fp)
 8013c90:	10800808 	cmpgei	r2,r2,32
 8013c94:	1000271e 	bne	r2,zero,8013d34 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013c98:	0005303a 	rdctl	r2,status
 8013c9c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013ca0:	e0fffa17 	ldw	r3,-24(fp)
 8013ca4:	00bfff84 	movi	r2,-2
 8013ca8:	1884703a 	and	r2,r3,r2
 8013cac:	1001703a 	wrctl	status,r2
  
  return context;
 8013cb0:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8013cb4:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 8013cb8:	00c200b4 	movhi	r3,2050
 8013cbc:	18e0d104 	addi	r3,r3,-31932
 8013cc0:	e0bff817 	ldw	r2,-32(fp)
 8013cc4:	100490fa 	slli	r2,r2,3
 8013cc8:	1885883a 	add	r2,r3,r2
 8013ccc:	e0fffe17 	ldw	r3,-8(fp)
 8013cd0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8013cd4:	00c200b4 	movhi	r3,2050
 8013cd8:	18e0d104 	addi	r3,r3,-31932
 8013cdc:	e0bff817 	ldw	r2,-32(fp)
 8013ce0:	100490fa 	slli	r2,r2,3
 8013ce4:	1885883a 	add	r2,r3,r2
 8013ce8:	10800104 	addi	r2,r2,4
 8013cec:	e0ffff17 	ldw	r3,-4(fp)
 8013cf0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8013cf4:	e0bffe17 	ldw	r2,-8(fp)
 8013cf8:	10000526 	beq	r2,zero,8013d10 <alt_iic_isr_register+0xb4>
 8013cfc:	e0bff817 	ldw	r2,-32(fp)
 8013d00:	e13ffc17 	ldw	r4,-16(fp)
 8013d04:	100b883a 	mov	r5,r2
 8013d08:	8013ad40 	call	8013ad4 <alt_ic_irq_enable>
 8013d0c:	00000406 	br	8013d20 <alt_iic_isr_register+0xc4>
 8013d10:	e0bff817 	ldw	r2,-32(fp)
 8013d14:	e13ffc17 	ldw	r4,-16(fp)
 8013d18:	100b883a 	mov	r5,r2
 8013d1c:	8013b700 	call	8013b70 <alt_ic_irq_disable>
 8013d20:	e0bff715 	stw	r2,-36(fp)
 8013d24:	e0bff917 	ldw	r2,-28(fp)
 8013d28:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013d2c:	e0bffb17 	ldw	r2,-20(fp)
 8013d30:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8013d34:	e0bff717 	ldw	r2,-36(fp)
}
 8013d38:	e037883a 	mov	sp,fp
 8013d3c:	dfc00117 	ldw	ra,4(sp)
 8013d40:	df000017 	ldw	fp,0(sp)
 8013d44:	dec00204 	addi	sp,sp,8
 8013d48:	f800283a 	ret

08013d4c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8013d4c:	defff804 	addi	sp,sp,-32
 8013d50:	dfc00715 	stw	ra,28(sp)
 8013d54:	df000615 	stw	fp,24(sp)
 8013d58:	dc000515 	stw	r16,20(sp)
 8013d5c:	df000504 	addi	fp,sp,20
 8013d60:	e13ffc15 	stw	r4,-16(fp)
 8013d64:	e17ffd15 	stw	r5,-12(fp)
 8013d68:	e1bffe15 	stw	r6,-8(fp)
 8013d6c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8013d70:	e13ffd17 	ldw	r4,-12(fp)
 8013d74:	e17ffe17 	ldw	r5,-8(fp)
 8013d78:	e1bfff17 	ldw	r6,-4(fp)
 8013d7c:	801172c0 	call	801172c <open>
 8013d80:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8013d84:	e0bffb17 	ldw	r2,-20(fp)
 8013d88:	10002216 	blt	r2,zero,8013e14 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 8013d8c:	04020074 	movhi	r16,2049
 8013d90:	84151904 	addi	r16,r16,21604
 8013d94:	e0bffb17 	ldw	r2,-20(fp)
 8013d98:	1009883a 	mov	r4,r2
 8013d9c:	01400304 	movi	r5,12
 8013da0:	8001a6c0 	call	8001a6c <__mulsi3>
 8013da4:	8085883a 	add	r2,r16,r2
 8013da8:	10c00017 	ldw	r3,0(r2)
 8013dac:	e0bffc17 	ldw	r2,-16(fp)
 8013db0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8013db4:	04020074 	movhi	r16,2049
 8013db8:	84151904 	addi	r16,r16,21604
 8013dbc:	e0bffb17 	ldw	r2,-20(fp)
 8013dc0:	1009883a 	mov	r4,r2
 8013dc4:	01400304 	movi	r5,12
 8013dc8:	8001a6c0 	call	8001a6c <__mulsi3>
 8013dcc:	8085883a 	add	r2,r16,r2
 8013dd0:	10800104 	addi	r2,r2,4
 8013dd4:	10c00017 	ldw	r3,0(r2)
 8013dd8:	e0bffc17 	ldw	r2,-16(fp)
 8013ddc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8013de0:	04020074 	movhi	r16,2049
 8013de4:	84151904 	addi	r16,r16,21604
 8013de8:	e0bffb17 	ldw	r2,-20(fp)
 8013dec:	1009883a 	mov	r4,r2
 8013df0:	01400304 	movi	r5,12
 8013df4:	8001a6c0 	call	8001a6c <__mulsi3>
 8013df8:	8085883a 	add	r2,r16,r2
 8013dfc:	10800204 	addi	r2,r2,8
 8013e00:	10c00017 	ldw	r3,0(r2)
 8013e04:	e0bffc17 	ldw	r2,-16(fp)
 8013e08:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8013e0c:	e13ffb17 	ldw	r4,-20(fp)
 8013e10:	80119c80 	call	80119c8 <alt_release_fd>
  }
} 
 8013e14:	e037883a 	mov	sp,fp
 8013e18:	dfc00217 	ldw	ra,8(sp)
 8013e1c:	df000117 	ldw	fp,4(sp)
 8013e20:	dc000017 	ldw	r16,0(sp)
 8013e24:	dec00304 	addi	sp,sp,12
 8013e28:	f800283a 	ret

08013e2c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8013e2c:	defffb04 	addi	sp,sp,-20
 8013e30:	dfc00415 	stw	ra,16(sp)
 8013e34:	df000315 	stw	fp,12(sp)
 8013e38:	df000304 	addi	fp,sp,12
 8013e3c:	e13ffd15 	stw	r4,-12(fp)
 8013e40:	e17ffe15 	stw	r5,-8(fp)
 8013e44:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8013e48:	01020074 	movhi	r4,2049
 8013e4c:	21151c04 	addi	r4,r4,21616
 8013e50:	e17ffd17 	ldw	r5,-12(fp)
 8013e54:	01800044 	movi	r6,1
 8013e58:	01c07fc4 	movi	r7,511
 8013e5c:	8013d4c0 	call	8013d4c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8013e60:	01020074 	movhi	r4,2049
 8013e64:	21151904 	addi	r4,r4,21604
 8013e68:	e17ffe17 	ldw	r5,-8(fp)
 8013e6c:	000d883a 	mov	r6,zero
 8013e70:	01c07fc4 	movi	r7,511
 8013e74:	8013d4c0 	call	8013d4c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8013e78:	01020074 	movhi	r4,2049
 8013e7c:	21151f04 	addi	r4,r4,21628
 8013e80:	e17fff17 	ldw	r5,-4(fp)
 8013e84:	01800044 	movi	r6,1
 8013e88:	01c07fc4 	movi	r7,511
 8013e8c:	8013d4c0 	call	8013d4c <alt_open_fd>
}  
 8013e90:	e037883a 	mov	sp,fp
 8013e94:	dfc00117 	ldw	ra,4(sp)
 8013e98:	df000017 	ldw	fp,0(sp)
 8013e9c:	dec00204 	addi	sp,sp,8
 8013ea0:	f800283a 	ret

08013ea4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8013ea4:	defffa04 	addi	sp,sp,-24
 8013ea8:	df000515 	stw	fp,20(sp)
 8013eac:	df000504 	addi	fp,sp,20
 8013eb0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013eb4:	0005303a 	rdctl	r2,status
 8013eb8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013ebc:	e0fffc17 	ldw	r3,-16(fp)
 8013ec0:	00bfff84 	movi	r2,-2
 8013ec4:	1884703a 	and	r2,r3,r2
 8013ec8:	1001703a 	wrctl	status,r2
  
  return context;
 8013ecc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8013ed0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8013ed4:	e0bfff17 	ldw	r2,-4(fp)
 8013ed8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8013edc:	e0bffd17 	ldw	r2,-12(fp)
 8013ee0:	10800017 	ldw	r2,0(r2)
 8013ee4:	e0fffd17 	ldw	r3,-12(fp)
 8013ee8:	18c00117 	ldw	r3,4(r3)
 8013eec:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8013ef0:	e0bffd17 	ldw	r2,-12(fp)
 8013ef4:	10800117 	ldw	r2,4(r2)
 8013ef8:	e0fffd17 	ldw	r3,-12(fp)
 8013efc:	18c00017 	ldw	r3,0(r3)
 8013f00:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8013f04:	e0bffd17 	ldw	r2,-12(fp)
 8013f08:	e0fffd17 	ldw	r3,-12(fp)
 8013f0c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8013f10:	e0bffd17 	ldw	r2,-12(fp)
 8013f14:	e0fffd17 	ldw	r3,-12(fp)
 8013f18:	10c00015 	stw	r3,0(r2)
 8013f1c:	e0bffb17 	ldw	r2,-20(fp)
 8013f20:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013f24:	e0bffe17 	ldw	r2,-8(fp)
 8013f28:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8013f2c:	e037883a 	mov	sp,fp
 8013f30:	df000017 	ldw	fp,0(sp)
 8013f34:	dec00104 	addi	sp,sp,4
 8013f38:	f800283a 	ret

08013f3c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8013f3c:	defffb04 	addi	sp,sp,-20
 8013f40:	dfc00415 	stw	ra,16(sp)
 8013f44:	df000315 	stw	fp,12(sp)
 8013f48:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8013f4c:	d0a02017 	ldw	r2,-32640(gp)
 8013f50:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8013f54:	d0a6eb17 	ldw	r2,-25684(gp)
 8013f58:	10800044 	addi	r2,r2,1
 8013f5c:	d0a6eb15 	stw	r2,-25684(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8013f60:	00002e06 	br	801401c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8013f64:	e0bffd17 	ldw	r2,-12(fp)
 8013f68:	10800017 	ldw	r2,0(r2)
 8013f6c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8013f70:	e0bffd17 	ldw	r2,-12(fp)
 8013f74:	10800403 	ldbu	r2,16(r2)
 8013f78:	10803fcc 	andi	r2,r2,255
 8013f7c:	10000426 	beq	r2,zero,8013f90 <alt_tick+0x54>
 8013f80:	d0a6eb17 	ldw	r2,-25684(gp)
 8013f84:	1000021e 	bne	r2,zero,8013f90 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8013f88:	e0bffd17 	ldw	r2,-12(fp)
 8013f8c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8013f90:	e0bffd17 	ldw	r2,-12(fp)
 8013f94:	10800217 	ldw	r2,8(r2)
 8013f98:	d0e6eb17 	ldw	r3,-25684(gp)
 8013f9c:	18801d36 	bltu	r3,r2,8014014 <alt_tick+0xd8>
 8013fa0:	e0bffd17 	ldw	r2,-12(fp)
 8013fa4:	10800403 	ldbu	r2,16(r2)
 8013fa8:	10803fcc 	andi	r2,r2,255
 8013fac:	1000191e 	bne	r2,zero,8014014 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8013fb0:	e0bffd17 	ldw	r2,-12(fp)
 8013fb4:	10c00317 	ldw	r3,12(r2)
 8013fb8:	e0bffd17 	ldw	r2,-12(fp)
 8013fbc:	10800517 	ldw	r2,20(r2)
 8013fc0:	1009883a 	mov	r4,r2
 8013fc4:	183ee83a 	callr	r3
 8013fc8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8013fcc:	e0bfff17 	ldw	r2,-4(fp)
 8013fd0:	1000031e 	bne	r2,zero,8013fe0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8013fd4:	e13ffd17 	ldw	r4,-12(fp)
 8013fd8:	8013ea40 	call	8013ea4 <alt_alarm_stop>
 8013fdc:	00000d06 	br	8014014 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8013fe0:	e0bffd17 	ldw	r2,-12(fp)
 8013fe4:	10c00217 	ldw	r3,8(r2)
 8013fe8:	e0bfff17 	ldw	r2,-4(fp)
 8013fec:	1887883a 	add	r3,r3,r2
 8013ff0:	e0bffd17 	ldw	r2,-12(fp)
 8013ff4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8013ff8:	e0bffd17 	ldw	r2,-12(fp)
 8013ffc:	10c00217 	ldw	r3,8(r2)
 8014000:	d0a6eb17 	ldw	r2,-25684(gp)
 8014004:	1880032e 	bgeu	r3,r2,8014014 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8014008:	e0bffd17 	ldw	r2,-12(fp)
 801400c:	00c00044 	movi	r3,1
 8014010:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8014014:	e0bffe17 	ldw	r2,-8(fp)
 8014018:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 801401c:	e0fffd17 	ldw	r3,-12(fp)
 8014020:	d0a02004 	addi	r2,gp,-32640
 8014024:	18bfcf1e 	bne	r3,r2,8013f64 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8014028:	0001883a 	nop
}
 801402c:	e037883a 	mov	sp,fp
 8014030:	dfc00117 	ldw	ra,4(sp)
 8014034:	df000017 	ldw	fp,0(sp)
 8014038:	dec00204 	addi	sp,sp,8
 801403c:	f800283a 	ret

08014040 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 8014040:	deffff04 	addi	sp,sp,-4
 8014044:	df000015 	stw	fp,0(sp)
 8014048:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 801404c:	000170fa 	wrctl	ienable,zero
}
 8014050:	e037883a 	mov	sp,fp
 8014054:	df000017 	ldw	fp,0(sp)
 8014058:	dec00104 	addi	sp,sp,4
 801405c:	f800283a 	ret

08014060 <atexit>:
 8014060:	200b883a 	mov	r5,r4
 8014064:	000d883a 	mov	r6,zero
 8014068:	0009883a 	mov	r4,zero
 801406c:	000f883a 	mov	r7,zero
 8014070:	80141281 	jmpi	8014128 <__register_exitproc>

08014074 <exit>:
 8014074:	defffe04 	addi	sp,sp,-8
 8014078:	000b883a 	mov	r5,zero
 801407c:	dc000015 	stw	r16,0(sp)
 8014080:	dfc00115 	stw	ra,4(sp)
 8014084:	2021883a 	mov	r16,r4
 8014088:	80142580 	call	8014258 <__call_exitprocs>
 801408c:	00820074 	movhi	r2,2049
 8014090:	10999b04 	addi	r2,r2,26220
 8014094:	11000017 	ldw	r4,0(r2)
 8014098:	20800f17 	ldw	r2,60(r4)
 801409c:	10000126 	beq	r2,zero,80140a4 <exit+0x30>
 80140a0:	103ee83a 	callr	r2
 80140a4:	8009883a 	mov	r4,r16
 80140a8:	80143f80 	call	80143f8 <_exit>

080140ac <memcmp>:
 80140ac:	01c000c4 	movi	r7,3
 80140b0:	3980192e 	bgeu	r7,r6,8014118 <memcmp+0x6c>
 80140b4:	2904b03a 	or	r2,r5,r4
 80140b8:	11c4703a 	and	r2,r2,r7
 80140bc:	10000f26 	beq	r2,zero,80140fc <memcmp+0x50>
 80140c0:	20c00003 	ldbu	r3,0(r4)
 80140c4:	28800003 	ldbu	r2,0(r5)
 80140c8:	1880151e 	bne	r3,r2,8014120 <memcmp+0x74>
 80140cc:	31bfff84 	addi	r6,r6,-2
 80140d0:	01ffffc4 	movi	r7,-1
 80140d4:	00000406 	br	80140e8 <memcmp+0x3c>
 80140d8:	20c00003 	ldbu	r3,0(r4)
 80140dc:	28800003 	ldbu	r2,0(r5)
 80140e0:	31bfffc4 	addi	r6,r6,-1
 80140e4:	18800e1e 	bne	r3,r2,8014120 <memcmp+0x74>
 80140e8:	21000044 	addi	r4,r4,1
 80140ec:	29400044 	addi	r5,r5,1
 80140f0:	31fff91e 	bne	r6,r7,80140d8 <memcmp+0x2c>
 80140f4:	0005883a 	mov	r2,zero
 80140f8:	f800283a 	ret
 80140fc:	20c00017 	ldw	r3,0(r4)
 8014100:	28800017 	ldw	r2,0(r5)
 8014104:	1880041e 	bne	r3,r2,8014118 <memcmp+0x6c>
 8014108:	31bfff04 	addi	r6,r6,-4
 801410c:	21000104 	addi	r4,r4,4
 8014110:	29400104 	addi	r5,r5,4
 8014114:	39bff936 	bltu	r7,r6,80140fc <memcmp+0x50>
 8014118:	303fe91e 	bne	r6,zero,80140c0 <memcmp+0x14>
 801411c:	003ff506 	br	80140f4 <memcmp+0x48>
 8014120:	1885c83a 	sub	r2,r3,r2
 8014124:	f800283a 	ret

08014128 <__register_exitproc>:
 8014128:	defffa04 	addi	sp,sp,-24
 801412c:	00820074 	movhi	r2,2049
 8014130:	10999b04 	addi	r2,r2,26220
 8014134:	dc000315 	stw	r16,12(sp)
 8014138:	14000017 	ldw	r16,0(r2)
 801413c:	dc400415 	stw	r17,16(sp)
 8014140:	dfc00515 	stw	ra,20(sp)
 8014144:	80805217 	ldw	r2,328(r16)
 8014148:	2023883a 	mov	r17,r4
 801414c:	10003e26 	beq	r2,zero,8014248 <__register_exitproc+0x120>
 8014150:	10c00117 	ldw	r3,4(r2)
 8014154:	020007c4 	movi	r8,31
 8014158:	40c0180e 	bge	r8,r3,80141bc <__register_exitproc+0x94>
 801415c:	00820034 	movhi	r2,2048
 8014160:	108dc104 	addi	r2,r2,14084
 8014164:	1000061e 	bne	r2,zero,8014180 <__register_exitproc+0x58>
 8014168:	00bfffc4 	movi	r2,-1
 801416c:	dfc00517 	ldw	ra,20(sp)
 8014170:	dc400417 	ldw	r17,16(sp)
 8014174:	dc000317 	ldw	r16,12(sp)
 8014178:	dec00604 	addi	sp,sp,24
 801417c:	f800283a 	ret
 8014180:	01006404 	movi	r4,400
 8014184:	d9400015 	stw	r5,0(sp)
 8014188:	d9800115 	stw	r6,4(sp)
 801418c:	d9c00215 	stw	r7,8(sp)
 8014190:	80037040 	call	8003704 <malloc>
 8014194:	d9400017 	ldw	r5,0(sp)
 8014198:	d9800117 	ldw	r6,4(sp)
 801419c:	d9c00217 	ldw	r7,8(sp)
 80141a0:	103ff126 	beq	r2,zero,8014168 <__register_exitproc+0x40>
 80141a4:	80c05217 	ldw	r3,328(r16)
 80141a8:	10000115 	stw	zero,4(r2)
 80141ac:	10c00015 	stw	r3,0(r2)
 80141b0:	80805215 	stw	r2,328(r16)
 80141b4:	10006215 	stw	zero,392(r2)
 80141b8:	10006315 	stw	zero,396(r2)
 80141bc:	10c00117 	ldw	r3,4(r2)
 80141c0:	88000d1e 	bne	r17,zero,80141f8 <__register_exitproc+0xd0>
 80141c4:	19000084 	addi	r4,r3,2
 80141c8:	2109883a 	add	r4,r4,r4
 80141cc:	18c00044 	addi	r3,r3,1
 80141d0:	2109883a 	add	r4,r4,r4
 80141d4:	1109883a 	add	r4,r2,r4
 80141d8:	10c00115 	stw	r3,4(r2)
 80141dc:	0005883a 	mov	r2,zero
 80141e0:	21400015 	stw	r5,0(r4)
 80141e4:	dfc00517 	ldw	ra,20(sp)
 80141e8:	dc400417 	ldw	r17,16(sp)
 80141ec:	dc000317 	ldw	r16,12(sp)
 80141f0:	dec00604 	addi	sp,sp,24
 80141f4:	f800283a 	ret
 80141f8:	02400044 	movi	r9,1
 80141fc:	12806217 	ldw	r10,392(r2)
 8014200:	48d2983a 	sll	r9,r9,r3
 8014204:	19000804 	addi	r4,r3,32
 8014208:	18d1883a 	add	r8,r3,r3
 801420c:	2109883a 	add	r4,r4,r4
 8014210:	4211883a 	add	r8,r8,r8
 8014214:	2109883a 	add	r4,r4,r4
 8014218:	1109883a 	add	r4,r2,r4
 801421c:	1211883a 	add	r8,r2,r8
 8014220:	5254b03a 	or	r10,r10,r9
 8014224:	21c02215 	stw	r7,136(r4)
 8014228:	41802215 	stw	r6,136(r8)
 801422c:	12806215 	stw	r10,392(r2)
 8014230:	01000084 	movi	r4,2
 8014234:	893fe31e 	bne	r17,r4,80141c4 <__register_exitproc+0x9c>
 8014238:	11006317 	ldw	r4,396(r2)
 801423c:	2252b03a 	or	r9,r4,r9
 8014240:	12406315 	stw	r9,396(r2)
 8014244:	003fdf06 	br	80141c4 <__register_exitproc+0x9c>
 8014248:	008200b4 	movhi	r2,2050
 801424c:	10a11104 	addi	r2,r2,-31676
 8014250:	80805215 	stw	r2,328(r16)
 8014254:	003fbe06 	br	8014150 <__register_exitproc+0x28>

08014258 <__call_exitprocs>:
 8014258:	00820074 	movhi	r2,2049
 801425c:	10999b04 	addi	r2,r2,26220
 8014260:	10800017 	ldw	r2,0(r2)
 8014264:	defff304 	addi	sp,sp,-52
 8014268:	df000b15 	stw	fp,44(sp)
 801426c:	d8800015 	stw	r2,0(sp)
 8014270:	10805204 	addi	r2,r2,328
 8014274:	dd400815 	stw	r21,32(sp)
 8014278:	dfc00c15 	stw	ra,48(sp)
 801427c:	ddc00a15 	stw	r23,40(sp)
 8014280:	dd800915 	stw	r22,36(sp)
 8014284:	dd000715 	stw	r20,28(sp)
 8014288:	dcc00615 	stw	r19,24(sp)
 801428c:	dc800515 	stw	r18,20(sp)
 8014290:	dc400415 	stw	r17,16(sp)
 8014294:	dc000315 	stw	r16,12(sp)
 8014298:	d9000115 	stw	r4,4(sp)
 801429c:	2839883a 	mov	fp,r5
 80142a0:	d8800215 	stw	r2,8(sp)
 80142a4:	057fffc4 	movi	r21,-1
 80142a8:	d8800017 	ldw	r2,0(sp)
 80142ac:	ddc00217 	ldw	r23,8(sp)
 80142b0:	14805217 	ldw	r18,328(r2)
 80142b4:	90001726 	beq	r18,zero,8014314 <__call_exitprocs+0xbc>
 80142b8:	94400117 	ldw	r17,4(r18)
 80142bc:	8c3fffc4 	addi	r16,r17,-1
 80142c0:	80001116 	blt	r16,zero,8014308 <__call_exitprocs+0xb0>
 80142c4:	8c400044 	addi	r17,r17,1
 80142c8:	8427883a 	add	r19,r16,r16
 80142cc:	8c63883a 	add	r17,r17,r17
 80142d0:	95802204 	addi	r22,r18,136
 80142d4:	9ce7883a 	add	r19,r19,r19
 80142d8:	8c63883a 	add	r17,r17,r17
 80142dc:	b4e7883a 	add	r19,r22,r19
 80142e0:	9463883a 	add	r17,r18,r17
 80142e4:	e0001726 	beq	fp,zero,8014344 <__call_exitprocs+0xec>
 80142e8:	8c87c83a 	sub	r3,r17,r18
 80142ec:	b0c7883a 	add	r3,r22,r3
 80142f0:	18c01e17 	ldw	r3,120(r3)
 80142f4:	1f001326 	beq	r3,fp,8014344 <__call_exitprocs+0xec>
 80142f8:	843fffc4 	addi	r16,r16,-1
 80142fc:	9cffff04 	addi	r19,r19,-4
 8014300:	8c7fff04 	addi	r17,r17,-4
 8014304:	857ff71e 	bne	r16,r21,80142e4 <__call_exitprocs+0x8c>
 8014308:	00820034 	movhi	r2,2048
 801430c:	108dc604 	addi	r2,r2,14104
 8014310:	10002a1e 	bne	r2,zero,80143bc <__call_exitprocs+0x164>
 8014314:	dfc00c17 	ldw	ra,48(sp)
 8014318:	df000b17 	ldw	fp,44(sp)
 801431c:	ddc00a17 	ldw	r23,40(sp)
 8014320:	dd800917 	ldw	r22,36(sp)
 8014324:	dd400817 	ldw	r21,32(sp)
 8014328:	dd000717 	ldw	r20,28(sp)
 801432c:	dcc00617 	ldw	r19,24(sp)
 8014330:	dc800517 	ldw	r18,20(sp)
 8014334:	dc400417 	ldw	r17,16(sp)
 8014338:	dc000317 	ldw	r16,12(sp)
 801433c:	dec00d04 	addi	sp,sp,52
 8014340:	f800283a 	ret
 8014344:	91000117 	ldw	r4,4(r18)
 8014348:	88c00017 	ldw	r3,0(r17)
 801434c:	213fffc4 	addi	r4,r4,-1
 8014350:	24001526 	beq	r4,r16,80143a8 <__call_exitprocs+0x150>
 8014354:	88000015 	stw	zero,0(r17)
 8014358:	183fe726 	beq	r3,zero,80142f8 <__call_exitprocs+0xa0>
 801435c:	00800044 	movi	r2,1
 8014360:	1408983a 	sll	r4,r2,r16
 8014364:	91406217 	ldw	r5,392(r18)
 8014368:	95000117 	ldw	r20,4(r18)
 801436c:	214a703a 	and	r5,r4,r5
 8014370:	28000b26 	beq	r5,zero,80143a0 <__call_exitprocs+0x148>
 8014374:	91406317 	ldw	r5,396(r18)
 8014378:	2148703a 	and	r4,r4,r5
 801437c:	20000c1e 	bne	r4,zero,80143b0 <__call_exitprocs+0x158>
 8014380:	99400017 	ldw	r5,0(r19)
 8014384:	d9000117 	ldw	r4,4(sp)
 8014388:	183ee83a 	callr	r3
 801438c:	90c00117 	ldw	r3,4(r18)
 8014390:	1d3fc51e 	bne	r3,r20,80142a8 <__call_exitprocs+0x50>
 8014394:	b8c00017 	ldw	r3,0(r23)
 8014398:	1cbfd726 	beq	r3,r18,80142f8 <__call_exitprocs+0xa0>
 801439c:	003fc206 	br	80142a8 <__call_exitprocs+0x50>
 80143a0:	183ee83a 	callr	r3
 80143a4:	003ff906 	br	801438c <__call_exitprocs+0x134>
 80143a8:	94000115 	stw	r16,4(r18)
 80143ac:	003fea06 	br	8014358 <__call_exitprocs+0x100>
 80143b0:	99000017 	ldw	r4,0(r19)
 80143b4:	183ee83a 	callr	r3
 80143b8:	003ff406 	br	801438c <__call_exitprocs+0x134>
 80143bc:	90c00117 	ldw	r3,4(r18)
 80143c0:	1800071e 	bne	r3,zero,80143e0 <__call_exitprocs+0x188>
 80143c4:	90c00017 	ldw	r3,0(r18)
 80143c8:	18000926 	beq	r3,zero,80143f0 <__call_exitprocs+0x198>
 80143cc:	9009883a 	mov	r4,r18
 80143d0:	b8c00015 	stw	r3,0(r23)
 80143d4:	80037180 	call	8003718 <free>
 80143d8:	bc800017 	ldw	r18,0(r23)
 80143dc:	003fb506 	br	80142b4 <__call_exitprocs+0x5c>
 80143e0:	90c00017 	ldw	r3,0(r18)
 80143e4:	902f883a 	mov	r23,r18
 80143e8:	1825883a 	mov	r18,r3
 80143ec:	003fb106 	br	80142b4 <__call_exitprocs+0x5c>
 80143f0:	0007883a 	mov	r3,zero
 80143f4:	003ffb06 	br	80143e4 <__call_exitprocs+0x18c>

080143f8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80143f8:	defffc04 	addi	sp,sp,-16
 80143fc:	df000315 	stw	fp,12(sp)
 8014400:	df000304 	addi	fp,sp,12
 8014404:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8014408:	0001883a 	nop
 801440c:	e0bfff17 	ldw	r2,-4(fp)
 8014410:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 8014414:	e0bffd17 	ldw	r2,-12(fp)
 8014418:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 801441c:	e0bffe17 	ldw	r2,-8(fp)
 8014420:	10000226 	beq	r2,zero,801442c <_exit+0x34>
    ALT_SIM_FAIL();
 8014424:	002af070 	cmpltui	zero,zero,43969
 8014428:	00000106 	br	8014430 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 801442c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8014430:	003fff06 	br	8014430 <_exit+0x38>
