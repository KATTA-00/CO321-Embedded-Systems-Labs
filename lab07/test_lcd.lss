
test_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  000004c6  0000053a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000056c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001409  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a3a  00000000  00000000  000019f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000614  00000000  00000000  0000242f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00002a44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a7  00000000  00000000  00002bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a5c  00000000  00000000  00003057  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00003ab3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	4c 69       	ori	r20, 0x9C	; 156
  6a:	6e 65       	ori	r22, 0x5E	; 94
  6c:	20 32       	cpi	r18, 0x20	; 32
  6e:	20 6c       	ori	r18, 0xC0	; 192
  70:	6f 6e       	ori	r22, 0xEF	; 239
  72:	67 65       	ori	r22, 0x57	; 87
  74:	72 20       	and	r7, r2
  76:	74 68       	ori	r23, 0x84	; 132
  78:	61 6e       	ori	r22, 0xE1	; 225
  7a:	20 31       	cpi	r18, 0x10	; 16
  7c:	34 20       	and	r3, r4
  7e:	63 68       	ori	r22, 0x83	; 131
  80:	61 72       	andi	r22, 0x21	; 33
  82:	61 63       	ori	r22, 0x31	; 49
  84:	74 65       	ori	r23, 0x54	; 84
  86:	72 73       	andi	r23, 0x32	; 50
	...

00000089 <__c.2071>:
  89:	4c 69 6e 65 20 31 20 6c 6f 6e 67 65 72 20 74 68     Line 1 longer th
  99:	61 6e 20 31 34 20 63 68 61 72 61 63 74 65 72 73     an 14 characters
  a9:	0a 00                                               ..

000000ab <copyRightChar>:
  ab:	07 08 13 14 14 13 08 07 00 10 08 08 08 08 10 00     ................
	...

000000bc <__ctors_end>:
  bc:	11 24       	eor	r1, r1
  be:	1f be       	out	0x3f, r1	; 63
  c0:	cf ef       	ldi	r28, 0xFF	; 255
  c2:	d8 e0       	ldi	r29, 0x08	; 8
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
  c8:	11 e0       	ldi	r17, 0x01	; 1
  ca:	a0 e0       	ldi	r26, 0x00	; 0
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	e6 ec       	ldi	r30, 0xC6	; 198
  d0:	f4 e0       	ldi	r31, 0x04	; 4
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
  d4:	05 90       	lpm	r0, Z+
  d6:	0d 92       	st	X+, r0
  d8:	ae 31       	cpi	r26, 0x1E	; 30
  da:	b1 07       	cpc	r27, r17
  dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>
  de:	0e 94 71 01 	call	0x2e2	; 0x2e2 <main>
  e2:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  ea:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	85 e0       	ldi	r24, 0x05	; 5
  ee:	8a 95       	dec	r24
  f0:	f1 f7       	brne	.-4      	; 0xee <toggle_e+0x4>
  f2:	00 00       	nop
    lcd_e_delay();
    lcd_e_low();
  f4:	42 98       	cbi	0x08, 2	; 8
  f6:	08 95       	ret

000000f8 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
  f8:	cf 93       	push	r28
  fa:	c8 2f       	mov	r28, r24
    unsigned char dataBits ;


    if (rs) {        /* write data        (RS=1, RW=0) */
  fc:	66 23       	and	r22, r22
  fe:	11 f0       	breq	.+4      	; 0x104 <lcd_write+0xc>
       lcd_rs_high();
 100:	40 9a       	sbi	0x08, 0	; 8
 102:	01 c0       	rjmp	.+2      	; 0x106 <lcd_write+0xe>
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 104:	40 98       	cbi	0x08, 0	; 8
    }
    lcd_rw_low();    /* RW=0  write mode      */
 106:	41 98       	cbi	0x08, 1	; 8
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 108:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 10a:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 10c:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 10e:	55 9a       	sbi	0x0a, 5	; 10
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 110:	5d 98       	cbi	0x0b, 5	; 11
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 112:	5c 98       	cbi	0x0b, 4	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 114:	5b 98       	cbi	0x0b, 3	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 116:	5a 98       	cbi	0x0b, 2	; 11
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 118:	c7 fd       	sbrc	r28, 7
 11a:	5d 9a       	sbi	0x0b, 5	; 11
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 11c:	c6 fd       	sbrc	r28, 6
 11e:	5c 9a       	sbi	0x0b, 4	; 11
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 120:	c5 fd       	sbrc	r28, 5
 122:	5b 9a       	sbi	0x0b, 3	; 11
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 124:	c4 fd       	sbrc	r28, 4
 126:	5a 9a       	sbi	0x0b, 2	; 11
        lcd_e_toggle();
 128:	0e 94 75 00 	call	0xea	; 0xea <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 12c:	5d 98       	cbi	0x0b, 5	; 11
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 12e:	5c 98       	cbi	0x0b, 4	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 130:	5b 98       	cbi	0x0b, 3	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 132:	5a 98       	cbi	0x0b, 2	; 11
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 134:	c3 fd       	sbrc	r28, 3
 136:	5d 9a       	sbi	0x0b, 5	; 11
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 138:	c2 fd       	sbrc	r28, 2
 13a:	5c 9a       	sbi	0x0b, 4	; 11
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 13c:	c1 fd       	sbrc	r28, 1
 13e:	5b 9a       	sbi	0x0b, 3	; 11
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 140:	c0 fd       	sbrc	r28, 0
 142:	5a 9a       	sbi	0x0b, 2	; 11
        lcd_e_toggle();        
 144:	0e 94 75 00 	call	0xea	; 0xea <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 148:	5a 9a       	sbi	0x0b, 2	; 11
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 14a:	5b 9a       	sbi	0x0b, 3	; 11
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 14c:	5c 9a       	sbi	0x0b, 4	; 11
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 14e:	5d 9a       	sbi	0x0b, 5	; 11
    }
}
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <lcd_read.constprop.0>:
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 154:	40 98       	cbi	0x08, 0	; 8
    lcd_rw_high();                           /* RW=1  read mode      */
 156:	41 9a       	sbi	0x08, 1	; 8
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 158:	52 98       	cbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 15a:	53 98       	cbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 15c:	54 98       	cbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 15e:	55 98       	cbi	0x0a, 5	; 10
                
        /* read high nibble first */
        lcd_e_high();
 160:	42 9a       	sbi	0x08, 2	; 8
 162:	85 e0       	ldi	r24, 0x05	; 5
 164:	8a 95       	dec	r24
 166:	f1 f7       	brne	.-4      	; 0x164 <lcd_read.constprop.0+0x10>
 168:	00 00       	nop
        lcd_e_delay();        
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 16a:	4a 9b       	sbis	0x09, 2	; 9
 16c:	02 c0       	rjmp	.+4      	; 0x172 <lcd_read.constprop.0+0x1e>
 16e:	80 e1       	ldi	r24, 0x10	; 16
 170:	01 c0       	rjmp	.+2      	; 0x174 <lcd_read.constprop.0+0x20>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
 172:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 174:	4b 99       	sbic	0x09, 3	; 9
 176:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 178:	4c 99       	sbic	0x09, 4	; 9
 17a:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 17c:	4d 99       	sbic	0x09, 5	; 9
 17e:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 180:	42 98       	cbi	0x08, 2	; 8
 182:	95 e0       	ldi	r25, 0x05	; 5
 184:	9a 95       	dec	r25
 186:	f1 f7       	brne	.-4      	; 0x184 <lcd_read.constprop.0+0x30>
 188:	00 00       	nop

        lcd_e_delay();                       /* Enable 500ns low       */
    
        /* read low nibble */    
        lcd_e_high();
 18a:	42 9a       	sbi	0x08, 2	; 8
 18c:	95 e0       	ldi	r25, 0x05	; 5
 18e:	9a 95       	dec	r25
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_read.constprop.0+0x3a>
 192:	00 00       	nop
        lcd_e_delay();
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 194:	4a 99       	sbic	0x09, 2	; 9
 196:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 198:	4b 99       	sbic	0x09, 3	; 9
 19a:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 19c:	4c 99       	sbic	0x09, 4	; 9
 19e:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 1a0:	4d 99       	sbic	0x09, 5	; 9
 1a2:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 1a4:	42 98       	cbi	0x08, 2	; 8
    }
    return data;
}
 1a6:	08 95       	ret

000001a8 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 1a8:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_read.constprop.0>
 1ac:	87 fd       	sbrc	r24, 7
 1ae:	fc cf       	rjmp	.-8      	; 0x1a8 <lcd_waitbusy>
 1b0:	85 e1       	ldi	r24, 0x15	; 21
 1b2:	8a 95       	dec	r24
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_waitbusy+0xa>
 1b6:	00 00       	nop
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(LCD_DELAY_BUSY_FLAG);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 1b8:	0c 94 aa 00 	jmp	0x154	; 0x154 <lcd_read.constprop.0>

000001bc <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 1bc:	cf 93       	push	r28
 1be:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 1c0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_waitbusy>
    lcd_write(cmd,0);
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	8c 2f       	mov	r24, r28
}
 1c8:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
 1ca:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <lcd_write>

000001ce <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 1ce:	cf 93       	push	r28
 1d0:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 1d2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_waitbusy>
    lcd_write(data,1);
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	8c 2f       	mov	r24, r28
}
 1da:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
    lcd_waitbusy();
    lcd_write(data,1);
 1dc:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <lcd_write>

000001e0 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 1e0:	61 11       	cpse	r22, r1
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 1e4:	80 58       	subi	r24, 0x80	; 128
 1e6:	01 c0       	rjmp	.+2      	; 0x1ea <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 1e8:	80 54       	subi	r24, 0x40	; 64
 1ea:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <lcd_command>

000001ee <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 1ee:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_waitbusy>
}
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	08 95       	ret

000001f6 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <lcd_command>

000001fc <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <lcd_command>

00000202 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 202:	cf 93       	push	r28
 204:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 206:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_waitbusy>
    if (c=='\n')
 20a:	ca 30       	cpi	r28, 0x0A	; 10
 20c:	49 f4       	brne	.+18     	; 0x220 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 20e:	80 34       	cpi	r24, 0x40	; 64
 210:	10 f0       	brcs	.+4      	; 0x216 <lcd_putc+0x14>
        addressCounter = LCD_START_LINE2;
    else
        addressCounter = LCD_START_LINE1;
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	01 c0       	rjmp	.+2      	; 0x218 <lcd_putc+0x16>
#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
        addressCounter = LCD_START_LINE2;
 216:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 218:	80 58       	subi	r24, 0x80	; 128
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    }

}/* lcd_putc */
 21a:	cf 91       	pop	r28
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 21c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <lcd_command>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	8c 2f       	mov	r24, r28
    }

}/* lcd_putc */
 224:	cf 91       	pop	r28
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 226:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <lcd_write>

0000022a <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = *s++) ) {
 230:	89 91       	ld	r24, Y+
 232:	88 23       	and	r24, r24
 234:	19 f0       	breq	.+6      	; 0x23c <lcd_puts+0x12>
        lcd_putc(c);
 236:	0e 94 01 01 	call	0x202	; 0x202 <lcd_putc>
 23a:	fa cf       	rjmp	.-12     	; 0x230 <lcd_puts+0x6>
    }

}/* lcd_puts */
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 248:	84 91       	lpm	r24, Z
 24a:	ef 01       	movw	r28, r30
 24c:	21 96       	adiw	r28, 0x01	; 1
 24e:	88 23       	and	r24, r24
 250:	21 f0       	breq	.+8      	; 0x25a <lcd_puts_p+0x18>
        lcd_putc(c);
 252:	0e 94 01 01 	call	0x202	; 0x202 <lcd_putc>
 256:	fe 01       	movw	r30, r28
 258:	f7 cf       	rjmp	.-18     	; 0x248 <lcd_puts_p+0x6>
    }

}/* lcd_puts_p */
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 260:	cf 93       	push	r28
 262:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 264:	38 9a       	sbi	0x07, 0	; 7
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 266:	39 9a       	sbi	0x07, 1	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 268:	3a 9a       	sbi	0x07, 2	; 7
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 26a:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 26c:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 26e:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 270:	55 9a       	sbi	0x0a, 5	; 10
 272:	8f ef       	ldi	r24, 0xFF	; 255
 274:	99 ef       	ldi	r25, 0xF9	; 249
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <lcd_init+0x16>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <lcd_init+0x1c>
 27c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 27e:	5b 9a       	sbi	0x0b, 3	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 280:	5a 9a       	sbi	0x0b, 2	; 11
    lcd_e_toggle();
 282:	0e 94 75 00 	call	0xea	; 0xea <toggle_e>
 286:	8f e1       	ldi	r24, 0x1F	; 31
 288:	9e e4       	ldi	r25, 0x4E	; 78
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <lcd_init+0x2a>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <lcd_init+0x30>
 290:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 292:	0e 94 75 00 	call	0xea	; 0xea <toggle_e>
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <lcd_init+0x3a>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <lcd_init+0x40>
 2a0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 2a2:	0e 94 75 00 	call	0xea	; 0xea <toggle_e>
 2a6:	8f ef       	ldi	r24, 0xFF	; 255
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <lcd_init+0x4a>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <lcd_init+0x50>
 2b0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 2b2:	5a 98       	cbi	0x0b, 2	; 11
    lcd_e_toggle();
 2b4:	0e 94 75 00 	call	0xea	; 0xea <toggle_e>
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <lcd_init+0x5c>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <lcd_init+0x62>
 2c2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 2c4:	88 e2       	ldi	r24, 0x28	; 40
 2c6:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 2ca:	88 e0       	ldi	r24, 0x08	; 8
 2cc:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 2d0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 2d4:	86 e0       	ldi	r24, 0x06	; 6
 2d6:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 2da:	8c 2f       	mov	r24, r28

}/* lcd_init */
 2dc:	cf 91       	pop	r28
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
    lcd_clrscr();                           /* display clear                */ 
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    lcd_command(dispAttr);                  /* display/cursor control       */
 2de:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <lcd_command>

000002e2 <main>:
	0x07, 0x08, 0x13, 0x14, 0x14, 0x13, 0x08, 0x07,
	0x00, 0x10, 0x08, 0x08, 0x08, 0x08, 0x10, 0x00
};

int main(void)
{
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	cd b7       	in	r28, 0x3d	; 61
 2e8:	de b7       	in	r29, 0x3e	; 62
 2ea:	27 97       	sbiw	r28, 0x07	; 7
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	de bf       	out	0x3e, r29	; 62
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	cd bf       	out	0x3d, r28	; 61
    char buffer[7];
    int  num=134;
    unsigned char i;
    
    /* initialize display, cursor off */
    lcd_init(LCD_DISP_ON);
 2f6:	8c e0       	ldi	r24, 0x0C	; 12
 2f8:	0e 94 30 01 	call	0x260	; 0x260 <lcd_init>
        /* 
         * Test 1:  write text to display
         */

        /* clear display and home cursor */
        lcd_clrscr();
 2fc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clrscr>
        
        /* put string to display (line 1) with linefeed */
        lcd_puts("LCD Test 5\n");
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_puts>
        
        /* move cursor to position 8 on line 2 */
        lcd_gotoxy(7,1);  
 308:	61 e0       	ldi	r22, 0x01	; 1
 30a:	87 e0       	ldi	r24, 0x07	; 7
 30c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_gotoxy>
        
        /* write single char to display */
        lcd_putc(':');
 310:	8a e3       	ldi	r24, 0x3A	; 58
 312:	0e 94 01 01 	call	0x202	; 0x202 <lcd_putc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 316:	2f ef       	ldi	r18, 0xFF	; 255
 318:	83 e2       	ldi	r24, 0x23	; 35
 31a:	94 ef       	ldi	r25, 0xF4	; 244
 31c:	21 50       	subi	r18, 0x01	; 1
 31e:	80 40       	sbci	r24, 0x00	; 0
 320:	90 40       	sbci	r25, 0x00	; 0
 322:	e1 f7       	brne	.-8      	; 0x31c <main+0x3a>
 324:	00 c0       	rjmp	.+0      	; 0x326 <main+0x44>
 326:	00 00       	nop
        
        _delay_ms(5000);
		
        lcd_clrscr();
 328:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clrscr>
 32c:	ef ef       	ldi	r30, 0xFF	; 255
 32e:	f3 ed       	ldi	r31, 0xD3	; 211
 330:	20 e3       	ldi	r18, 0x30	; 48
 332:	e1 50       	subi	r30, 0x01	; 1
 334:	f0 40       	sbci	r31, 0x00	; 0
 336:	20 40       	sbci	r18, 0x00	; 0
 338:	e1 f7       	brne	.-8      	; 0x332 <main+0x50>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <main+0x5a>
 33c:	00 00       	nop
        /*
         * Test 2: use lcd_command() to turn on cursor
         */
        
        /* turn on cursor */
        lcd_command(LCD_DISP_ON_CURSOR);
 33e:	8e e0       	ldi	r24, 0x0E	; 14
 340:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_command>

        /* put string */
        lcd_puts("CurOn");
 344:	8c e0       	ldi	r24, 0x0C	; 12
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_puts>
 34c:	8f ef       	ldi	r24, 0xFF	; 255
 34e:	93 e2       	ldi	r25, 0x23	; 35
 350:	e4 ef       	ldi	r30, 0xF4	; 244
 352:	81 50       	subi	r24, 0x01	; 1
 354:	90 40       	sbci	r25, 0x00	; 0
 356:	e0 40       	sbci	r30, 0x00	; 0
 358:	e1 f7       	brne	.-8      	; 0x352 <main+0x70>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <main+0x7a>
 35c:	00 00       	nop

        /*
         * Test 3: display shift
         */
        
        lcd_clrscr();     /* clear display home cursor */
 35e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clrscr>
 362:	ff ef       	ldi	r31, 0xFF	; 255
 364:	23 ed       	ldi	r18, 0xD3	; 211
 366:	80 e3       	ldi	r24, 0x30	; 48
 368:	f1 50       	subi	r31, 0x01	; 1
 36a:	20 40       	sbci	r18, 0x00	; 0
 36c:	80 40       	sbci	r24, 0x00	; 0
 36e:	e1 f7       	brne	.-8      	; 0x368 <main+0x86>
 370:	00 c0       	rjmp	.+0      	; 0x372 <main+0x90>
 372:	00 00       	nop
		_delay_ms(1000);
        
		//* put string from program memory to display */
        lcd_puts_P( "Line 1 longer than 14 characters\n" );
 374:	89 e8       	ldi	r24, 0x89	; 137
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 21 01 	call	0x242	; 0x242 <lcd_puts_p>
        lcd_puts_P( "Line 2 longer than 14 characters" );
 37c:	88 e6       	ldi	r24, 0x68	; 104
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 21 01 	call	0x242	; 0x242 <lcd_puts_p>
        
        /* move BOTH lines one position to the left */
        lcd_command(LCD_MOVE_DISP_LEFT);
 384:	88 e1       	ldi	r24, 0x18	; 24
 386:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_command>
 38a:	9f ef       	ldi	r25, 0xFF	; 255
 38c:	e3 e2       	ldi	r30, 0x23	; 35
 38e:	f4 ef       	ldi	r31, 0xF4	; 244
 390:	91 50       	subi	r25, 0x01	; 1
 392:	e0 40       	sbci	r30, 0x00	; 0
 394:	f0 40       	sbci	r31, 0x00	; 0
 396:	e1 f7       	brne	.-8      	; 0x390 <main+0xae>
 398:	00 c0       	rjmp	.+0      	; 0x39a <main+0xb8>
 39a:	00 00       	nop
        
        _delay_ms(5000);

        /* turn off cursor */
        lcd_command(LCD_DISP_ON);
 39c:	8c e0       	ldi	r24, 0x0C	; 12
 39e:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_command>
 3a2:	2f ef       	ldi	r18, 0xFF	; 255
 3a4:	83 ed       	ldi	r24, 0xD3	; 211
 3a6:	90 e3       	ldi	r25, 0x30	; 48
 3a8:	21 50       	subi	r18, 0x01	; 1
 3aa:	80 40       	sbci	r24, 0x00	; 0
 3ac:	90 40       	sbci	r25, 0x00	; 0
 3ae:	e1 f7       	brne	.-8      	; 0x3a8 <main+0xc6>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <main+0xd0>
 3b2:	00 00       	nop
        
        /*
         *   Test: Display integer values
         */
        
		lcd_clrscr();   /* clear display home cursor */
 3b4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clrscr>
 3b8:	ef ef       	ldi	r30, 0xFF	; 255
 3ba:	f3 ed       	ldi	r31, 0xD3	; 211
 3bc:	20 e3       	ldi	r18, 0x30	; 48
 3be:	e1 50       	subi	r30, 0x01	; 1
 3c0:	f0 40       	sbci	r31, 0x00	; 0
 3c2:	20 40       	sbci	r18, 0x00	; 0
 3c4:	e1 f7       	brne	.-8      	; 0x3be <main+0xdc>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <main+0xe6>
 3c8:	00 00       	nop
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3ca:	4a e0       	ldi	r20, 0x0A	; 10
 3cc:	be 01       	movw	r22, r28
 3ce:	6f 5f       	subi	r22, 0xFF	; 255
 3d0:	7f 4f       	sbci	r23, 0xFF	; 255
 3d2:	86 e8       	ldi	r24, 0x86	; 134
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 2c 02 	call	0x458	; 0x458 <__itoa_ncheck>
        
		/* convert interger into string */
		itoa( num , buffer, 10);
        
        /* put converted string to display */
        lcd_puts(buffer);
 3da:	ce 01       	movw	r24, r28
 3dc:	01 96       	adiw	r24, 0x01	; 1
 3de:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_puts>
 3e2:	8f ef       	ldi	r24, 0xFF	; 255
 3e4:	93 e2       	ldi	r25, 0x23	; 35
 3e6:	e4 ef       	ldi	r30, 0xF4	; 244
 3e8:	81 50       	subi	r24, 0x01	; 1
 3ea:	90 40       	sbci	r25, 0x00	; 0
 3ec:	e0 40       	sbci	r30, 0x00	; 0
 3ee:	e1 f7       	brne	.-8      	; 0x3e8 <main+0x106>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <main+0x110>
 3f2:	00 00       	nop
        
        /*
         *  Test: Display userdefined characters
         */

        lcd_clrscr();   /* clear display home cursor */
 3f4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clrscr>
 3f8:	ff ef       	ldi	r31, 0xFF	; 255
 3fa:	23 ed       	ldi	r18, 0xD3	; 211
 3fc:	80 e3       	ldi	r24, 0x30	; 48
 3fe:	f1 50       	subi	r31, 0x01	; 1
 400:	20 40       	sbci	r18, 0x00	; 0
 402:	80 40       	sbci	r24, 0x00	; 0
 404:	e1 f7       	brne	.-8      	; 0x3fe <main+0x11c>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 408:	00 00       	nop
        _delay_ms(1000);
        lcd_puts("Copyright: ");
 40a:	82 e1       	ldi	r24, 0x12	; 18
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_puts>
       
       /*
        * load two userdefined characters from program memory
        * into LCD controller CG RAM location 0 and 1
        */
        lcd_command(_BV(LCD_CGRAM));  /* set CG RAM start address 0 */
 412:	80 e4       	ldi	r24, 0x40	; 64
 414:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_command>
 418:	0b ea       	ldi	r16, 0xAB	; 171
 41a:	10 e0       	ldi	r17, 0x00	; 0
        for(i=0; i<16; i++){
           lcd_data(pgm_read_byte_near(&copyRightChar[i]));
 41c:	f8 01       	movw	r30, r16
 41e:	84 91       	lpm	r24, Z
 420:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_data>
 424:	0f 5f       	subi	r16, 0xFF	; 255
 426:	1f 4f       	sbci	r17, 0xFF	; 255
       /*
        * load two userdefined characters from program memory
        * into LCD controller CG RAM location 0 and 1
        */
        lcd_command(_BV(LCD_CGRAM));  /* set CG RAM start address 0 */
        for(i=0; i<16; i++){
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	0b 3b       	cpi	r16, 0xBB	; 187
 42c:	1f 07       	cpc	r17, r31
 42e:	b1 f7       	brne	.-20     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
           lcd_data(pgm_read_byte_near(&copyRightChar[i]));
        }
       
       /* move cursor to position 0 on line 2 */
       /* Note: this switched back to DD RAM adresses */
       lcd_gotoxy(0,1);
 430:	61 e0       	ldi	r22, 0x01	; 1
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_gotoxy>
       
       /* display user defined (c), built using two user defined chars */
       lcd_putc(0);
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	0e 94 01 01 	call	0x202	; 0x202 <lcd_putc>
       lcd_putc(1);
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	0e 94 01 01 	call	0x202	; 0x202 <lcd_putc>
 444:	2f ef       	ldi	r18, 0xFF	; 255
 446:	83 e2       	ldi	r24, 0x23	; 35
 448:	94 ef       	ldi	r25, 0xF4	; 244
 44a:	21 50       	subi	r18, 0x01	; 1
 44c:	80 40       	sbci	r24, 0x00	; 0
 44e:	90 40       	sbci	r25, 0x00	; 0
 450:	e1 f7       	brne	.-8      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 452:	00 c0       	rjmp	.+0      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 454:	00 00       	nop
 456:	52 cf       	rjmp	.-348    	; 0x2fc <main+0x1a>

00000458 <__itoa_ncheck>:
 458:	bb 27       	eor	r27, r27
 45a:	4a 30       	cpi	r20, 0x0A	; 10
 45c:	31 f4       	brne	.+12     	; 0x46a <__itoa_ncheck+0x12>
 45e:	99 23       	and	r25, r25
 460:	22 f4       	brpl	.+8      	; 0x46a <__itoa_ncheck+0x12>
 462:	bd e2       	ldi	r27, 0x2D	; 45
 464:	90 95       	com	r25
 466:	81 95       	neg	r24
 468:	9f 4f       	sbci	r25, 0xFF	; 255
 46a:	0c 94 38 02 	jmp	0x470	; 0x470 <__utoa_common>

0000046e <__utoa_ncheck>:
 46e:	bb 27       	eor	r27, r27

00000470 <__utoa_common>:
 470:	fb 01       	movw	r30, r22
 472:	55 27       	eor	r21, r21
 474:	aa 27       	eor	r26, r26
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	aa 1f       	adc	r26, r26
 47c:	a4 17       	cp	r26, r20
 47e:	10 f0       	brcs	.+4      	; 0x484 <__utoa_common+0x14>
 480:	a4 1b       	sub	r26, r20
 482:	83 95       	inc	r24
 484:	50 51       	subi	r21, 0x10	; 16
 486:	b9 f7       	brne	.-18     	; 0x476 <__utoa_common+0x6>
 488:	a0 5d       	subi	r26, 0xD0	; 208
 48a:	aa 33       	cpi	r26, 0x3A	; 58
 48c:	08 f0       	brcs	.+2      	; 0x490 <__utoa_common+0x20>
 48e:	a9 5d       	subi	r26, 0xD9	; 217
 490:	a1 93       	st	Z+, r26
 492:	00 97       	sbiw	r24, 0x00	; 0
 494:	79 f7       	brne	.-34     	; 0x474 <__utoa_common+0x4>
 496:	b1 11       	cpse	r27, r1
 498:	b1 93       	st	Z+, r27
 49a:	11 92       	st	Z+, r1
 49c:	cb 01       	movw	r24, r22
 49e:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <strrev>

000004a2 <strrev>:
 4a2:	dc 01       	movw	r26, r24
 4a4:	fc 01       	movw	r30, r24
 4a6:	67 2f       	mov	r22, r23
 4a8:	71 91       	ld	r23, Z+
 4aa:	77 23       	and	r23, r23
 4ac:	e1 f7       	brne	.-8      	; 0x4a6 <strrev+0x4>
 4ae:	32 97       	sbiw	r30, 0x02	; 2
 4b0:	04 c0       	rjmp	.+8      	; 0x4ba <strrev+0x18>
 4b2:	7c 91       	ld	r23, X
 4b4:	6d 93       	st	X+, r22
 4b6:	70 83       	st	Z, r23
 4b8:	62 91       	ld	r22, -Z
 4ba:	ae 17       	cp	r26, r30
 4bc:	bf 07       	cpc	r27, r31
 4be:	c8 f3       	brcs	.-14     	; 0x4b2 <strrev+0x10>
 4c0:	08 95       	ret

000004c2 <_exit>:
 4c2:	f8 94       	cli

000004c4 <__stop_program>:
 4c4:	ff cf       	rjmp	.-2      	; 0x4c4 <__stop_program>
