
ex3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  0000060a  0000069e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000060a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800176  00800176  00000714  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000728  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000166e  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac3  00000000  00000000  00001e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e7  00000000  00000000  000028e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  000030c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ee  00000000  00000000  000032f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f64  00000000  00000000  000037e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000474a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e0       	ldi	r30, 0x0A	; 10
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 37       	cpi	r26, 0x76	; 118
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e7       	ldi	r26, 0x76	; 118
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 37       	cpi	r26, 0x78	; 120
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4c 02 	call	0x498	; 0x498 <main>
  9e:	0c 94 03 03 	jmp	0x606	; 0x606 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <columnOutRowIn>:

    // DDRB
    // DDRB = 0b00000011;
    // DDRD = 0b11000000;

    DDRB |= (1 << PINB0) | (1 << PINB1);
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	83 60       	ori	r24, 0x03	; 3
  aa:	84 b9       	out	0x04, r24	; 4
    DDRB &= ~((1 << PINB2) | (1 << PINB3) | (1 << PINB4) | (1 << PINB5));
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	83 7c       	andi	r24, 0xC3	; 195
  b0:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1 << PIND6) | (1 << PIND7);
  b2:	8a b1       	in	r24, 0x0a	; 10
  b4:	80 6c       	ori	r24, 0xC0	; 192
  b6:	8a b9       	out	0x0a, r24	; 10

    // PORTB = 0b00000011;
    // PORTD = 0b11000000;

    PORTB |= (1 << PINB0) | (1 << PINB1);
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	83 60       	ori	r24, 0x03	; 3
  bc:	85 b9       	out	0x05, r24	; 5
    PORTB &= ~((1 << PINB2) | (1 << PINB3) | (1 << PINB4) | (1 << PINB5));
  be:	85 b1       	in	r24, 0x05	; 5
  c0:	83 7c       	andi	r24, 0xC3	; 195
  c2:	85 b9       	out	0x05, r24	; 5
    PORTD |= (1 << PIND6) | (1 << PIND7);
  c4:	8b b1       	in	r24, 0x0b	; 11
  c6:	80 6c       	ori	r24, 0xC0	; 192
  c8:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	8f e3       	ldi	r24, 0x3F	; 63
  cc:	9c e9       	ldi	r25, 0x9C	; 156
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <columnOutRowIn+0x28>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <columnOutRowIn+0x2e>
  d4:	00 00       	nop
  d6:	08 95       	ret

000000d8 <columnInRowOut>:
void columnInRowOut()
{
    // DDRB = 0b00111100;
    // DDRD = 0b00000000;

    DDRB |= (1 << PINB2) | (1 << PINB3) | (1 << PINB4) | (1 << PINB5);
  d8:	84 b1       	in	r24, 0x04	; 4
  da:	8c 63       	ori	r24, 0x3C	; 60
  dc:	84 b9       	out	0x04, r24	; 4
    DDRB &= ~((1 << PINB0) | (1 << PINB1));
  de:	84 b1       	in	r24, 0x04	; 4
  e0:	8c 7f       	andi	r24, 0xFC	; 252
  e2:	84 b9       	out	0x04, r24	; 4
    DDRD &= ~((1 << PIND6) | (1 << PIND7));
  e4:	8a b1       	in	r24, 0x0a	; 10
  e6:	8f 73       	andi	r24, 0x3F	; 63
  e8:	8a b9       	out	0x0a, r24	; 10

    // PORTB = 0b00111100;
    // PORTD = 0b00000000;

    PORTB |= (1 << PINB2) | (1 << PINB3) | (1 << PINB4) | (1 << PINB5);
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	8c 63       	ori	r24, 0x3C	; 60
  ee:	85 b9       	out	0x05, r24	; 5
    PORTB &= ~((1 << PINB0) | (1 << PINB1));
  f0:	85 b1       	in	r24, 0x05	; 5
  f2:	8c 7f       	andi	r24, 0xFC	; 252
  f4:	85 b9       	out	0x05, r24	; 5
    PORTD &= ~((1 << PIND6) | (1 << PIND7));
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	8f 73       	andi	r24, 0x3F	; 63
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	8f e3       	ldi	r24, 0x3F	; 63
  fe:	9c e9       	ldi	r25, 0x9C	; 156
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <columnInRowOut+0x28>
 104:	00 c0       	rjmp	.+0      	; 0x106 <columnInRowOut+0x2e>
 106:	00 00       	nop
 108:	08 95       	ret

0000010a <getKeyPad>:

    _delay_ms(10);
}

char getKeyPad()
{
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	60 97       	sbiw	r28, 0x10	; 16
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	f8 94       	cli
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	0f be       	out	0x3f, r0	; 63
 120:	cd bf       	out	0x3d, r28	; 61

    char key = ' ';
    char keyPad[4][4] = {
 122:	80 e1       	ldi	r24, 0x10	; 16
 124:	ec e0       	ldi	r30, 0x0C	; 12
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	de 01       	movw	r26, r28
 12a:	11 96       	adiw	r26, 0x01	; 1
 12c:	01 90       	ld	r0, Z+
 12e:	0d 92       	st	X+, r0
 130:	8a 95       	dec	r24
 132:	e1 f7       	brne	.-8      	; 0x12c <getKeyPad+0x22>
 134:	8f e3       	ldi	r24, 0x3F	; 63
 136:	9c e9       	ldi	r25, 0x9C	; 156
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <getKeyPad+0x2e>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <getKeyPad+0x34>
 13e:	00 00       	nop

    int i = -1;
    int j = -1;

    _delay_ms(10);
    columnOutRowIn();
 140:	0e 94 53 00 	call	0xa6	; 0xa6 <columnOutRowIn>
 144:	8f e3       	ldi	r24, 0x3F	; 63
 146:	9c e9       	ldi	r25, 0x9C	; 156
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <getKeyPad+0x3e>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <getKeyPad+0x44>
 14e:	00 00       	nop
    while (i == -1)
    {
        _delay_ms(10);
        if ((PINB & (1 << PINB2)))
 150:	1a 99       	sbic	0x03, 2	; 3
 152:	52 c0       	rjmp	.+164    	; 0x1f8 <getKeyPad+0xee>
        {
            i = 3;
        }
        else if ((PINB & (1 << PINB3)))
 154:	1b 99       	sbic	0x03, 3	; 3
 156:	53 c0       	rjmp	.+166    	; 0x1fe <getKeyPad+0xf4>
        {
            i = 2;
        }
        else if ((PINB & (1 << PINB4)))
 158:	1c 99       	sbic	0x03, 4	; 3
 15a:	54 c0       	rjmp	.+168    	; 0x204 <getKeyPad+0xfa>
    int i = -1;
    int j = -1;

    _delay_ms(10);
    columnOutRowIn();
    while (i == -1)
 15c:	1d 9b       	sbis	0x03, 5	; 3
 15e:	f2 cf       	rjmp	.-28     	; 0x144 <getKeyPad+0x3a>
        }
        else if ((PINB & (1 << PINB4)))
        {
            i = 1;
        }
        else if ((PINB & (1 << PINB5)))
 160:	00 e0       	ldi	r16, 0x00	; 0
 162:	10 e0       	ldi	r17, 0x00	; 0
 164:	8f e3       	ldi	r24, 0x3F	; 63
 166:	9c e9       	ldi	r25, 0x9C	; 156
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <getKeyPad+0x5e>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <getKeyPad+0x64>
 16e:	00 00       	nop
        }
    }

    _delay_ms(10);

    columnInRowOut();
 170:	0e 94 6c 00 	call	0xd8	; 0xd8 <columnInRowOut>
 174:	8f e3       	ldi	r24, 0x3F	; 63
 176:	9c e9       	ldi	r25, 0x9C	; 156
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <getKeyPad+0x6e>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <getKeyPad+0x74>
 17e:	00 00       	nop
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	9f ef       	ldi	r25, 0xFF	; 255
    while (j == -1)
    {
        _delay_ms(10);
        while ((PIND & (1 << PINB6)))
 184:	4e 9b       	sbis	0x09, 6	; 9
 186:	03 c0       	rjmp	.+6      	; 0x18e <getKeyPad+0x84>
        {
            j = 3;
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	fb cf       	rjmp	.-10     	; 0x184 <getKeyPad+0x7a>
        }
        while ((PIND & (1 << PINB7)))
 18e:	4f 9b       	sbis	0x09, 7	; 9
 190:	03 c0       	rjmp	.+6      	; 0x198 <getKeyPad+0x8e>
        {
            j = 2;
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	fb cf       	rjmp	.-10     	; 0x18e <getKeyPad+0x84>
        }
        while ((PINB & (1 << PINB0)))
 198:	18 9b       	sbis	0x03, 0	; 3
 19a:	03 c0       	rjmp	.+6      	; 0x1a2 <getKeyPad+0x98>
        {
            j = 1;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	fb cf       	rjmp	.-10     	; 0x198 <getKeyPad+0x8e>
        }
        while ((PINB & (1 << PINB1)))
 1a2:	19 9b       	sbis	0x03, 1	; 3
 1a4:	03 c0       	rjmp	.+6      	; 0x1ac <getKeyPad+0xa2>
        {
            j = 0;
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	fb cf       	rjmp	.-10     	; 0x1a2 <getKeyPad+0x98>
    }

    _delay_ms(10);

    columnInRowOut();
    while (j == -1)
 1ac:	8f 3f       	cpi	r24, 0xFF	; 255
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	92 07       	cpc	r25, r18
 1b2:	01 f3       	breq	.-64     	; 0x174 <getKeyPad+0x6a>
 1b4:	3f ef       	ldi	r19, 0xFF	; 255
 1b6:	41 ee       	ldi	r20, 0xE1	; 225
 1b8:	24 e0       	ldi	r18, 0x04	; 4
 1ba:	31 50       	subi	r19, 0x01	; 1
 1bc:	40 40       	sbci	r20, 0x00	; 0
 1be:	20 40       	sbci	r18, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <getKeyPad+0xb0>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <getKeyPad+0xba>
 1c4:	00 00       	nop

    // usart_send_string("values - ");
    // usart_send(keyPad[i][j]);
    // usart_send('\n');

    return keyPad[i][j];
 1c6:	00 0f       	add	r16, r16
 1c8:	11 1f       	adc	r17, r17
 1ca:	00 0f       	add	r16, r16
 1cc:	11 1f       	adc	r17, r17
 1ce:	21 e0       	ldi	r18, 0x01	; 1
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	2c 0f       	add	r18, r28
 1d4:	3d 1f       	adc	r19, r29
 1d6:	02 0f       	add	r16, r18
 1d8:	13 1f       	adc	r17, r19
 1da:	f8 01       	movw	r30, r16
 1dc:	e8 0f       	add	r30, r24
 1de:	f9 1f       	adc	r31, r25
 1e0:	80 81       	ld	r24, Z
}
 1e2:	60 96       	adiw	r28, 0x10	; 16
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	f8 94       	cli
 1e8:	de bf       	out	0x3e, r29	; 62
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	cd bf       	out	0x3d, r28	; 61
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	0f 91       	pop	r16
 1f6:	08 95       	ret
    while (i == -1)
    {
        _delay_ms(10);
        if ((PINB & (1 << PINB2)))
        {
            i = 3;
 1f8:	03 e0       	ldi	r16, 0x03	; 3
 1fa:	10 e0       	ldi	r17, 0x00	; 0
 1fc:	b3 cf       	rjmp	.-154    	; 0x164 <getKeyPad+0x5a>
        }
        else if ((PINB & (1 << PINB3)))
        {
            i = 2;
 1fe:	02 e0       	ldi	r16, 0x02	; 2
 200:	10 e0       	ldi	r17, 0x00	; 0
 202:	b0 cf       	rjmp	.-160    	; 0x164 <getKeyPad+0x5a>
        }
        else if ((PINB & (1 << PINB4)))
        {
            i = 1;
 204:	01 e0       	ldi	r16, 0x01	; 1
 206:	10 e0       	ldi	r17, 0x00	; 0
 208:	ad cf       	rjmp	.-166    	; 0x164 <getKeyPad+0x5a>

0000020a <EEPROMwrite>:
}

void EEPROMwrite(unsigned int address, char data)
{
    // wait for completion of previous write
    while (EECR & (1 << EEPE))
 20a:	f9 99       	sbic	0x1f, 1	; 31
 20c:	fe cf       	rjmp	.-4      	; 0x20a <EEPROMwrite>
        ;

    EEAR = address;
 20e:	92 bd       	out	0x22, r25	; 34
 210:	81 bd       	out	0x21, r24	; 33
    EEDR = data;
 212:	60 bd       	out	0x20, r22	; 32

    // write logical one to EEMPE
    EECR |= (1 << EEMPE);
 214:	fa 9a       	sbi	0x1f, 2	; 31

    // start eeprom write by setting EEPE
    EECR |= (1 << EEPE);
 216:	f9 9a       	sbi	0x1f, 1	; 31
 218:	08 95       	ret

0000021a <EEPROMwriteString>:
}

void EEPROMwriteString(unsigned int address, char *sen)
{
 21a:	ef 92       	push	r14
 21c:	ff 92       	push	r15
 21e:	0f 93       	push	r16
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	7c 01       	movw	r14, r24
 228:	8b 01       	movw	r16, r22
    int i = 0;
 22a:	c0 e0       	ldi	r28, 0x00	; 0
 22c:	d0 e0       	ldi	r29, 0x00	; 0
    while (sen[i] != '\0')
 22e:	f8 01       	movw	r30, r16
 230:	61 91       	ld	r22, Z+
 232:	8f 01       	movw	r16, r30
 234:	ce 01       	movw	r24, r28
 236:	8e 0d       	add	r24, r14
 238:	9f 1d       	adc	r25, r15
 23a:	66 23       	and	r22, r22
 23c:	21 f0       	breq	.+8      	; 0x246 <EEPROMwriteString+0x2c>
    {
        EEPROMwrite(address + i, sen[i]);
 23e:	0e 94 05 01 	call	0x20a	; 0x20a <EEPROMwrite>
        i++;
 242:	21 96       	adiw	r28, 0x01	; 1
 244:	f4 cf       	rjmp	.-24     	; 0x22e <EEPROMwriteString+0x14>
    }
    EEPROMwrite(address + i, '\0');
}
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	ff 90       	pop	r15
 250:	ef 90       	pop	r14
    while (sen[i] != '\0')
    {
        EEPROMwrite(address + i, sen[i]);
        i++;
    }
    EEPROMwrite(address + i, '\0');
 252:	0c 94 05 01 	jmp	0x20a	; 0x20a <EEPROMwrite>

00000256 <EEPROMread>:
}

char EEPROMread(unsigned int address)
{

    while (EECR & (1 << EEPE))
 256:	f9 99       	sbic	0x1f, 1	; 31
 258:	fe cf       	rjmp	.-4      	; 0x256 <EEPROMread>
        ;

    EEAR = address;
 25a:	92 bd       	out	0x22, r25	; 34
 25c:	81 bd       	out	0x21, r24	; 33

    EECR |= (1 << EERE);
 25e:	f8 9a       	sbi	0x1f, 0	; 31

    return EEDR;
 260:	80 b5       	in	r24, 0x20	; 32
}
 262:	08 95       	ret

00000264 <EEPROMreadString>:

void EEPROMreadString(unsigned int address, char *sen)
{
 264:	ef 92       	push	r14
 266:	ff 92       	push	r15
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	8c 01       	movw	r16, r24
 272:	7b 01       	movw	r14, r22
    int i = 0;
    char c = EEPROMread(address + i);
 274:	0e 94 2b 01 	call	0x256	; 0x256 <EEPROMread>
    sen[i] = c;
 278:	e7 01       	movw	r28, r14
 27a:	89 93       	st	Y+, r24

    while (c != '\0')
    {

        i++;
        c = EEPROMread(address + i);
 27c:	0e 19       	sub	r16, r14
 27e:	1f 09       	sbc	r17, r15
{
    int i = 0;
    char c = EEPROMread(address + i);
    sen[i] = c;

    while (c != '\0')
 280:	88 23       	and	r24, r24
 282:	39 f0       	breq	.+14     	; 0x292 <EEPROMreadString+0x2e>
    {

        i++;
        c = EEPROMread(address + i);
 284:	c8 01       	movw	r24, r16
 286:	8c 0f       	add	r24, r28
 288:	9d 1f       	adc	r25, r29
 28a:	0e 94 2b 01 	call	0x256	; 0x256 <EEPROMread>
        sen[i] = c;
 28e:	89 93       	st	Y+, r24
 290:	f7 cf       	rjmp	.-18     	; 0x280 <EEPROMreadString+0x1c>
    }
}
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	1f 91       	pop	r17
 298:	0f 91       	pop	r16
 29a:	ff 90       	pop	r15
 29c:	ef 90       	pop	r14
 29e:	08 95       	ret

000002a0 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 2a0:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a2:	85 e0       	ldi	r24, 0x05	; 5
 2a4:	8a 95       	dec	r24
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <toggle_e+0x4>
 2a8:	00 00       	nop
    lcd_e_delay();
    lcd_e_low();
 2aa:	42 98       	cbi	0x08, 2	; 8
 2ac:	08 95       	ret

000002ae <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 2ae:	cf 93       	push	r28
 2b0:	c8 2f       	mov	r28, r24
    unsigned char dataBits ;


    if (rs) {        /* write data        (RS=1, RW=0) */
 2b2:	66 23       	and	r22, r22
 2b4:	11 f0       	breq	.+4      	; 0x2ba <lcd_write+0xc>
       lcd_rs_high();
 2b6:	40 9a       	sbi	0x08, 0	; 8
 2b8:	01 c0       	rjmp	.+2      	; 0x2bc <lcd_write+0xe>
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 2ba:	40 98       	cbi	0x08, 0	; 8
    }
    lcd_rw_low();    /* RW=0  write mode      */
 2bc:	41 98       	cbi	0x08, 1	; 8
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 2be:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 2c0:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 2c2:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 2c4:	55 9a       	sbi	0x0a, 5	; 10
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 2c6:	5d 98       	cbi	0x0b, 5	; 11
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 2c8:	5c 98       	cbi	0x0b, 4	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 2ca:	5b 98       	cbi	0x0b, 3	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 2cc:	5a 98       	cbi	0x0b, 2	; 11
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 2ce:	c7 fd       	sbrc	r28, 7
 2d0:	5d 9a       	sbi	0x0b, 5	; 11
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 2d2:	c6 fd       	sbrc	r28, 6
 2d4:	5c 9a       	sbi	0x0b, 4	; 11
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 2d6:	c5 fd       	sbrc	r28, 5
 2d8:	5b 9a       	sbi	0x0b, 3	; 11
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 2da:	c4 fd       	sbrc	r28, 4
 2dc:	5a 9a       	sbi	0x0b, 2	; 11
        lcd_e_toggle();
 2de:	0e 94 50 01 	call	0x2a0	; 0x2a0 <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 2e2:	5d 98       	cbi	0x0b, 5	; 11
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 2e4:	5c 98       	cbi	0x0b, 4	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 2e6:	5b 98       	cbi	0x0b, 3	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 2e8:	5a 98       	cbi	0x0b, 2	; 11
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 2ea:	c3 fd       	sbrc	r28, 3
 2ec:	5d 9a       	sbi	0x0b, 5	; 11
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 2ee:	c2 fd       	sbrc	r28, 2
 2f0:	5c 9a       	sbi	0x0b, 4	; 11
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 2f2:	c1 fd       	sbrc	r28, 1
 2f4:	5b 9a       	sbi	0x0b, 3	; 11
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 2f6:	c0 fd       	sbrc	r28, 0
 2f8:	5a 9a       	sbi	0x0b, 2	; 11
        lcd_e_toggle();        
 2fa:	0e 94 50 01 	call	0x2a0	; 0x2a0 <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 2fe:	5a 9a       	sbi	0x0b, 2	; 11
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 300:	5b 9a       	sbi	0x0b, 3	; 11
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 302:	5c 9a       	sbi	0x0b, 4	; 11
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 304:	5d 9a       	sbi	0x0b, 5	; 11
    }
}
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <lcd_read.constprop.0>:
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 30a:	40 98       	cbi	0x08, 0	; 8
    lcd_rw_high();                           /* RW=1  read mode      */
 30c:	41 9a       	sbi	0x08, 1	; 8
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 30e:	52 98       	cbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 310:	53 98       	cbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 312:	54 98       	cbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 314:	55 98       	cbi	0x0a, 5	; 10
                
        /* read high nibble first */
        lcd_e_high();
 316:	42 9a       	sbi	0x08, 2	; 8
 318:	85 e0       	ldi	r24, 0x05	; 5
 31a:	8a 95       	dec	r24
 31c:	f1 f7       	brne	.-4      	; 0x31a <lcd_read.constprop.0+0x10>
 31e:	00 00       	nop
        lcd_e_delay();        
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 320:	4a 9b       	sbis	0x09, 2	; 9
 322:	02 c0       	rjmp	.+4      	; 0x328 <lcd_read.constprop.0+0x1e>
 324:	80 e1       	ldi	r24, 0x10	; 16
 326:	01 c0       	rjmp	.+2      	; 0x32a <lcd_read.constprop.0+0x20>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
 328:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 32a:	4b 99       	sbic	0x09, 3	; 9
 32c:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 32e:	4c 99       	sbic	0x09, 4	; 9
 330:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 332:	4d 99       	sbic	0x09, 5	; 9
 334:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 336:	42 98       	cbi	0x08, 2	; 8
 338:	95 e0       	ldi	r25, 0x05	; 5
 33a:	9a 95       	dec	r25
 33c:	f1 f7       	brne	.-4      	; 0x33a <lcd_read.constprop.0+0x30>
 33e:	00 00       	nop

        lcd_e_delay();                       /* Enable 500ns low       */
    
        /* read low nibble */    
        lcd_e_high();
 340:	42 9a       	sbi	0x08, 2	; 8
 342:	95 e0       	ldi	r25, 0x05	; 5
 344:	9a 95       	dec	r25
 346:	f1 f7       	brne	.-4      	; 0x344 <lcd_read.constprop.0+0x3a>
 348:	00 00       	nop
        lcd_e_delay();
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 34a:	4a 99       	sbic	0x09, 2	; 9
 34c:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 34e:	4b 99       	sbic	0x09, 3	; 9
 350:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 352:	4c 99       	sbic	0x09, 4	; 9
 354:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 356:	4d 99       	sbic	0x09, 5	; 9
 358:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 35a:	42 98       	cbi	0x08, 2	; 8
    }
    return data;
}
 35c:	08 95       	ret

0000035e <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 35e:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_read.constprop.0>
 362:	87 fd       	sbrc	r24, 7
 364:	fc cf       	rjmp	.-8      	; 0x35e <lcd_waitbusy>
 366:	85 e1       	ldi	r24, 0x15	; 21
 368:	8a 95       	dec	r24
 36a:	f1 f7       	brne	.-4      	; 0x368 <lcd_waitbusy+0xa>
 36c:	00 00       	nop
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(LCD_DELAY_BUSY_FLAG);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 36e:	0c 94 85 01 	jmp	0x30a	; 0x30a <lcd_read.constprop.0>

00000372 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 372:	cf 93       	push	r28
 374:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 376:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_waitbusy>
    lcd_write(cmd,0);
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	8c 2f       	mov	r24, r28
}
 37e:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
 380:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <lcd_write>

00000384 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 384:	cf 93       	push	r28
 386:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 388:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_waitbusy>
    lcd_write(data,1);
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	8c 2f       	mov	r24, r28
}
 390:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
    lcd_waitbusy();
    lcd_write(data,1);
 392:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <lcd_write>

00000396 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 396:	61 11       	cpse	r22, r1
 398:	02 c0       	rjmp	.+4      	; 0x39e <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 39a:	80 58       	subi	r24, 0x80	; 128
 39c:	01 c0       	rjmp	.+2      	; 0x3a0 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 39e:	80 54       	subi	r24, 0x40	; 64
 3a0:	0c 94 b9 01 	jmp	0x372	; 0x372 <lcd_command>

000003a4 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 3a4:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_waitbusy>
}
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	08 95       	ret

000003ac <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	0c 94 b9 01 	jmp	0x372	; 0x372 <lcd_command>

000003b2 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 3b2:	82 e0       	ldi	r24, 0x02	; 2
 3b4:	0c 94 b9 01 	jmp	0x372	; 0x372 <lcd_command>

000003b8 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 3b8:	cf 93       	push	r28
 3ba:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 3bc:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_waitbusy>
    if (c=='\n')
 3c0:	ca 30       	cpi	r28, 0x0A	; 10
 3c2:	49 f4       	brne	.+18     	; 0x3d6 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 3c4:	80 34       	cpi	r24, 0x40	; 64
 3c6:	10 f0       	brcs	.+4      	; 0x3cc <lcd_putc+0x14>
        addressCounter = LCD_START_LINE2;
    else
        addressCounter = LCD_START_LINE1;
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	01 c0       	rjmp	.+2      	; 0x3ce <lcd_putc+0x16>
#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
        addressCounter = LCD_START_LINE2;
 3cc:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 3ce:	80 58       	subi	r24, 0x80	; 128
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    }

}/* lcd_putc */
 3d0:	cf 91       	pop	r28
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 3d2:	0c 94 b9 01 	jmp	0x372	; 0x372 <lcd_command>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 3d6:	61 e0       	ldi	r22, 0x01	; 1
 3d8:	8c 2f       	mov	r24, r28
    }

}/* lcd_putc */
 3da:	cf 91       	pop	r28
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 3dc:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <lcd_write>

000003e0 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = *s++) ) {
 3e6:	89 91       	ld	r24, Y+
 3e8:	88 23       	and	r24, r24
 3ea:	19 f0       	breq	.+6      	; 0x3f2 <lcd_puts+0x12>
        lcd_putc(c);
 3ec:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <lcd_putc>
 3f0:	fa cf       	rjmp	.-12     	; 0x3e6 <lcd_puts+0x6>
    }

}/* lcd_puts */
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 3fe:	84 91       	lpm	r24, Z
 400:	ef 01       	movw	r28, r30
 402:	21 96       	adiw	r28, 0x01	; 1
 404:	88 23       	and	r24, r24
 406:	21 f0       	breq	.+8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
        lcd_putc(c);
 408:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <lcd_putc>
 40c:	fe 01       	movw	r30, r28
 40e:	f7 cf       	rjmp	.-18     	; 0x3fe <lcd_puts_p+0x6>
    }

}/* lcd_puts_p */
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	08 95       	ret

00000416 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 416:	cf 93       	push	r28
 418:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 41a:	38 9a       	sbi	0x07, 0	; 7
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 41c:	39 9a       	sbi	0x07, 1	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 41e:	3a 9a       	sbi	0x07, 2	; 7
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 420:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 422:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 424:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 426:	55 9a       	sbi	0x0a, 5	; 10
 428:	8f ef       	ldi	r24, 0xFF	; 255
 42a:	99 ef       	ldi	r25, 0xF9	; 249
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <lcd_init+0x16>
 430:	00 c0       	rjmp	.+0      	; 0x432 <lcd_init+0x1c>
 432:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 434:	5b 9a       	sbi	0x0b, 3	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 436:	5a 9a       	sbi	0x0b, 2	; 11
    lcd_e_toggle();
 438:	0e 94 50 01 	call	0x2a0	; 0x2a0 <toggle_e>
 43c:	8f e1       	ldi	r24, 0x1F	; 31
 43e:	9e e4       	ldi	r25, 0x4E	; 78
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <lcd_init+0x2a>
 444:	00 c0       	rjmp	.+0      	; 0x446 <lcd_init+0x30>
 446:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 448:	0e 94 50 01 	call	0x2a0	; 0x2a0 <toggle_e>
 44c:	8f ef       	ldi	r24, 0xFF	; 255
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <lcd_init+0x3a>
 454:	00 c0       	rjmp	.+0      	; 0x456 <lcd_init+0x40>
 456:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 458:	0e 94 50 01 	call	0x2a0	; 0x2a0 <toggle_e>
 45c:	8f ef       	ldi	r24, 0xFF	; 255
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <lcd_init+0x4a>
 464:	00 c0       	rjmp	.+0      	; 0x466 <lcd_init+0x50>
 466:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 468:	5a 98       	cbi	0x0b, 2	; 11
    lcd_e_toggle();
 46a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <toggle_e>
 46e:	8f ef       	ldi	r24, 0xFF	; 255
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	01 97       	sbiw	r24, 0x01	; 1
 474:	f1 f7       	brne	.-4      	; 0x472 <lcd_init+0x5c>
 476:	00 c0       	rjmp	.+0      	; 0x478 <lcd_init+0x62>
 478:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 47a:	88 e2       	ldi	r24, 0x28	; 40
 47c:	0e 94 b9 01 	call	0x372	; 0x372 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 480:	88 e0       	ldi	r24, 0x08	; 8
 482:	0e 94 b9 01 	call	0x372	; 0x372 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 486:	0e 94 d6 01 	call	0x3ac	; 0x3ac <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 48a:	86 e0       	ldi	r24, 0x06	; 6
 48c:	0e 94 b9 01 	call	0x372	; 0x372 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 490:	8c 2f       	mov	r24, r28

}/* lcd_init */
 492:	cf 91       	pop	r28
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
    lcd_clrscr();                           /* display clear                */ 
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    lcd_command(dispAttr);                  /* display/cursor control       */
 494:	0c 94 b9 01 	jmp	0x372	; 0x372 <lcd_command>

00000498 <main>:

int main(void)
{

    /* initialize display, cursor off */
    lcd_init(LCD_DISP_ON);
 498:	8c e0       	ldi	r24, 0x0C	; 12
 49a:	0e 94 0b 02 	call	0x416	; 0x416 <lcd_init>
    int row, col;

    while (1)
    {
        /* clear display and home cursor */
        lcd_clrscr();
 49e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <lcd_clrscr>

        // need to encryp or change the key
        lcd_gotoxy(0, 0);
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	0e 94 cb 01 	call	0x396	; 0x396 <lcd_gotoxy>
        lcd_puts("Press 1 or 2\n");
 4aa:	8c e1       	ldi	r24, 0x1C	; 28
 4ac:	91 e0       	ldi	r25, 0x01	; 1
 4ae:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_puts>
        lcd_gotoxy(0, 1);
 4b2:	61 e0       	ldi	r22, 0x01	; 1
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	0e 94 cb 01 	call	0x396	; 0x396 <lcd_gotoxy>
        lcd_puts("(Encrypt/Key)\n");
 4ba:	8a e2       	ldi	r24, 0x2A	; 42
 4bc:	91 e0       	ldi	r25, 0x01	; 1
 4be:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c2:	2f ef       	ldi	r18, 0xFF	; 255
 4c4:	83 e2       	ldi	r24, 0x23	; 35
 4c6:	94 ef       	ldi	r25, 0xF4	; 244
 4c8:	21 50       	subi	r18, 0x01	; 1
 4ca:	80 40       	sbci	r24, 0x00	; 0
 4cc:	90 40       	sbci	r25, 0x00	; 0
 4ce:	e1 f7       	brne	.-8      	; 0x4c8 <main+0x30>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <main+0x3a>
 4d2:	00 00       	nop

        // wait for user input

        _delay_ms(5000);
        lcd_clrscr();
 4d4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <lcd_clrscr>

        if (input == '1')
 4d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4dc:	81 33       	cpi	r24, 0x31	; 49
 4de:	09 f0       	breq	.+2      	; 0x4e2 <main+0x4a>
 4e0:	4c c0       	rjmp	.+152    	; 0x57a <main+0xe2>
 4e2:	01 e0       	ldi	r16, 0x01	; 1
 4e4:	11 e0       	ldi	r17, 0x01	; 1
 4e6:	c1 e0       	ldi	r28, 0x01	; 1
            for (int i = 0; i < SIZE; i++)
            {
                // wait for user input

                /* write single char to display */
                lcd_putc(buffer[i]);
 4e8:	f8 01       	movw	r30, r16
 4ea:	81 91       	ld	r24, Z+
 4ec:	8f 01       	movw	r16, r30
 4ee:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <lcd_putc>
 4f2:	ff ef       	ldi	r31, 0xFF	; 255
 4f4:	23 ed       	ldi	r18, 0xD3	; 211
 4f6:	80 e3       	ldi	r24, 0x30	; 48
 4f8:	f1 50       	subi	r31, 0x01	; 1
 4fa:	20 40       	sbci	r18, 0x00	; 0
 4fc:	80 40       	sbci	r24, 0x00	; 0
 4fe:	e1 f7       	brne	.-8      	; 0x4f8 <main+0x60>
 500:	00 c0       	rjmp	.+0      	; 0x502 <main+0x6a>
 502:	00 00       	nop

                _delay_ms(1000);

                col++;
                lcd_gotoxy(col, row);
 504:	60 e0       	ldi	r22, 0x00	; 0
 506:	8c 2f       	mov	r24, r28
 508:	0e 94 cb 01 	call	0x396	; 0x396 <lcd_gotoxy>
 50c:	cf 5f       	subi	r28, 0xFF	; 255

        if (input == '1')
        {
            row = 0;
            col = 0;
            for (int i = 0; i < SIZE; i++)
 50e:	cb 30       	cpi	r28, 0x0B	; 11
 510:	59 f7       	brne	.-42     	; 0x4e8 <main+0x50>
 512:	9f ef       	ldi	r25, 0xFF	; 255
 514:	e3 ed       	ldi	r30, 0xD3	; 211
 516:	f0 e3       	ldi	r31, 0x30	; 48
 518:	91 50       	subi	r25, 0x01	; 1
 51a:	e0 40       	sbci	r30, 0x00	; 0
 51c:	f0 40       	sbci	r31, 0x00	; 0
 51e:	e1 f7       	brne	.-8      	; 0x518 <main+0x80>
 520:	00 c0       	rjmp	.+0      	; 0x522 <main+0x8a>
 522:	00 00       	nop
                col++;
                lcd_gotoxy(col, row);
            }

            _delay_ms(1000);
            lcd_clrscr();
 524:	0e 94 d6 01 	call	0x3ac	; 0x3ac <lcd_clrscr>
            buffer[SIZE] = '\0';
 528:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buffer+0xa>

            lcd_puts("Processing...\n");
 52c:	89 e3       	ldi	r24, 0x39	; 57
 52e:	91 e0       	ldi	r25, 0x01	; 1
 530:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_puts>
 534:	2f ef       	ldi	r18, 0xFF	; 255
 536:	83 ed       	ldi	r24, 0xD3	; 211
 538:	90 e3       	ldi	r25, 0x30	; 48
 53a:	21 50       	subi	r18, 0x01	; 1
 53c:	80 40       	sbci	r24, 0x00	; 0
 53e:	90 40       	sbci	r25, 0x00	; 0
 540:	e1 f7       	brne	.-8      	; 0x53a <main+0xa2>
 542:	00 c0       	rjmp	.+0      	; 0x544 <main+0xac>
 544:	00 00       	nop
            _delay_ms(1000);
            lcd_clrscr();
 546:	0e 94 d6 01 	call	0x3ac	; 0x3ac <lcd_clrscr>

            lcd_puts(buffer);
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_puts>

            lcd_gotoxy(0, 1);
 552:	61 e0       	ldi	r22, 0x01	; 1
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	0e 94 cb 01 	call	0x396	; 0x396 <lcd_gotoxy>
            lcd_puts("Continue - #\n");
 55a:	88 e4       	ldi	r24, 0x48	; 72
 55c:	91 e0       	ldi	r25, 0x01	; 1
 55e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_puts>
 562:	ef ef       	ldi	r30, 0xFF	; 255
 564:	f3 e2       	ldi	r31, 0x23	; 35
 566:	24 ef       	ldi	r18, 0xF4	; 244
 568:	e1 50       	subi	r30, 0x01	; 1
 56a:	f0 40       	sbci	r31, 0x00	; 0
 56c:	20 40       	sbci	r18, 0x00	; 0
 56e:	e1 f7       	brne	.-8      	; 0x568 <main+0xd0>
 570:	00 c0       	rjmp	.+0      	; 0x572 <main+0xda>
 572:	00 00       	nop

            // wait for user input

            _delay_ms(5000);

            lcd_clrscr();
 574:	0e 94 d6 01 	call	0x3ac	; 0x3ac <lcd_clrscr>
 578:	92 cf       	rjmp	.-220    	; 0x49e <main+0x6>
        }
        else
        {
            lcd_gotoxy(0, 0);
 57a:	60 e0       	ldi	r22, 0x00	; 0
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	0e 94 cb 01 	call	0x396	; 0x396 <lcd_gotoxy>
            lcd_puts("Enter the Key\n");
 582:	86 e5       	ldi	r24, 0x56	; 86
 584:	91 e0       	ldi	r25, 0x01	; 1
 586:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_puts>

            row = 0;
            col = 0;
            int len = 0;

            lcd_gotoxy(0, 1);
 58a:	61 e0       	ldi	r22, 0x01	; 1
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	0e 94 cb 01 	call	0x396	; 0x396 <lcd_gotoxy>
 592:	01 e0       	ldi	r16, 0x01	; 1
 594:	11 e0       	ldi	r17, 0x01	; 1
 596:	c1 e0       	ldi	r28, 0x01	; 1
            for (;;)
            {
                // wait for user input

                /* write single char to display */
                lcd_putc(buffer[len]);
 598:	f8 01       	movw	r30, r16
 59a:	81 91       	ld	r24, Z+
 59c:	8f 01       	movw	r16, r30
 59e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <lcd_putc>
 5a2:	ff ef       	ldi	r31, 0xFF	; 255
 5a4:	23 ed       	ldi	r18, 0xD3	; 211
 5a6:	80 e3       	ldi	r24, 0x30	; 48
 5a8:	f1 50       	subi	r31, 0x01	; 1
 5aa:	20 40       	sbci	r18, 0x00	; 0
 5ac:	80 40       	sbci	r24, 0x00	; 0
 5ae:	e1 f7       	brne	.-8      	; 0x5a8 <main+0x110>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <main+0x11a>
 5b2:	00 00       	nop

                _delay_ms(1000);

                len++;

                if (buffer[len] == '0')
 5b4:	f8 01       	movw	r30, r16
 5b6:	80 81       	ld	r24, Z
 5b8:	80 33       	cpi	r24, 0x30	; 48
 5ba:	31 f0       	breq	.+12     	; 0x5c8 <main+0x130>
                    break;

                col++;
                lcd_gotoxy(col, row);
 5bc:	61 e0       	ldi	r22, 0x01	; 1
 5be:	8c 2f       	mov	r24, r28
 5c0:	0e 94 cb 01 	call	0x396	; 0x396 <lcd_gotoxy>
 5c4:	cf 5f       	subi	r28, 0xFF	; 255
            }
 5c6:	e8 cf       	rjmp	.-48     	; 0x598 <main+0x100>
 5c8:	ff ef       	ldi	r31, 0xFF	; 255
 5ca:	23 ed       	ldi	r18, 0xD3	; 211
 5cc:	80 e3       	ldi	r24, 0x30	; 48
 5ce:	f1 50       	subi	r31, 0x01	; 1
 5d0:	20 40       	sbci	r18, 0x00	; 0
 5d2:	80 40       	sbci	r24, 0x00	; 0
 5d4:	e1 f7       	brne	.-8      	; 0x5ce <main+0x136>
 5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <main+0x140>
 5d8:	00 00       	nop

            _delay_ms(1000);
            lcd_clrscr();
 5da:	0e 94 d6 01 	call	0x3ac	; 0x3ac <lcd_clrscr>
            buffer[SIZE] = '\0';
 5de:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buffer+0xa>

            lcd_gotoxy(0, 0);
 5e2:	60 e0       	ldi	r22, 0x00	; 0
 5e4:	80 e0       	ldi	r24, 0x00	; 0
 5e6:	0e 94 cb 01 	call	0x396	; 0x396 <lcd_gotoxy>
            lcd_puts("Key is Saved!!!\n");
 5ea:	85 e6       	ldi	r24, 0x65	; 101
 5ec:	91 e0       	ldi	r25, 0x01	; 1
 5ee:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_puts>
 5f2:	9f ef       	ldi	r25, 0xFF	; 255
 5f4:	ef e4       	ldi	r30, 0x4F	; 79
 5f6:	f3 ec       	ldi	r31, 0xC3	; 195
 5f8:	91 50       	subi	r25, 0x01	; 1
 5fa:	e0 40       	sbci	r30, 0x00	; 0
 5fc:	f0 40       	sbci	r31, 0x00	; 0
 5fe:	e1 f7       	brne	.-8      	; 0x5f8 <main+0x160>
 600:	00 c0       	rjmp	.+0      	; 0x602 <main+0x16a>
 602:	00 00       	nop
 604:	4c cf       	rjmp	.-360    	; 0x49e <main+0x6>

00000606 <_exit>:
 606:	f8 94       	cli

00000608 <__stop_program>:
 608:	ff cf       	rjmp	.-2      	; 0x608 <__stop_program>
